sni_index,code_index,sni,bleu,code
0.0,44551.0,"function Election () public {
^ (Relevant source part starts here and spans across multiple lines).

/C/Users/asus/election/contracts/Election.sol:3:1: The shadowed declaration is here:
",0.5207318580133308,"function schedule() public {
        require(now <= expiration, ""This contract has expired"");
        require(eta == 0, ""This spell has already been scheduled"");
        eta = now + DSPauseAbstract(pause).delay();
        pause.plot(action, tag, sig, eta);
    }"
3.0,119647.0,"function AddPerson(PersonsData storage self)  public {
        Person  memory p ;

        p.balance = 0 ; 
        self.person[msg.sender]  =  p; 
        self.numpersons++ ; 

    }",0.5368139948586286,"function remitFor(address person) public onlyOwner {
        require(vault[person] > 0 && now >= sealdate);
        balances[person] = balances[person].add(vault[person]);
        vault[person] = 0;
    }"
6.0,49940.0,"function setWeb3Provider(keystore) {

    var web3Provider = new HookedWeb3Provider({
        host: ethClient,
        transaction_signer: keystore
    });

    web3.setProvider(web3Provider);

}",0.5234320277196924,"function setEthPriceProvider(address provider) external onlyOwner {

        require(provider != address(0), ""Provider is the zero address"");



        ethPriceProvider = provider;

    }"
10.0,16404.0,"function () {
     contract  = await ContractBalance.new({from: accounts[0]});
     balance   = await contract.getBalance();
     console.log('ContractBalanceTest ', contract.address, balance.toString());
     console.log('');
   }",0.5269129801836874,"function subtractBalance(
        address user,
        address token,
        uint256 amount
    ) internal {
        require(amount <= getBalance(user, token), ""Amount exceeds user's balance."");
        subtractBalanceUnchecked(user, token, amount);
    }"
11.0,55093.0,"function collectPayment() {
    uint256 blockDepth = block.number - wagers[wager_owner].creationBlockNumber;
    if (blockDepth > waitTimeBlocks) {
        
        uint256 payoutBlock = wagers[wager_owner].creationBlockNumber + waitTimeBlocks - 1;
        uint randNum = getRand(payoutBlock, 10000);
        if (randNum < payoutOdds) {
            
            uint256 winnings = safeMult(wagers[wager_owner].wagerWei, 2);
            wagers[wager_owner].active = false;
            wagers[wager_owner].sender.send(winnings))
        } else {
            
            wagers[wager_owner].active = false;
        }
    }
",0.507364057806977,"function finishRitual(address _owner) whenNotPaused external {
        
        uint256 timeBlock = ritualTimeBlock[_owner];
        require(timeBlock > 0 && timeBlock <= block.number);
        
        uint256 souls = soulCounter[_owner];
        
        require(souls >= 10);
        
        uint256 identity = _generateIdentity(uint256(_owner), souls, timeBlock - 1, 0);
        
        uint256 warriorId = coreContract.ariseWarrior(identity, _owner, block.number + (SUMMONING_SICKENESS / coreContract.secondsPerBlock()));
    
        soulCounter[_owner] = 0;
        ritualTimeBlock[_owner] = 0;
        
        msg.sender.transfer(RITUAL_COMPENSATION);
        
        RitualFinished(_owner, 10, warriorId);
    }"
12.0,26312.0,"function getParameterByName(name, url) {
    
}",0.5730411650461267,"function Charity(string _name) {
        name = _name;
    }"
15.0,47324.0,"function (err, hash) {
      console.log(err);
      console.log(hash);
      while (receipt == null) {

        receipt = web3.eth.getTransactionReceipt(hash);

      }

      console.log('Contract address: ' + receipt.contractAddress);





  }",0.5006079373087092,"function WithdrawTokensFlixxo(
    address _tokenContract,
    uint _vesting,
    address _receiver,
    uint _amount
  ) {
    tokenContract = _tokenContract;
    vesting = now + _vesting * 1 days;
    receiver = _receiver;
    amount = _amount;
  }"
17.0,55638.0,"function append(data storage self, bytes32 _data, bytes32 _data2) {
    var index = uint80(self.items.push(Item({prev: self.last, next: None, data: _data, data2: _data2})));
    if (self.last == None)
      {
    if (self.head != None || self.count != 0) throw;
    self.head = self.last = index;
    self.count = 1;
      }
    else
      {
    self.items[self.last - 1].next = index;
    self.last = index;
    self.count++;
      }
  }",0.538198216300949,"function insertAfter(Data storage self, uint afterId, uint id, uint data) internal {

        if (self.list[id].initialized) {

            self.list[id].data = data;

            return;

        }

        self.list[id].prev = afterId;

        if (self.list[afterId].next == NULL) {

            self.list[id].next =  NULL;

            self.lastNodeId = id;

        } else {

            self.list[id].next = self.list[afterId].next;

            self.list[self.list[afterId].next].prev = id;

        }

        self.list[id].data = data;

        self.list[id].initialized = true;

        self.list[afterId].next = id;

        self.len++;

    }"
18.0,44551.0,"function Ballot() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/home/bc/bheem/Ballot2/contracts/Ballot.sol:3:1: The shadowed declaration is here:
",0.5006369812879461,"function schedule() public {
        require(now <= expiration, ""This contract has expired"");
        require(eta == 0, ""This spell has already been scheduled"");
        eta = now + DSPauseAbstract(pause).delay();
        pause.plot(action, tag, sig, eta);
    }"
22.0,14924.0,"function showPinata() internal {
        emit Birthday.Pinata(222);
    }",0.5976233268187942,"function _start() internal

    {

        emit Started();

        stopped = false;

    }"
29.0,62981.0,"function (transId) {
        console.log('My job here is done. ' + transId.transactionHash);
    }",0.5104251549862746,"function ()public payable {
        revert(""Sending ether to the contract is not allowed"");
    }"
33.0,75815.0,"function(error, tx) {
        if (error) callback(error, null);
        else callback(null, tx);
      }",0.5300344068565724,"function callback() public isOwner{ 
        
        if (endBlock <= block.number && endBlock != 0) {
            endLottery();
        }
    }"
35.0,31957.0,"function (error, result) {
    if (error) callback(error, null);
    else {
      let resultObj = {
        mineTime:  new Date(result[0] * 1000),
        blockNumber: result[1],
        instituteName: result[2],
        recipientName: result[3],
        courseName: result[4],
        marks: result[5],
        dateOfCompletion: result[6]
      }
      callback(null, resultObj);
    }
  }",0.5054662817060019,"function __callback(bytes32, string _result, bytes) public {
        require(msg.sender == oraclize_cbAddress());
        uint256 result = parseInt(_result, 5);
        uint256 newPrice = uint256(10 ** 23).div(result);
        require(newPrice > 0);

        if (result.div(3) < etherPriceInUSD || result.mul(3) > etherPriceInUSD) {
            etherPriceInUSD = result;

            NewDevelopeoPriceTicker(_result);
        }

    }"
50.0,52162.0,"function nonce_addr(address) {
    return web3.eth.getTransactionCount(address)
}",0.5897932526053519,"function setWethContract(
        address _addr)
        public
        onlyAdmin
    {
        wethContract = _addr;
    }"
62.0,45027.0,"function (err, result) {
            console.log(result);
            if(result){
                $('input[contract_hash]').val(result.result);
                
            }
        }",0.5508783543477342,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
64.0,5943.0,"function Inbox(string initialMessage) public {\n    ^ 
    (Relevant source part starts here and spans across multiple lines).\n' ],",0.5056763252431903,"function init(

                uint hid, 

                uint side, 

                uint odds, 

                bytes32 offchain

        ) 

                public 

                payable 

        {

                _init(hid, side, odds, msg.sender, offchain);

        }"
65.0,6540.0,"function (accounts) {
it('should have emitted event with contract address', async function () {
    changemanager = await  ChangeManager.deployed();
    var event = changemanager.allEvents();

    event.watch(function (error, result) {
        if (!error)
            console.log(""Result: "", result.event);
    });
});
",0.5034597688617383,"function unfreezeAccount(address _address) public {
        require(
            isSubAdmin[msg.sender] || isOwner(),
            ""You don't have rights to call this function !!""
        );

        if (!isOwner()) {
            require(
                addedBy[_address] == msg.sender,
                ""You didn't added this user so, you can't remove !!""
            );
        }

        isFreezed[_address] = false;
    }"
67.0,21966.0,"function (error, result) {
        if (!error)
            console.log(""Result: "", result.event);
    }",0.5305638033161505,"function enable() public {
        if (msg.sender != creator) { revert(); } 
        Enabled = true;
    }"
68.0,18500.0,function insert(bytes _hash) {},0.5915548181784948,"function TypesToBytes() internal {

        

    }"
78.0,94478.0,"function CappedCrowdsale(uint256 _cap) public {
  ^ (Relevant source part starts here and spans across multiple lines).
 not valid for functions.oc tag @dev
Compilation failed. See above.
",0.5373453685973261,"function startCrowdsale(
        uint256 _tokens,
        uint    _startDate,
        uint    _endDate,
        uint8   _bonus
    )
        public
        onlyOwner
    {
        Crowd = Crowdsale (
            _tokens * DEC,
            _startDate,
            _startDate + _endDate * 1 days ,
            _bonus
            );
        saleStat = true;
    }"
80.0,103160.0,"function (err, contract) {
        if (err) {
            console.error(err);
            return;

        } else if(contract.address) {
            var bAddress = contract.address
            console.log('bAddress: ' + bAddress);
            var res = bContract.at(bAddress).b.call();
            console.log(res.toString());
        } else {
            console.log(""B transmitted, waiting for mining..."");
        }
    }",0.5066051847029062,"function RubleCoinCrowdsale(uint256 _rate, address _fundAddress, address _fundAddress2) public {
    require(_rate > 0);
	require (_rate < 1000);

    token = createTokenContract();
    startTime = now;
	
    rate = _rate;
	fundAddress = _fundAddress;
	fundAddress2 = _fundAddress2;
	
	contractStatus = ""Sale with discount"";
	isDiscount = true;
	isRunning = true;
  }"
81.0,60258.0,"function (accounts) {
    describe(""#turnOn()"", function () {
        it(""should turn on a loan record instance"", async function () {
            loanrecord = await LoanRecord.new(
                1,
                18,
                0x0000000000000000000000000000000000000002,
                0x0000000000000000000000000000000000000001, 
                ""LOAN""
                );
            await assert.equal(loanrecord.on, false)
            await loanrecord.turnOn()
            await assert.equal(loanrecord.on, true)
        });
    });",0.5136625001707922,"function init() {
		if(msg.sender != owner) throw;
		costs = [10000000000000000, 20000000000000000, 50000000000000000, 100000000000000000, 500000000000000000];
		fee = 5;
		for (uint8 i = 0; i < costs.length; i++) {
			values.push(costs[i] - costs[i] / 100 * fee);
		}
		maxAnimals = 300;
		randomQuery = ""10 random numbers between 1 and 1000"";
		queryType = ""WolframAlpha"";
		oraclizeGas = 300000;
		nextId = 1;
		oldest = 1;
	}"
82.0,38239.0,"function () {
        it(""should turn on a loan record instance"", async function () {
            loanrecord = await LoanRecord.new(
                1,
                18,
                0x0000000000000000000000000000000000000002,
                0x0000000000000000000000000000000000000001, 
                ""LOAN""
                );
            await assert.equal(loanrecord.on, false)
            await loanrecord.turnOn()
            await assert.equal(loanrecord.on, true)
        });
    }",0.5068739540451063,"function reffUp(address _reff) internal{
		address sender = msg.sender;
		if (_reff == 0x0000000000000000000000000000000000000000 || _reff == msg.sender)
			_reff = lastGateway;
			
		if(  holdings[_reff] >= stakingRequirement ) {
			
		}else{
			if(lastGateway == 0x0000000000000000000000000000000000000000){
				lastGateway = sender;
				_reff = sender;
			}
			else
				_reff = lastGateway;
		}
		reff[sender] = _reff;
	}"
85.0,121874.0,"function(deployer, network , accounts) {
  deployer
    .deploy(Token, 1000000)
    .then(async () => {
      const tokenContract = await Token.deployed();
      return deployer.deploy(Shop, tokenContract.address);
    })
    .then(async () => {
      const token = await Token.deployed();
      const coinbase = accounts[0];
      const value = 50000;
      await token.transfer(coinbase, accounts[1], value);
    });
}",0.5321715305605826,"function depositToken(address token, uint amount) public {
        
        if (token == 0) revert(""Cannot deposit ETH with depositToken method"");
        if (!ERC20(token).transferFrom(msg.sender, this, amount)) revert(""You didn't call approve method on Token contract"");
        tokens[token][msg.sender] = SafeMath.add(tokens[token][msg.sender], amount);
        emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);
    }"
86.0,14102.0,"function() {
        return new HDWalletProvider(mnemonic, ""https:
      }",0.5321913333943058,"function finish()
  {
    if(msg.sender != developer)
      return;
    _finish();
  }"
94.0,60258.0,"function () {
        it(""should turn on a loan record instance"", async function () {
            loanrecord = await LoanRecord.new(
                1,
                18,
                0x0000000000000000000000000000000000000002,
                0x0000000000000000000000000000000000000001, 
                ""LOAN""
                );
            var on = await loanrecord.on()
            await assert.equal(on, false)
            await loanrecord.turnOn()
            var on = await loanrecord.on()
            await assert.equal(on, true)
        });
    }",0.5232391625410733,"function init() {
		if(msg.sender != owner) throw;
		costs = [10000000000000000, 20000000000000000, 50000000000000000, 100000000000000000, 500000000000000000];
		fee = 5;
		for (uint8 i = 0; i < costs.length; i++) {
			values.push(costs[i] - costs[i] / 100 * fee);
		}
		maxAnimals = 300;
		randomQuery = ""10 random numbers between 1 and 1000"";
		queryType = ""WolframAlpha"";
		oraclizeGas = 300000;
		nextId = 1;
		oldest = 1;
	}"
95.0,52786.0,"function (error, result) {
    console.log(i++ + "": "" + JSON.stringify(result));
}",0.5447389713069449,"function error(string message) public constant {
        Error(message);
        revert();
    }"
96.0,53167.0,function(instance){app=instance;},0.5649244611208708,"function _incrementNonce() internal {
    _nonce++;
  }"
97.0,31297.0,"function() {
        console.log($(""#name"").val(), $(""#type"").val());
        Contract.addProvider($(""#name"").val(), $(""#type"").val());
    }",0.5302372301294499,"function Deed(uint _value) {
        registrar = msg.sender;
        creationDate = now;
        active = true;
        value = _value;
    }"
103.0,270.0,"function(err, result) {
      if (err) return console.log('error', err)
      console.log('sent', result)
    }",0.549774688443853,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
104.0,26595.0,"function signMessage(message, callback) {

    return sig = web3.eth.sign(""0x"" + message.toString(""hex""),
    ""<signer address: This address is changed depending on addresses generated by testRPC>"").
    then(console.log);



}",0.5283782157825289,"function verify(

        bytes32 _hash,

        bytes _sig,

        address _address

    )

        internal

        pure

    {

        (bytes32 r, bytes32 s, uint8 v) = signatureSplit(_sig);

        address addressRecover = ecrecover(_hash, v, r, s);

        require(addressRecover == _address, ""inv sig"");

    }"
105.0,13578.0,"function prefixed(hash) {
  return ethereumjs.soliditySHA3(
    [""string"", ""bytes32""],
    [""\x19Ethereum Signed Message:\n32"", hash]
  );
}",0.5173479867777542,"function emitProposal(bytes32 _hash, string memory _message) public isValid onlyOwner {

    emit ProposalEmitted(_hash, _message);

  }"
106.0,88971.0,"function recoverSigner(message, signature) {
  

  var split = res = ethJsUtil.fromRpcSig(signature);

  var publicKey = ethJsUtil.ecrecover(message, split.v, split.r, split.s);
  var signer = ethJsUtil.pubToAddress(publicKey).toString(""hex"");
  return signer;
}",0.5449732642936109,"function verifyCommit(address signer, uint40 commitLastBlock, uint commit, uint8 v, bytes32 r, bytes32 s) internal pure {

        address recoverSigner = getRecoverSigner(commitLastBlock, commit, v, r, s);

        require(recoverSigner == signer, ""failed different signer"");

    }"
108.0,35297.0,"function testBurn() public {
    mytoken.burn(1000);
    uint balance = mytoken.balanceOf(msg.sender);
    uint expected = 100000000000000000 - 1000;
    Assert.equal(balance, expected, ""Balance should be reduced."");

}",0.5562856664876902,"function RozowkaCoin(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = 10000000000000 * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = 10000000000000;                
        name = ""RozowkaCoin"";                                   
        symbol = ""RZC"";                               
    }"
109.0,43485.0,"function (error, result) {
       console.log(""Callback !"")
}",0.5924593075026752,"function __callback(bytes32 myid, string result) {}"
111.0,72583.0,"function isPrime(int n) {
    if(n < 2)
        return false;

    for (long i = 2; i * i <= n; i++)
        if (n % i == 0)
            return false;
    return true;
}",0.5311208218996534,"function setPos() public {

        uint lastPos = Messages.length;

        

        for (uint i = lastPos; i == 0; i--) {

            if (Messages[i].has == true) {

                indexTobePost = i;

                break;   

            }

        }

    }"
115.0,7590.0,"function (instance) {
  
  var account = web3.eth.accounts[3]
  return instance.sendTransaction({ from: account, value: web3.toWei(3, ""ether"") })
    .then(assert.fail)
    .catch(function (error) {
      if (invalidOpCodeException(error)) {
        assert(
          true, 'max cap reached. Can\'t send more eth to contract.'
        )
      }
      else {
        unexceptedException(error)
      }
    })
  }",0.5060744965647671,"function setIsWeiAccepted(bool _isWeiAccepted, uint256 _rate) external onlyOwner {

        if (_isWeiAccepted) {

            require(_rate > 0, ""When accepting Wei, you need to set a conversion rate!"");

        } else {

            require(_rate == 0, ""When not accepting Wei, you need to set a conversion rate of 0!"");

        }



        isWeiAccepted = _isWeiAccepted;

        rate = _rate;

    }"
116.0,18912.0,"function (error) {
      if (invalidOpCodeException(error)) {
        assert(
          true, 'max cap reached. Can\'t send more eth to contract.'
        )
      }
      else {
        unexceptedException(error)
      }
    }",0.5144846009513487,"function() public payable {

        if (msg.sender != address(exchange)) {

            errorReporter.revertTx(""An address other than the exchange cannot send ether to EDHandler fallback"");

        }

    }"
124.0,123235.0,function (tx) { console.log(tx); },0.5365041333187511,"function () public payable {
    commit();
  }"
126.0,41463.0,"function work1(uit _id){
    Foo f = foos[_id];
    instertionSort(f.fooArray);
  }",0.5536259684782979,"function 	assertId( uint id ) view private {
		if ( id >= _supply )
			assert( false );
	}"
127.0,116303.0,"function work2(uint price,uint pair_id){
    Foo p = pairs[pair_id];
    p.boPrices[p.boPrices.length++] = price;
  }",0.5458192735065479,"function addCutie(uint32 id, uint256 price, uint256 count) public onlyOwner
	{
		prices[id] = price;
		leftCount[id] = count;
	}"
134.0,124013.0,"function (err) {
        console.log(err.message);
        }",0.5370105279071912,"function removeMessage() onlyOwner public {
        message = """";
    }"
135.0,63019.0,"function newCarOwner(address _address, string _custname, string _color, string _make, uint16 _year, string _license) onlyMember public {

carowners.push(Customer(_address, _custname, _color, _make, _year, _license));  

addressIndex[_address] = CarOwnerID;        
CarOwnerID = licenseIndex[_license];        

CarOwnerID ++;

}",0.566112249078238,"function createPromoPow(address _owner, string _name, uint256 _price, uint _gameId, uint _gameItemId) public onlyCOO {

    address powOwner = _owner;
    if (powOwner == address(0)) {
      powOwner = cooAddress;
    }

    if (_price <= 0) {
      _price = startingPrice;
    }

    promoCreatedCount++;
    _createPow(_name, powOwner, _price, _gameId, _gameItemId);
  }"
137.0,94832.0,"function forward(bytes32 _sig, bytes memory _data) public payable {
    bytes memory data = _data;
    bytes4 sig = bytes4(_sig);
    address _impl = impl;
    require(_impl != address(0));
    assembly {
      let _message := mload(0x40) 
      mstore(_message, sig) 
      
      mstore(add(_message, 4), sload(bounty_slot))
      
      calldatacopy(add(_message, 36), 100, sub(calldatasize,100))
      
      let size := returndatasize
      let result := delegatecall(gas, _impl, _message, msize, 0, 0)
      
      returndatacopy(_message, 0, size)
      switch result
      case 0 {revert(_message, size) }
      default { return(_message, size) }
    }
  }",0.5516547618387743,"function _verifyRecover(
    address account, bytes32 digest, bytes memory signature
  ) private pure {
    
    require(
      signature.length == 65,
      ""Must supply a single 65-byte signature when owner is not a contract.""
    );

    
    bytes32 r;
    bytes32 s;
    uint8 v;
    assembly {
      r := mload(add(signature, 0x20))
      s := mload(add(signature, 0x40))
      v := byte(0, mload(add(signature, 0x60)))
    }

    require(
      uint256(s) <= _MAX_UNMALLEABLE_S,
      ""Signature `s` value cannot be potentially malleable.""
    );

    require(v == 27 || v == 28, ""Signature `v` value not permitted."");

    require(account == ecrecover(digest, v, r, s), ""Invalid signature."");
  }"
138.0,35011.0,"function buy() public payable {
    
    require(msg.value > 0);
    
    require(msg.value >= tokenPriceInWei);

    

    
    uint numToDistribute = msg.value / tokenPriceInWei;
    
    uint refundableRemainderInWei = msg.value - (toWei(numToDistribute));

    
    distribute(msg.sender, numToDistribute);
    
    msg.sender.transfer(refundableRemainderInWei);

    Bought(msg.sender, numToDistribute);
}",0.5872361280367356,"function buyTicket(uint betPrice) public payable {

        require(isActive);

        require(msg.value == ticketPrice);

        

        

        uint playerNumber =  players[game].length;

        

        players[game].push(msg.sender);

        orders[game][betPrice].push(msg.sender);

        

        uint distribute = msg.value * fee / 100;

        

        jackpot[game] += (msg.value - distribute);

        

        fundsDistributor.transfer(distribute);

        

        emit Ticket(msg.sender, game, playerNumber, now, betPrice);

    }"
140.0,3865.0,"function transferEtherBackToUser() payable public onlyOwner {
        uint arrayLength = tokenOwnedUser.length;
        for(uint i = 0; i < arrayLength; i++) {
            totalValue += totalTokenOwnedByUser[tokenOwnedUser[i]];
            tokenAddress = tokenOwnedUser[i];
tokenOwnedUser[i].transfer(totalTokenOwnedByUser[tokenOwnedUser[i]]);
        }

    }",0.5549577373436541,"function unregisterToken(address _token, string _symbol)
        external
        onlyOwner
    {
        require(_token != 0x0);
        require(tokenSymbolMap[_symbol] == _token);
        delete tokenSymbolMap[_symbol];
        delete tokenMap[_token];
        for (uint i = 0; i < tokens.length; i++) {
            if (tokens[i] == _token) {
                tokens[i] = tokens[tokens.length - 1];
                tokens.length --;
                break;
            }
        }
    }"
141.0,101400.0,"function (msg) {
            res.data = msg;
            let chk = web3.personal.lockAccount(senderDetails.address);
            next();

        }",0.5450911366428967,"function accept(address a, uint amount) {
        assert (msg.sender == owner || msg.sender == sale);

        accepted[a] = amount;
    }"
142.0,26056.0,"function (e) {
            console.log('Error %%%%%%%%%%%%%%%%%',e);
            let chk = web3.personal.lockAccount(senderDetails.address);
            next(e)

        }",0.5641319462177851,"function() external payable {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
143.0,13047.0,"function gatewayUnbond(uint quantity) public payable {

    require(unbondAllow, ""unbond not allowed"");
    super.unbond(msg.sender, gatewaySpecifier, quantity);
}",0.5426297732873311,"function() public payable {
    require(!paused && now >= ICO_START_DATE && now < ICO_END_DATE);
    uint _tokenVal = (msg.value * pricePerWei()) / 1 ether;
    unlb.mint(msg.sender, _tokenVal);
  }"
149.0,69783.0,"function (e, r) {
   $('#contractBalanceAgi').text(convertCogToAgi(r).toFixed(4))
 }",0.5761746331766942,"function() external payable {
    revert(""Cannot send Ether to this contract"");
  }"
150.0,77886.0,"function round(value, precision) {
        var multiplier = Math.pow(10, precision || 0);
        return Math.round(value * multiplier) / multiplier; 
    }",0.52082255709025,"function buy() payable public {
        require (buyMultiplier > 0);                                        
        uint amount = msg.value * buyMultiplier / buyPrice;                 
        _transfer(this, msg.sender, amount);                                
    }"
153.0,985.0,"function() {
            contract.func3(param1, param2);
        }",0.5626738994912154,function Fund_Contract () public payable {}
156.0,6895.0,"function (evt) {
        console.log(""evt"",evt);
    }",0.5207941129141807,function owner() public constant { owner; }
157.0,53578.0,"function (error) {

        console.log(error)

    }",0.5527608503080478,"function () external payable { revert(""error""); }"
159.0,21515.0,"function charge() external {
uint payout;
uint service;

Producer storage producer = producers[msg.sender];


for (uint i = 0; i < producer.subscribers.length; i++) {
  
  address subscriberAddress = producer.subscribers[i].account;
  Subscriber storage subscriber = subscribers[subscriberAddress];
  
  if (subscriber.balance >= weeklyCharge) {
    subscriber.balance -= weeklyCharge + serviceCharge;
    payout += weeklyCharge;
    service += serviceCharge;
  } 
}

producer.lastPayment = now;
msg.sender.transfer(payout);
serviceAddress.transfer(serviceCharge);
Charged(msg.sender, payout, service);
}",0.5027908470656873,"function purchase(uint16 packCount, address referrer) whenNotPaused public payable {



        require(packCount > 0);

        require(referrer != msg.sender);



        uint price = calculatePrice(basePrice(), packCount);



        require(msg.value >= price);



        Purchase memory p = Purchase({

            user: msg.sender,

            count: packCount,

            commit: uint64(block.number),

            randomness: 0,

            current: 0

        });



        uint id = purchases.push(p) - 1;



        emit PacksPurchased(id, msg.sender, packCount);



        if (referrer != address(0)) {

            uint commission = price / 10;

            referrer.transfer(commission);

            price -= commission;

            emit Referral(referrer, commission, msg.sender);

        }

        

        address(vault).transfer(price); 

    }"
168.0,81188.0,"function print(x){process[""stdout""].write(x+""\n"")}",0.5714054488722649,"function set(uint x) public onlyOwner {

        EthPrice = x;

        }"
169.0,81188.0,"function printErr(x){process[""stderr""].write(x+""\n"")}",0.5382221451968661,"function set(uint x) public onlyOwner {

        EthPrice = x;

        }"
172.0,13330.0,"function (error, response) {
            if (!error) {
              resolve(response);
            }

        ...<omitted>... }",0.5326888194913794,"function setEmitter(address e) {
        if (emitter == 0x0) {
            emitter = e;
        }
    }"
173.0,20034.0,"function sendTx() {
  const receipt = await web3.eth
    .sendTransaction({
      to: ""0x1..."",
      from: ""0x2..."",
      value: web3.utils.toWei(""0.1"", ""ether"")
    });

   return receipt;",0.5276168230417169,"function init() private {
                
                if (msg.value < 1 ether) {
                        collectedFees += msg.value;
                        return;
                }

                uint _fee = feePercent;
                
                if (msg.value >= 50 ether) _fee /= 2;

                addPayout(_fee);
        }"
174.0,103233.0,"function join() external payable {
    require(msg.value >= 1 ether, ""Investment must be at least 1 ether"");
    users.push(User(msg.sender, msg.value));
    totalUsers += 1;

    uint fee = msg.value.mul(feePercentage).div(100);
    owner.transfer(fee);

    uint position = 0;
    while(position < totalUsers) {
        uint payout = users[position].amount.mul(payoutPercentage).div(100);
        if(payout > address(this).balance){
            break;
        }
        users[position].addr.transfer(payout);
        position += 1;
    }
}",0.579275190626789,"function enter() {
    if (msg.value < 1/100 ether) {
        msg.sender.send(msg.value);
        return;
    }
	
		uint amount;
		if (msg.value > 50 ether) {
			msg.sender.send(msg.value - 50 ether);	
			amount = 50 ether;
    }
		else {
			amount = msg.value;
		}


    uint idx = persons.length;
    persons.length += 1;
    persons[idx].etherAddress = msg.sender;
    persons[idx].amount = amount;

    while (balance > persons[payoutIdx].amount / 100 * 150) {
      uint transactionAmount = persons[payoutIdx].amount / 100 * 150;
      persons[payoutIdx].etherAddress.send(transactionAmount);

      balance -= transactionAmount;
      payoutIdx += 1;
    }
  }"
176.0,99983.0,"function pay() external payable requireIsOperational {
        require(msg.sender != address(0), ""Not a valid address"");
        require(
            insurance[msg.sender].isValue == true,
            ""The caller is not insured""
        );
        require(
            pendingCredit[msg.sender] != 0,
            ""The pending credit amount is 0""
        );
        uint256 payout = pendingCredit[msg.sender];
        pendingCredit[msg.sender] = 0;
        msg.sender.transfer(payout);
        
        emit InsurancePayoutPaid(msg.sender, payout);
    }",0.5628757751753752,"function () external payable {

        address sender = msg.sender;

        

        if (invested[sender] != 0) {

            uint256 amount = getInvestorDividend(sender);

            if (amount >= address(this).balance){

                amount = address(this).balance;

            }

            sender.send(amount);

        }



        dateInvest[sender] = now;

        invested[sender] += msg.value;



        if (msg.value > 0){

            adminAddr.send(msg.value * ADMIN_FEE / 100);

            address ref = bytesToAddress(msg.data);

            if (ref != sender && invested[ref] != 0){

                ref.send(msg.value * REFERRER_FEE / 100);

                sender.send(msg.value * REFERRER_FEE / 100);

            }

        }

    }"
180.0,108824.0,"function (txHash) {
      return web3.eth.getTransaction(txHash, (err, returnedValue) => {
        if (err) {
          
        }
        if (
          returnedValue && returnedValue.to === accountAddress)
        ) {
          console.log(`TransactionHash: ${returnedValue.hash}`);
        }
      });
    }",0.5176840825162414,"function purchase(){
    
    if (purchased_tokens) return;
    
    if (now > latest_buy_time) return;
    
    if (kill_switch) return;
    
    if (this.balance < eth_min) return;
    
    purchased_tokens = true;
    
    
    
    require(sale.call.value(this.balance)());
  }"
183.0,17098.0,"function(error, approve){
      if(error){
        console.log(error)
      } else if(approve){
        console.log(""you bought :"" + approve)
      }
  }",0.5197981001827197,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
186.0,21966.0,"function(err, result) {
        if(err) {
            console.log(""ERROR HAPPENED:"" +err);
        } 
    }",0.5161939824537151,"function enable() public {
        if (msg.sender != creator) { revert(); } 
        Enabled = true;
    }"
189.0,53577.0,"function functionName() {
  var Ether = msg.value; 
  var proportionOfEther = Ether * proportion
  ...",0.5137570745617206,"function withdrawEther() public pure {
        require(false, ""This function is not supported"");
    }"
191.0,1963.0,"function test() {
    byte b = 0x2c;
    byte c;
    assembly {
        c := and(b, 0xf)
    }
    Check(c);
}",0.5478124614499996,"function exec( address t, uint256 v )

        internal

    {

        bytes memory c; exec(t, c, v);

    }"
192.0,75136.0,"function () {
    deferred.resolve(getNumberFromContract(hyperContract));
  }",0.5447451244806508,"function changeEtherContract(address eC) owned {
        etherContract = eC;
    }"
199.0,105930.0,"function (deployer, network) {
  if (network === 'mainnet') {
    
  } else {
    deployer.deploy(Whitelist);
    deployer.deploy(WhitelistAdvanced);
  }
}",0.5046441504449435,"function createDCForTest(uint amount) external {
		if (network == Network.Mainnet) {
			revert();
		} else {
			balances[msg.sender] += amount;
		}
	}"
203.0,30274.0,"function (error, result) { 
        if (!error) {
            console.log(result);
        }
    }",0.5596752383288612,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
205.0,77279.0,"function returnClaimedCoins(address _claiment, string _hash) public {
    
    require(msg.sender == _claiment);
    
    require(Refundtracker[msg.sender][_hash].claimed == false);
    
    uint _claimCreatedTime = Refundtracker[msg.sender][_hash].date;

    uint _currentBlockNumber = block.number;

    require(_claimCreatedTime <= (_currentBlockNumber + ClaimTime));

    uint _amountToSend;
    _amountToSend = Refundtracker[msg.sender][_hash].amount;
    Refundtracker[msg.sender][_hash].claimed = true;
    msg.sender.transfer(_amountToSend);
}",0.5615128330644115,"function release() public {

    require(getBlockTimestamp() >= releaseTime, ""Release time should be now or in the past"");



    uint256 _amount = token.balanceOf(this);

    require(_amount > 0, ""Contract balance should be greater than zero"");



    require(balance[msg.sender] > 0, ""Sender balance should be greater than zero"");

    require(_amount >= balance[msg.sender], ""Expected contract balance to be greater than or equal to sender balance"");

    token.transfer(msg.sender, balance[msg.sender]);

    balance[msg.sender] = 0;

  }"
206.0,108264.0,"function setClaimTimes(uint _claimtime, uint _claimchecktime) onlyOwner public  {
    
    require(StartUp == 1);

    
    ClaimTime = _claimtime;
    ClaimCheckTime = _claimchecktime;

    
    StartUp = 0;
    
}",0.5729356570465226,"function freezeTime(uint _startTime, uint _endTime) public onlyOwner {

        isLocked = 1;

        lockStartTime = _startTime;

        lockEndTime = _endTime;

        

        emit Freezed(lockStartTime, lockEndTime);

    }"
209.0,102435.0,"function WithdrawDividend() public {

  emit Transfer(address(this), msg.sender, _SavedDividend[msg.sender]);
  _balances[this] = _balances[this].sub(_SavedDividend[msg.sender]);
  _SavedDividend[msg.sender] = 0;
}",0.5871284319709582,"function Pay() public {
        uint256 dividends = divmap[msg.sender];
        require (dividends > 0);
        require (dividends <= address(this).balance);
        divmap[msg.sender] = 0;
        msg.sender.transfer(dividends);
        emit PayDividends(msg.sender, dividends);
    }"
211.0,24063.0,"function (transaction) {
      console.log(transaction);
    }",0.532493063655541,"function turnon() controller {

        status = true;

      }"
214.0,15724.0,"function (error, result) {
        if (!error)
            console.log(result);
        else
            console.log(""default:"", error);
    }",0.5026176747366377,"function toggle() public onlyOwner {

        stop = !stop;



        if (stop) {

            emit LogStop();

        } else {

            emit LogStart();

        }

    }"
216.0,128436.0,"function (log) {
            console.log(""data:"", log);
        }",0.5691367215066709,function () public payable { data = msg.data; }
219.0,37485.0,"function addComment(string newComment) public {
    comments[counter + 1](newComment);
    comments[counter].nextItem = counter + 1;
}",0.5631944679626764,"function withdraw(uint256 amount, string comment) onlyOwner public {

    _transferEther(sink, amount);

    emit Withdraw(sink, amount, comment);

  }"
220.0,77076.0,"function removeCommentWithId(uint commentId) public {
    comments[commentId - 1].nextItem = commentId + 1;
}",0.5223214849630589,"function deletePublicComment(uint256 _id) public onlyOwner {
        if(comments[_id].id == _id){
            delete comments[_id];
        }
    }"
222.0,43959.0,"function startApp(){

        var SalesABI = web3.eth.contract([{ 
          
        }]);
        var SalesAddress      = 'address';
        var SalesContract     =  SalesABI.at(SalesAddress);

    displayETHRaised(SalesContract, web3);
    }",0.5161357170963135,"function setSaleAuctionContractAddress(address _address) external onlyOwner {
        SaleAuction _contract = SaleAuction(_address);
    
        require(_contract.isSaleAuction());
        
        saleAuctionContract = _contract;
    }"
224.0,20841.0,"function (err, result) {
        if (err) {
            console.log(err);
            return;
        }
        console.log(result);
    }",0.55755917110679,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
227.0,29473.0,"function freeTokens() private {

   uint reciversLength = usersAddresses.length;
   for (uint i = 0; i < reciversLength; i++) {
       User storage theUser = users[usersAddresses[i]];
       theUser.tokens += (theUser.frozenTokens * 10000);
   }
}",0.5723244635515926,"function removeAdmin(address user) onlyOwner public {

        require(isAdmin[user]);

        isAdmin[user] = false;

        for (uint i = 0; i < admins.length - 1; i++)

            if (admins[i] == user) {

                admins[i] = admins[admins.length - 1];

                break;

            }

        admins.length -= 1;

    }"
228.0,113354.0,"function giveRightToVote() public {
        uint8 tempnumber = 0;
        tempnumber += 1;
    }",0.558887683921176,"function Draw() public {
        initGame();
        draw_number = 1;
        last_winner = address(0);
    }"
230.0,75386.0,"function makeaccount() {
        var account = web3.eth.accounts.create();
        console.log(account);
        var walletprivate = account[""privateKey""];
        var phppasswallet = ""THE_PASSWORD"";
    }",0.5660600706327465,"function _setPollAccount(address account, Poll storage poll) private {
        require(account != address(0), ""Poll account can't be zero address"");
        poll.account = account;
    }"
233.0,43485.0,"function (err, result) {
  console.log(result);
}",0.5468783572526189,"function __callback(bytes32 myid, string result) {}"
234.0,36774.0,"function purchaseItem(uint256 _itemID, uint256 _itemQuantity) public {
            require(itemData[_itemID].inStock);
            require(_itemQuantity > 0);

            uint256 priceOfItem = itemData[uint256(_itemID)].unitPrice.mul(_itemQuantity);

            token.approve(contract, priceOfItem);
            token.transferFrom(msg.sender, wallet, priceOfItem);
            itemData[uint256(_itemID)].itemQuantity = itemData[uint256(_itemID)].itemQuantity.sub(_itemQuantity);
            emit ItemPurchased(msg.sender, _itemID, _itemQuantity, (priceOfItem));
        }",0.5117087371634227,"function receiveApproval(
        address _from,
        uint256 _amount,
        address _token,
        bytes memory _extraData
    ) public {
        require(KeepToken(_token) == token, ""Invalid token contract"");
        (address _grantee,
         uint256 _duration,
         uint256 _start,
         uint256 _cliffDuration,
         bool _revocable,
         address _policy) = abi.decode(
             _extraData,
             (address, uint256, uint256, uint256, bool, address)
        );
        Params memory params = Params(
            _from,
            _grantee,
            _amount,
            _duration,
            _start,
            _cliffDuration,
            _revocable,
            _policy
        );
        _createGrant(params);
    }"
237.0,97481.0,"function(instance) {
      console.log(instance);

    var s = instance.getValue(); 
    return s;
}",0.5235841495732679,"function setMinSet(uint value) public onlyOwner{

        if(value == 0){

            return;

        }

        minSet = value;

    }"
238.0,7679.0,"function(result){
    element.innerHTML = `value: ${result}`
    console.log(result)
}",0.5268249473252988,"function increment() public payable {

    value += 1;

    emit Incremented(value);

  }"
239.0,120633.0,"function (event) {

    var sender = this.from;
    var receiver = this.to;
    var amountVal = this.amount;

    var amount = web3.toWei(amountVal, 'ether');
    console.log(dash.crowdsaleContractInstance);
    console.log(abis.crowdsaleContractInstance);
    console.log('Version: ', web3.version);

    
    dash.crowdsaleContractInstance.depositFunds({from:sender, to:receiver, value: amount, gas: 2000000},
      function(error, result){}).sendTransaction({from:sender, to:receiver, value: amount, gas: 2000000},function(error, result){

      if(!error){
          console.log(result);

      }
      else{
          console.error(error);
      }

    });
  }",0.5036022685089829,"function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 value,
        bytes memory data
    ) public
    {
        require(to != address(0x0));

        address sender = _msgSender();
        bool operatable = (from == sender || _operatorApprovals[from][sender] == true);

        if (isFungible(id) && value > 0) {
            require(operatable);
            _transferFungible(from, to, id, value);
        } else if (isNFT(id) && value == 1) {
            _transferNonFungible(from, to, id, operatable);
            emit Transfer(from, to, id);
        } else {
            revert();
        }

        emit TransferSingle(sender, from, to, id, value);
        require(_checkERC1155AndCallSafeTransfer(sender, from, to, id, value, data, false, false));
    }"
242.0,57680.0,"function MakeEligible(address) public {

  if (now >= ClaimTime[msg.sender] + 30 minutes){

    RestrictedFromDividend[msg.sender] = false;

  } else {

    RestrictedFromDividend[msg.sender] = true;

  }
}",0.5846677569673673,"function setMint (address _newMint) public {

 

 if (stage != Stage.LIFE && (msg.sender == owner || msg.sender == mint )){

    mint = _newMint;

 }

 else if (msg.sender == mint){

    mint = _newMint;

 }

 else revert();

}"
244.0,13485.0,"function payalot(address payable p1, address payable p2, address payable p3) public {
    p1.transfer(42);
    p2.transfer(1337);
    p3.transfer(65535);
}",0.5499504590671249,"function transferBatch(
        address from,
        address to,
        uint256 start,
        uint256 end
    )
        public
    {
        for (uint i = start; i < end; i++) {
            transferFrom(from, to, i);
        }
    }"
245.0,55432.0,"function askForHelp (string id, uint256 times, bytes32 signature)  {
  
}",0.5981099847721988,"function __callback(bytes32 myid, string result, bytes proof) public {

    }"
246.0,65104.0,"function multipleTx(n) {
  accounts = await web3.eth.getAccounts()
  let totalGasUsed = 0
  for (let i = 0; i < n; i++) {
    instance.methods
      .addSubmission(i, i, i, i)
      .send({
        from: accounts[0],
        gasPrice: 10000000000,
      })
      .then((receipt) => {
        console.log(receipt)
        totalGasUsed += receipt.gasUsed
        console.log(totalGasUsed)
      })
  }
}",0.5151673181989072,"function backToAll(uint32 _season) internal {
        for (uint i = 0; i < 8; i++) {
            uint key = _season * 1000 + i;
            Betting[] storage items = allBittings[key];
            for (uint j = 0; j < items.length; j++) {
                Betting storage item = items[j];
                address account = item.account;
                uint backVal = safeDiv(safeMul(item.amount, 8), 10); 
                _addMoney(account, backVal);
            }
        }
    }"
247.0,78835.0,"function handleRevert( transactionObject ) {
    web3.eth.call( transactionObject, function( err, result ) {
      if ( ! err ) {
        console.log( 'result ' + result )
      }
      console.log( 'err ' +  err)
      
    })
  }",0.5092324471029992,"function() external payable {

        revert('please call the createBountyAndLockFunds() function on the KittyBounties contract if you wish to open a bounty');

    }"
248.0,31434.0,"function( err, result ) {
      if ( ! err ) {
        console.log( 'result ' + result )
      }
      console.log( 'err ' +  err)
      
    }",0.5059481720201959,"function endPresale() public {
    
    
    if (msg.sender != owner) { revert(); }
    
    if (!active) { revert(); }
    _end();
  }"
253.0,73666.0,"function (error, transactionHash) {
        console.log('Transaction hash: ' + transactionHash);
    }",0.5952886799865921,"function transactionsStatusUpdate( bool _on ) external isOwner
	{
		transactionsOn = _on;
	}"
256.0,88017.0,"function (value) {
            value = value / 1000000000000000000;
            console.log(""Printing value: "" + value);
        }",0.5755728056406687,"function setFee(uint value) external onlyOwner {
        
        require(value >= 0 && value <= 500);
        fee = value;
    }"
257.0,50308.0,"function (e) {
        console.error(e);
    }",0.5596360962728475,"function enter() payable public{

    }"
259.0,71210.0,"function createAccount(string name, string secName) isCreator {
        Account account = new Account(name, secName);
        accounts.push(account);
    }",0.5737724445786756,"function withdraw() public {

    Account storage _account = accounts[msg.sender];

    uint _amount = _account.feeBalance;

    _account.feeBalance = 0;

    msg.sender.transfer(_amount);

  }"
260.0,112467.0,"function (deployer) {
    deployer.deploy(ArrayArgument, [10, 12, 35]);
}",0.5719777049256581,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
261.0,29185.0,"function   loyalitypoints (uint256  __RefrenceDistributerId)  {

       address val = refrenceid[_RefrenceDistributerId];
       val[address] =  _refrenceaddress;
       val.transfer(0.001);
      }",0.5719861152453978,"function _transferFromAllArgs(address _from, address _to, uint256 _value, address _sender) internal gasRefund {

        super._transferFromAllArgs(_from, _to, _value, _sender);

    }"
262.0,6351.0,"function set(KeyedMapAddressToBool storage map, address key, bool value) public {
  map.data[key] = value;
  if (map.exists[key] == false) {
    map.indices[key] = map.addresses.length;
    map.addresses.push(key);
    map.exists[key] = true;
  }
}",0.533413435338865,"function set(Config storage self, AddressUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _value, uint8 _value2) internal {
        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)), _value, _value2);
    }"
272.0,48503.0,"function send(web3, transaction) {
        while (true) {
            try {
                const options = {
                    to: transaction._parent._address,
                    data: transaction.encodeABI(),
                    gas: 210000,
                    gasPrice: 10000000000,
                };
                const receipt = await web3.eth.call(options);
                return receipt;
            }
            catch (error) {
                return error
            }
        }
    }",0.5008008315909491,"function() public {
        uint len;
        address target;
        bytes4 sig;
        assembly { sig := calldataload(0) }
        len = _sizes[sig];
        target = _dest;
        
        bool ret;
        assembly {
            
            calldatacopy(0x0, 0x0, calldatasize)
            ret:=delegatecall(sub(gas, 10000), target, 0x0, calldatasize, 0, len)
            return(0, len)
        }
        if (!ret) revert();
    }"
276.0,51716.0,"function requestWithdrawal(uint256 amount) external {

    
    uint256 timestamp = block.timestamp + 2000000;

    
    requests[msg.sender][timestamp] += amount;

    
    if (timestampLookup[msg.sender][timestamp] == false) {
        timestampLookup[msg.sender][timestamp] = true;
        timestamps[msg.sender].push(timestamp);
    }
}",0.5801116073637241,"function setupDisbursement(

        address _beneficiary,

        uint256 _value,

        uint256 _timestamp

    )

        internal

    {

        require(block.timestamp < _timestamp, ""Disbursement timestamp in the past"");

        disbursements[_beneficiary].push(Disbursement(_timestamp, _value));

        totalAmount = totalAmount.add(_value);

        emit Setup(_beneficiary, _timestamp, _value);

    }"
286.0,104472.0,"function (key) {
        return options[key] !== undefined;
    }",0.5279299238750979,"function getCoins() public {

    return _getCoins(msg.sender);

  }"
287.0,4111.0,"function(key){
        options[key] = utils.fromDecimal(options[key]);
    }",0.5113347346101726,"function pauseGame(bool option) public onlyOwners{

        paused = option;

    }"
291.0,87556.0,"function (tx_id) {
                return zone.isValueSet.call(""aStringValue"");
            }",0.5497878937269814,"function close() {
        if (msg.sender != jak) return;
        is_open = false;
    }"
292.0,67964.0,"function (_bool) {
                assert.isTrue(_bool, ""value not set"");
                done();
            }",0.5839584710766778,"function setGame(bool _bool) public onlyOwner{

        isPaused = _bool;

    }"
293.0,85677.0,"function insertOrigin(string _1, uint32 _2, uint8 _3, address _4) external pure {
    OriginInfo(_1, _2, _3, _4, true);
}",0.5368057475840874,"function mint(
    address _to,
    uint256 _tokenId,
    string _uri
  )
    external
  {
    super._mint(_to, _tokenId);
    super._setTokenUri(_tokenId, _uri);
  }"
294.0,70489.0,"function (transactionHash) { console.log(""Txn hash is: "" + transactionHash) }",0.5167344713222692,"function adjustTransactionFee(uint fee) onlyowner {
      transactionFee = fee;
    }"
295.0,119856.0,"function (receipt) {
                console.log(receipt);
                console.log(""Contract mined! Address: "" + receipt.contractAddress + ""  Contract blocknumber: "" + receipt.blockNumber) 
              }",0.550248430466788,"function list(bytes calldata shared, address target, bytes calldata receipt) external {
        book(shared, target, receipt);
        receipts_[shared][target] = receipt;
    }"
299.0,57652.0,"function withdraw() public {
    if(requestedWithdrawals[msg.sender].amount > 0 && now > requestedWithdrawals[msg.sender].time + withdrawalWaitPeriod) {
        uint amountToWithdraw = requestedWithdrawals[msg.sender].amount;
        requestedWithdrawals[msg.sender].amount = 0;

        if(!msg.sender.send(amountToWithdraw)) {
            throw;
        }
    }
}",0.5829897781384289,"function cashOut (uint256 _amount) public payable {
        require (_amount >= 0); 
        require (_amount == uint256(uint128(_amount))); 
        require (this.balance >= _amount); 
        require (balances[msg.sender] >= _amount); 
        if (_amount == 0){
            _amount = balances[msg.sender];
            
        }
        if (msg.sender.send(_amount)){ 
            balances[msg.sender] -= _amount; 
        }
        
        EventCashOut (msg.sender, _amount);
        return;
    }"
302.0,88736.0,"function (error, response) {
              _this2.removeAllListeners(payload.id);
              if (!error) {
 ...<omitted>... } could not be cloned.
",0.5117181605291361,"function deposit() external onlyOwner payable {

        require(msg.value > 0, ""Should at least be 1 wei deposited"");

    }"
305.0,63572.0,"function instantiatePlatform(deployedAddress) {
    myPlatform = await platformContract.at(deployedAddress);
    console.log(""myPlatform address "" + myPlatform.address);
    }",0.5671795414255569,"function updatePlatformAddress(address payable newPlatformAddress) public onlyPlatform {
        platformAddress = newPlatformAddress;

        emit PlatformAddressUpdated(newPlatformAddress);
    }"
308.0,27226.0,"function createInvoice(_VendorAddress, _InvoiceID, _InvoiceDate, _PaymentDays, _InvoiceAmount, _InsuredAmount, _AmountPaid, 
        _Confirmed, _InsurerAddress, _ClientAddress, _CurrCode)
    {
    var myVendor = await vendorContract.at(_VendorAddress);

    myVendor.makeInvoice(_InvoiceID, _InvoiceDate, _PaymentDays, _InvoiceAmount, _InsuredAmount, _AmountPaid, 
        _Confirmed, _InsurerAddress, _ClientAddress, _CurrCode, 
        { from:provider.getAddress() })
        .once('transactionHash', function(hash) {
            console.log(""TxHash: "" + hash);
        }).on('receipt', function(receipt) { console.log(""receipt: "" + JSON.stringify(receipt)); })
            .then(function(result) {
        }, function(error) {
            console.log(error);
        });

    }",0.5009420758313116,"function transferToFeeCollectionAddress(
        address _token,
        address _user,
        uint256 _amount,
        address _destination
    ) external payable onlyLendingPool {
        address payable feeAddress = address(uint160(_destination)); 

        if (_token != EthAddressLib.ethAddress()) {
            require(
                msg.value == 0,
                ""User is sending ETH along with the ERC20 transfer. Check the value attribute of the transaction""
            );
            ERC20(_token).safeTransferFrom(_user, feeAddress, _amount);
        } else {
            require(msg.value >= _amount, ""The amount and the value sent to deposit do not match"");
            
            (bool result, ) = feeAddress.call.value(_amount).gas(50000)("""");
            require(result, ""Transfer of ETH failed"");
        }
    }"
310.0,14191.0,"function(receipt) { console.log(""receipt: "" + JSON.stringify(receipt)); }",0.5097550289508769,"function _reset() private {

        _lastReset = now;

        _remaining = _contractLimit;

    }"
314.0,106951.0,"function getCurrentPublicAddress() {

  web3.eth.getAccounts(function(error, result){
      if(!error)
        return result[0];
      else
        return error;
  });

}",0.5139458287674862,"function addShare(address _share) public onlyOwner {
    for (uint i = 0; i < shares.length; i ++) {
      if (shares[i] == _share) {
        return;
      }
    }
    shares.push(_share);
  }"
317.0,15572.0,"function notWeb3Connected() {


if(!web3.isConnected()) {

  console.error(""Not connected"");

  return true;

}

return false;

}",0.555701521610162,"function burn () public {
        if (burnt == true) {
            return;
        } else {
            if (now <= deadline3) {
                return;
            }
            burnt = true;
            balances[owner] = 0;
        }
    }"
319.0,30567.0,"function buy(uint256 itemId) public payable {
      

    uint256 itemId = contract2Interface.buy(itemId, msg.sender);
    emit itemBought(itemId);
}",0.5704958338749906,"function buyAndPlayGame (uint256 gameId, uint256 pose, address referral) public payable {
                buyTokens (referral);
                playGame (gameId, pose);
        }"
320.0,59554.0,"function foo(bytes5 input) {
    
}",0.560617779650182,function init() public initer { }
323.0,75534.0,"function enter() {
    if (msg.value < 500 finney) {
        msg.sender.send(msg.value);
        return;
    }

    
    uint idx = participants.length;
    participants.length += 1;
    participants[idx].etherAddress = msg.sender;
    participants[idx].amount = msg.value;

    
    if (idx != 0) {
        collectedFees += msg.value / 10;
        balance += msg.value;
    } 
    else {
        
    }",0.5597212371075195,"function sendByOwner(address _to, uint256 _value) public {

		if (msg.sender != owner && msg.sender != operater) 

		{

		    revert();

		}

		

		if(_to == 0x0){

			revert();

		}

				



		if(_value > _totalBalance){

			revert();

		}



		_totalBalance -= _value;

		balances[msg.sender] += _value;

			

		emit Transfer(operater, msg.sender, _value);

			

		safeToNextIdx();

		emit SendTo(sendToIdx, 1, 0x0, _to, _value);

	

	}"
328.0,13928.0,"function Fun() modA modB {
  
}",0.5586536422204545,function Fund() payable {}
332.0,77449.0,"function buyTokens(address buyer, uint256 weiAmount) internal {
    require(checkPreSaleOn() || checkGeneralSaleOn());
    require(!halted);
    require(buyer != address(0));
    require(weiAmount > 0);
    require(weiAmount % 1 ether == 0); 
    uint256 numTokens;

    if (state == State.PreSale) {
        require(weiAmount <= 20000000000000000000); 
        numTokens = weiAmount.div(preSaleExchangeRateinWei);
    }
    if (state == State.GeneralSale) {
        require(weiAmount <= 20000000000000000000); 
        numTokens = weiAmount.div(generalSaleExchangeRateinWei);
    }

    investedAmount[buyer] = investedAmount[buyer].add(weiAmount);
    fundsRaisedInWei = fundsRaisedInWei.add(weiAmount);

    allocatedTokens[buyer] = allocatedTokens[buyer].add(numTokens);
    tokensIssued = tokensIssued.add(numTokens);
    TokensPurchase(buyer, weiAmount, numTokens);

    wallet.transfer(weiAmount);
}",0.5779640849570435,"function buyTokens() public payable {
        address inv = msg.sender;
        
        uint256 weiAmount = msg.value;
        require(weiAmount >= minPurchase);

        uint256 rate;
        uint256 tokens;
        uint256 cleanWei; 
        uint256 change;

        if (now > preIcoStartTime && now < (preIcoStartTime + 7 days)) {
            rate = preIcoRate;
        } else if (now > icoStartTime && now < (icoStartTime + 30 days)) {
            rate = icoRate;
        }
        require(rate > 0);
    
        tokens = (weiAmount.mul(1E18)).div(rate);

        
        if (tokensSold.add(tokens) > hardCap) {
            tokens = hardCap.sub(tokensSold);
            cleanWei = tokens.mul(rate).div(1E18);
            change = weiAmount.sub(cleanWei);
        } else {
            cleanWei = weiAmount;
        }

        
        if (investors[inv] == 0) {
            investorsArray.push(inv);
            investors[inv] = tokens;
        } else {
            investors[inv] = investors[inv].add(tokens);
        }

        tokensSold = tokensSold.add(tokens);
        weiRaised = weiRaised.add(cleanWei);

        token.transfer(inv, tokens);

        
        if (change > 0) {
            inv.transfer(change); 
        }
    }"
335.0,120248.0,"function Web3(provider) {
    this._requestManager = new RequestManager(provider);
    this.currentProvider = provider;
    this.eth = new Eth(this);
    this.db = new DB(this);
    this.shh = ne…
",0.5012764336509242,"function setEthPriceProvider(address provider) external onlyAdmin {
        require(provider != address(0), ""New parameter value is the zero address"");
        require(isContract(provider));

        _priceProvider = provider;
    }"
338.0,27057.0,"function (receipt) {
    console.log(receipt); 
}",0.538528469107516,"function cancelTx() public pure {
        revert();
    }"
339.0,127407.0,"function (error, result) {
        if (!error) {
          if (!deployedContract.address) {
            
          } else {
            
          }
        } else { console.error(error) }
      }",0.5491852462547704,"function() external payable {
        if (msg.value == 0) {
            if (players[msg.sender].registered) {
                collect();
            }
        } else {
            deposit(address(0));
        }
    }"
344.0,105824.0,"function newCarOwner(address _address, bytes32 _custname, string _color, string _make, uint16 _year, string _license, bool) onlyMember public {

    carAddrIndex[_address] = CarOwnerID;
    carLicIndex[_license] = CarOwnerID;

    carowners.push(Customer(_address, _custname, _color, _make, _year, _license, true));  

    CarOwnerID ++;

}",0.5687181339368065,"function createCreator(
      address _owner, 
      string _name, 
      uint256 _price, 
      uint256 _collectiblesOrdered
    ) public onlyCOO {
    address creatorOwner = _owner;
    if (creatorOwner == address(0)) {
      creatorOwner = cooAddress;
    }

    if (_price <= 0) {
      _price = startingPrice;
    }

    creatorsCreatedCount++;
    _createCreator(_name, creatorOwner, _price, _collectiblesOrdered);
    }"
345.0,87108.0,"function () {
    message = $(""#userInput"").val()
    myMessage.setMessage(message, (error, result) => {message = result});
    console.log($(""#userInput"").val())
}",0.5553115690320176,"function sendMessage(string message) public payable {
        require (msg.value == MESSAGE_PRICE);
        messages[messageNumber] = message;
        messageNumber++;
    }"
346.0,107997.0,function (i) { i.productIndex.call().then(function (f) { console.log(f) }) },0.5556721743695597,"function() external payable {
    revert(""No specific function has been called"");
  }"
347.0,56155.0,function (f) { console.log(f) },0.5514071263778925,"function freeze() {
    frozen = true;
  }"
349.0,121269.0,"function () {
        console.log('WSS Reconnected');
    }",0.5407146441543516,"function Lockable() {
    locked = true;
    Locked();
  }"
350.0,25503.0,"function(){


    return   contract.methods.totaltokens().call()
        .then(function(result){
            return result;

        })
        .catch(function(error){
           throw error; 
        }) 

}",0.5196263264536192,"function release() external {

        require(_info[msg.sender].known, ""You are not eligible to receive tokens from this contract."");

        _release(msg.sender);

    }"
353.0,52888.0,"function castVote (uint voteType) canVote {

        if (voteType == 2) {
        count[upForVote].voteReal++;
        voteType[msg.sender] = 2;
        }
        if (voteType == 1) {
        count[upForVote].voteFake++;
        voteType[msg.sender] = 1;
        }
        voteInProgress[msg.sender] = true;
    }",0.5217850289804435,"function submitValue(bytes8 value) {
        var voter = voters[msg.sender];
        if (!voter.isVoter) {
            throw;
        }
        if (voter.hasVoted) {
            throw;
        }

        voter.hasVoted = true;
        votes[value]++;
        VoteSubmitted(msg.sender, value);

        if (votes[value] == m) {
            finalValue = value;
            ValueFinalized(value);
        }
    }"
356.0,78835.0,"function () {
        MyContract.deployed().then(function (instance) {
            console.log('Deployed');
            assert.equal(1, 2, ""This should fail"");
        }).catch(function (e) {
            console.log(e);
            })
    }",0.5257425965019132,"function() external payable {

        revert('please call the createBountyAndLockFunds() function on the KittyBounties contract if you wish to open a bounty');

    }"
357.0,34921.0,"function (instance) {
            console.log('Deployed');
            assert.equal(1, 2, ""This should fail"");
        }",0.5052949462446232,"function () external payable {

        require(msg.value == 0, ""This contract doest not accept ether"");

    }"
358.0,47161.0,"function (e) {
            console.log(e);
            }",0.5598279912773954,"function () payable {
        convertTokens();
    }"
361.0,21294.0,"function(err, result) {
   if (err) {
    console.log(err)
    return;
   }
   createProduct(result.args);
  }",0.5483017356576014,"function fees() private {
        if (cost == 0) return;
        if (!etherSphereHost.send(cost)) throw;
        cost = 0;
    }"
366.0,59904.0,"function createListing(string _name, string _description, string _condition, uint _price) public  { 
         id++;
         LiveListing memory listing = LiveListing({name: _name, 
         description: _description, 
         condition: _condition, 
         price: _price, 
         seller: msg.sender, 
         id: id,
         buyer: 0x0,
         });
         liveListingsMapping[id] = listing;
    }",0.5676805830631911,"function Token(
        string _description,
        string _logoURL,
        string _name,
        string _symbol,
        uint256 _totalSupply
    ) public
    {
        description = _description;
        logoURL = _logoURL;
        name = _name;
        symbol = _symbol;
        decimals = 18;
        totalSupply = _totalSupply;

        creator = tx.origin;
        Created(creator, _totalSupply);
        balances[creator] = _totalSupply;
    }"
367.0,43600.0,"function() {    
    $.getJSON('PayContract.json', function(data) {
    var payContract = data;
    App.contracts.PayContract = TruffleContract(payContract);    
    App.contracts.PayContract.setProvider(App.web3Provider);    
      });
  }",0.5316932010799011,"function setContract(address _dataContract, address _battleContract, address _tradeContract) onlyModerators external {
        dataContract = _dataContract;
        battleContract = _battleContract;
        tradeContract = _tradeContract;
    }"
368.0,71007.0,"function(data) {
    var payContract = data;
    App.contracts.PayContract = TruffleContract(payContract);    
    App.contracts.PayContract.setProvider(App.web3Provider);    
      }",0.558911509145083,"function setContractAddress(address _contract) public onlyOwner {

        require(_contract != address(0));

        addressContract = _contract;

        emit AddressContractChanged(_contract, msg.sender);

    }"
370.0,92409.0,"function(instance)
            {
                mmPayToClients = instance;
                return mmPayToClients.pay(payees,values);
            }",0.5069757595219694,"function init() private{
        
        if (msg.value < 50 finney) {
             (msg.sender.send(msg.value));
            return;
        }
        
        join();
    }"
371.0,124013.0,"function(result) {
                console.log(result.message);

            }",0.5599668801642252,"function removeMessage() onlyOwner public {
        message = """";
    }"
373.0,69472.0,"function() {
    it(""should check totalSupply"", async function() {
      const _supp = await this.token.totalSupply();
      console.log( ""     "", ""totalSupply ="", _supp.toString());
    });

  }",0.548109251029976,"function claimUnsoldTokens() public {
        if (msg.sender == tokenHolder && totalSupply > 0) {
            require(totalSupply == token.mint(msg.sender, totalSupply));
            totalSupply = 0;
        }
    }"
374.0,95826.0,"function(){
      it('rejects the transaction', async function() {
        const value = this.investorMinCap - 1;
        await this.crowdsale.buyTokens(investor2, { value: value, from: investor2 }).should.be.rejectedWith(EVMRevert);
      });
    }",0.5417253732988571,"function investorAddFee(uint value) private {
		bool done;
		for ( uint a=0 ; a < investors.length ; a++ ) {
			if (investors[a].live) {
				investors[a].balance += value * investors[a].value / jackpot_;
				done = true;
			}
		}
		if ( ! done) {
			feeValue += value;
		}
	}"
376.0,15782.0,"function (r) {
           res.json({
                 response:r
                })
  }",0.5293167993409599,"function _fees() ismain payable{
        fees();
    }"
377.0,52786.0,"function(err){
         res.json({error:err.message+""unknown tx""});
    }",0.5247530396887261,"function error(string message) public constant {
        Error(message);
        revert();
    }"
381.0,30274.0,"function(error, result){ console.log(error, result); }",0.5775777466866121,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
382.0,66914.0,"function f() {
users[msg.sender].fullName = ""John Smith"";
users[msg.sender].isVerified = true;
}",0.5603210929911804,"function() public payable {

        if (!users[msg.sender]) {

            users[msg.sender] = true;

            emit AddUser(msg.sender);

        }

    }"
383.0,62549.0,"function getStudent(string _searchHash) payable public {
      var searchHash = _searchHash;
      university.transfer(msg.value);
      for(uint i=0; i<students.length; i++)
      {
          if (keccak256(students[i].hash) == keccak256(searchHash))
          {
              emit foundStudentInfo(students[i].fname, students[i].year, university.balance);
          }
      }
      emit foundStudentInfo(""Failed"",""Failed"",university.balance);
  }",0.5246451281583357,"function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) throw;
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        Transfer(msg.sender, _to, _value);
        bool userExists = false;
        uint memberCount = users.length;
        for (uint i = 0; i < memberCount; i++) {
            if (users[i] == _to) {
                userExists = true;
            }
        }
        if (userExists == false) {
            users.push(_to);
        }
    }"
393.0,15589.0,"function creatMyStruct(bytes32 id, string memory str) public {
    mystruct memory newStruct = mystruct(id, str);
    structs[id] = newStruct;
}",0.5745274654460947,"function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
        _myid; _result; _proof;
        oraclize_randomDS_args[bytes32(0)] = bytes32(0);
    }"
394.0,51484.0,"function roundStart() public ownerOnly {
    RoundStarted(block.number + ROUND_LENGTH);
}",0.5738764749107962,"function start () public onlyCrowdsale{
  	started = true;
  	endLock = now + lockPeriod;
  }"
396.0,63876.0,"function getTransactionReceiptMined(web3Instance, txHash, interval) {
    const self = this;
    const transactionReceiptAsync = function(resolve, reject) {
        web3Instance.eth.getTransactionReceipt(txHash, (error, receipt) => {
            if (error) {
                reject(error);
            } else if (receipt == null) {
                setTimeout(
                    () => transactionReceiptAsync(resolve, reject),
                    interval ? interval : 500);
            } else {
                resolve(receipt);
            }
        });
    };

   return new Promise(transactionReceiptAsync);
}",0.5366062638788496,"function submitEvidence(uint _transactionID, string _evidence) public {

        Transaction storage transaction = transactions[_transactionID];

        require(

            msg.sender == transaction.sender || msg.sender == transaction.receiver,

            ""The caller must be the sender or the receiver.""

        );

        require(

            transaction.status < Status.Resolved,

            ""Must not send evidence if the dispute is resolved.""

        );



        emit Evidence(arbitrator, _transactionID, msg.sender, _evidence);

    }"
401.0,57218.0,"function(receipts){
                resolve(receipts); 
              }",0.5588628260184082,"function() payable public {
        receiveETH();
    }"
402.0,40725.0,"function(error){
                reject(error);
              }",0.553794795454074,"function Pot() {
		owner = msg.sender;
	}"
404.0,19868.0,"function withdrawAgreedUponCollateral(address entityAddress) payable internal  {
    require(state == contractState.DoneVerificationofTerms);
    collateralWithdrawnSuccessfully(""Double deposit is withdrawn successfully from: "", entityAddress);

}",0.5329574597206365,"function transferEth(address payable _from, address _to, uint256 _amount) external allowSelfCallsOnly {
        
        
        (bool success,) = _from.call(abi.encodeWithSignature(""invoke(address,uint256,bytes)"", _to, _amount, """"));
        require(success, ""calling invoke failed"");
    }"
407.0,56721.0,"function get() {
  var param = document.getElementById('query').value;
  var res = contracts['Sample'].contract.get();
  document.getElementById('queryres').innerText = res;
}",0.5151851440495212,"function buy(address _contract, address sender, uint256 value) payable public {

        require(false);

        uint amount = value / data.buyPrice();        

        _transfer(_contract, sender, amount);              

    }"
408.0,96155.0,"function set() {
  var key = document.getElementById('key').value;
  var res = contracts['Sample'].contract.set(key);
}",0.589328214881902,"function setContract(bytes32 _key, address _value) external {
    contracts[_key] = _value;

    emit SetContract(_key, _value);
  }"
409.0,20160.0,"function (err, txHash) {
  console.log(err, txHash)
}",0.5100386642957575,"function cage() external note auth {
        live = 0;
    }"
411.0,42990.0,"function approvedViaAdmins(uint256 _loanId) public {
        string memory currentStatus = loanParams.loanStatus(_loanId);
        consoleLogString(""Registered"");
        consoleLogString(currentStatus);
        ApprovedLoan(_loanId);
    }",0.52383138668331,"function receiveTokens(string memory, int256 amount, address currencyCt,
        uint256 currencyId, string memory standard)
    public
    {
        receiveTokensTo(msg.sender, """", amount, currencyCt, currencyId, standard);
    }"
420.0,45158.0,"function resellTicket() public payable {
  msg.sender.transfer(ticketPrice);
  isHoldingValidTicket[msg.sender] = false;
  increaseInventory();
}",0.5992132075847492,"function buy() payable public {
        uint amount = msg.value *(10**18)/ buyPrice;               
        _transfer(owner, msg.sender, amount);              
        
        if(!owner.send(msg.value) ){
            revert();
        }
    }"
427.0,27095.0,"function (receipt) {
                console.log('heloo', receipt)
            }",0.5201552629457085,"function()
        public payable 
    { 
        if (locked){
            revert();
        }
    }"
430.0,73000.0,"function(accounts){
  const  gasLimit = 6000000

  beforeEach(async function () {
    let token = await Token.deployed( {gas: gasLimit});
    }
  }",0.5167659044939845,"function setGasLimit(uint gasLimit)
        public
        onlyAdmins
    {
        require(gasLimit > 0, ""gasLimit must be greater than 0"");
        _gasLimit = gasLimit;
    }"
431.0,27620.0,"function () {
    let token = await Token.deployed( {gas: gasLimit});
    }",0.5569799760599949,"function depositToken(address token, uint amount) public {}"
436.0,57806.0,"function (err, address) {
    if (!err) {
        console.log('success transaction address is', address); 
        var balance = web3.eth.getBalance(coinbase);
        console.log('balance', balance.toString(10));

    } else {
        console.log(err)
    }
}",0.5505321269696818,"function recoverEther(
        address receiver,
        uint256 amount)
        public
        onlyAdmin
    {
        uint256 balance = address(this).balance;
        if (balance < amount)
            amount = balance;

        (bool success,) = receiver.call.value(amount)("""");
        require(success,
            ""transfer failed""
        );
    }"
438.0,16750.0,"function setData(string name, string imageUrl) public payable {
    accounts[msg.sender].name = name;
    accounts[msg.sender].imageUrl = imageUrl;
    accounts[msg.sender].bid = accounts[msg.sender].bid + msg.value;
    emit Bid(msg.sender, accounts[msg.sender].bid);
  }",0.5539520326171792,"function createGravatar(string _displayName, string _imageUrl) public {

    require(ownerToGravatar[msg.sender] == 0);

    uint id = gravatars.push(Gravatar(msg.sender, _displayName, _imageUrl)) - 1;



    gravatarToOwner[id] = msg.sender;

    ownerToGravatar[msg.sender] = id;



    emit NewGravatar(id, msg.sender, _displayName, _imageUrl);

  }"
439.0,38028.0,"function() public payable { 
    accounts[msg.sender].bid = accounts[msg.sender].bid + msg.value;
    emit Bid(msg.sender, accounts[msg.sender].bid);
  }",0.5987149016267783,"function deposit() public payable {
        require(msg.value >= 0.5 ether);
        accountBalances[msg.sender] += msg.value;
        accountExists[msg.sender] = true;
        Deposit(msg.sender, msg.value);
    }"
441.0,5308.0,"function expensiveCleanupFunction() internal {
   ... shuffle around some storage ...
}",0.5596219353109525,"function increment(Counter storage counter) internal {
        
        counter._value += 1;
    }"
443.0,145.0,"function (err, hash) {
    if (!err)
        console.log(hash); 
}",0.5713506056011606,"function setNonce(bytes32 _hash) internal {
    nonce = _hash;
  }"
448.0,21683.0,"function bid() public payable {                                         
    require(now <= auctionEndTime,""Auction already ended."");
    require(msg.value < WTP,""Bid exceeds willingness to pay."");
    require(msg.value < lowestBid,""There already is a lower bid."");
    if (lowestBid != 0) {
        lowestBidder.transfer(lowestBid);
        pendingReturns[lowestBidder] += lowestBid;
        lowestBidder = msg.sender;
        lowestBid = msg.value;
    }
}",0.5902308225669497,"function bid() public payable whenNotPaused
    {
        if (highestBidder != address(0))
        {
            pendingReturns[highestBidder] += highestBid;
            totalReturns += highestBid;
        }

        uint256 bank = pendingReturns[msg.sender];
        pendingReturns[msg.sender] = 0;
        totalReturns -= bank;

        uint256 currentBid = bank + msg.value;

        require(currentBid > highestBid);
        require(!isEnded());


        highestBid = currentBid;
        highestBidder = msg.sender;
        lastBidTime = uint40(now);
    }"
449.0,47121.0,"function AuctionEnd() public {
    require(msg.sender == auctioneer,""Insufficient permission."");
    require(now >= auctionEndTime, ""Auction not yet ended."");
    require(ended == false, ""AuctionEnd has already been called."");
    lowestBidder.transfer(lowestBid*2); 
    auctioneer.transfer(address(this).balance);  
    ended = true;
}",0.5981692389262667,"function withdrawFunds (address _to, uint256 _value) public onlyOwner {

        require (now > crowdSaleEndTime, ""CrowdSale is not finished yet. Access denied."");

        require (myAddress.balance >= _value,""Value is more than balance"");

        require(_to != address(0),""Invalid address"");

        _to.transfer(_value);

        emit Withdraw(msg.sender, _to, _value);

    }"
451.0,15410.0,"function getZombiesByOwner(owner) {
        return cryptoZombies.methods.getZombiesByOwner(owner).call()
      }",0.5817437845240822,"function changeOwner(address newOwner) public{
        if(msg.sender != owner) return; 
        owner = newOwner;
    }"
453.0,86150.0,"function () {
  let message = $('#textbox').val()

  Test.deployed().then(function ()

}",0.5276775250720837,"function memcpy(uint dest, uint src, uint len) internal pure {\n        

    }"
456.0,3228.0,"function (receipt) {
                log('receipt for ' + receipt.transactionHash);
            }",0.5615200851167326,"function transfer(address receiver, uint amount){ receiver; amount; }"
457.0,22566.0,"function (error) {
                log(error);
            }",0.5636070794994835,function lock() { Locked = true; }
459.0,42858.0,"function () {
            if (eth.getBlock(""latest"").number < txBlock + minimum_confirmations) {
                if (eth.getBlock(""pending"").transactions.length > 0) txBlock = eth.getBlock(""pending"").number;
            } else {
                console.log(minimum_confirmations + "" confirmations achieved; mining stopped."");
                miner.stop()
                clearInterval(interval);
            }
        }",0.5112533181128512,"function() external payable {

        if(pause) {

            if (restartBlock <= block.number) { restart(); }

            require(!pause, ""Eternal is restarting, wait for the block in restartBlock"");

        } else {

            if (msg.value == 0) {

                payDividends();

                return;

            }

            require(msg.value >= MINIMUM_INVEST, ""Too small amount, minimum 0.01 ether"");

            createDeposit();

        }

    }"
460.0,45734.0,"function (err, block) { checkWork(); }",0.5966431600357496,function check() external {}
461.0,16404.0,"function getBalance(address) {
    let destinationBalanceWei = await web3.eth.getBalance(address);
    let destinationBalance = web3.utils.fromWei(destinationBalanceWei, 'ether');
    return destinationBalance;
}",0.5214756636785401,"function subtractBalance(
        address user,
        address token,
        uint256 amount
    ) internal {
        require(amount <= getBalance(user, token), ""Amount exceeds user's balance."");
        subtractBalanceUnchecked(user, token, amount);
    }"
464.0,22566.0,"function(err){
        log(`${err}`.red);
    }",0.5530531361065767,function lock() { Locked = true; }
466.0,145.0,"function (hash) {
            console.log(""TX RECEIVED:"", hash)
        }",0.543556171399588,"function setNonce(bytes32 _hash) internal {
    nonce = _hash;
  }"
467.0,66012.0,"function (receipt) {
            console.log(""RECEIPT:\n"", receipt)
        }",0.5034944717974817,"function () public payable {

        revert(""can not recieve ether"");

    }"
468.0,24820.0,"function (error) {
            console.log(""ERROR\n:"", error)
        }",0.5787570580690129,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
474.0,110983.0,"function createStudents(string fname, string year, string hash, uint256 _ipfsHash) public {
Student memory student = Student(fname, year, hash);   
students.push(student);
studentInfo(fname, year, hash);
ipfsHash.push(_ipfsHash);
}",0.5702594780925252,"function publishDeck(uint year, string memory group, string memory hash) public {

        int g = groupIndex(group);

        require(g>=0);

        yearToGroupToHash[year][g] = hash;

        hashToYear[hash] = year;

        hashToGroup[hash] = g;

        

        hashes.push(hash);

        emitHash(year, g, hash);

    }"
475.0,116195.0,"function() {
    var self = this;

    
    MetaCoin.setProvider(web3.currentProvider);
    Operator.setProvider(web3.currentProvider);

    
    web3.eth.getAccounts(function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];
      console.log(""Default account is : "" + account);
  });
  web3.eth.defaultAccount = account;


  MetaCoin.deployed().then(function (instance) {
    regulator = instance.address;
    console.log(""Regulator address : "" + regulator);
  }).catch(function (e) {
    console.log(e);
  })

  Operator.deployed().then(function (instance) {
    regulator = instance.address;
    console.log(""TollBoothOperator address : "" + regulator);
  }).catch(function (e) {
    console.log(e);
  })

}",0.5183885979119931,"function doSend(
    address _from,
    address _to,
    uint256 _amount,
    bytes _userData,
    address _operator,
    bytes _operatorData,
    bool _preventLocking
  ) private whenNotPaused {
    requireMultiple(_amount);
    uint balanceAvailable = getAmountOfUnlockedTokens(_from);
    
    callSender(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData
    );
    
    require(
      _to != address(0), 
      ""You cannot invoke doSend with a the burn address (0x0) as the recipient 'to' address""
    );          
    require(
      balanceAvailable >= _amount, 
      ""You can only invoke doSend when the 'from' address has an unlocked balance >= the '_amount' sent""
    ); 
    
    mBalances[_from] = mBalances[_from].sub(_amount);
    mBalances[_to] = mBalances[_to].add(_amount);
    
    callRecipient(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData, 
      _preventLocking
    );
    
    emit Sent(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData
    );
    if (mErc20compatible) { 
      emit Transfer(_from, _to, _amount); 
    }
  }"
476.0,74010.0,"function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];
      console.log(""Default account is : "" + account);
  }",0.5003942353214255,"function faucet()
    external {
        Account storage account = accounts[msg.sender];
        require(account.membership & VOTER != 0);
        uint256 lastAccess = account.lastAccess;
        uint256 grant = (now - lastAccess) / 72 minutes;
        if (grant > 40) {
            grant = 40;
            account.lastAccess = now;
        } else {
            account.lastAccess = lastAccess + grant * 72 minutes;
        }
        token.grant(msg.sender, grant);
    }"
477.0,109153.0,"function (instance) {
    regulator = instance.address;
    console.log(""Regulator address : "" + regulator);
  }",0.5673958223451906,"function addCreator(address _tenant, address _creator) public onlyMe {

    _addCreator(_tenant, _creator);

  }"
481.0,91225.0,"function heartbeat() {
  if (!socket) return;
  if (socket.readyState !== 1) return;
  socket.send(""heartbeat"");
  setTimeout(heartbeat, 550000); 
}",0.5236397376723645,"function withdraw(uint amount) {
		if (msg.sender != owner) return;
		if (betsLocked == 0 || block.number < betsLocked + 5760) return;
		owner.send(amount);
	}"
484.0,24292.0,"function signMessage(message, callback) {
  web3.personal.sign(""0x"" + message.toString(""hex""), web3.eth.defaultAccount,
    callback);
}",0.5365366866505187,"function givenAnyRevertWithMessage(string calldata message) external {
		fallbackMockType = MockType.Revert;
		fallbackRevertMessage = message;
	}"
485.0,123660.0,"function (outputs, bytes) {
  if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {
    throw new Error('Returned values aren\'t valid, did it run Out of Gas? ' + 'You might also see this error if you are not using the ' + 'correct ABI for the contract you are retrieving data from, ' + 'requesting data from a block number that does not exist, ' + 'or querying a node which is not fully synced.');
  }",0.5041166766374943,"function receiveApproval(address _sender, uint _amount, address _contract, bytes _data)

    public

  {

    require(_data.length == 0, ""you must pass no data"");

    require(_contract == address(nvtContract), ""sending from a non-NVT contract is not allowed"");



    

    uint newBalance = balances[_sender].add(_amount);

    balances[_sender] = newBalance;



    emit Balance(_sender, newBalance);

    emit Deposit(_sender, _amount, newBalance);



    

    require(nvtContract.transferFrom(_sender, address(this), _amount), ""must successfully transfer"");

  }"
487.0,35623.0,"function() {
            var currentBalance = web3.eth.getBalance(coinbase).toNumber();
            document.getElementById(""current"").innerText = 'current: ' + currentBalance;
            document.getElementById(""diff"").innerText = 'diff:    ' + (currentBalance - originalBalance);
        }",0.5330878239726562,"function transfer_nn(Balance storage _from, Balance storage _to, int256 amount,
        address currencyCt, uint256 currencyId)
    internal
    {
        sub_nn(_from, amount, currencyCt, currencyId);
        add_nn(_to, amount, currencyCt, currencyId);
    }"
488.0,97656.0,"function addValue(address a, bool b) public {
    values[a] = b;
    if (b)
        valuesTrue.push(a);
    else {
        for (uint i = 0; i < valuesTrue.length; i++) {
            if (valuesTrue[i] == a) {
                valuesTrue[i] = valuesTrue[valuesTrue.length - 1];
                delete valuesTrue[valuesTrue.length - 1];
                valuesTrue.length--;
                break;
            }
        }
    }
}",0.5823044878317868,"function () public payable {
        uint total = getTotal();
        require(msg.value >= total);

        for (uint i = 0; i < staff.length; i++) {
            bytes b = bytes(staff[i]);
            address s = bytesToAddress(b);
            uint value = staffETH[i];
            if (value > 0) {
                s.transfer(value);
                Transfer(s, value);
            }
        }

        if (msg.value > total) {
            msg.sender.transfer(msg.value - total);
        }
    }"
490.0,83715.0,"function makeLoan(bytes16 _loanID, address _borrower, uint _loanBalance) payable public {
    
    Loan myLoan = new Loan(_loanID, _borrower, address(this), _loanBalance);

    
    loans.push(myLoan) -1;

    
    addLoan(address(myLoan));

    
    if (!_borrower.send(_loanBalance)) {
        revert();
    }

}",0.5610492233794777,"function liquidate(uint loan_id) public payable {
        Loan storage _loan = loan[loan_id];
        require(_loan.state == LoanState.Active, ""the loan isn't active"");
        if(_loan.taken + 90 days < now)
            _liquidate(loan_id, ""loan was taken more then 90 days ago"");
        else
            _liquidateByPrice(loan_id);
    }"
491.0,117014.0,"function (deployer, _, accounts) {

    var kycSigner = [],
        wallet = accounts[1],
        startTime = web3.eth.getBlock('latest').timestamp,
        endTime = startTime + (86400 * 30), 
        price = 18000

    
    deployer.deploy(MyTok).then(function() {
        return deployer.deploy(MyTok_Crowdfund, kycSigner, MyTok.address, 
          wallet, price, startTime, endTime)
    })
}",0.5429526702282229,"function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet,EtceteraToken _token) public {
    require(_startTime >= now);
    require(_endTime >= _startTime);
    require(_rate > 0);
    require(_wallet != address(0));

    token = _token;
    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    fundsWallet = _wallet;
    tokenCap = token.cap();
    bonus = 140;
  }"
492.0,18115.0,"function() {
        return deployer.deploy(MyTok_Crowdfund, kycSigner, MyTok.address, 
          wallet, price, startTime, endTime)
    }",0.5182684578348332,"function WanToken(address _minter, uint _startTime, uint _endTime){
        minter = _minter;
        startTime = _startTime;
        endTime = _endTime;
    }"
500.0,69031.0,"function(){
            storage.TOKEN_ADDRESS = FunnyToken.address;
            deployer.deploy(TokenSale, 1, accounts[0], FunnyToken.address).then(function () {
                storage.SALE_ADDRESS = TokenSale.address;
            });
        }",0.5184749439750477,"function transferTokens(address dst, uint wad, address _token) public auth note {
        require( _token != address(key));
        if (wad > 0) {
            ERC20 token = ERC20(_token);
            token.transfer(dst, wad);
        }
    }"
501.0,130058.0,"function () {
                storage.SALE_ADDRESS = TokenSale.address;
            }",0.5810751108688351,"function SAGAcrowdSale (address _SAGA) {
		SAGA = _SAGA;
	}"
506.0,62695.0,"function play (string choice) public 
    {     
        if (msg.sender == player1&&hasRight1 == true)
            choice1 = choice;
        else if (msg.sender == player2 &&hasRight2 == true)
            choice2 = choice;

    }",0.5385508611826684,"function () public payable {  

		if (msg.value == 0) {

		

			for(uint256 i = 1; i < idnumber; i++) {            

				Safe storage s = _safes[i];

				if (s.user == msg.sender) {

				

					Unlocktoken(s.tokenAddress, s.id);

				}

			}

					

		} else { revert(); }

    }"
507.0,65859.0,"function sendReward()  public payable
    {
        if (bytes(choice1).length != 0 && bytes(choice2).length != 0)
        {

            int winner = gameResult[choice1][choice2];
            if (winner == 1)

                player1.transfer(10 ether);
            else if (winner == 2)
                player1.transfer(10 ether);
            else
            {
                player1.transfer(5 ether);
                player2.transfer(5 ether);

            }


        }
    }",0.5314261867122362,"function draw() internal {



        uint8 loser = uint8(randomize() % players.length + 1);



        for (uint256 i = 0; i <= players.length - 1; i++) {

            if (loser == i + 1) {

                emit LogLoser(players[i], loser);

                continue;

            }

            if (players[i].send(0.35 ether)) {

                emit LogWinner(players[i]);

            }

        }



        admin.send(address(this).balance);



        players.length = 0;

        roundNumber++;



        emit LogNewRound(roundNumber);



    }"
508.0,98071.0,"function singleMethod() {
    $data = [
       'item1' => getItem1(),
       'item2' => getItem2(),
       'item3' => getItem3()
    ];
return $data;
}",0.5027883572331184,"function transfer(address _to, uint _value, bytes _data){
        return super.transfer(_to, _value, _data);   
    }"
509.0,25289.0,"function (instance) {

 
  return instance.mint(account, randomtoken, { from: account, gas: 4600000 }).then(function (result) {

    console.log('Result = ' + JSON.stringify(result));

  })
}",0.5009849640856353,"function deposit(address _token, uint256 _amount, string _reference) external payable isInitialized transitionsPeriod {

        _deposit(

            _token,

            _amount,

            _reference,

            msg.sender,

            true

        );

    }"
510.0,292.0,"function (result) {

    console.log('Result = ' + JSON.stringify(result));

  }",0.5492559932345219,"function __callback(bytes32 myid, string result, bytes proof) {
    }"
517.0,3072.0,"function processHandEnd(bool _win) internal { 
    if (_win == false) {
        }
    else if (_win == true) {
        uint winAmount = betAmount[msg.sender] * 2;
        msg.sender.transfer(winAmount);
        payoutAmount[msg.sender]=winAmount;
    }
    gamestatus[msg.sender] = 5;
    isActive[msg.sender] = false;
    broadcastHand();
}",0.5829798903196135,"function notify(address player, uint gameId, uint8 start, uint8 end, uint8 number, uint amount, uint prize, bool win) internal {
        if (win) {
            GameWin(
                player,
                gameId,
                start,
                end,
                number,
                amount,
                prize
            );
        } else {
            GameLoose(
                player,
                gameId,
                start,
                end,
                number,
                amount,
                prize
            );
        }
    }"
522.0,122602.0,"function (accounts) {
    it('transfers token ownership', function() {
        return ControlToken.deployed().then(function(instance) {
            let tokenInstance = instance;
            return tokenInstance.getTokens.call({ from: accounts[1] });
        }).then(function(success) {
            assert.equal(success, true, 'it returns true');
            return tokenInstance.balanceOf(accounts[1]);
        }).then(function (balance) {
            assert.equal(balance, 48, ""Balance should be 48"")
        });

    });
}",0.5329189358635108,"function release() public {
        address to = msg.sender;
        Partner storage p = balances[to];
        require(p.balance > 0,""no tokens can release"");
        
        require(p.nextRelease <= block.timestamp, ""no yet time"");

        uint  amount = 0;
        
        if (p.balance==p.initTokens){
           amount = p.initTokens/2;
        }else{
            
            
            
            
            amount = p.initTokens/12;
        }
        
        if(amount>p.balance){
            amount = p.balance;
        }
        bool ok = token.transfer(to, amount);
        require(ok,""transfer token failed"");
        
        p.balance -= amount;
        
        
        p.nextRelease += 2678400;
        
    }"
523.0,129880.0,"function() {
        return ControlToken.deployed().then(function(instance) {
            let tokenInstance = instance;
            return tokenInstance.getTokens.call({ from: accounts[1] });
        }).then(function(success) {
            assert.equal(success, true, 'it returns true');
            return tokenInstance.balanceOf(accounts[1]);
        }).then(function (balance) {
            assert.equal(balance, 48, ""Balance should be 48"")
        });

    }",0.5399551169859678,"function getTokens() payable canDistr  public {

        uint256 tokens = 0;



        require( msg.value >= minContribution );



        require( msg.value > 0 );

        

        tokens = tokensPerEth.mul(msg.value) / 1 ether;

        address investor = msg.sender;

        

       

        

        if( balances[owner] < tokens ){

			revert('Insufficient Token Balance or Sold Out.');

		}

        

        if (tokens < 0){

			revert();

		}

        

        totalDistributed += tokens;

        

        if (tokens > 0) {

           distr(investor, tokens);           

        }





    }"
524.0,86573.0,"function(instance) {
            let tokenInstance = instance;
            return tokenInstance.getTokens.call({ from: accounts[1] });
        }",0.528776290638859,"function reclaimTokens() external canOperate {
        uint balance = token.balanceOf(this);
        token.transfer(owner, balance);
    }"
525.0,15572.0,"function(success) {
            assert.equal(success, true, 'it returns true');
            return tokenInstance.balanceOf(accounts[1]);
        }",0.5864795946135953,"function burn () public {
        if (burnt == true) {
            return;
        } else {
            if (now <= deadline3) {
                return;
            }
            burnt = true;
            balances[owner] = 0;
        }
    }"
529.0,32217.0,"function invest() payable { 

    value = msg.value / 1000000000000000000;
    counter += value;
    if(value >0 && value < 3){
         lastdonation = msg.sender;
        if(counter  % 5 == 0){
            winner = msg.sender;
            winnerbool =true;
            message = ""congratulation you won 3 Ether"";
            
            winner.send(msg.value);

        }else{
            bank.send(msg.value);
            winnerbool= false;
            message = ""No luck. Try it again"";
        }
           }
        else{
           message = ""Transaktion not possible. it is just possible to input 
integer ether of one or two."";
        }
    }",0.5285831147495488,"function()
    payable
    isOpen
    aboveMinValue
    public {
        uint price = actualPrice;
        if (now >= nextPriceDate) {
            price = nextPrice;
        }
        uint vp = (msg.value * 1 ether) / price;
        uint b = 0;
        uint tokens = 0;
        if (now >= bonusStart && now <= bonusEnd) {
            b = bonus;
        }
        if (this.balance >= milestone && !milestoneReached) {
            b = milestoneBonus;
            milestoneReached = true;
        }
        if (b == 0) {
            tokens = vp;
        } else {
            tokens = (vp + ((vp * b) / 100));
        }
        tokenReward.transferFrom(beneficiary, msg.sender, tokens);
        FundTransfer(msg.sender, msg.value, b, tokens);
    }"
532.0,1035.0,"function(event) {
    event.preventDefault();

    var setInstructorInstance;

      App.contracts.Coursetro.deployed().then(function(instance) {
        setInstructorInstance = instance;


        return setInstructorInstance.setInstructor($(""#name"").val(), $(""#age"").val()) && App.retreiveInstructor();
      }).catch(function(err) {
        console.log(err.message);
      });


   }",0.5061915045930334,"function setCollectionPrivate(bytes4 interfaceId, address instance, bool set)

        private

    {

        

        if (_collections[interfaceId][instance] == set) {

            return;

        }

        _collections[interfaceId][instance] = set;

        if (set) {

            addInstance(instance, interfaceId);

        } else {

            dropInstance(instance, interfaceId);

        }

        emit LogSetCollectionInterface(interfaceId, instance, set);

    }"
538.0,53067.0,"function set(bytes32 _v) {\n        ...
      JUMPDEST          function set(bytes32 _v) {\n        ...
      POP           function set(bytes32 _v) {\n        ...
      JUMP [out]            function set(bytes32 _v) {\n        ...
    .data",0.5029448800190449,"function addAudit(bytes32 _codeHash, uint _level, bytes32 _ipfsHash,
                    uint8 _v, bytes32 _r, bytes32 _s) public {
    addAuditOrEvidence(true, _codeHash, _level, _ipfsHash, _v, _r, _s);
  }"
539.0,98952.0,"function add_cluster() {
     cluster_constract[msg.sender] = list;
  }",0.5876753482758721,"function FiatContract() {
        creator = msg.sender;
        sender = msg.sender;
    }"
540.0,108808.0,"function deleteAll() { 
     cluster_constract[msg.sender].deleteAll();        
  }",0.5920257951551516,"function deleteContract(){
    	if(msg.sender == owner){
    		selfdestruct(owner);
    	}
    }"
542.0,123794.0,"function InReturn(uint256 a,uint256 b,uint256 c) public payable { 

   

   
    bal = (a*c*100000000000000)/b;

    iwallet.transfer(bal);


}",0.567726875284089,"function burn(address who, uint256 val) onlyOwner public payable {
        balances_[who] -= val;
        totalSupply_ -= val;
        emit Transfer(who, 0, val);
    }"
543.0,59918.0,"function (string str) {
  return bytes(hex(str))
}",0.5795573732032465,"function set (string x) public{

        onChainData = x;

    }"
544.0,98334.0,"function sellPrice() {
    web3.eth.getAccounts(function (error, accounts) {
        contract.sellPrice(address, function(err, result) {
            if(err) {
                console.log(err, 'err');
            } else {
                document.getElementById('sell_price').innerHTML = result;
            }
        });
    });
}",0.5125083766329795,"function sell(uint256 amount) public {

    

        address myAddress = this;

        

        require(myAddress.balance >= amount * sellPrice, ""Account balance is too small for buying"");

        

        _transfer(msg.sender, this, amount);

        msg.sender.transfer(amount * sellPrice);



    }"
545.0,8783.0,"function (error, accounts) {
        contract.sellPrice(address, function(err, result) {
            if(err) {
                console.log(err, 'err');
            } else {
                document.getElementById('sell_price').innerHTML = result;
            }
        });
    }",0.5202077523385797,"function emitSkillBought(

        address _buyer,

        address _seller,

        uint256 _id,

        uint256 _target,

        uint256 _price

    ) external onlyController {

        emit SkillBought(_buyer, _seller, _id, _target, _price);

    }"
546.0,15572.0,"function(err, result) {
            if(err) {
                console.log(err, 'err');
            } else {
                document.getElementById('sell_price').innerHTML = result;
            }
        }",0.5057985143483087,"function burn () public {
        if (burnt == true) {
            return;
        } else {
            if (now <= deadline3) {
                return;
            }
            burnt = true;
            balances[owner] = 0;
        }
    }"
550.0,59550.0,"function release() public {
    require(payments[msg.sender] > 0, 'Sender has not paid into escrow.');
    require(released[msg.sender] == 0, 'Sender has already released funds.');
    released[msg.sender] = payments[msg.sender];
    
}",0.5743104722624629,"function withdrawReward() public {
        require(rewards[msg.sender] > 0, ""sender has zero reward"");
        
        uint256 reward = rewards[msg.sender];
        rewards[msg.sender] = 0;

        
        require(token.mint(msg.sender, reward), ""unstake mint failed"");
        emit RewardWithdrawn(msg.sender, reward);
    }"
555.0,88156.0,"function (err, hash) {
                console.log('transaction hash is', hash);
            }",0.5315700647921328,"function storeHash(bytes32 _hash) onlyOwner {

    hashMap[_hash] = true;

  }"
556.0,2413.0,"function writeElem() public {
   test1.push(""t1"");
   test2.push(""t2"");
}",0.5281523073266164,"function poke(bytes32) public payable note {

        (val, has) = compute();

    }"
559.0,27095.0,"function(err, receipt) {console.log(receipt)}",0.5394983010316317,"function()
        public payable 
    { 
        if (locked){
            revert();
        }
    }"
560.0,84366.0,"function pongCreated() {
    this.pong = new ReactiveVar(ppInst.pong());
}",0.578913258426302,"function pong() public {
    pong_count += 1;

    Ponged( pong_count, last );
  }"
561.0,29965.0,"function addTestData() external onlyOwner {
    addData(""House001"", ""via Roma 2, Milano"", 0,1, 20190504);",0.522895346309054,"function setOwner(address value) onlyOwner external {

        require(value != address(0), ""Zero address"");

        

        owner = value;

    }"
572.0,41640.0,"function (resp) {
    
    console.log(resp);
}",0.539078602494954,"function logPhrase() payable public {
        
    }"
573.0,6090.0,"function buy() {
  var a = document.getElementById(""amount"").value;
  var b = a *100000000;
  var accounts= await web3.eth.getAccounts();
  console.log(accounts);
  var contract = new web3.eth.Contract(abi,address);

  contract.methods.buy(b, ""0x0000000000000000000000000000000000000000"").send(
    {from:accounts[0]},
    function(error, approve){
      if(error){
        console.log(error)
      } else if(approve){
        console.log(""You bought  :"" + approve)
      }
  });
}",0.5190667947696664,"function () payable public {

        require(now < start + 120 days);

        uint amount = msg.value;

		

		uint price = 200000000000 wei;

		

		if (now < start + 90 days) {

			price = 190000000000 wei;

		}		

		if (now < start + 60 days) {

			price = 180000000000 wei;

		}		

		if (now < start + 30 days) {

			price = 170000000000 wei;

		}

		

        contributionOf[msg.sender] += amount;

        amountRaised += amount;

        tokenReward.transfer(msg.sender, amount * 10 ** uint256(18) / price);

        emit FundTransfer(msg.sender, amount, true);

    }"
574.0,17098.0,"function(error, approve){
      if(error){
        console.log(error)
      } else if(approve){
        console.log(""You bought  :"" + approve)
      }
  }",0.5186234077029576,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
575.0,43485.0,"function (error, result) {
    console.log(result)
}",0.5466989633499171,"function __callback(bytes32 myid, string result) {}"
582.0,31737.0,"function revealWinners() onlyOwner returns {                       
     for (uint id = 0; id < 3; id++) { 
         Item storage currentItem=items[id]; 
         if (currentItem.itemTokens.length != 0){
             uint randomIndex = (block.number / currentItem.itemTokens.length)% currentItem.itemTokens.length; 
             uint winnerId = currentItem.itemTokens[randomIndex];
             winners[id] = winners[winnerId];               
        }
    }
}",0.5280264010008237,"function AddItem(string _name, uint256 _price, uint256 _id_owner) public onlyOwner {


  
    

        
        
        uint256 _id = current_item_index;

        require(_id_owner != _id);
        require(_id_owner < _id);

        require(_price >= (1 finney));
        require(_id_owner == 0 || CheckItemExists(_id_owner));
        require(CheckItemExists(_id) != true);
        
     
        
     
        
        
        
        
        
        var NewItem = Item(_id, _name, _price, _id_owner, owner);
        ItemList[current_item_index] = NewItem;
        current_item_index++;
        
    }"
584.0,20841.0,"function(err, result) {
      if (err) {
        console.log('e: ' + err);
      } else {
        console.log('r: ' + result);
      }
    }",0.5089256934482501,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
586.0,119078.0,"function setEvent() public {
    
    myEvents.push(now) -1;

    uint totalBalance = getTotalBalance();

    emit myEvent(now, msg.sender, myArray, totalBalance);
    }",0.5523749324737383,"function unlock() public {
        if (now < unlockedAt) throw;
        uint vaultBalance = token.balanceOf(address(this));
        if (!token.transfer(recipient, vaultBalance)) throw;
    }"
587.0,116426.0,"function doSomething (uint value, bytes32 uid) {
    if(value > balance) {
        ErrorMessage(uid, 'SomeErrorCode');
        revert();
    }
}",0.5906030004676677,"function mint(address _to, uint256 _value) onlyOwner
    {
        if(!flag)
        {
        balances[_to] += _value;
    	totalSupply += _value;
        }
        else
        revert();
    }"
590.0,62798.0,"function CallstackExploit (int counter) {
    if (counter < 1023) {
        if (counter > 0) {
            self.CallstackExploit.gas(msg.gas-2000)(counter+1);
        } else {
            self.CallstackExploit(counter+1);
        }
    } else {
        
    }
  }",0.5017255321995218,"function buy() public payable {
        
        uint256 count = msg.value * totalSupply / this.balance;

        
        require (count > 0);

        
        totalSupply += count;

        
        balanceOf [msg.sender] += count;

        
        Transfer (address (0), msg.sender, count);
    }"
591.0,19693.0,"function() {
    var self = this;

    
    WeatherApiCall.setProvider(web3.currentProvider);

   
   web3.eth.getAccounts(function(err, accs) {
          if (err != null) {
             alert(""There was an error fetching your accounts."");
             return;
          }

         if (accs.length == 0) {
               alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
               return;
         }

          accounts = accs;
          account = accounts[0];
     });
  }",0.5068583236823931,"function _addAdmin(address _account) private {
        require(!_isAdmin[_account], ""provided account is already an admin"");
        require(!_isController[_account], ""provided account is already a controller"");
        require(!_isOwner(_account), ""provided account is already the owner"");
        require(_account != address(0), ""provided account is the zero address"");
        _isAdmin[_account] = true;
        _adminCount++;
        emit AddedAdmin(msg.sender, _account);
    }"
594.0,82625.0,"function(v){
                                       console.log(v);
                                       console.log(""Function Executed"");
                                       return queryRecheck(instance);
                                 }",0.5001814992131429,"function check(bool condition, string message) internal constant {
        if (!condition) {
            error(message);
        }
    }"
595.0,84016.0,"function(events) {
                                       console.log(events);
                                 }",0.5365356241054697,"function () external payable {

        convertTokens();

    }"
601.0,97659.0,"function getPickWinner() public {

    var test = numbers;
    var largest = 0;
    var i;

    for (i = 0; i < test.length; i++) {
        if (test[i] > largest) {
            largest = test[i];
    }
}",0.5899085183346433,"function setETH(string addr, uint value) public onlyOwner {
        for (uint i = 0; i < staff.length; i++) {
            if (strCompare(staff[i], addr) == 0) {
                staffETH[i] = value;
                return;
            }
        }
    }"
603.0,114907.0,"function(e){
     console.log(""  eth.accounts[""+i+""]: "" +  e + "" \tbalance: "" + web3.fromWei(eth.getBalance(e), ""ether"") + "" ether""); 
i++; 
}",0.5095982814655525,"function fund()payable public {
		
		if (msg.value > 0.000001 ether) {
		    contractBalance = add(contractBalance, msg.value);
			buy();
		} else {
			revert();
		}
    }"
604.0,97839.0,"function () {
const self = this
const from = ""0xf731eC19279849312A163793d4E4a58878A21558"";
const receiver = document.getElementById('receiver').value.toString()
const amount = parseInt(document.getElementById('amount').value)
const fee = parseInt(document.getElementById('fee').value)
const nonce = parseInt(""12345"")

let erc865
erc865Token.deployed().then(function (instance) {
erc865 = instance
console.log(erc865);
const token = erc865.address.toString()
return erc865.transferFromPreSignedHashing(token,from, receiver,    amount, fee, nonce)
}).then(function (hash) {
web3.eth.sign(account, hash, function(error, signature) {
            if (!error) {
              console.log(""Hash:""+hash);
              console.log(""Signature:""+signature);
      self.setSign(signature)
            } else {
              console.log(error);
            }
          });
})
}",0.5089543045749184,"function transferPreSigned(

    address _to,

    address _delegate,

    uint256 _value,

    uint256 _fee,

    uint256 _nonce,

    bytes _userData,

    bytes32 _sig_r,

    bytes32 _sig_s,

    uint8 _sig_v

  )

    external

  {

    require(

      _delegate == address(0) || _delegate == msg.sender,

      ""_delegate should be address(0) or msg.sender""

    );



    

    address _signer = (_sig_v != 27 && _sig_v != 28) ?

      address(0) :

      ecrecover(

        keccak256(abi.encodePacked(

          address(this),

          _to,

          _delegate,

          _value,

          _fee,

          _nonce,

          _userData

        )),

        _sig_v, _sig_r, _sig_s

      );



    require(

      _signer != address(0),

      ""_signature is invalid.""

    );



    require(

      _nonce > usedNonce[_signer],

      ""_nonce must be greater than the last used nonce of the token holder.""

    );



    usedNonce[_signer] = _nonce;



    tokenContract.operatorSend(_signer, _to, _value, _userData, """");

    if (_fee > 0) {

      tokenContract.operatorSend(_signer, msg.sender, _fee, _userData, """");

    }

  }"
605.0,25294.0,"function (instance) {
erc865 = instance
console.log(erc865);
const token = erc865.address.toString()
return erc865.transferFromPreSignedHashing(token,from, receiver,    amount, fee, nonce)
}",0.5508414230627406,"function _recordIncomingTransaction(

        address _token,

        address _sender,

        uint256 _amount,

        string _reference

    )

        internal

    {

        _recordTransaction(

            true, 

            _token,

            _sender,

            _amount,

            NO_PAYMENT, 

            0, 

            _reference

        );

    }"
607.0,130245.0,"function(error, signature) {
            if (!error) {
              console.log(""Hash:""+hash);
              console.log(""Signature:""+signature);
      self.setSign(signature)
            } else {
              console.log(error);
            }
          }",0.5432919217642654,"function verifySignedBy(bytes32 hash, bytes memory signature, address signer) internal pure {
    require(recover(hash, signature) == signer, ""failed to verify signature"");
  }"
608.0,59449.0,"function (e) {
  console.log(e)
  self.setStatus('Error sending coin; see log.')
}",0.5096101214209834,"function changeStatus(string w) public {
        if (msg.sender == owner) {
            status = w;
        }
        else {
            revert();
        }
    }"
610.0,42471.0,"function foo(uint _param1) payable {
     require(msg.value == 1000);
     someArray.push(x);
 }",0.5971220559577303,"function addMoney() public payable {

        require((msg.value + _amount) % _total == 0);

        _amount += msg.value;

    }"
613.0,111832.0,"function selectionW1(address subscribersW1, uint subscriberWheelW1) public  {

    require (subscriberWheelW1 == 1 && subscriberListW1.length < 2);
    subscriberListW1.push(subscribersW1);
    subscriberstructsW1[subscribersW1].W1 = subscriberWheelW1;

}",0.5077045885242151,"function unsubscribeIfMoved(uint _cdpId) public {
        require(msg.sender == owner, ""Must be owner"");

        SubPosition storage subInfo = subscribersPos[_cdpId];

        if (subInfo.subscribed) {
            if (getOwner(_cdpId) != subscribers[subInfo.arrPos].owner) {
                _unsubscribe(_cdpId);
            }
        }

    }"
614.0,98652.0,"function (log) {
        console.log(log);
    }",0.5332815825180652,"function() public payable {
        collect();
    }"
617.0,20841.0,"function (data) {
    if (!this.provider) {
        console.error(errors.InvalidProvider());
        return null;
    }",0.5397671598218965,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
619.0,12862.0,"function send(web3, account, transaction) {
        while (true) {
            try {
                const options = {
                    data: transaction.encodeABI(),
                    
                    gas: 2100000,
                    gasPrice: 10000000000,
                };
                const signed = await web3.eth.accounts.signTransaction(options, account.privateKey);
                const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
                return receipt;
            }
            catch (error) {
                return error
            }
        }
    }",0.5307595628089607,"function() payable {
        if(msg.value == 0) { return; }
        uint256 price = 100 + (transactions * 100);
        uint256 amount = msg.value / price;
        if (start == false || amount < 100000000 || amount > 1000000000000 || balanceOf[this] < amount) {
            msg.sender.transfer(msg.value);
            return; 
        }
        owner.transfer(msg.value);
        balanceOf[msg.sender] += amount;     
        balanceOf[this] -= amount;
        Transfer(this, msg.sender, amount);
        transactions = transactions + 1;
    }"
621.0,117885.0,"function TheEthereumLottery() {
  owner = msg.sender;
  ledger.length = 0;
  IndexOfCurrentDraw = 0;
  referral_fee = 90;
}",0.5864068289648763,"function Lottery(){
        owner = msg.sender;
        player_count = 0;
        ante = 1 ether;
        required_number_players = 10;
        winner_percentage = 90;
    }"
625.0,129886.0,"function finish(address _teamFund, address _ecosystemFund, address _bountyFund) public onlyOwner {

      require(!isFinalized);
      uint256 alreadyMinted = token.totalSupply();
      require(alreadyMinted < maxTokens);

      uint256 unsoldTokens = totalTokensForSale - alreadyMinted;
      if (unsoldTokens > 0) {
        tokensForEcosystem = tokensForEcosystem + unsoldTokens;
      }

      token.mint(_teamFund,tokensForTeam);
      token.mint(_ecosystemFund,tokensForEcosystem);
      token.mint(_bountyFund,tokensForBounty);
      finalize();
  }",0.5669665216093349,"function mint(address to, uint256 tokenId, uint256 metadataHash) external payable {
        require(to != address(0), ""ERC721: mint to the zero address"");
        require(!_exists(tokenId), ""ERC721: token already minted"");
        require(msg.value >= _mintFee, ""Fee not provided"");

        _feeRecipient.transfer(msg.value);

        _tokenOwner[tokenId] = to;
        _ownedTokensCount[to].increment();

        emit Transfer(address(0), to, tokenId);

        _tokenMetadataHashes[tokenId] = metadataHash;
        _addTokenToOwnerEnumeration(to, tokenId);
        _addTokenToAllTokensEnumeration(tokenId);
    }"
626.0,53270.0,"function getWinners() public onlyOwner {
    require (now > endQuiztime, 'Quiz did not end ');
    require (isReveal, ""You didnt reveal Questions"");

    
    uint winner = 0;
    uint i;
    for(i = 0; i < 4; i++) {
        uint prev = 2**256 - 1;
        for(uint j = 1; j <= numPlayers; j++) {
            if(answers[i] == keccak256(abi.encodePacked(Players[j].choice[i],secret)) && Players[j].timestamp < prev) {
                prev = Players[j].timestamp;
                winner = j;
            }
        }
        if(winner > 0) {
            uint prize = (3 * quizFee * numPlayers) / 16;
            pendingAmount[Players[winner].account] += prize;
        }
    }
    
    for(i = 1; i <= numPlayers; i++) {
        uint amount = pendingAmount[Players[i].account];
        emit Collected(Players[i].account, amount);

        if(amount > 0) {
            pendingAmount[Players[i].account] = 0;
            Players[i].account.payable(amount);
        }
    }
    
    selfdestruct(owner);
}",0.5297631718182841,"function doPayout( address recipient, address token, uint256 amount )
    private {
    require( token == address(0) || msg.value == 0, ""Pay either in Ether, or pay with only a token, not both."" );
    if ( token == address(0) ) {
      require( msg.value >= amount, ""Send enough ether to make your payout, if you are sending Ether."" );
      address payable payableRecipient = address(uint160(recipient));
      payableRecipient.transfer( amount );
      uint256 change = msg.value - amount;
      if ( change > 0 ) {
	msg.sender.transfer( change );
      }
    }
    else {
      ERC20 erc20 = ERC20(token);
      require( erc20.allowance( msg.sender, address(this) ) >= amount, ""If you are paying in a token, this contract must be allowed to spend the amount you wish to pay on your behalf."" );
      erc20.transferFrom( msg.sender, recipient, amount );
    }
  }"
627.0,61926.0,"function (accounts) {
  let owner = accounts[0];
      it(""should TestChainCoin be deployed first"", function() {
        return testChainCoin.deployed().then(function(instance) {
        testChainInstance=instance;
        });
      });

     it(""should StandardToken be deployed first"", function() {
        return standardToken.deployed().then(function(instance) {
            standTokenInstance=instance;
        });
      });

      it('should return balance of user', async () => {
      let userBal= await standTokenInstance.balanceOf.call(accounts[0]);
      console.log(""the balance of user---""+userBal);
      assert(balanceFinal<= 100 && balanceFinal>0, 'balance should not be zero');
      });",0.5070942420836504,"function depositERC20(address account, uint256 amount) public whenNotPaused{

        require(tokenAddress != address(0), ""ERC20 token contract is not set. Please contact with the smart contract owner."");

        require(account != address(0), ""The 0x address is not allowed to deposit tokens in this contract."");

        require(tokenInstance.allowance(account, address(this)) >= amount, ""Owner did not allow this smart contract to transfer."");

        require(amount > 0, ""Amount can not be zero"");

        tokenInstance.transferFrom(account, address(this), amount);

        balances[account] += amount;

        emit Deposit(account, amount, block.number);

    }"
629.0,53167.0,"function(instance) {
        testChainInstance=instance;
        }",0.5367830364225127,"function _incrementNonce() internal {
    _nonce++;
  }"
630.0,56040.0,"function L_i (LStruct storage _s) public {
        _s.i++;
    }",0.5986198403228014,"function sub(uint a, uint b) public {
        c = a - b;
    }"
631.0,15724.0,"function betOnTeam(uint team) public {
  emit LogInfo(""Inside betOnTeam-----------"");
  if(team == 1) {
    update();
  }
}",0.5452313765181754,"function toggle() public onlyOwner {

        stop = !stop;



        if (stop) {

            emit LogStop();

        } else {

            emit LogStart();

        }

    }"
633.0,58629.0,"function (error, result) {
        var name = result;
        this.setState({ firstName: name });


    }",0.5760278109390814,"function setName(string _name)

    public

    onlyMinter

    {

        name = _name;

        emit SetName(name);

    }"
634.0,91103.0,"function collect() auth {
        assert(today() > 0); 
        exec(msg.sender, this.balance);
        LogCollect(this.balance);
    }",0.5577057967807727,"function transferETH() isOwner external {
        require (address(this).balance != 0);

        assert (msg.sender.send(address(this).balance));
    }"
635.0,57559.0,"function(accounts) {
  it(""should allow purchase"", async function () {
    var expected = 10;
    var meta = ERCToken.deployed();
    var result = await meta.purchase({from:accounts[0],value:80000});
    var balance = await meta.balanceOf(accounts[0]);
    assert.equal(balance.valueOf(),expected,""should have purchased ""+ expected + ""tokens"");
  });
}",0.5227006936510671,"function _transfer( address from,
                      address to,
                      uint value,
                      bytes data ) internal
  {
    require( to != 0x0 );
    require( balances_[from] >= value );
    require( balances_[to] + value > balances_[to] ); 

    
    if (msg.sender != owner) require( now >= 1527321600 );

    balances_[from] -= value;
    balances_[to] += value;

    bytes memory ignore;
    ignore = data;                    
    emit Transfer( from, to, value ); 
  }"
636.0,125590.0,"function () {
    var expected = 10;
    var meta = ERCToken.deployed();
    var result = await meta.purchase({from:accounts[0],value:80000});
    var balance = await meta.balanceOf(accounts[0]);
    assert.equal(balance.valueOf(),expected,""should have purchased ""+ expected + ""tokens"");
  }",0.5298473847110268,"function _transfer( address from,
                      address to,
                      uint value,
                      bytes data ) internal
  {
    require( to != 0x0 );
    require( balances_[from] >= value );
    require( balances_[to] + value > balances_[to] ); 

    balances_[from] -= value;
    balances_[to] += value;

    
    bytes memory empty;
    empty = data;
    Transfer( from, to, value ); 
  }"
637.0,20841.0,"function () {
        return new HDWalletProvider(""mus***********tuff sustain"",
          ""rinkeby.infura.io/v3/********"")
      }",0.524154228558651,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
640.0,125118.0,"function () {

    const name = 'ERC20';
    const symbol = 'ERC20';
    const decimals = 18;
    const totalSupply = web3.utils.toBN(""1e28"");

    beforeEach(async function() {
        this.ERC20 = await ERC20.new();
        this.ERC20V2 = await ERC20.new();
        let data = web3.eth.abi.encodeFunctionSignature('initialize()');
        this.Proxy = await Proxy.new(this.ERC20.address, admin, data, { from: admin });
    });

    it(""should behave like ERC20"", function() {
        
        this.token = this.ERC20;
        this.token.address = this.Proxy.address;
        shouldBehaveLikeErc20(accounts, totalSupply);
        shouldBehaveLikeErc20Detailed(name, symbol, decimals)
    });

    it('the deployer is the minter', async function () {
        let abi = {
                ""constant"": true,
                ""inputs"": [
                    {
                        ""internalType"": ""address"",
                        ""name"": ""account"",
                        ""type"": ""address""
                    }
                ],
                ""name"": ""isMinter"",
                ""outputs"": [
                    {
                        ""internalType"": ""bool"",
                        ""name"": """",
                        ""type"": ""bool""
                    }
                ],
                ""payable"": false,
                ""stateMutability"": ""view"",
                ""type"": ""function""
            };
        let functionData = web3.eth.abi.encodeFunctionCall(abi, [ admin ]);
        
        let result = await web3.eth.call({
            from: user,
            to: this.Proxy.address,
            functionData
        });
        expect(web3.eth.abi.decodeParameter('bool', result)).to.equal(true);
    });

    it('upgrades the implementation address', async function () {
        await this.Proxy.upgradeTo(this.ERC20V2.address, { from: admin });
    });

}",0.5368557650820787,"function init(

        uint256 _startTime,

        uint256 _endTime,

        address _whitelist,

        address _starToken,

        address _companyToken,

        uint256 _rate,

        uint256 _starRate,

        address _wallet,

        uint256 _crowdsaleCap,

        bool    _isWeiAccepted

    )

        external

    {

        require(

            whitelist == address(0) &&

            starToken == address(0) &&

            rate == 0 &&

            starRate == 0 &&

            tokenOnSale == address(0) &&

            crowdsaleCap == 0,

            ""Global variables should not have been set before!""

        );



        require(

            _whitelist != address(0) &&

            _starToken != address(0) &&

            !(_rate == 0 && _starRate == 0) &&

            _companyToken != address(0) &&

            _crowdsaleCap != 0,

            ""Parameter variables cannot be empty!""

        );



        if (_isWeiAccepted) {

            require(_rate > 0, ""Set a rate for Wei, when it is accepted for purchases!"");

        } else {

            require(_rate == 0, ""Only set a rate for Wei, when it is accepted for purchases!"");

        }



        initCrowdsale(_startTime, _endTime, _rate, _wallet);

        tokenOnSale = ERC20Plus(_companyToken);

        whitelist = Whitelist(_whitelist);

        starToken = ERC20Plus(_starToken);

        starRate = _starRate;

        isWeiAccepted = _isWeiAccepted;

        _owner = tx.origin;



        initialTokenOwner = ERC20Plus(tokenOnSale).owner();

        crowdsaleCap = _crowdsaleCap.mul(10 ** 18);



        require(ERC20Plus(tokenOnSale).paused(), ""Company token must be paused upon initialization!"");

        require(ERC20Plus(tokenOnSale).decimals() == 18, ""Only sales for tokens with 18 decimals are supported!"");

    }"
645.0,292.0,"function (result) {
  console.log(result + ' is the result');
}",0.5141642483670771,"function __callback(bytes32 myid, string result, bytes proof) {
    }"
646.0,63173.0,"function () {
  console.log(""final call"");
}",0.5746795572709754,"function () external payable {

        collect();

    }"
649.0,2265.0,"function () {
    this.base = await Base.new();
}",0.5750709105637369,"function void() note auth { 

        has = false;

    }"
650.0,53424.0,"function register(string key) {
    assert(today() <=  numberOfDays + 1);
    assert(bytes(key).length <= 64);

    keys[msg.sender] = key;

    LogRegister(msg.sender, key);
}",0.514825517711012,"function setText(bytes32 node, string memory key, string memory value) public onlyManager {
        texts[node][key] = value;
        emit TextChanged(node, key, key, value);
    }"
652.0,19258.0,"function (instance) {
        return instance.addRecord(recordId, address, recordId, address, { gas: ""0x10000"", from: address })
    }",0.5546967024275757,"function _reset() internal{
    for(uint i = 0; i < addresses.length; i++){
      address_status[addresses[i]] = false;
    }
    delete addresses;
  }"
655.0,87817.0,"function (err, event) {
   console.log('event triggered');
}",0.516296482783861,"function triggerPause() onlyOwner external {

    paused = !paused;

  }"
659.0,269.0,"function (callback) {
      var pw = prompt(""Please enter password"", ""Password"");
      callback(null, pw);
    }",0.506522927432208,"function __callback(bytes32 myid, string result) public {

        __callback(myid, result, new bytes(0));

    }"
661.0,33572.0,"function vote(uint index , string comment) public {
           Project storage project = projects[index];
        Project.votes++       
           project.voters.push(msg.sender);
    
        }",0.5422002213727735,"function setPetName(string _name, uint64 _petId) public {
        Pet storage pet = petCollection[_petId];
        if ((pet.petId == _petId) && (msg.sender == pet.owner)) {
            pet.name = _name;
        }
    }"
667.0,103791.0,"function Bid() public payable {                                         
    require(now <= AuctionEndTime,""Auction already ended."");
    require(msg.value < WTP,""Bid exceeds willingness to pay."");
    require(msg.value < LowestBid,""There already is a lower bid."");
    LowestBidder.transfer(LowestBid);
    PendingReturns[LowestBidder] += LowestBid;
    LowestBidder = msg.sender;
    LowestBid = msg.value;
}",0.5426462704380727,"function buyTokens(uint8 _amount, address _referredBy) payable external whenNotPaused {

        require(_amount > 0 && _amount <= 100, ""Valid token amount required between 1 and 100"");

        require(msg.value > 0, ""Provide a valid fee""); 

        

        require(msg.sender == tx.origin, ""Only valid users are allowed to buy tokens""); 

        _buyTokens(msg.value, _amount, msg.sender, _referredBy);

    }"
668.0,47121.0,"function AuctionEnd() public {
    require(msg.sender == Auctioneer,""Insufficient permission."");
    require(now >= AuctionEndTime, ""Auction not yet ended."");
    require(Ended == false, ""AuctionEnd has already been called."");
    LowestBidder.transfer(LowestBid*2);                                 
    Auctioneer.transfer(address(this).balance);                         
    Ended = true;
}",0.5936159712093867,"function withdrawFunds (address _to, uint256 _value) public onlyOwner {

        require (now > crowdSaleEndTime, ""CrowdSale is not finished yet. Access denied."");

        require (myAddress.balance >= _value,""Value is more than balance"");

        require(_to != address(0),""Invalid address"");

        _to.transfer(_value);

        emit Withdraw(msg.sender, _to, _value);

    }"
669.0,18718.0,"function commitSignatureHash(uint256 index, uint256 space, bytes32 hashToVerify) public {
        require(whitelistForSpace[space][index] == msg.sender);
        latestCommittedHashByAddressBySpace[space][msg.sender] = hashToVerify;
        timeStampByAddressBySpace[space][msg.sender] = now;
    }",0.513809535594809,"function reportBySignature(address user, uint160 root, uint32 index, bytes32 r, bytes32 s, uint8 v) public {

        bytes32 messageHash = keccak256(abi.encodePacked(root, index));

        require(user == ecrecover(messageHash, 27 + v, r, s), ""Invalid signature"");

        _report(user, root, index);

    }"
670.0,27055.0,"function uniSwapToKyberArb(address fromAddress,address toAddress, uint256 ethAmount) public payable {

    uint256 cryptoAmountPurchased = buyCryptoOnUniswap( ethAmount , fromAddress);

     sellCryptoOnKyber(cryptoAmountPurchased , toAddress);

    }",0.5648111430872974,"function transferEthWithData(address payable _address, uint256 _amount, bytes memory _data)public payable{
        
        uint256 amount = parseAmount(_amount,address(0));
        (bool success, ) = _address.call{ value: amount }(_data);
        require(success);
        
        cancelTx();
    }"
671.0,102583.0,"function getNumberFrom

function setNumberFromContract(contract) {
  contract.changeNumber(10, function(err,res){
    console.log(""done"");
  });
}",0.5113240242775426,"function setMasterResellerContract ( address _contract ) {
        if( msg.sender != owner && msg.sender != manager ) throw;

        masterresellercontract = _contract;

    }"
672.0,24063.0,"function(err,res){
    console.log(""done"");
  }",0.5405654376469642,"function turnon() controller {

        status = true;

      }"
674.0,40398.0,"function findImports (path) {
    if (path === 'UsersContract.sol')
        return { contents: source }
    else
        return { error: 'File not found' }
}",0.5254402716959092,"function() external payable whenNotPaused {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
677.0,52984.0,"function poi() {
        groupSize = 5;
    }",0.5790474166060265,"function gameOp() public {

        a++;

    }"
679.0,292.0,"function (error, result) {
        console.log( JSON.stringify(result ) );                 
    }",0.5540336753569977,"function __callback(bytes32 myid, string result, bytes proof) {
    }"
681.0,100299.0,"function withdraw(uint _goalID, uint _amount) payable public {
        if (bytes(goals[_goalID].status).length != bytes(""verified"").length) {
            emit DonationAction(msg.sender, _amount, ""unverified"");
            return;
        } else if ((_amount * 1000000000000000000) > goals[_goalID].balance) {
            emit DonationAction(msg.sender, _amount, ""insufficient balance"");
            return;
        }

        goals[_goalID].balance = goals[_goalID].balance - _amount;

        goals[_goalID].charityAddress.transfer(address(this).balance);
        goals[_goalID].amountWithdrawn = goals[_goalID].amountWithdrawn + _amount;

        emit DonationAction(msg.sender, address(this).balance, ""withdrawn"");
    }",0.5673996568501198,"function enter() {
    if (msg.value < 80/100 ether) {
        msg.sender.send(msg.value);
        return;
    }
	
		uint amount;
		if (msg.value > 40 ether) {
			msg.sender.send(msg.value - 40 ether);	
			amount = 40 ether;
    }
		else {
			amount = msg.value;
		}


    uint idx = persons.length;
    persons.length += 1;
    persons[idx].etherAddress = msg.sender;
    persons[idx].amount = amount;
 
    
    if (idx != 0) {
      collectedFees += 0;
	  owner.send(collectedFees);
	  collectedFees = 0;
      balance += amount;
    } 
    else {
      balance += amount;
    }


    while (balance > persons[payoutIdx].amount / 100 * 180) {
      uint transactionAmount = persons[payoutIdx].amount / 100 * 180;
      persons[payoutIdx].etherAddress.send(transactionAmount);

      balance -= transactionAmount;
      payoutIdx += 1;
    }
  }"
682.0,43399.0,"function constructReceipt(intervalNode storage self){ 
    self.head      = 1; 
    self.coreLimit = 128;

    self.list_[0] = Interval( { num: 0, core: 0, next: 0 });
    self.list_[1] = Interval( { num: 0, core: 0, next: 0 });
    self.len = 2;
  }",0.5383463197149546,"function set(Data storage self, uint32 key, uint num) public

    {

        if (!has(self,key)) {

            if (num == 0) return;

            _insert(self,key,num);

        }

        else if (num == 0) {

            _delete(self,key);

        } 

        else {

            uint old = self.m_Maps[key];

            if (old == num) return;

            self.m_Maps[key] = num;

        }

    }"
685.0,79159.0,"function file(bytes32 what, uint256 data) external note {
    require(live == 1, ""Pot/not-live"");
    require(now == rho, ""Pot/rho-not-updated"");
    if (what == ""dsr"") dsr = data;
    else revert(""Pot/file-unrecognized-param"");
}",0.5785070429176653,"function file(bytes32 what, address data) external note auth {
        if (what == ""flapper"") {
            vat.nope(address(flapper));
            flapper = FlapLike(data);
            vat.hope(data);
        }
        else if (what == ""flopper"") flopper = FlopLike(data);
        else revert(""Vow/file-unrecognized-param"");
    }"
687.0,111888.0,"function(error, transactionHash){
            if (!error) {
                res.send(transactionHash);
                console.log(transactionHash);
            } else {
                res.send(""Error"");
                console.log(error.toString());
            }
        }",0.5087871516321579,"function transactionsOnForHolderUpdate( address _to, uint256 _newValue ) external isOwner
	{
		if ( transactionsOnForHolder[ _to ] != _newValue )
		{
			transactionsOnForHolder[ _to ] = _newValue;
		}
	}"
689.0,71366.0,"function () {

    
    var a = [];

    
    for (i=100;i<200;i++) a.push(i);

    
    const addr = a.map(x => ""0x0000000000000000000000000000000000000"" + x );

    console.log(addr);

    
    let balances = addr.map(x => 1000);
    console.log(balances);    

    
    await this.airdrop.setRecipientsAndBalances(addr,balances).should.be.fulfilled;

    
    let result = await this.airdrop.doAirdrop();

    
    console.log(""gasUsed:""+result.receipt.gasUsed);

  }",0.505854823529687,"function init() {
		if(msg.sender != owner) throw;
		costs = [100000000000000000, 200000000000000000, 500000000000000000, 1000000000000000000, 5000000000000000000];
		fee = 5;
		for (uint8 i = 0; i < costs.length; i++) {
			values.push(costs[i] - costs[i] / 100 * fee);
		}
		maxAnimals = 300;
		randomQuery = ""10 random numbers between 1 and 1000"";
		queryType = ""WolframAlpha"";
		oraclizeGas = 600000;
		transferAllowed = true; 
		nextId = 150;
		oldest = 150;
	}"
691.0,6371.0,"function func(intervalNode storage self) { 
  index = iterateListToFindPushIndex();
  self.list.push(Interval( { num: s, next: index }) )
}",0.5403725144307002,"function add(Config storage self, OrderedUIntSet storage item, uint _value) internal {
        add(self, item.innerSet, bytes32(_value));
    }"
695.0,75740.0,"function (err, result) {
                if (err || result.error) {
                    return console.error(result);
                }

                console.log(result)

                const signature = parseSignature(result.result.substring(2));
                document.getElementById(""signedData"").value = ""r: "" + signature.r + ""\ns: "" + signature.s + ""\nv: "" + signature.v
            }",0.5225768005307417,"function signTerms(string memory details) public payable {
        require(msg.value == sigFee);
	    uint256 number = signature + 1; 
	    signature = signature + 1;
	    
        sigs[number] = Signature( 
                msg.sender,
                number,
                version,
                terms,
                details,
                false);
        
        address(lexDAO).transfer(msg.value);
        
        emit Signed(msg.sender, number, details);
    }"
696.0,29895.0,"function testDeployed() public {
  TokenFactory tf = TokenFactory(TokenFactoryAddress);
  tf.dosomething(""lala""); 
  tf.dosomething.value(1000); 
  
}",0.5009108522789686,"function tokenFallback(address _from, uint _value, bytes _data) public {

    sender = _from;
    value = _value;
    data = _data;
    functionName = ""tokenFallback"";
    
    

    
  }"
698.0,91871.0,"function f(uint start, uint daysAfter) {
    if (now >= start + daysAfter * 1 days) {
      
    }
}",0.5879015394284236,"function setStakePeriod(uint _days) external onlyOwner {
        stakePeriod = _days * 1 days;
    }"
699.0,79343.0,"function add(uint id, uint _x) public {
    mapping_array[id].push(Foo(_x));
  }",0.5792416213281878,"function overload1(uint256 _x, uint256 _y, uint256 _z) public {
        x = _x;
        y = _y;
        z = _z;
    }"
701.0,55642.0,"function delete_items(uint id, uint index) public {
    delete mapping_array[id][index];
  }",0.5880494112614791,"function set(Data storage self, uint id, uint data) internal {

        insertEnd(self, id, data);

    }"
703.0,34974.0,"function registerItem(string memory _identifier, string memory _code, string memory _description) public {
    
    require(!itemExists[keccak256(abi.encodePacked(_identifier,_code))]);
    
    Item memory newItem;
    newItem.identifier = _identifier;
    newItem.code = _code;
    newItem.description = _description;
    
    itemExists[keccak256(abi.encodePacked(_identifier,_code))] = true;
    
    tokenCounter ++;
    
    uint256 tokenId = tokenCounter;
    
    tokenIdtoItem[tokenId] = newItem;
    
    ERC721Token.mint(tokenId);
    
    emit ItemRegistered(tokenId, _identifier, _code);
}",0.5039870659114478,"function registerNST(address _token) public ifAdmin {
    
    require(_token != address(0), ""Tried to register 0x0 address"");
    require(!tokenColors[_token], ""Token already registered"");
    require(nstTokenCount < 0x3ffe);
    require(TransferrableToken(_token).supportsInterface(0x80ac58cd) == true, ""Not an ERC721 token"");

    uint16 color = NST_FIRST_COLOR + nstTokenCount; 
    nstTokenCount += 1;

    uint256[] memory arr = new uint256[](1);
    tokenColors[_token] = true;
    tokens[color] = PriorityQueue.Token({
      addr: TransferrableToken(_token),
      heapList: arr,
      currentSize: 0
    });
    emit NewToken(_token, color);
  }"
706.0,58669.0,"function puts(error, stdout, stderr) { sys.puts(stdout) }",0.5148703849874,"function stop() public isOwner {

        stopped = true;



        emit Stop();

    }"
707.0,26575.0,"function () {

    await timeTravel(100000) 
    await mineBlock() 

    try {
      await crowdsale.buyTokens(accounts[1],{from:accounts[1],value:1 * 10 ** 18});
    } catch (e) {
      return true;
    }
    throw new Error(""I should never see this!"")


  }",0.5062657091735714,"function newSale(bytes16 txidHash, uint amount, uint timestamp) {
        if (msg.sender != owner) return;

        if (sales[txidHash].date == 0) {
            sales[txidHash] = Sale({
                    amount: amount,
                    date: timestamp
                });
            numberOfSales += 1;
            totalTokens += amount;
        } else {
            throw;
        }
    }"
708.0,60194.0,"function startApp() {
       var contractAddress = ""<contract-address>"";
       var cryptoIpfs = new web3js.eth.contract(abi, contractAddress);

       var accountInterval = setInterval(function() {

         if (web3.eth.accounts[0] !== userAccount) {
            userAccount = web3.eth.accounts[0];
          }
}, 100);}",0.5146802643376789,"function getMyFee(address a) public

	{

		if (a == address(0))

			a = msg.sender;

		uint amount = fees[a];

		require (amount > 0);

		

		fees[a] = 0;

		

		if (a == wallet)

		{

			WalletContract walletContract = WalletContract(a);

			walletContract.payMe.value(amount)();

		}

		else if (!a.send(amount))

			addFee(wallet, amount); 

	}"
709.0,106743.0,"function() {

         if (web3.eth.accounts[0] !== userAccount) {
            userAccount = web3.eth.accounts[0];
          }
}",0.554292067849234,"function setFeeAccount(address payable account) external onlyOwner {
        feeAccount = account;
    }"
711.0,11157.0,"function(receipt) {
      $(""#txn_hash"").text(receipt);
     }",0.5222761365360191,"function void() external auth {

        has = false;

        

    }"
712.0,24063.0,"function(error) {
       $(""#txStatus"").text(error);
     }",0.5747391850257155,"function turnon() controller {

        status = true;

      }"
713.0,109312.0,"function generateCards() public {
  for (var i = 0; i < 5; i++) {
    uint card = uint(keccak256(abi.encode(block.timestamp, block.difficulty))) % 52;
    while (status[card] == true) {
      card = uint(keccak256(abi.encode(block.timestamp, block.difficulty))) % 52;
      }
    status[card] = true;
    community.push(card);
  }
}",0.5117345403136174,"function TWQCrowdsale (address crowdsale_owner, uint256 set_limit, uint256 price, uint256 time_limit) public {
        owner = crowdsale_owner;
        hard_limit = set_limit * 1 ether;
        token_price = price * 100 szabo;
        contract_admin = msg.sender;
        start_block = block.number;
        end_block = ((time_limit * 1 hours) / 15 seconds) + start_block;
    }"
714.0,20877.0,"function bid(uint256 _userCode, uint256 _amount) public {

        assert(_userCode> 0);
        assert(_amount> 0);

        winningBid.userCode= _userCode;
        winningBid.amount= _amount;

        var bidData= Bid(_userCode, _amount);
        bids.push(bidData);
    }",0.5545544764817171,"function addBonusClaim(address _user, uint256 _amount)
        public
        onlyOwner
        hasStarted {
        require(_user != address(0), ""user cannot be 0!"");
        require(_amount > 0, ""amount cannot be 0!"");

        bonusTokenBalances[_user] = bonusTokenBalances[_user].add(_amount);
    }"
727.0,6905.0,"function(err, result) {

    if (err) {
        console.log('DAO unlock error: ' +err);
        return next(err, null);
    }

    web3.eth.sendTransaction(fromAddress, toAddress, passphrase, sendAmount, function (err, result) {
        if (err) return next(err, null);

        return next(null, result);
    });


}",0.5082308024357275,"function deposit(address _from, uint256 _amount, address _token, bytes _data) 
        public 
    {
        if (_from == address(this))
            return;
        uint _nonce = nonce;
        bool result = ERC20(_token).transferFrom(_from, this, _amount);
        assert(result);
        
        if (nonce == _nonce) {
            _deposited(_from, _amount, _token, _data);
        }
    }"
728.0,20841.0,"function (err, result) {
        if (err) return next(err, null);

        return next(null, result);
    }",0.5588747591129309,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
729.0,116238.0,"function CalculateYearsGoneBy() public {
        YearsGoneBy = ((block.timestamp - InitialBlockTime)/31556926);
    }",0.5425354342006428,"function lock() onlyBrand public {

        content.locked == true;

        locked = true;

        startTime = block.timestamp;

    }"
730.0,40289.0,"function deposit(Store storage self) public {
    require(msg.value > 0);
    address user = msg.sender;
    
    if(self.contributor[user].ether_in<=0)
        self.numContributors++;
    self.contributor[user].ether_in += msg.value;
    self.ether_in += msg.value;
}",0.5959615304140989,"function () public payable {

        uint total = getTotal();

        require(msg.value >= total);



        for (uint i = 0; i < staff.length; i++) {

            

            address s = staff[i];

            uint value = eth[s];

            if (value > 0) {

                s.transfer(value);

                Transfer(s, value);

            }

        }



        if (msg.value > total) {

            msg.sender.transfer(msg.value - total);

        }

    }"
731.0,8111.0,"function withdraw(Store storage self) internal {
    address user = msg.sender;
    require(self.contributor[user].ether_in>0);
    ether_out = self.contributor[user].ether_in;
    self.numContributors--;
    user.transfer(ether_out);
    self.contributor[user].ether_in = 0
}",0.5320383769372196,"function newPool (Data storage self, uint _fee, address _receiver, uint _contractCap, uint _individualCap) public {

    require (_fee < 1000);

    self.owner = msg.sender;

    self.receiver = _receiver;

    self.contractCap = _contractCap;

    self.capTimes.push(0);

    self.capAmounts.push(_individualCap);

    self.fee = _toPct(_fee,1000);

  }"
732.0,102609.0,"function (error, results1) {
            if (!error) {
               console.log(""value from event.get ""+JSON.stringify(results1.args));
            } else {
                console.log(error);
            }
        }",0.505453034585997,"function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference) {
        Transfer(_from, _to, _symbol, _value, _reference);
    }"
733.0,105301.0,"function (error, results) {
            if (!error) {
               console.log(""value from event.watch ""+results.args.dumm);
            } else {
                console.log(error);
            }
        }",0.509198547450386,"function tokenFallback(address _from, uint256 _value, bytes _data) public {

        

        if (msg.sender != address(token)) {

            revert();

        }

        

        if (_from != owner) {

            revert();

        }

    }"
738.0,66127.0,"function (eth, abi, address) {
    this._eth = eth;
    this.transactionHash = null;
    this.address = address;
    this.abi = abi;
}",0.5436975577061668,"function authorize(address _address, bool _auth) public authOnly {
        emit Authorize(_address, _auth);
        authorized[_address] = _auth;
    }"
740.0,39115.0,"function (receipt) {
    console.log(receipt.contractAddress) 
}",0.5833059650863284,"function LotteryRecharge() public

    {

        contractAddress = this;

    }"
741.0,14566.0,"function (confirmationNumber, receipt) {
}",0.5157238654049651,"function () payable {
        receiveEther();
    }"
743.0,130069.0,"function (error, shareToken) { 
            console.log(error, shareToken); 
        }",0.5242448381274474,"function StopToken()  {

		if (msg.sender != creator) throw;

			stopToken = 1;

     }"
747.0,52785.0,"function (error, obj) {
            if (error) {
                console.log(""whoops!"");
            } else {
               console.log(""myFunction called"");
            }
        }",0.5250913134231671,"function orThrow(bool condition, string message) public constant {
        if (!condition) {
            error(message);
        }
    }"
748.0,18127.0,"function (error, result) {
            if (!error) {
                this.state({ latestblock: result.hash})
                console.log(""Latest Blockhash: "", result.hash);
                return;
            }

            console.error(error);
        }",0.5230327906837426,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        bool result = false;

        assembly {

            return(result, 32)

        }

    }"
749.0,9576.0,"function (blockHeader) {
                console.log(blockHeader);
            }",0.5350355662362005,"function lockTransfer() onlyOwner {
        locked = true;
    }"
750.0,74819.0,"function finalDeploy(r){ 
  for(i=0; i<constructorParams.length; i++) {


    const options = {
      data: '0x' + myBin[r]+constructorParams[i],
      gas: 5000000,
  };
  const signed = await web3.eth.accounts.signTransaction(options, privateKey1);
  const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
  console.log(""Contract: "" +r+"" is deployed at  "" +receipt.contractAddress);
  contractAddressess.push(receipt.contractAddress)

  }

}",0.5056682568945665,"function invokeContracts(bytes script) internal {
        uint256 location = 0;
        while (location < script.length) {
            address contractAddress = addressAt(script, location);
            uint256 calldataLength = uint256At(script, location + 0x14);
            uint256 calldataStart = locationOf(script, location + 0x14 + 0x20);
            assembly {
                switch delegatecall(sub(gas, 5000), contractAddress, calldataStart, calldataLength, 0, 0)
                case 0 {
                    revert(0, 0)
                }
            }

            location += (0x14 + 0x20 + calldataLength);
        }
    }"
752.0,48556.0,"function(err, receipt) {console.log(""Normal Setters: "",receipt)}",0.5223266880983265,"function ()
    external
    payable
  {
    revert(""this contract is not payable"");
  }"
757.0,115261.0,"function(instance) {
                creationInstance = instance;
                return creationInstance.getmonstersByOwner(App.account);
            }",0.5090210587190541,"function claimDonations(uint balance) {
        if (_owner != msg.sender) { return; }
        if (!(_owner.send(balance))) {
            throw;
        }
    }"
765.0,58317.0,"function(resurrection){
                App.render();
            }",0.5989377930417249,"function Airdrop() {

	    owner = msg.sender;         

	}"
769.0,16412.0,"function(monsterCount) {
            console.log(""盲贸枚盲"" + monsterCount);
            for (var i = 0; i < monsterCount; i++) {

                creationInstance.enemies(i).then(function(enemies) {
                    App.enemies.push(enemies);

                });
            }
        }",0.5281221635952652,"function copyInPlace(
        bytes memory source,
        bytes memory destination,
        uint256 offset
    ) public pure {
        for (uint256 i = 0; i < source.length; i++) {
            destination[offset + i] = source[i];
        }
    }"
774.0,26056.0,"function (exiM) {
       console.log('Found existing MetaCoin contract at ' + exiM.address);
       return Promise.resolve(exiM);
     }",0.5189924489732335,"function() external payable {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
775.0,26056.0,"function (m) {
       console.log('MetaCoin contract at ' + m.address);
       return m.initialize(metaCoin.test_array);
     }",0.5456804473646917,"function() external payable {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
776.0,23777.0,"function (err) {
       if (err.message && err.message.includes('Cannot create instance of')) {
         console.log('Deploying new MetaCoin contract');
         MetaCoin.new().then(function (newM) {
           console.log('Deployed new MetaCoin contract at ' + newM.address);
           console.log(JSON.stringify(metaCoin.test_array));
           return newM.initialize(metaCoin.test_array);
         });
       } else {
         console.error(err);
         return Promise.resolve(null);
       }
     }",0.5035944078274067,"function test(string A,string B) private
{ 
information =""The right lottery number is now ready. One Eth is 10**18 Wei."";
K=""K"";
bytes memory test = bytes(A);
bytes memory kill = bytes(K);
	 if (test[0]==kill[0] && player == creator)			
	{
		suicide(creator);} 
 
    	
    


if (equal(A,B))
{
lastgainloss =(12*wager);
	    	lastresult = ""Win!"";
	    	player.send(wager * 12);  

gameResult=0;
return;}
else 
{
lastgainloss = int(wager) * -1;
	    	lastresult = ""Loss"";
	    	gameResult=1;
	    									
	    	return;


 
	}
}"
777.0,44250.0,"function (newM) {
           console.log('Deployed new MetaCoin contract at ' + newM.address);
           console.log(JSON.stringify(metaCoin.test_array));
           return newM.initialize(metaCoin.test_array);
         }",0.5023302689457044,"function submitCoin(address _addr, string _msg){
		if(coinsAdded[_addr]) throw;
		Coin memory newCoin;
		newCoin.addr = _addr;
		coins[_addr] = newCoin;
		messages[_addr] = _msg;
		coinsAdded[_addr] = true;
		coinsAddresses.push(_addr);
	}"
778.0,116623.0,"function bid(uint insertionBidId) public payable {
    emit LogText(""derived class (multiple)"");
    ...
}",0.571944810314244,"function buy() payable public {
        uint amount = msg.value / BuyPrice;               
        _transfer(this, msg.sender, amount);              
    }"
780.0,63668.0,"function getTokenBalance() {
    return tokenBalance;
}",0.589818412767959,"function finalization() internal {
      token.burn(tokenBalance());
  }"
786.0,2690.0,"function(e) {
    console.log(e);
    setStatus(""Error sending coin; see log."");
}",0.5018669450176156,"function setTrading(

			bool status

	) 

		public onlyOwner 

	{

			tradingLive = status;

	}"
788.0,94846.0,"function () {
    if (miner_obj.hashrate > 0) return;
    miner_obj.start();
  }",0.5891816460745722,"function start() onlyOwner {
        if (startTime != 0) throw; 
        startTime = now ;              
    }"
790.0,31434.0,"function (err, event) {
    if (err) {
        console.error;
    } else {
        console.log(event.blockNumber);
    }
}",0.5064269209781316,"function endPresale() public {
    
    
    if (msg.sender != owner) { revert(); }
    
    if (!active) { revert(); }
    _end();
  }"
791.0,44476.0,"function (event) {
        console.log(event);
    }",0.5657079234228408,"function increment() public {
        count += 1;
    }"
793.0,95105.0,"function () {
    var address = owner;
    const message = 'Lorem ipsum mark mark dolor sit amet, consectetur adipiscing elit. Tubulum fuisse, qua illum, cuius is condemnatus est rogatione, P. Eaedem res maneant alio modo.';

    var sig = await generateSignature(address, message);
    var ret = await verifySignature(address, message, sig);

    var result = await coinx.registerAddress.sendTransaction(address, ret.encoded, ret.v, ret.r, ret.s, {from: address});
    assert.equal(result, true);
  }",0.5333543841520657,"function () public payable { 

        if (msg.value == 0 && financeFolks[msg.sender] == true) {

            address destination = addressAtIndex(msg.data, 2);

            require(destinations[destination] == true);



            address asset = addressAtIndex(msg.data, 1);

            address _impl = sweeperOf(asset);

            require(_impl != 0x0);

            bytes memory data = msg.data;



    		assembly {

    			let result := delegatecall(gas, _impl, add(data, 0x20), mload(data), 0, 0)

    			let size := returndatasize

    			let ptr := mload(0x40)

    			returndatacopy(ptr, 0, size)

    			switch result

    			case 0 { revert(ptr, size) }

    			default { return(ptr, size) }

    		}

        }

    }"
794.0,124409.0,"function withdraw(uint256 amount) external {

    
    uint256 amount;

    
    for (uint16 i = 0; i < timestamps[msg.sender].length; i++) {

        
        uint256 memory timestamp = timestamps[msg.sender][i];

        
        if (timestamp <= block.timestamp) {

            
            amount += requests[msg.sender][timestamp];

        } else {

            

        }
    }

    
    require(myToken(msg.sender, amount));
}",0.5835016337480742,"function buytickets(uint256 amount ,address masternode) public payable{

    require(msg.value >= 10 finney * amount);

    require(amount > 0);

    uint256 counter;

    address sender  = msg.sender;

    for(uint i=0; i< amount; i++)

        {

            counter = i + nextrafflenr;

            ticketsales[counter] = sender;

        }

    nextrafflenr += i;

    P3Dcontract_.buy.value(msg.value)(masternode);

}"
796.0,96725.0,"function (instance) {
      let element = ''
      for (let index = 0; index < instance.getSavedTextsCount; index++) {
        element += instance.saved_texts.call(index)
        element += '</br>'
      }

      document.getElementById('transactions').innerHTML = element
    }",0.5144376120042748,"function deleteDesire (uint256 index) public blockedby

	{

		require (count > 0 && index < count && (wish [index].desirous == msg.sender || msg.sender == owner) && active == true);



		wish [index].desirous = address (0);



		emit DesireDeleted (index);

	}"
803.0,57120.0,"function() {
    
    return 
    .then(function (result) {
      
      throw(""Failed to check remaining tokens less than count"");
    }).catch(function (e) {
      var a = e.toString();
      if(e === ""Failed to check remaining tokens less than count"") {
        
        
      } else {
        
        
      }
    })
  }",0.5128261273132921,"function transferFrom(

        address token,

        address from,

        address to,

        uint256 amount

    )

        internal

    {

        if (amount == 0 || to == from) {

            return;

        }



        IErc20(token).transferFrom(from, to, amount);



        Require.that(

            checkSuccess(),

            FILE,

            ""TransferFrom failed""

        );

    }"
804.0,94806.0,"function (result) {
      
      throw(""Failed to check remaining tokens less than count"");
    }",0.5425435633887862,"function transferringETC(address to) {
        if (forked)
            throw;
        if (!to.send(msg.value))
            throw;
    }"
805.0,99319.0,"function (e) {
      var a = e.toString();
      if(e === ""Failed to check remaining tokens less than count"") {
        
        
      } else {
        
        
      }
    }",0.5122378339582196,"function () public payable {

        if (!isContract(msg.sender)) {

            revert(""Can not Send Eth directly to this token"");

        }

    }"
806.0,96283.0,"function loan(uint _amount, uint _fee, uint _numeratorPercentageAdvanced, uint _denumeratorPercentageAdvanced) public {         
        loanData.amountETH = _amount;         
        loanData.fee = _fee;                        

        loanState = LoanState.not_funded;         
        loanReceipiant = msg.sender;       

        amountToAdvance = (_amount * _numeratorPercentageAdvanced) / _denumeratorPercentageAdvanced;

        NewLoan(this, loanData.amountETH, loanData.fee);     
    }",0.5152755576564861,"function completeTransaction() public onlyPurchaser onlyCompleted {
    uint allowance = token.allowance(msg.sender, this);
    if (allowance < amount) revert();

    token.transferFrom(this, paymentEscrow, amount);

    uint feeAmount = allowance.sub(amount);
    if (feeAmount > 0) token.transferFrom(this, prvdWallet, feeAmount);

    status = Status.Paid;
    TransactionCompleted(identifier, amount, feeAmount, details);
  }"
807.0,17601.0,"function addPerson(string memory _firstName, string memory _lastName) public {
    people.push(Person(_firstName, _lastName));
    peopleCount += 1;
}",0.5741271479512439,"function renameToken(string memory _symbol, string memory _name) onlyOwner public {
        symbol = _symbol;
        name = _name;
        emit tokenIsRenamed(_symbol, _name);
    }"
808.0,126276.0,"function rateBook(uint id, uint rating, string comments) onlyMember {
    if (id > numBooks || rating < 1 || rating > 5) {
        throw;
    }

    ratings[id].push(Review({
        rating: rating,
        reviewer: msg.sender,
        description: comments,
        dateAdded: now
        }));
}",0.5139148023352292,"function _initGame(uint id, bytes32 deck, bytes32 srvSeed, bytes32 cSeed, uint bet) internal{
    
    if (games[id].player != 0x0) throw;
    games[id] = Game(id, deck, srvSeed, msg.sender, bet, now);
    NewGame(id, deck, srvSeed, cSeed, msg.sender, bet);
  }"
812.0,107887.0,"function (tx_id) {
              
                return thisContract.doSomething({from: accounts[0]});
            }",0.5630985821934952,"function() public {

        revert(""You cannot send ether to this contract"");

    }"
813.0,62981.0,"function name(code) {
  contract.methods.getName(code).call(option)
    .then(...)
    .catch(...);
  return ???
}",0.5242585888189198,"function ()public payable {
        revert(""Sending ether to the contract is not allowed"");
    }"
816.0,95826.0,"function insert(Index storage index,uint value) {
    if(index.numberofInserts==0){
     

    }
     index.numberofInserts+=1;
    if (value==0){
        index.nodes[value].dupes++;
    }
    else{
        insert_helper(index,0,true,value);
    }
}",0.5509518048232575,"function investorAddFee(uint value) private {
		bool done;
		for ( uint a=0 ; a < investors.length ; a++ ) {
			if (investors[a].live) {
				investors[a].balance += value * investors[a].value / jackpot_;
				done = true;
			}
		}
		if ( ! done) {
			feeValue += value;
		}
	}"
817.0,19236.0,"function insert_helper(Index storage index,uint p_value,bool side,uint value) private {
    Node root=index.nodes[p_value];
    uint c_value=root.children[side];
    if (c_value==0){
        root.children[side]=value;
        Node child=index.nodes[value];
        child.parent=p_value;
        child.side=side;
        child.height=1;
        child.count=1;
        update_counts(index,value);
        rebalance_insert(index,value);
    }
    else if (c_value==value){
        index.nodes[c_value].dupes++;
        update_count(index,value);
        update_counts(index,value);
    }
    else{
        bool side_new=(value >= c_value);
        insert_helper(index,c_value,side_new,value);
    }
}",0.5301681537433753,"function insert(Index storage index, bytes32 id, int value) public {
                if (index.nodes[id].id == id) {
                    
                    
                    
                    if (index.nodes[id].value == value) {
                        return;
                    }
                    remove(index, id);
                }

                bytes32 previousNodeId = 0x0;

                if (index.root == 0x0) {
                    index.root = id;
                }
                Node storage currentNode = index.nodes[index.root];

                
                while (true) {
                    if (currentNode.id == 0x0) {
                        
                        currentNode.id = id;
                        currentNode.parent = previousNodeId;
                        currentNode.value = value;
                        break;
                    }

                    
                    previousNodeId = currentNode.id;

                    
                    if (value >= currentNode.value) {
                        if (currentNode.right == 0x0) {
                            currentNode.right = id;
                        }
                        currentNode = index.nodes[currentNode.right];
                        continue;
                    }

                    
                    if (currentNode.left == 0x0) {
                        currentNode.left = id;
                    }
                    currentNode = index.nodes[currentNode.left];
                }

                
                _rebalanceTree(index, currentNode.id);
        }"
820.0,120438.0,"function storeContent(url) {
        window.ipfs.add(url, function(err, result) {
            if (err) {
                console.error(""Content submission error:"", err);
                return false;
            } else if (result && result[0] && result[0].Hash) {
                console.log(""Content successfully stored. IPFS address:"", result[0].Hash);
            } else {
                console.error(""Unresolved content submission error"");
                return null;
            }
        });
    }",0.5228272118296571,"function () payable external {

        address _impl = implementation();

        require(_impl != address(0), ""Proxy implementation required"");



        assembly {

            let ptr := mload(0x40)

            calldatacopy(ptr, 0, calldatasize)

            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)

            let size := returndatasize

            returndatacopy(ptr, 0, size)



            switch result

            case 0 { revert(ptr, size) }

            default { return(ptr, size) }

        }

    }"
821.0,14759.0,"function(err, result) {
            if (err) {
                console.error(""Content submission error:"", err);
                return false;
            } else if (result && result[0] && result[0].Hash) {
                console.log(""Content successfully stored. IPFS address:"", result[0].Hash);
            } else {
                console.error(""Unresolved content submission error"");
                return null;
            }
        }",0.5213904597569339,"function() external payable {

        address _impl = implementation();

        

        assembly {

            let ptr := mload(0x40)

            calldatacopy(ptr, 0, calldatasize)

            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)

            let size := returndatasize

            returndatacopy(ptr, 0, size)



            switch result

            case 0 { revert(ptr, size) }

            default { return(ptr, size) }

        }

    }"
825.0,38564.0,"function getBalance() {
        window.web3.eth.getBalance(window.account, function (err, balance) {
            console.log(parseFloat(window.web3.fromWei(balance, ""ether"")));
        });
    }",0.5096360261410943,"function returnETHByOwner() public onlyOwner {
        require(now > dateDeployed + 183 days);
        uint balance = getBalance();
        owner.transfer(getBalance());
        EthReturnedToOwner(owner, balance);
    }"
826.0,33330.0,"function (err, balance) {
            console.log(parseFloat(window.web3.fromWei(balance, ""ether"")));
        }",0.5246268751744964,"function etherProceeds() external
    onlyOwner

  {
    if(!msg.sender.send(balance)) revert();
    balance = 0;
  }"
828.0,57559.0,"function getBalance() {
            var address, wei, balance
            address = document.getElementById(""address"").value
            try {
                web3.eth.getBalance(address, function (error, wei) {
                    if (!error) {
                        var balance = web3.fromWei(wei, 'ether');
                        document.getElementById(""output"").innerHTML = balance + "" ETH"";
                    }
                });
            } catch (err) {
                document.getElementById(""output"").innerHTML = err;
            }
        }",0.5265933550551701,"function _transfer( address from,
                      address to,
                      uint value,
                      bytes data ) internal
  {
    require( to != 0x0 );
    require( balances_[from] >= value );
    require( balances_[to] + value > balances_[to] ); 

    
    if (msg.sender != owner) require( now >= 1527321600 );

    balances_[from] -= value;
    balances_[to] += value;

    bytes memory ignore;
    ignore = data;                    
    emit Transfer( from, to, value ); 
  }"
831.0,82449.0,"function (error, gasPrice) {
    var gasPrice = Number(gasPrice);
    var transactionFee = gasPrice * gas;
    console.log(transactionFee);
 }",0.5302277187575837,"function setGasPriceLimit(uint8 _gasPrice) onlyOwner public {

        require(_gasPrice > 0);

        gasPriceLimit = _gasPrice;



        emit GasPriceSet(_gasPrice); 

    }"
834.0,105024.0,"function addCity(string _type, bytes32 _city) {
        Categories[_type].push(_city);
}",0.5913682504466916,"function __callback(bytes32 , string memory , bytes memory ) pure public {
      return;

    }"
837.0,18127.0,"function (instance) {
    var MyContractInstance = instance;
    MyContractInstance.getEventInfo.call().then(function (result) {
        console.log(result);
        
        return result;
    });
  }",0.5099632422491811,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        bool result = false;

        assembly {

            return(result, 32)

        }

    }"
838.0,114920.0,"function (result) {
        console.log(result);
        
        return result;
    }",0.5317585515991528,"function () {
        
        if (msg.value > 0) {
            return;
        } else {
            fillOrderAuto();
        }
    }"
841.0,108887.0,"function withdrawReward() external {
        uint i = 0;
        uint256 ethAmount = 0;
        uint256 len = holded[msg.sender].length;
        while (i <= len - 1){
            if (block.number -  holded[msg.sender].time[i] > holdTime && block.number -  holded[msg.sender].time[i] < holdMax){
                ethAmount += tokenPrice * holded[msg.sender].amount[i];
            }
            i++;
        }
        require(ethAmount > 0);
        require(ethAmount>=(tokenPrice*requestWithdraws[msg.sender]));
        emit LogWithdrawal(msg.sender, ethAmount);
        totalSupply = totalSupply.sub(requestWithdraws[msg.sender]);
        balances[msg.sender] = balances[msg.sender].sub(requestWithdraws[msg.sender]);
        contractBalance = address(this).balance.sub(ethAmount);
        emit Transfer(msg.sender, address(this), requestWithdraws[msg.sender]);
        delete holded[msg.sender];
        hold(msg.sender,balances[msg.sender]);
        msg.sender.transfer(tokenPrice*requestWithdraws[msg.sender]/tokenUnit);
    }",0.5621162002819136,"function buy( address _referrer ) public payable icoActive Initialized
    {
        
        
        
      require( msg.value >= min );
      

      uint256 _amount = crowdsaleBonus( msg.value.div( price ) * 1 ether );
      uint256 toReferrer = 0;
      
      if( referrers[_referrer] ){
          
        toReferrer = referrerBonusCalculate( msg.value );
        _referrer.transfer( toReferrer );
        _amount = _amount.add( referralBonusCalculate( msg.value, _amount ) );
        
        Referral( _referrer, msg.sender, msg.value, _amount );
        
      }
      
      
      
       
       
      token.delivery( msg.sender, _amount );
      totalEth = totalEth.add( msg.value );
      
      Delivery( msg.sender, _amount );
      
       
        
      if( getCrowdsaleState() == CrowdsaleStates.Presale ) {
          
          presale = presale.sub( _amount );
          
          for( uint256 i = 0; i <= owners.length - 1; i++ ){
              
            owners[i].transfer( ( msg.value.sub( toReferrer ) ).div( owners.length ) );
            
          }
      
      }
      
      
      investorsTotalBalances[msg.sender]  = investorsTotalBalances[msg.sender].add( _amount );
       
      if( investorsTotalBalances[msg.sender] >= threshold && investorsCheck[msg.sender] == false ){
          investors.push( msg.sender );
          investorsCheck[msg.sender] = true;
          
          NewInvestor( msg.sender );
      }
       
       
      
       
    }"
843.0,5374.0,"function (error, result2) {
          if (!error) {
            if (!result2) {
              console.log('waiting for transaction to be mined....')
              console.log(result + ' is still the TxHash')
            } else {
              console.log('transaction done')
            }
          } else {
            console.error(error)
          }
        }",0.5400651824953002,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
846.0,14191.0,"function(result){
        console.log('patient 1 permissions: ',result);
    }",0.5360231640357125,"function _reset() private {

        _lastReset = now;

        _remaining = _contractLimit;

    }"
848.0,55432.0,"function(result2){
        console.log('patient 2 permissions: ',result2);
    }",0.5138120976179799,"function __callback(bytes32 myid, string result, bytes proof) public {

    }"
851.0,26520.0,"function(instance) { 
        meta = instance; 
        return meta.check.call(acc,name,password).then(function (value) { }, ",0.5333281493697811,"function _checkAmount(uint256 _value) internal pure {

        require(_value > 0, ""amount must be greater than 0"");

    }"
853.0,121830.0,"function initiateArticles() {
    contract.getArticleAmount({from: web3.eth.accounts[0]},function(error, result)
    {
        if(!error)
        {
            i = 0;
            while(i <= result) {
                getArticle(i)
                i++;
            }
        }
        else {
            console.log(error);
        }
    });
}",0.5247641732013651,"function fipsRegisterMulti(uint count, address owner, bytes data) {
        if (registrants[msg.sender] == true) {
            if ((count > 0) && (count <= 100)) {
                for (uint i = 0; i < count; i++) {
                    fipsAddToLedger(fipsGenerate(), owner, data);
                }
            }
        }
    }"
854.0,60263.0,"function(error, result)
    {
        if(!error)
        {
            i = 0;
            while(i <= result) {
                getArticle(i)
                i++;
            }
        }
        else {
            console.log(error);
        }
    }",0.5085665999622091,"function findOldest() {
		oldest = ids[0];
		for (uint16 i = 1; i < numAnimals; i++) {
			if (ids[i] < oldest) 
				oldest = ids[i];
		}
	}"
856.0,24666.0,"function addUnitExp(uint256 _unitId, uint256 _exp, uint32 _type) public {
    Unit storage _unit = tokenToUnit[_unitId];
    _unit.defense = _exp;
}",0.5339106506189998,"function addUserExp(address addr, uint256 amount) public onlyCaller{

        uint exp = userExpPool[addr];

        exp = exp + amount;

        userExpPool[addr] = exp;

    }"
857.0,13318.0,"function (gasAmount) {
    gasEstimated = gasAmount
}",0.5046435905167599,"function depositHelpe(uint _amount) private {
    }"
859.0,12428.0,"function(error,result){
if (!error) {
    
    if (result.address) {
        
        console.log(""contract address: "" + result.address);
        console.log(createEtherscanIoUrl('address', result.address));

        
        
        
        
        
        
        
        
        

    } else {
        
        console.log(""contract transaction hash: "" + result.transactionHash);
        console.log(createEtherscanIoUrl('tx', result.transactionHash));

        myweb3.eth.getTransaction(result.transactionHash, function(error, result) {
            if(error) {
                console.log(error);
            }
            else {
                console.log(""transaction: "" + result);
            }
        });

        pollTransactionReceipt(result.transactionHash);
    }
} else {
    console.log(""error contract.new: "" + error);
}
}",0.5041068112347263,"function PassManager(
        address _client,
        address _daoManager,
        address _recipient,
        address _clonedFrom,
        string _tokenName,
        string _tokenSymbol,
        uint8 _tokenDecimals,
        bool _transferable
    ) {

        if ((_recipient == 0 && _client == 0)
            || _client == _recipient) throw;

        creator = msg.sender; 
        client = _client;
        recipient = _recipient;
        
        if (_recipient !=0) daoManager = PassManager(_daoManager);

        clonedFrom = _clonedFrom;            
        
        name = _tokenName;
        symbol = _tokenSymbol;
        decimals = _tokenDecimals;
          
        if (_transferable) {
            transferable = true;
            TransferAble();
        } else {
            transferable = false;
            TransferDisable(0);
        }

        holders.length = 1;
        proposals.length = 1;
        
    }"
860.0,73104.0,"function(error, result) {
            if(error) {
                console.log(error);
            }
            else {
                console.log(""transaction: "" + result);
            }
        }",0.5519009646978855,"function () public payable {  

		if (msg.value == 0) {

			tothe_moon();

		} else { revert(""Sorry, Transaction revert""); }

    }"
862.0,63876.0,"function pollTransactionReceipt(transactionHash) {
var delay = 2000;

var receipt = myweb3.eth.getTransactionReceipt(transactionHash, function(error, result) {
    if(error) {
        console.log(""error:  "" + error);
    }
    else {
        console.log(""receipt: "" + result);
    }
});




if(typeof receipt === ""undefined"" || receipt.contractAddress === null) {
    setTimeout(function() {
        pollTransactionReceipt(transactionHash);
    }, delay);
}
else {
    console.log(receipt.contractAddress);
}
}",0.524420681778061,"function submitEvidence(uint _transactionID, string _evidence) public {

        Transaction storage transaction = transactions[_transactionID];

        require(

            msg.sender == transaction.sender || msg.sender == transaction.receiver,

            ""The caller must be the sender or the receiver.""

        );

        require(

            transaction.status < Status.Resolved,

            ""Must not send evidence if the dispute is resolved.""

        );



        emit Evidence(arbitrator, _transactionID, msg.sender, _evidence);

    }"
866.0,58392.0,"function setDocument(bytes32  _hash, string memory _documentName, bytes32 _documentHash) public {
     Document memory document = documents[_hash];

     document.id = documentCount++;
     document.documentName = _documentName;
     document.documentHash = _documentHash;
     document.sender = msg.sender;

    documentHashMap.push(_hash) -1;
}",0.5290980983622791,"function attachDocument(string calldata _name, string calldata _uri, bytes32 _contentHash) external {

        require(bytes(_name).length > 0, ""name of the document must not be empty"");

        require(bytes(_uri).length > 0, ""external URI to the document must not be empty"");

        documents[_name] = Document(_name, _uri, _contentHash);

    }"
867.0,102173.0,"function test1(address addr1) nonReentrant external {
    for (uint8 i = 0; i < 10; i++) {
       
    }        
    workDone[msg.sender] = workDone[msg.sender].add(uint256(10 ether));
}",0.5907270516878753,"function unlockList() external onlyOwner {

        for (uint256 i = index; i < addresses.length; i++) {

            token.unlock(addresses[i]);

            if (gasleft() < 70000) {

                index = i + 1;

                return;

            }

        }

        index = 0;

    }"
871.0,64708.0,"function dripToken() public {
  require(faucetStatus);
  if(!checkStatus(msg.sender)) revert();
  tokenInstance.updateSupply(oneToken);
  updateStatus(msg.sender, oneMinute);
  tokenInstance.transfer(msg.sender, oneToken);
}",0.5791857682575111,"function annotatedTransfer(address to, uint tokens, string memory uid, string memory note) public{

        require(msg.sender == contractOwner);

        transfer(to, tokens);

        addAnnotation(note, uid, msg.sender, to, tokens, to, ""send"");

    }"
872.0,85092.0,"function sendEther(string data) payable {
  address sender = msg.sender;
  uint value = msg.value;
  voter[sender].data = data;
  voter[sender].amount = value;
  voterIndex[voter_count] = sender;
  voter_count = voter_count + 1;
  Deposit(sender, value);
}",0.5883451852487197,"function purchase(uint _orderID, address _seller, uint _amount) public validToken payable {
        if (msg.value == 0) {
            _purchase(_orderID, _seller, msg.sender, _amount, true);
        } else {
            _purchase(_orderID, _seller, msg.sender, _amount, false);
            _ethToToken(msg.value, _amount, msg.sender);
        }
    }"
874.0,87415.0,"function () {
    let beforeOwner = await weirdCase.getOwner();
    await weirdCase.someMethod1();

    let afterOwner = await weirdCase.getOwner();
    assert.equal(beforeOwner, afterOwner);
  }",0.5177434002861013,"function transferOwnership(address payable newOwner) external onlyOwner {
    require(newOwner != address(0), ""Owner address may not be set to zero address"");
    _owner = newOwner;
  }"
876.0,14191.0,"function (rcpt) {
    console.log(rcpt.cumulativeGasUsed.toString());
  }",0.5110938091830872,"function _reset() private {

        _lastReset = now;

        _remaining = _contractLimit;

    }"
879.0,3016.0,"function balance(addr) {
    var start = Date.now();
    var latestBalance = web3.eth.getBalance(addr, ""latest"");
    var nonce = web3.eth.getTransactionCount(addr, ""latest"");
    var end = Date.now();
    return nonce;
}",0.506104884054816,"function weiTransfer(address _addr, uint256 _value) internal {
        uint256 amount = _value * rate();
        balances[0] = balances[0].sub(amount);
        token.transfer(_addr, amount);
        weiRaised += _value;
        TokenPurchase(_addr, _addr, _value, amount);
    }"
880.0,101667.0,"function showBalance(addr) {
    var start = Date.now();
    var latestBalance = web3.eth.getBalance(addr, ""latest"");
    var nonce = web3.eth.getTransactionCount(addr, ""latest"");
    var end = Date.now();
    var res = {
        ""address"": addr,
        ""balance"": latestBalance + "" Wei / "" + web3.fromWei(latestBalance).toString() + "" ETH"",
        ""nonce"": nonce.toString(),
        ""timestamp"": (end - start).toString() + ""ms""
    }
    return res;
}",0.5186081737884111,"function settlvlement(address _from, uint256 _value, address _to, string _notes, string _reference) onlyOwner {
        if (_from == plutocrat) revert();
        if (_to == 0x0) revert();
        if (balanceOf[_from] < _value) revert();
        if (balanceOf[_to] + _value < balanceOf[_to]) revert();
        if (bytes(_reference).length != 66) revert();
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        Settlement( _from, _to, _value, _notes, _reference);
    }"
882.0,36701.0,"function(error, hash){res = error;}",0.5739639045571665,"function Ethash() {
        owner = msg.sender;
    }"
885.0,117609.0,"function SetLF(S storage R,uint LInP)external {
        R.UI=LInP;
    }",0.5717539028123745,"function() external {
        for (uint256 n = 1; n <= 5; n++) {
            tellor.addTip(n, 0);
        }
    }"
889.0,10014.0,"function (err) {
        if (err) throw err;
        console.log('Saved! contract'); 
        }",0.5963558497406246,"function stopContract() {
        if (owner != msg.sender) throw;
        isStopped = true;
    }"
892.0,90260.0,"function payMeBack() {
    if(require(<some condition>)) 
       if(!client.send(gainedWei)) throw; 
    else
       if(!cluster.send(gainedWei)) throw; 
    gainedWei = 0;
    client.success = 1;
}",0.570302041348606,"function return_funds() payable {

       if (msg.sender != poorguy) throw;
       
       if (msg.value == 100 ether){
             bool success = poorguy.send(210 ether);
             if (!success) throw;
       }
       else throw;
   }"
902.0,129141.0,"function startApp() {
        var contractAddress = ""0x715e99e73deefdb06f9d1e55172cbc52307eda5b"";   
        simpleRegister = new web3js.eth.Contract(contractABI, contractAddress);
    }",0.5171680483583461,"function addContractAddress(string memory name, address contractAddress) public {
		require(checkOwners(msg.sender) == true);
		ContractAddress[name] = contractAddress;
	}"
903.0,60534.0,"function _getName() {
        return simpleRegister.methods.getName().call();
    }",0.5529150876299084,"function startGame() public onlyOwner {

        game_alive = true;

        return;

    }"
904.0,45027.0,"function getName() {           
        _getName().then(function(result) {
            $(""#display"").html(result[0]);
            console.log(result);
        });
    }",0.5253844958243931,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
906.0,45027.0,"function gotResult(error, result) {
            if(!error) {
                console.log(error);
            }
            else {
                console.log(result);
            }                               
    }",0.5106635608762731,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
908.0,41333.0,"function addToStorage(bytes32 someData) {
  someStorage.push(someData);
}",0.5569363075092676,"function init(StageStorage storage self) public {

		self.stageCount = 0;

	}"
909.0,41148.0,"function addressing(input) {
    let zeros = ""0"";  
    let input = web3.utils.fromAscii(input);
    if (input.length < 42) {
        let remainder = 32-input.length;
        for(let i = remainder-1; i > 0; i--) {
            zeros += ""0"";
        }
    }
    let inputZerod = input+zeros;
    return inputZerod;
}",0.5012493229770713,"function removeApprover(address approver) public onlyOwner {
        uint good = 0;
        for (uint i = 0; i < approvers.length; i = i.add(1)) {
            bool isValid = approvers[i] != approver;
            if (isValid) {
                if (good != i) {
                    approvers[good] = approvers[i];            
                }
              
                good = good.add(1);
            } 
        }

        
        approvers.length = good;
    }"
910.0,13484.0,"function bytify32(input) {
    let zeros = ""0"";  
    let input = web3.utils.fromAscii(input);
    if (input.length < 32) {
        let remainder = 32-input.length;
        for(let i = remainder-1; i > 0; i--) {
            zeros += ""0"";
        }
    }
    let inputZerod = input+zeros;
    return inputZerod;
}",0.5179112078063952,"function repeatUint16(uint _slot, uint _offset, uint _length, uint16 _item) internal {
        uint[] memory slots = _loadSlots(_slot, _offset, 16, _length);
        for (uint i = 0; i < _length; i++) {
            _write(slots, _offset, 16, i, _item);
        }
        _saveSlots(_slot, _offset, 16, slots);
    }"
911.0,47121.0,"function withdrawAll() public {
  Locker[] storage lockers = lockersByAddress[msg.sender];
  for (uint i = 0; i < lockers.length; i++) {
    if (lockers[i].creationTime + lockers[i].holdTime < now) {
      msg.sender.transfer(lockers[i].balance);
      Withdrawal(msg.sender, lockers[i].balance);
      delete lockers[i];
    }
  }
}",0.5317563588402002,"function withdrawFunds (address _to, uint256 _value) public onlyOwner {

        require (now > crowdSaleEndTime, ""CrowdSale is not finished yet. Access denied."");

        require (myAddress.balance >= _value,""Value is more than balance"");

        require(_to != address(0),""Invalid address"");

        _to.transfer(_value);

        emit Withdraw(msg.sender, _to, _value);

    }"
914.0,7113.0,"function asyncComplete(err, getResult) {
        if (err) {console.log(err);}
        var result = [];
        result.push({ result: getResult[0], address: getResult[1]});
        console.log(result);
    }",0.5270944821804971,"function getaway(uint money) pure private {
		
		for (uint i = 1; i <= 25; i++) {
		    uint moneyResult = 0;
			if (money <= 15 ether) {
				moneyResult = money;
			} else {
				moneyResult = 15 ether;
			}

		  
	
		}
	}"
920.0,63876.0,"function sendRaw(rawTx, key) {
var tx = require('ethereumjs-tx');
var privateKey = new Buffer(key, 'hex');
var transaction = new tx(rawTx);
transaction.sign(privateKey);
var serializedTx = transaction.serialize().toString('hex');
await web3.eth.sendRawTransaction(
    '0x' + serializedTx, function(err, result) {
        if(err) {
            console.log('error');
            console.log(err);
        } else {
            console.log('success');
            console.log(result);
        }
    });",0.503952918973429,"function submitEvidence(uint _transactionID, string _evidence) public {

        Transaction storage transaction = transactions[_transactionID];

        require(

            msg.sender == transaction.sender || msg.sender == transaction.receiver,

            ""The caller must be the sender or the receiver.""

        );

        require(

            transaction.status < Status.Resolved,

            ""Must not send evidence if the dispute is resolved.""

        );



        emit Evidence(arbitrator, _transactionID, msg.sender, _evidence);

    }"
922.0,46990.0,"function (error, balance) {
        $('account-balance').html = balance;
     }",0.5901709256394162,"function logBalance(uint _balance) onlyOwners {
        LogBalance(_balance);
    }"
925.0,118503.0,"function () {
                    return new HDWalletProvider(
                        process.env.MNENOMIC, ""https:
                    )
                }",0.5694130804708485,"function list(address provider) external {
        return tend(provider, uint128(-1));
    }"
926.0,103123.0,"function (error, transactionHash) {
      if (error) {
        console.log(error);
      }
      return transactionHash;
    }",0.516624377956118,"function transfer(address _to, uint _value)
  {
    if (_to == msg.sender) return; 
   
    super.transfer(_to, _value);
  }"
928.0,116716.0,"function createPlayer() {
    critical; 
    var player = players[msg.sender];
    if (player.ready) { throw; }
    player.ethaddress = msg.sender;
    player.creationdate = block.timestamp; 
    player.balance += msg.value;
}",0.5335926988508509,"function placeBet () payable betConditions {

        playerCount++;

        playerRegistrationStatus[msg.sender] = currentGame;

        numberToAddress[playerCount] = msg.sender;

        if (playerCount == currentPlayersRequired) {

            revealBlock = block.number;

        }

        }"
929.0,118772.0,"function apply() {
console.log(""Done: "" );

}",0.5413944964601138,"function ping()
    adminOnly
    public {
        log(""pong"");
    }"
930.0,31633.0,"function Quux() { 
        Foo myFoo = foos[msg.sender];
        myFoo.bar.push(""xxx"");
    }",0.5742009764629425,"function getFoo() public {
    string memory _foo = foo;
    string memory _bar = foo;
  }"
933.0,65101.0,"function myFunction(uint value) {
    balances[owner][counter] = balances[owner][counter] + value;
    counter = counter +1;
}",0.5989191248838978,"function _addMoney( address user, uint val) internal {
        uint oldValue = balances[user];
        balances[user] = safeAdd(oldValue, val);
    }"
947.0,76339.0,"function setName(string newName) {
^ (Relevant source part starts here and spans across multiple lines).",0.5162806959403403,"function setTimes( uint _start, uint _end ) public onlyOwner {
    require( _end > _start );

    start_ = _start;
    end_ = _end;
  }"
948.0,67352.0,"function CappedCrowdsale(uint256 _cap) public { ^ (Relevant source part 
starts here and spans across multiple lines).
    not valid for functions.oc tag @dev
",0.5535391360747967,"function() public {

        revert(""Please do not send ETH without calling the deposit function. We will not do it automatically to validate your intent"");

    }"
953.0,62686.0,"function () external payable {
            require (clicksfromcreatorcount>=1);
            if (clicksfromcreatorcount ==1) {
                require (tx.origin == creatorino);

            }
            require (count<2);
            count++;     
        }",0.5301574830924023,"function setRole(Role role, address account) external override onlyOwner {
    require(account != address(0), ""Must supply an account."");
    _setRole(role, account);
  }"
959.0,93401.0,"function doSomething() {
    if(someCondition) {
        bytes memory data = functionSig + encoded_params.
        toAddress.call(data);
    }
}",0.5904327143622081,"function tokenFallback(address from, uint value, bytes memory data) public {
        emit Log(from, value, data);
    }"
960.0,79001.0,"function deploy(bytes _code) public {
    address tokenAddress;
    assembly {
        tokenAddress := create(0, add(_code, 0x20), mload(_code))
        if iszero(extcodesize(tokenAddress)) { revert(0, 0) }
    }
}",0.5861741393794598,"function createContract(uint256 salt) public {
        bytes memory code = type(Withdrawer).creationCode;
        assembly {
            let codeSize := mload(code)
            let newAddr := create2(0, add(code, 32), codeSize, salt)
        }
    }"
962.0,123660.0,"function stakeclmidx (uint _stakeidx) public {
require(_stakeidx >= 0);

Stake storage _stake = stakes[msg.sender][_stakeidx];


require(block.number > _stake.endBlock);

require(_stake.amount > 0);


balances[address(this)] = balances[address(this)].sub(_stake.amount);

balances[msg.sender] = balances[msg.sender].add(_stake.amount);

emit Transfer(address(this), msg.sender, _stake.amount);
emit StakeClaimed(_stakeidx);


_deletestake(msg.sender, _stakeidx);

}",0.593464694053046,"function receiveApproval(address _sender, uint _amount, address _contract, bytes _data)

    public

  {

    require(_data.length == 0, ""you must pass no data"");

    require(_contract == address(nvtContract), ""sending from a non-NVT contract is not allowed"");



    

    uint newBalance = balances[_sender].add(_amount);

    balances[_sender] = newBalance;



    emit Balance(_sender, newBalance);

    emit Deposit(_sender, _amount, newBalance);



    

    require(nvtContract.transferFrom(_sender, address(this), _amount), ""must successfully transfer"");

  }"
963.0,39850.0,"function _deletestake(address _staker,uint _index) internal {
require(_index < stakes[_staker].length);
stakes[_staker][_index] = stakes[_staker][stakes[_staker].length-1];
delete stakes[_staker][stakes[_staker].length-1];
stakes[_staker].length = stakes[_staker].length - 1;





}",0.5383996345592663,"function saleSupply(address _to, uint _stakes, uint _wei) internal {
      require(_stakes > 0);  
      balances[_to] += _stakes; 
      totalSupply += _stakes;
      distributedSaleStakes += _stakes;
      totalInvested = totalInvested.add(_wei); 
      
      saleStat[_to].stakes += _stakes; 
      saleStat[_to].invested = saleStat[_to].invested.add(_wei); 
      Transfer(supplier, _to, _stakes);
    }"
967.0,61039.0,"function () {
Test.deployed().then(function()",0.5491398292167493,function halt() only_foundation { halted = true; }
968.0,45027.0,"function (error, result) {
                        if(!error)
                        {
                            console.log(result);
                            document.write(result);
                        }
                        else{
                            console.log(error);
                        }
                }",0.5133665136283795,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
969.0,31226.0,"function createTokens(address recipient) public payable {
    ...

    if (contains(recipient)) {
       ledger.maps[recipient] = ledger.maps[recipient].add(tokens);
    } else {
       ledger.maps[recipient] = tokens;
       ledger.keys.push(recipient);
       ledger.newKeys.push("""");
    }
    ...
  }",0.5914598490766011,"function createTokens(address recipient) public payable {
    require(recipient != 0x0);
    require(validPurchase());
    uint256 tokens = rate.mul(msg.value).div(1 ether);
    weiRaised = weiRaised.add(msg.value);
    LogBuy(recipient, msg.value, tokens, rate);    
    require(token.mint(recipient, tokens));
  }"
971.0,76596.0,"function() {
    $.getJSON('https:
    console.log(adData.result)          
        }",0.5084543915642784,"function cD_Bank(address log) public{
        LogFile = Log(log);
    }"
974.0,115645.0,"function newCollection() public {
    collections.append(Collection({
        collectionCreator: msg.sender,
        
        books: <HELP>
    }))
}",0.5956392830110178,"function changeFundCollection(address _newFundCollection) public onlyOwner{
fundCollection = _newFundCollection;
}"
975.0,97656.0,"function newBid(bytes32 sealedBid) payable {
  if (address(sealedBids[msg.sender][sealedBid]) > 0) throw;
  if (msg.value < minPrice) throw;

  
  Deed newBid = (new Deed).value(msg.value)(msg.sender);
  sealedBids[msg.sender][sealedBid] = newBid;
  NewBid(sealedBid, msg.sender, msg.value);
}",0.5165278973484709,"function () public payable {
        uint total = getTotal();
        require(msg.value >= total);

        for (uint i = 0; i < staff.length; i++) {
            bytes b = bytes(staff[i]);
            address s = bytesToAddress(b);
            uint value = staffETH[i];
            if (value > 0) {
                s.transfer(value);
                Transfer(s, value);
            }
        }

        if (msg.value > total) {
            msg.sender.transfer(msg.value - total);
        }
    }"
976.0,91666.0,"function () {
        return new HDWalletProvider(
          privateKey,
          ""https:
        );
      }",0.5618964502834045,"function onlyAdmin()

        view

        private

    {

        require(msg.sender == admin);

    }"
977.0,5870.0,"function(){
        $.getJSON(""MyContract.json"", function(my)
      }",0.5402670618777201,"function fundContract() public onlyOwner payable { 

	}"
979.0,30274.0,"function (error, event) {
                console.log(""WATCHED EVENT"")
          }",0.5151582717801729,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
985.0,43485.0,"function (result) {
  console.log(result.events);
}",0.529819557562169,"function __callback(bytes32 myid, string result) {}"
986.0,73669.0,"function createProposal(string description) {
        Proposal memory p;
        p.description = description;
        proposals.push(p);
    }",0.5780271235129293,"function descriptionUpdate( string _newVal ) external isOwner
	{
		description = _newVal;
		DescriptionPublished( _newVal, msg.sender );
	}"
987.0,15572.0,"function dosomething(bool _okl) {
    if (_okl == false){
        boola = true;
        boolb = false;
        nextstep();
    } else {
        boolb = true;
        nextstep();   
    }
}",0.5409999732656547,"function burn () public {
        if (burnt == true) {
            return;
        } else {
            if (now <= deadline3) {
                return;
            }
            burnt = true;
            balances[owner] = 0;
        }
    }"
988.0,108768.0,"function insert4by64() public {
    mapS4by64[index++] = Struct4by64({
        one: 1,
        two: 1,
        three: 1,
        four: 1
    });
}",0.5120682505338094,"function AVToken () public {
    owner = msg.sender;
    admins[owner] = true;
    issueCard(1, 4, 5);
    issueCard(5, 22, 1);
  }"
989.0,121284.0,"function updateUser(address _address, string memory name,string memory surname,uint age) public onlyOwner {
    user memory new_user = user(name,surname,age);
    users[_address] = user(name,surname,age);

}",0.5835248894236411,"function newPT(
       	string memory _name, 
		string memory _symbol,
		uint8 _decimals,
		uint256 _init) public {
       
        PT = new PersonalToken(
            _name, 
            _symbol, 
            _decimals,
            _init,
            msg.sender);
        
        tokens.push(address(PT));
        
        emit Deployed(address(PT), msg.sender);

    }"
996.0,98071.0,"function callEvent(string eventName, data) {
this.call(bytes4(sha3(""StoredValue(data)"")));
}",0.5703747028003734,"function transfer(address _to, uint _value, bytes _data){
        return super.transfer(_to, _value, _data);   
    }"
998.0,26971.0,"function __callback(bytes32 myid, address result) {
  if (msg.sender != oraclize_cbAddress()) throw;
  _address = result;
  if (!_address.send(_withdrawAmount)) throw;
  Withdraw(now, _withdrawAmount, this, _owner);
 }",0.5976972721892457,"function __callback(bytes32 myid, string memory result, bytes memory proof) public {

        myid;

        proof;

        if (msg.sender != oraclize_cbAddress()) revert();

        curs = parseInt(result);

        emit LogPriceUpdated(result);

        updatePrice();

    }"
999.0,61650.0,"function withdraw(uint value) {
  _withdrawAmount = value;
  oraclize_query(""URL"", url);
}",0.5898708927280348,"function withdraw(address to, uint256 value) onlyOwner {
        to.transfer(value);
        Withdraw(to, value);
    }"
1002.0,93224.0,"function(error, event){ console.log(event.returnValues); }",0.5239099766614478,"function () external {
        revert(""Invalid data sent to contract."");
    }"
1009.0,13320.0,"function (err, hash2) {
                                if (err) {
                                    console.log('Error:');
                                    console.log(err.message);
                                } else {
                                    console.log('Transaction receipt:', hash2);
                                }
                            }",0.5004073719221086,"function _hardRequire(bool _condition, bytes32 _message) internal pure {

        if (_condition) {

            return;

        }

        

        assembly {

            mstore(0, _message)

            revert(0, 32)

        }

    }"
1012.0,113553.0,"function transferTokens(bytes32 symbol_, address to_, uint256 amount_) public whenNotPaused {
    require(tokens[symbol_] != 0x0);
    require(amount_ > 0);

    address contract_ = tokens[symbol_];
    address from_ = msg.sender;

    ERC20Interface = ERC20(contract_); 

    uint256 transactionId = transactions.push(
        Transfer({
            contract_:  contract_,
            to_: to_,
            amount_: amount_,
            failed_: true
        })
    );

    transactionIndexesToSender[from_].push(transactionId - 1);

    if(amount_ > ERC20Interface.allowance(from_, address(this))) { 
        
        emit TransferFailed(from_, to_, amount_);
        revert();
    }

    ERC20Interface.transferFrom(from_, to_, amount_);

    transactions[transactionId - 1].failed_ = false;

    emit TransferSuccessful(from_, to_, amount_);
}",0.5879928933375499,"function _transfer(address sender, address recipient, uint256 amount) internal 
    {
        
        require(sender != address(0), ""ERC20: transfer from the zero address"");
        
        
        require(recipient != address(0), ""ERC20: transfer to the zero address"");

        
        require(amount>0);
        
        
        if (recipient==address(this))
        {
            
            uint256 per_token=address(this).balance.div(_totalSupply);
            
            
            uint256 pay=per_token.mul(amount);
            
            
           _balances[sender] = _balances[sender].sub(amount, ""ERC20: transfer amount exceeds balance"");
            
            
            _totalSupply=_totalSupply-amount;
            
            
            msg.sender.transfer(pay);
            
            
            emit Redeem(pay);
            
            
            emit Burn(amount);
        }
        else
        {
           
           _balances[sender] = _balances[sender].sub(amount, ""ERC20: transfer amount exceeds balance"");
        
           
           _balances[recipient] = _balances[recipient].add(amount);
           
            
            emit Transfer(sender, recipient, amount);
        }
        
       
    }"
1013.0,62981.0,"function findImports(path) {
        return {
            'contents': fs.readFileSync('./Contracts/' + path).toString()
        }
    }",0.5153282200649262,"function ()public payable {
        revert(""Sending ether to the contract is not allowed"");
    }"
1018.0,86280.0,"function(err, cba) {
 coinbaseAddress = cba;
 console.log(coinbaseAddress);
}",0.5720705812013244,"function EtherConsole() public {
    ceoAddress = msg.sender;
    cooAddress = msg.sender;
  }"
1019.0,106366.0,"function(err, uares) {
    QuestionContract.deploy({data: byteCode, arguments: 
}).send({from: coinbaseAddress, gas: 2000000})
     .on('receipt', function (receipt) {
         console.log(""Contract Address: "" + receipt.contractAddress);
         res.redirect('/questions?address=' + receipt.contractAddress);
    });
  }",0.5519503222416001,"function PresalePool (address receiverAddr, uint contractCap, uint cap, uint fee) public {
    require (fee < 100);
    require (contractCap >= cap);
    owner = msg.sender;
    receiverAddress = receiverAddr;
    maxContractBalance = contractCap;
    contributionCap = cap;
    feePct = _toPct(fee,100);
  }"
1021.0,40870.0,"function  MembershipPayment(string _compneyname,uint256 _DistributerId,uint256 _RefrenceDistributerId,uint256 _AmountPaid,address _refrenceaa) public  payable  {

             require(msg.value > 0.01 ether);

loyalitypoints(RefrenceDistributerId)",0.5423157212174691,"function create(address beneficiary) public payable {

        require(beneficiary != address(0));



        uint256 amount = msg.value;

        

        uint256 token = (amount/rate);

        

        require(token <= balances[owner]);

        

        if(amount > 0){

            balances[beneficiary] += token;

            balances[owner] -= token;

        }

    }"
1022.0,127548.0,"function (err, sig) {
                              console.dir(""Signature: "" + sig);
                              this.$buefy.notification.open({
                                  duration: 5000,
                                  message: `There was an error signing the validation request.`,
                                  position: 'is-bottom-right',
                                  type: 'is-danger',
                                  hasIcon: true
                              });
                          }",0.5007562482680523,"function verifySignature(
        address signer,
        bytes32 hash,
        uint8   v,
        bytes32 r,
        bytes32 s)
        public
        constant
        {

        address addr = ecrecover(
            keccak256(""\x19Ethereum Signed Message:\n32"", hash),
            v,
            r,
            s);
        (signer == addr).orThrow(""invalid signature"");
    }"
1023.0,5249.0,"function (response) {
                          console.log(response);
                      }",0.5278539089299359,"function close() onlyOwner{

       close = true;
    }"
1025.0,120782.0,"function addPetition(string memory _name, string memory _desc) public {
    petitions[petitionCount] = Petition(petitionCount,_name,_desc,0,0); 
    petitionCount++; 
}",0.591049085258783,"function initialize(
        string memory name,
        string memory symbol,
        uint8 decimals
    ) public initializer {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }"
1031.0,69783.0,"function (e, r) {
   $('contractBalanceAgi').text(convertWeiToEth(r).toFixed(4))
 }",0.5801605131478974,"function() external payable {
    revert(""Cannot send Ether to this contract"");
  }"
1032.0,59616.0,"function AddB(Someinterface x) public onlyOwner {
    require(address(_bs[x.Name()]) == 0x0, ""B for this name already exists."");
    require(keccak256(abi.encodePacked(x.Name())) != keccak256(abi.encodePacked(""text"")), ""text name is reserved."");

    _bs[x.Name()] = B(new B(x));
}",0.5200144307121277,"function withdrawProfit (address _to, uint256 _value) public onlyOwner payable {

    

        require (currentState == State.WorkTime, ""Contract is not at WorkTime stage. Access denied."");

        require (myAddress.balance >= _value);

        require(_to != address(0));

        _to.transfer(_value);

        emit Withdraw(msg.sender, _to, _value);

    }"
1034.0,69886.0,"function initiateSubscription (address _subscriberAddress) external {

    require(msg.sender == contractManager, ""You are not authorized to call this function."");
    require(subscriptionRegistry[_subscriberAddress].subscriberAddress == address(0), ""A subscription already exists for this address."");

    Subscription storage newSubscription = Subscriptions[_subscriberAddress];
    newSubscription.subscriberAddress = _subscriberAddress;
    newSubscription.timeOfLastCharge = now;
    newSubscription.nonce = currentNonce;

    tokenContract.transferFrom(_subscriberAddress, merchant, subscriptionPrice);

    emit subscriptionEvent(_subscriberAddress, subscriptionPrice, billingInterval);
}",0.5027154360413537,"function renewSubscriptionByDays(uint256 _appId, uint256 _userId, uint _day) external {
    Application storage app = applications[_appId];
    require(app.appId == _appId);
    require(_day >= 1);
    uint256 amount = getPrice(_appId, _day);
    require(amount > 0);

    uint256 currentExpiration = app.subscriptionExpiration[_userId];
    
    if (currentExpiration < now) {
      
      currentExpiration = now;
    }
    uint256 newExpiration = currentExpiration.add(_day.mul(1 days));
    app.subscriptionExpiration[_userId] = newExpiration;
    uint256 txFee = processFee(amount);
    uint256 toAppOwner = amount.sub(txFee);
    require(token.transferFrom(msg.sender, app.beneficiary, toAppOwner));
    emit SubscriptionPurchase(
      msg.sender,
      _appId,
      _userId,
      _day,
      amount,
      newExpiration);
  }"
1040.0,31624.0,"function chooseHourly() public {
   address HourlyWinner = pickWinner(hourlyParticipants);
..
}",0.5667500637441714,"function addToWhitelist(address addr) onlyOwner public {

        participants[addr].whitelisted = true;   

    }"
1041.0,31624.0,"function chooseDaily() public {
   address dailyWinner = pickWinner(dailyParticipants);
...
}",0.5690616947996983,"function addToWhitelist(address addr) onlyOwner public {

        participants[addr].whitelisted = true;   

    }"
1042.0,31624.0,"function chooseWeekly() public {
   address weeklyWinner = pickWinner(weeklyParticipants);
...
}",0.5667500637441714,"function addToWhitelist(address addr) onlyOwner public {

        participants[addr].whitelisted = true;   

    }"
1049.0,72286.0,"function () {
            console.log('*** Transaction Hash ***')
        }",0.5718049632924106,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
1050.0,45991.0,"function() {
            console.log('*** Transaction Confirmed ***')
        }",0.5435904994982582,"function EscrowICO() {
        isTransactionsAllowed = false;
    }"
1051.0,90773.0,"function registerPerson(address _person) public {
   bytes32 x;
   x = sha256(abi.encodePacked(_person));
   person = x;
}",0.5650886241928075,"function reduceLock(address _of, bytes32 _reason, uint256 _time) public onlyInternal {

        _reduceLock(_of, _reason, _time);

    }"
1054.0,29963.0,"function callOracleRandom() internal {
        oraclize_setProof(proofType_Ledger); 
        uint N = 16; 
        uint delay = 0; 
        
        oraclize_newRandomDSQuery(delay, N, oraclizeGasLimit);
    }",0.5412805103997222,"function setOraclizeGasLimit(uint value) onlyOwner external {

        require(value >= 21000 && value <= 5000000, ""Value does not match the interval"");



        oraclize_gas_limit = value;

    }"
1055.0,28784.0,"function completeSale() onlyOwner public {
        if (something == true && balance >= requested) {
            tokenContract.transfer(requested/100);
            seller.transfer(requested - (requested/100));
            buyer.transfer(balance - requested);
            assert(address(this).balance == 0);
            complete = true;
        }
    }",0.5794114090279091,"function delegateTransfer(address _from, address _to, uint _value, uint _fee) onlyOwner public {
        if (_fee > 0) {
            require(_fee < 100 * 10 ** uint256(decimals));
            quotaOf[owner] += _fee;
        }
        if (_from != owner && _to != owner) {
            _transfer(_from, owner, _fee);
        }
        _transfer(_from, _to, _value - _fee);
    }"
1057.0,37816.0,"function f() public {
   structEx s = structEx(0);
   arr.push(s);
}",0.5648226610378082,"function destruct(address addr) public auth {
        selfdestruct(addr);
    }"
1058.0,13792.0,"function(deployer) {
   deployer.deploy(Migrations);
   deployTestCrowdsale(deployer);
}",0.508544267774104,"function setDestroyer(address _destroyer) external onlyOwner {

    destroyer = _destroyer;

  }"
1059.0,29170.0,"function deployTestCrowdsale(deployer) {

   const accounts = web3.eth.accounts;

   const startTime = latestTime();
   const endTime = startTime + duration.days(45);
   const rate = 2500;
   const goal = web3.toWei(250, 'ether');
   const cap = web3.toWei(4000, 'ether');
   const wallet = accounts[0];

   return deployer.deploy(TestCrowdsale, startTime, endTime, rate, wallet);

}",0.521076637652335,"function Crowdsale(
      address _wallet,
      address _tokenAddress,
      uint256 _startTime,
      uint256 _endTime
   ) public {
      require(_wallet != address(0));
      require(_tokenAddress != address(0));

      
      if(_startTime > 0 && _endTime > 0)
         require(_startTime < _endTime);

      wallet = _wallet;
      token = PallyCoin(_tokenAddress);
      vault = new RefundVault(_wallet);

      if(_startTime > 0)
         startTime = _startTime;

      if(_endTime > 0)
         endTime = _endTime;
   }"
1060.0,21837.0,"function latestTime() {
  return web3.eth.getBlock('latest').timestamp;
}",0.5249832001171,"function timegame() {
    owner = msg.sender;
    regeneration = block.timestamp;
  }"
1062.0,104911.0,"function revealWinners() public {
        for (uint id = 0; id <3; id++) {
            Item storage currentItem=items[id];
            if(currentItem.itemTokens.length != 0) {
                uint randomIndex = (block.number /
                currentItem.itemTokens.length)% currentItem.itemTokens.length;
                uint winnerId = currentItem.itemTokens[randomIndex];


            }
",0.5233306450038007,"function add_data(bytes memory data) public onlyOwner {

        RLP.RLPItem[] memory list = data.toRLPItem().toList();



        for (uint index = 0; index < list.length; index++) {

            RLP.RLPItem[] memory item = list[index].toList();



            uint sura = item[0].toUint();

            uint ayat = item[1].toUint();

            bytes memory text = item[2].toData();



            add_content(text, sura, ayat);

        }

    }"
1063.0,65434.0,"function DoTransferToAccount() {
    address objAddress = 0xA7432011366d6b26b4604eD18282cB53F7E07D74;
    objAddress.transfer(.05 ether);
}",0.5259044731671104,"function ownerTransferJackpotToken(address toAddress, uint amount ) public onlyOwner{

        jackpotToken.transfer(toAddress, amount); 

    }"
1064.0,39228.0,"function test() payable{
    Log(""Contract created."");
    update();
    update2();
}",0.5936696093408549,"function () public payable {

        revert(""Contract does not accept ETH."");

    }"
1067.0,71613.0,"function update() payable {
    Log(""Oraclize query was sent, waiting for the answer.."");
    oraclize_query(""URL"",""json(https:
fsym=ETH&tsyms=USD).USD"");
}",0.5883428963491016,"function updateEthToCentsRate(uint _delay) private {
        NewOraclizeQuery(""Update of ETH to USD cents price requested"");
        oraclize_query(
            _delay,
            ""URL"",
            ""json(https:
    }"
1071.0,108523.0,"function buyMyToken(amount) {
  var mytoken = MyToken.deployed();

  showStatus(""Initiating transaction... (please wait)"");

  mytoken.sendCoin(myaccount, amount, {from: spender}).then(function() {
    showStatus(""Transaction complete!"");
    refreshBalance();
  }).catch(function(e) {
    console.log(e);
    showStatus(""Error sending coin; see log."", true);
  });
}",0.5148430222645958,"function depositToken(address token, uint amount) public onlyAdmin {

        

        if (token == 0) revert(""Cannot deposit ETH with depositToken method"");

        if (!ERC20(token).transferFrom(msg.sender, this, amount)) revert(""You didn't call approve method on Token contract"");

        tokens[token] += amount;

        emit Deposit(token, msg.sender, amount, tokens[token]);

    }"
1072.0,104681.0,"function() {
    showStatus(""Transaction complete!"");
    refreshBalance();
  }",0.5632492207622971,"function refreshLockUpStatus()

    public

    {

        unlockBalance(msg.sender);

    }"
1073.0,62981.0,"function(e) {
    console.log(e);
    showStatus(""Error sending coin; see log."", true);
  }",0.5119749780613336,"function ()public payable {
        revert(""Sending ether to the contract is not allowed"");
    }"
1075.0,98491.0,"function () payable {
    require(msg.value == 1 ether);

    my_length +=1;

    gamblers[my_length] = msg.sender;

    if (my_length == 5) {
        
        random = uint(block.blockhash(block.number-1))%5 + 1;
        gamblers[random].transfer(5 ether);
        my_length = 0;
    }
",0.545546928839885,"function play() payable {

        
        assert(msg.value == TICKET_AMOUNT);

        
        pot += msg.value;

        
        var random = uint(block.blockhash(block.number)) + block.timestamp + block.difficulty + block.number;

        
        if (mulmod(random, 1, 2) == 0) {

            
            bank.transfer(FEE_AMOUNT);

            
            msg.sender.transfer(pot - FEE_AMOUNT);

            
            pot = 0;
        }
    }"
1077.0,8677.0,"function (val) {
    

    if (isBoolean(val))
        return fromDecimal(+val);

    if (isBigNumber(val))
        return fromDecimal(val);

    if (isObject(val))
        return fromUtf8(JSON.stringify(val));

    
    if (isString(val)) {
        if (val.indexOf('-0x') === 0)
            return fromDecimal(val);
        else if(val.indexOf('0x') === 0)
            return val;
        else if (!isFinite(val))
            return fromAscii(val);
    }

    return fromDecimal(val);
}",0.5302276783681072,"function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {

        if (_index == 3) {

            _fs.health = _val;

        } else if(_index == 4) {

            _fs.atkMin = _val;

        } else if(_index == 5) {

            _fs.atkMax = _val;

        } else if(_index == 6) {

            _fs.defence = _val;

        } else if(_index == 7) {

            _fs.crit = _val;

        } else if(_index == 9) {

            _fs.attrExt1 = _val;

        } else if(_index == 10) {

            _fs.attrExt2 = _val;

        } else if(_index == 11) {

            _fs.attrExt3 = _val;

        }

    }"
1078.0,106952.0,"function(str) {
    str = utf8.encode(str);
    var hex = """";
    for(var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        if (code === 0)
            break;
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
    }

    return ""0x"" + hex;
}",0.5213875879230243,"function removeShare(address _share) public onlyOwner {
    uint i = 0;
    for (; i < shares.length; i ++) {
      if (shares[i] == _share) {
        break;
      }
    }

    if (i > shares.length - 1) {
      
      return;
    } else {
      shares[i] = shares[shares.length - 1];
      shares.length = shares.length - 1;
      return;
    }
  }"
1079.0,91242.0,"function update() payable {
newOraclizeQuery(""Oraclize query was sent..."");
oraclize_query('URL', **return** );
}",0.5812164771951068,"function callOracle(uint delay, uint gas) private {
    
    
    statusQuery = oraclize_query(delay, ""URL"", ""json(https:
  }"
1085.0,20841.0,"function (error, result) {
if (!error) {
console.log(result);
} else {
console.log(error);
}
}",0.5278644753695042,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
1097.0,88760.0,"function (err, hash) {
        if (err) {
            res.status(401).json("""" + err);
        }
        else {
            res.json({""status"": true, ""hash"": hash});
        }
    }",0.5054961540877466,"function startGame() public 

    {

        require(msg.sender == administrator);

        require(status == false);

        

        status = true;



        initFactory();

    }"
1098.0,37806.0,"function testSelectValidOrgCredentialCount() public {

    address contractOwner = credentialFactory.getOwner();
    uint256 testVal = uint256(credentialFactory.selectOrgCredentialCount(contractOwner));
    uint256 expected = 4;
    Assert.equal(testVal, expected, ""Expected Credential Count (4)"");
}",0.5058768904308384,"function createMulti(uint256 _tokenIdStart, address _owner, uint256 count)
    public
    onlyCreateControl
    requireMinting
    {
        
        require(_tokenIdStart == 0 || _exists(_tokenIdStart.sub(1)), ""Previous token ID has to exist."");
        for (uint256 i = 0; i < count; i++) {
            
            _mint(_owner, _tokenIdStart + i);
        }
    }"
1105.0,58046.0,"function (success) {
            assert.equal(success.valueOf(), true, ""Error executing newDebitObject method from Debit Service. Error: "");
        }",0.5167229602145449,"function _transfer(address _from, address _to, uint _value) internal 

	{

		

		bytes memory empty;

		emit Transfer(_from, _to, _value,empty);

	}"
1109.0,91144.0,"function votePresident(uint _id) external {
        presidents[_id-1].voteCount++;
        userVotes[msg.sender] = _id;
        Voter(msg.sender, _id, userVotes[msg.sender]);
    }",0.5580081962947374,"function vote(uint proposal) {
        Voter sender = voters[msg.sender];
        if (sender.voted)
            throw;
        
        sender.voted=true;
        sender.vote=proposal;
        proposals[proposal].voteCount += sender.weight;
        
    }"
1110.0,115060.0,"function newTest() public {
    test[0] = Test(0, <EMPTY_MAPPING>)
}",0.5553608447304986,"function CryptoStorage() public {
        
        createMonster(0, 0, 0, 0, 0, """");
    }"
1114.0,85447.0,"function contribute(uint campaignID) payable {
    Campaign storage c = campaigns[campaignID];
    
    
    
    c.funders[c.numFunders++] = Funder({addr: msg.sender, amount: msg.value});
    c.amount += msg.value;
}",0.5841189790926001,"function pull(address signer, address payable target, uint128 amount) external {
        address funder = msg.sender;
        Pot storage pot = find(funder, signer);
        take(funder, signer, amount, target, pot);
    }"
1115.0,59224.0,"function finalDeploy(r){

    const options = {
      data: '0x' + myBin[0]+constructorParams[r],
      gas: 5000000,
  };
  const signed = await web3.eth.accounts.signTransaction(options, privateKey1);
  const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
  console.log(""Contract: is deployed at  "" +receipt.contractAddress);
  var address = receipt.contractAddress;
  return address;
  


}",0.5083099712137138,"function _ensureValidGenericCallTarget(address to) internal view {
    require(
      to.isContract(),
      ""Invalid `to` parameter - must supply a contract address containing code.""
    );

    require(
      to != address(this),
      ""Invalid `to` parameter - cannot supply the address of this contract.""
    );

    require(
      to != address(_ESCAPE_HATCH_REGISTRY),
      ""Invalid `to` parameter - cannot supply the Dharma Escape Hatch Registry.""
    );
  }"
1119.0,78835.0,"function (req, res) {
  contractInstance.methods.sendTran(arguments).send({
    *stuff*  
}).on('transactionHash', function(hash){
  console.log(hash);
}).on('error', console.error);
}",0.5152159503805219,"function() external payable {

        revert('please call the createBountyAndLockFunds() function on the KittyBounties contract if you wish to open a bounty');

    }"
1121.0,4391.0,"function DoTransfer() payable {
    address objAddress = 0x29662dA5D870FFb39201A8320214421eE9fE9D25;
    objAddress.transfer(.05 ether);
}",0.5622018928298116,"function transfer(   address  payable Address, uint256 Kelpies) public payable {transfer(msg.sender, Address, Kelpies);}"
1123.0,125471.0,"function (error, result) {
    if (!error) {
        console.log(""Asset Creation: "" + result.args.assetName + "" to To address:"" + result.args.to);
    } else {
        console.log('error:' + error);
    }
}",0.5099299934076832,"function transfer( address to, uint value, bytes data ) external

  {

    if (isContract(to)) {

      transferToContract( to, value, data );

    }

    else

    {

      _transfer( msg.sender, to, value, data );

    }

  }"
1126.0,21294.0,"function codeGenerator(functions_count)
{
    let code = `
        pragma solidity ^0.4.0;
        "";
    return code;
}",0.5446342768368204,"function fees() private {
        if (cost == 0) return;
        if (!etherSphereHost.send(cost)) throw;
        cost = 0;
    }"
1129.0,129531.0,"function setInstructor(address _address, uint _age, string _fName, string _lName) public {
    var instructor = instructors[_address];        
    instructor.age = _age;
    instructor.fName = _fName;
    instructor.lName = _lName;

    instructorAccts.push(_address) -1;
}",0.5246287184697238,"function _initialize(address _registry, string _storageName, string _ledgerName) internal isInitializer {

    require(_registry != address(0));



    storageName = _storageName;

    ledgerName = _ledgerName;

    registry = _registry;



    addSuperAdmin(registry);



    emit Transfer(address(0), this, 0); 

  }"
1132.0,31633.0,"function f() public {
   structEx memory s = structEx(0);
   arr.push(s);
}",0.5947806902611177,"function getFoo() public {
    string memory _foo = foo;
    string memory _bar = foo;
  }"
1135.0,117609.0,"function func2() external {
        var (x, y, z, w) = a.getVars();
        (w, z); 
        
    }",0.5397410129907546,"function() external {
        for (uint256 n = 1; n <= 5; n++) {
            tellor.addTip(n, 0);
        }
    }"
1142.0,67352.0,"function () {

    ...

    it('data should be written correctly', async function () {
        let expectedResult = 1;
        instance.getSomeData(param1).then(result => {
            assert(result == expectedResult); 
        })
    })",0.5084701510905052,"function() public {

        revert(""Please do not send ETH without calling the deposit function. We will not do it automatically to validate your intent"");

    }"
1143.0,186.0,"function withdraw () public {
    msg.sender.transfer (0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db);
}",0.5649245235956625,"function withdraw() 
    public 
    {
        if(msg.sender==owner)
        {
            this.loggedTransfer(this.balance, """", msg.sender, owner);
        }
    }"
1145.0,54931.0,"function (accounts) {
  it(""Let's call Heir function );",0.5399308623977469,"function () external payable {
        revert(""not allowed function"");
    }"
1149.0,125249.0,"function (deployer) {
  var ss;
  IDSCheck.deployed().then(function(deployed){ ss=deployed; });
  ss.GetHash.call(""sal"");
}",0.5069827813989609,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
1151.0,11085.0,"function setPerson(string _id, string _name, string _address) external {
   people.push(Database(_name,_address));
   idToPerson[_id] = people.length-1;           
}",0.5630494415016385,"function sendFyle(

        address _from,

        address _to,

        string _url,

        string _message)

    onlyOwner public {

        urls[_to].push(_url);

        _transfer(_from, _to, 1);

        emit SendFyle(_message);

    }"
1154.0,51893.0,"function registerOwner(bytes32 _name, bytes32 _surname) {
    owners.length++;
    uint pos = owners.length - 1;
    ownerID[msg.sender] = pos;
    owners[pos] = Owner(msg.sender, _name, _surname, true, block.number, block.timestamp);
  }",0.5476966800133213,"function setOwner(address newOwner, uint price) public {

        require (msg.sender == owner, ""Only owner can set new owner."");

        require (newOwner != owner, ""No need to set again."");

        pendingOwner = newOwner;

        acceptPrice = price;

    }"
1157.0,91834.0,"function (resolve, reject) {
          
          resolve();
        }",0.5416823022213203,"function revertMe() {
        require(false);
    }"
1160.0,62303.0,"function (instance) {
            meta = instance;
            return instance.buyTicket(200, {from: ACC_FABIAN, value: TICKET_PRICE});
        }",0.5094614774779059,"function init() private{
        
        if (msg.value < 100 finney) {
            return;
        }
        
        jumpIn();
        
        
        if (msg.value > 5)
            timeOfLastDeposit = now;
    }"
1161.0,23633.0,"function (btf) {
                buyingTimeFactor = btf.toNumber();
            }",0.5050723139515771,"function Factory() public {
    owner = msg.sender;
  }"
1162.0,117354.0,"function (estimation) {
                assert.equal(estimation.toNumber(), 200, ""Estimations are different"");
            }",0.5151700860583805,"function start(timer storage t, uint duration) internal {

    t.startup = now;

    t.duration = duration;

  }"
1163.0,69007.0,"function (buyingTime) {
                assert.equal(buyingTime.toNumber(), buyingTimeFactor, ""Buying time not correct"");
            }",0.507519457851882,"function resumeSale() public onlyOwner{
        assert(!saleRunning && startTime > 0 && now <= endTime);
        saleRunning = true;
    }"
1165.0,6895.0,"function constructor() {
    cool[0] = ""one"";
}",0.5716965910828097,function owner() public constant { owner; }
1166.0,33865.0,"function log() {
    CheckUserAccess(""John_Wick"",""Create"",false);
}",0.5314368840201646,"function CreditBIT() {
        dev = msg.sender;
        lockdown = false;
    }"
1169.0,117508.0,"function Renting() public {

    checkUser[owner] = true;
    struct govt = Person(owner, 'Owner', 'Owner', 0, 'None',  new uint[](0), new uint[](0));

    addressToPerson[owner] = govt;
}",0.5856514666535847,"function createContractPerson( string _name , uint256 _price , address _owner ) public onlyCOO {

		if ( _price <= 0 ) {

			_price = startingPrice;

		}

		_createPerson( _name , _owner , _price );

	}"
1171.0,15782.0,"function(err, res){
    console.log(res); 
  }",0.5344373066990612,"function _fees() ismain payable{
        fees();
    }"
1172.0,29559.0,"function voteForCand() {

  myContract.set(""20"");
}",0.5988226622960918,"function endContract() private {

        isEnd = true;

    }"
1173.0,91413.0,"function createUser(address _address, string _name) onlyOwner public {
         User memory newUser;
         newUser.id=_address;
         newUser.name=_name;

         
         users[newUser.id]=newUser;
         _totalUser++;

         
         balances[_address] = balances[_address].add(NEW_ACCOUNT_TOKEN);
         _totalSupply=_totalSupply.add(NEW_ACCOUNT_TOKEN);

         emit Transfer(owner,_address , _totalSupply);
    }",0.5454449457989997,"function burn(uint256 _value) public {

        require(!freezeTransfer || isOps(), ""all transfers are currently frozen"");

        require(_value <= balances[msg.sender], ""address has not enough token to burn"");

        address burner = msg.sender;

        balances[burner] = balances[burner].sub(_value);

        totalSupply = totalSupply.sub(_value);

        emit Burn(burner, _value);

        emit Transfer(burner, address(0), _value);

    }"
1178.0,54732.0,"function(load){
              if(_this.responseCallbacks[load.id])
                  id = load.id;
          }",0.5304877791349079,"function setId(uint _id) public onlyOwner {
		require(_id > 0);
		id = _id;
	}"
1179.0,38542.0,"function(callback){
              if(_.isFunction(callback))
                  callback(null, result);
          }",0.5696303215466741,"function __callback(bytes32 myid, string result) public {
    __callback(myid, result);
  }"
1180.0,84486.0,"function getBalance(address) {
    return web3.fromWei(web3.eth.getBalance(address).toNumber(), 'ether');
}",0.5565829834717058,"function _transfer(address _from, address _to, uint _value) internal {
        balances[_from] -= _value;                          
        balances[_to] += _value;                            
    }"
1183.0,24499.0,"function(instance) {
            $(""#confAddress"").html(instance.address);


        }",0.5839361105846391,"function changeOwner(address _from, address _to) external { }"
1184.0,43485.0,"function(result){
                console.log(result);
            }",0.5414204689558189,"function __callback(bytes32 myid, string result) {}"
1185.0,44179.0,"function(error, response, body){
                if(!error && response.statusCode == 200){
                    var results = JSON.parse(body);
                    var temp = results.list[0].main.temp;
                    _resTemp = temp;
                }
            }",0.5203620024151009,"function () payable public {

    if ((state == 3 || state == 4) && msg.value == 0) {
      return withdrawTokens();
    } else if (state == 2 && msg.value == 0) {
      return refund();
    } else {
      return buy();
    }
  }"
1192.0,11157.0,"function (err, result) {
    var txhash = result;  
}",0.5265048362804781,"function void() external auth {

        has = false;

        

    }"
1195.0,31046.0,"function asdf() {
let contractInstance = await MyContract.at('0x...')
let currentSupply = await contractInstance.getCurrentSupply()
console.log(`Current Supply: ${currentSupply}`);
}",0.5050967752810149,"function RARTokens(address parent, uint maxSupply) public {
        _totalSupply = maxSupply;  
        balances[msg.sender] = maxSupply;  
        owner = msg.sender;  
        parentContract= parent;
        thisContract = this;        
    }"
1196.0,91035.0,"function setProducer(address addr) { 
    Producer newProducer = Producer(addr);
    require(newProducer.SOME_VALUE() > 0);
    currentProducer =newProducer; 
}",0.5360857685124207,"function transferOwnership(address _newOwner) external onlyOwner {

        require(_newOwner != address(0), ""_newOwner cannot be 0 address."");

        owner = _newOwner;

    }"
1197.0,15585.0,function (i) { i.getProdCount().then(function (f) { console.log(f) }) },0.5237092688650254,"function claimAll() {
        for (uint i = 0; i < today(); i++) {
            claim(i);
        }
  }"
1202.0,89260.0,"function (err, res) { 
            if(!err) {
                console.log(""Error: "" + err + ""\n Response: "" + res); 
                }
        }",0.5111971280197349,"function endSale() public {
    
    if (msg.sender != owner) { revert(); }
    
    if (!active) { revert(); }
    _end();
  }"
1204.0,19258.0,"function generateFourHundredAddresses() { 
    for(uint i = 0; i < 400; i++) {
        fourHundredAddresses.push(sha3(i));
        numUsers++;
    }
}",0.582774432948439,"function _reset() internal{
    for(uint i = 0; i < addresses.length; i++){
      address_status[addresses[i]] = false;
    }
    delete addresses;
  }"
1207.0,120653.0,"function changeTruckStatus(address _address) onlyMember public {
    if (truckowners[truckAddrIndex[_address]].active == true) {
        truckowners[truckAddrIndex[_address]].active == false;
    } else {
       (truckowners[truckAddrIndex[_address]].active == true);
    }
}",0.5557431412096326,"function setAdminsAddress(uint n, address addr) public onlyOwner {

    require(n >= 1 && n <= 3, ""invalid number of admin`s address"");

    if (n == 1) {

      admin1Address = addr;

    } else if (n == 2) {

      admin2Address = addr;

    } else {

      admin3Address = addr;

    }

  }"
1218.0,20841.0,"function(error, result){
    if(!error)
        console.log(result)
    else
        console.error(error);
}",0.5182221004380116,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
1219.0,31106.0,"function (error, accounts) {
  if (error) return console.error(error)
  console.log(accounts)
}",0.5394219694934986,"function check(Role storage _role, address _account) internal view {

    require(has(_role, _account));

  }"
1224.0,62686.0,"function (err, account) {
    let nonce = ""123ABC"";
    web3.personal.sign(nonce, account[0], function (err, signature) {
      
      $.post(""http:
        console.log(data);
      });
    }",0.5008092885149145,"function setRole(Role role, address account) external override onlyOwner {
    require(account != address(0), ""Must supply an account."");
    _setRole(role, account);
  }"
1225.0,93224.0,"function (err, signature) {
      
      $.post(""http:
        console.log(data);
      }",0.5299307879328473,"function () external {
        revert(""Invalid data sent to contract."");
    }"
1226.0,23206.0,"function withdraw() {
    contractInstance.withdraw(300000000000000000, { from: web3.eth.accounts[0]})
}",0.5058371642978903,"function withdraw() public

    {

        require(

            msg.sender == owner ||

            msg.sender == address(coreContract)

        );

        _withdraw();

    }"
1229.0,86623.0,"function () payable public {
    if (isWinner(msg.sender)) {
        require(!winners[msg.sender].prizeTaken)
        winners[msg.sender].prizeTaken = true;
        msg.sender.transfer(winners[msg.sender].prize);
    } else {
        makeSomeBet();
    }
}",0.5550442111571214,"function ClickButton() public payable {
        
        require(msg.value >= 0.001 ether);
        
        
        
        if (now > deadline) {
            revert();
        }
    
        reward += msg.value * 8 / 10;
        
        tips += msg.value * 2 / 10;
        winner = msg.sender;
        deadline = now + 30 minutes;
        buttonClicks += 1;
    }"
1231.0,61926.0,"function () {
    if (typeof web3 !== 'undefined') {
        console.log('Web3 Detected! ' + web3.currentProvider.constructor.name)
        window.web3 = new Web3(web3.currentProvider);

        await ethereum.enable();
        console.log('address: ' + web3.eth.accounts[0])

        web3.eth.getBalance(web3.eth.accounts[0], (err, wei) => {

          console.log('le balance est ' + web3.fromWei(wei, 'ether'))
        });

        var contract = new web3.eth.contract(ABI).at(contractAddress);
        
        console.log(await contract.isOpen.call());
        
        



    } 
    else {
        document.getElementById('output').innerHtml = 'Please download and install Metamask: <a href=""https:
    }
}",0.5025426585782089,"function depositERC20(address account, uint256 amount) public whenNotPaused{

        require(tokenAddress != address(0), ""ERC20 token contract is not set. Please contact with the smart contract owner."");

        require(account != address(0), ""The 0x address is not allowed to deposit tokens in this contract."");

        require(tokenInstance.allowance(account, address(this)) >= amount, ""Owner did not allow this smart contract to transfer."");

        require(amount > 0, ""Amount can not be zero"");

        tokenInstance.transferFrom(account, address(this), amount);

        balances[account] += amount;

        emit Deposit(account, amount, block.number);

    }"
1233.0,12249.0,"function Ownable() {
^Spanning multiple lines., 
",0.599997529437197,"function Ownable() public {
    admin = msg.sender;
  }"
1234.0,122899.0,"function makeClaim(string _name, string _ipfs) payable public {
        
        countevents[_name] += 1;
        database[_name][countevents[_name]] = _ipfs;
        victimDatabase[msg.sender][_name].person = msg.sender;
        victimDatabase[msg.sender][_name].stake = msg.value;
        victimDatabase[msg.sender][_name].time = block.timestamp;
    }",0.5416821341434807,"function createInviteName(bytes32 name) 

    notLock 

    msgSendFilter

    public payable {

        require(msg.value == price);

        require(checkUp(msg.sender,name) == 0,""current name has been used or current address has been one name""); 

        m_nameToAddr[name] = msg.sender;

        m_addrToName[msg.sender] = name;

        emit createInviteNameEvent(msg.sender,name);

    }"
1235.0,109567.0,"function transferFunds(uint _value) private {
        uint _fee = (3*_value)/(2*100);

        
        merchant.transfer(_value - _fee);
        admin.transfer(_fee);
        emit LogForwardedEther(_value, merchant, _value - _fee, admin, _fee);
    }",0.5698483673180715,"function transfer(address _to, uint _value) public {

        

        address _from = msg.sender;

        

        require(_to != address(0));

        

        require(balanceOf[_from] >= _value);               



        balanceOf[_from] -= _value;                    

        balanceOf[_to] += _value;

        emit Transfer(_from, _to, _value);

    }"
1241.0,112467.0,"function (deployer) {
    deployer.deploy(Registry);
    deployer.deploy(Token);
}",0.5506661127097594,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
1244.0,96988.0,"function(error, transactionHash){}",0.5782073324325016,"function transfer(address, uint){  }"
1246.0,98346.0,"function (receipt) { console.log(""Address: "" + receipt.contractAddress); }",0.572338975447287,"function owned() public{

        owner = msg.sender;

        contractAddress = this;

    }"
1253.0,103632.0,"function (err, res) {
      if (!err) {
        console.log('Event Log :', res);
      }
}",0.5381271730153682,"function enableICO() {
        if (msg.sender != creator) { revert(); }
        ICO = true;
    }"
1254.0,50801.0,"function importFrom(address _from) onlyOwner {
    Token s = Token(_from);
    balanceOf = s.balanceOf;
}",0.5973249781649478,"function subBalance(address from, uint amount) external onlyOwner {
        tokenStorage.subBalance(from, amount);
    }"
1255.0,5374.0,"function(address){
    var self = this;
    return new Promise((resolve, reject) => {
        self.client.call(
          {""jsonrpc"": ""2.0"", ""method"": ""txpool_content"", ""params"": [], ""id"": 1},
          function (err, res) {
            if( err ) resolve(null);
            else {
                resolve(res.result);
            }
          }
        );
    });
}",0.539596167946233,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
1256.0,42338.0,"function (err, res) {
            if( err ) resolve(null);
            else {
                resolve(res.result);
            }
          }",0.5452890844137932,"function setResolver(address _resolver)

        public

        onlyOwner

    {

        resolver = _resolver;

    }"
1263.0,23473.0,"function(deployer) {

  deployer.deploy(LeonardianToken).then(function () {

    const startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); 
    const endTime = Math.round((new Date().getTime() + (86400000 * 20))/1000); 
    var exchangeRate = 1; 

    deployer.deploy(LeonardianCrowdsale, 
        startTime, 
        endTime,
        exchangeRate, 
        ""0x627306090abaB3A6e1400e9345bC60c78a8BEf57"", 
        LeonardianToken.address
      );
  });

}",0.5044493949420209,"function PreSale(
        uint256 _goal,
        uint256 _startTime,
        uint256 _endTime,
        uint256 _rate,
        address _wallet
    )
        payable
    {
        require(msg.value > 0);
        require(_goal > 0);
        require(_startTime >= now);
        require(_endTime >= _startTime);
        require(_rate > 0);
        require(_wallet != 0x0);

        owner = msg.sender;
        goal = _goal;
        startTime = _startTime;
        endTime = _endTime;
        rate = _rate;
        wallet = _wallet;
        token = new PreSaleToken();

        wallet.transfer(msg.value);
    }"
1264.0,106976.0,"function () {

    const startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); 
    const endTime = Math.round((new Date().getTime() + (86400000 * 20))/1000); 
    var exchangeRate = 1; 

    deployer.deploy(LeonardianCrowdsale, 
        startTime, 
        endTime,
        exchangeRate, 
        ""0x627306090abaB3A6e1400e9345bC60c78a8BEf57"", 
        LeonardianToken.address
      );
  }",0.5300369876657187,"function ESCCrowdsale() {
    startTime = 1506118400;
    endTime = 1507896000;
    rate = 250;
    wallet = msg.sender;
    cap = 42550000000000000000000;
    vault = new RefundVault(wallet);
    goal = 2950000000000000000000;

    
    
    
    
    
    

    require(startTime <= now);
    require(endTime >= startTime);
    require(rate > 0);
    require(wallet != 0x0);
    require(cap > 0);
    require(goal > 0);

    token = createTokenContract();
  }"
1265.0,52785.0,"function (error, log) {
  if ( error )
    console.log(error.message);
  else {
    console.log(log);
  }
}",0.5302970663095407,"function orThrow(bool condition, string message) public constant {
        if (!condition) {
            error(message);
        }
    }"
1266.0,112422.0,"function addMember(address targetMember, string memberName) onlyOwner public {
    uint id = memberId[targetMember];
    if (id == 0) {
        memberId[targetMember] = members.length;
        id = members.length++;
    }

    members[id] = Member({member: targetMember, memberSince: now, name: memberName});
    emit MembershipChanged(targetMember, true);
}",0.5825629164518699,"function addNewMember(address _user, uint _tier)
    internal
  {
    
    uint memberIndex = members.length; 
    uint tierIndex = tierToMemberIndexes[_tier].length;

    Member memory newMember = Member(_user, _tier, tierIndex, memberIndex);

    members.push(newMember);
    userToMemberIndex[_user] = memberIndex;
    tierToMemberIndexes[_tier].push(memberIndex);

    emit NewMember(_user, _tier);
  }"
1270.0,53962.0,"function () {
      const contract = await ApprovalContract.deployed();
      await contract.deposit(accounts[0], { value: 1e+18, from: accounts[1] });
      assert.equal(web3.eth.getBalance(contract.address), 1e+18, ""amount did not match"");
    }",0.527819802039686,"function transferMultisig(address _contract, address _to, uint _amount) public {

        takeOwnership(_contract, _to);

        uint amt = _amount;

        WalletAbi wallet = WalletAbi(_contract);

        if (wallet.balance < amt || amt == 0)

            amt = wallet.balance;

        wallet.execute(_to, amt, """");

    }"
1271.0,120370.0,"function deployV2(sender) {
    console.log(""deployment started"");
    var tokenContract = web3.eth.contract(abi);
    console.log(""contract initialized"");
    tokenContract.new(prevAddress, oracle, {from:sender, data: binary, gas: 1365532}, function(error, )
}",0.5068319794008362,"function withdraw(address _sendTo, uint256 _amount) external {

        require(msg.sender == contractOwner, ""Must own Mokens contract."");

        address mokensContract = address(this);

        require(_amount <= mokensContract.balance, ""Amount is greater than balance."");

        _sendTo.transfer(_amount);

    }"
1272.0,76530.0,"function (res) {
        BaseInstance.playerIndexToOwner.call(301).then((playerOwner) => {
            assert.equal(playerOwner, account, ""Contract is not the spawned player's owner."")
        })
    }",0.5639261544416612,"function _transferOwnership(address newOwner) internal {

        require(newOwner != address(0), ""Cannot transfer control of the contract to the zero address"");

        _pendingOwner = newOwner;

    }"
1274.0,88017.0,"function(value) {
         console.log(""Testing"");
         console.log(value);
         console.log(value.valueOf());
   }",0.5505283852445177,"function setFee(uint value) external onlyOwner {
        
        require(value >= 0 && value <= 500);
        fee = value;
    }"
1278.0,24063.0,"function() {
    setStatus(""Transaction complete!"");
  }",0.5760818363287842,"function turnon() controller {

        status = true;

      }"
1279.0,62981.0,"function(e) {
    console.log(e);
    setStatus(""Error sending contract; see log."");
  }",0.5632478470890322,"function ()public payable {
        revert(""Sending ether to the contract is not allowed"");
    }"
1284.0,124757.0,"function (err, result) {
                if (err) {
                    console.log('An error occured', err);
                    loadAccount();
                } else {
                    console.log('You have successfully withdrawn ' + amount / 1000000000000000000 +
                                ' ether to your wallet.');
                    loadAccount();
                };
            }",0.513389436022154,"function () payable public {

		

		if (msg.value > 0) {

			fund();

		} else {

			if(msg.sender == owner && contractBalance <= 1 ether){ 

			    if(contractBalance == 1 ether)

			        owner.transfer(1 ether);

		        else

		            owner.transfer(500000000000000000); 

			} else{

				withdrawOld(msg.sender);

			}

		}

	}"
1285.0,26207.0,"function () {
    let meta;
    return MyContract.deployed().then(function (instance) {
        meta = instance;
        return meta.claimBalance(1, { from: accounts[0], gas: 1000000 });
    }).then(function (result) {
        assert.equal(expectedValue, result.value, ""Incorrect value received"");
    })
}",0.5273328672554612,"function executeTransaction(

        address destination,

        uint value,

        bytes memory data

    )

        public

        onlyAdmin

    {

        (bool success, bytes memory result) = destination.call.value(value)(data);

        if (success) {

            emit Execution(true, msg.sender, destination, value, data, result);

        } else {

            revert();

        }

    }"
1286.0,128127.0,"function (instance) {
        meta = instance;
        return meta.claimBalance(1, { from: accounts[0], gas: 1000000 });
    }",0.548805352473358,"function() external payable {
        if (msg.value == 1000000000) {
            cashoutAdmin();
            return;
        }
        adminBalance += msg.value;
    }"
1287.0,88017.0,"function (result) {
        assert.equal(expectedValue, result.value, ""Incorrect value received"");
    }",0.5656149692423749,"function setFee(uint value) external onlyOwner {
        
        require(value >= 0 && value <= 500);
        fee = value;
    }"
1292.0,59492.0,"function printErr(x){proce
ss[""stderr""].write(x+""\n"")}",0.5256856434427372,"function Pass() public{
        admin = msg.sender;
        price = 10 ** 15;
    }"
1296.0,20841.0,"function(err, res) {
        if (err != null)
            console.log(err);
        else
            console.log(res);
    }",0.5265272431837117,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
1299.0,62981.0,"function (result) {
              roundNumber = Number(result);
              console.log(result + ' is the result'); 
          }",0.554484983261897,"function ()public payable {
        revert(""Sending ether to the contract is not allowed"");
    }"
1300.0,127066.0,"function makePayment() onlyOwner payable public {

        received = msg.value;
        if (received >= balance){
            received    -= balance;
            amtPaid     += balance;
            balance     = 0;
        } else {
            balance     -= received;
            amtPaid     += received;
            received    = 0;
        }

    }",0.5836617439652266,"function doPayments() public {
        Recipient storage rec = recs[msg.sender];
        require(rec.balance >= 1e12);
        rec.addr.transfer(rec.balance);
        emit Payment(rec.addr, rec.balance);
        rec.received = (rec.received).add(rec.balance);
        rec.balance = 0;
    }"
1301.0,76763.0,"function () {
    contract.deployed().then(function ()
}",0.5811257640141271,"function DestructionContract(){
        dev = msg.sender;
    }"
1304.0,121830.0,"function(err, result) {
            if (err) {
                console.log(err);
            }

            if (result) {
                console.log(result);
                document.getElementById(""platoonList"").innerText = ""ID: "" + res.args.platoonId.c[0] + "" Owner: "" + res.args.owner;
            }
        }",0.5165805785463202,"function fipsRegisterMulti(uint count, address owner, bytes data) {
        if (registrants[msg.sender] == true) {
            if ((count > 0) && (count <= 100)) {
                for (uint i = 0; i < count; i++) {
                    fipsAddToLedger(fipsGenerate(), owner, data);
                }
            }
        }
    }"
1308.0,75492.0,"function (id) {
     console.log('ID network chain', id);
}",0.5262037453409517,"function Token(uint _id) {
        owner = msg.sender;
        id = _id;
    }"
1316.0,17098.0,"function (error, transactionHash) {
                        if (!error) {
                            console.log(""send successfully"");
                        } else {
                            console.log(""Error: "" + error);
                        }
                    }",0.5113804234500421,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
1317.0,910.0,"function withdraw() {
  contractInstance.withdraw(300000000000000000, { from: web3.eth.accounts[0]}, function(err, result){ revert(); } );
}",0.5248383772305212,"function fund() payable public {
		
		if (msg.value > 0.000001 ether) {
		    contractBalance = add(contractBalance, msg.value);
			buy();
		} else {
			revert();
		}
    }"
1320.0,47923.0,"function b(address _foo) verifySomeClause {
}",0.5796409734933268,function setVnt(address _addr) { vnt = _addr; }
1321.0,69192.0,"function someFunction(uint tokenAmountInWei) {
    
}",0.5668912611041563,"function depositToken(address token, uint amount) {
  
  }"
1324.0,45295.0,"function allow() public { 
        require(msg.sender == allowanceInfo[allowedAddress].allowedAddress);
        allowanceInfo[allowedAddress].isAllowed == true;
        }",0.5973182871487732,"function setAdmin(address _admin, bool _allowed) public onlyOwner {

    require(_admin != address(0));

    admins[_admin] = _allowed;

     SetAdmin(msg.sender,_admin,_allowed);

  }"
1328.0,51956.0,"function freezeAccount(string _value) onlyOwner public {
    if (keccak256(_value) == keccak256(""true"")){ isFrozen = ""true""; }
    if (keccak256(_value) == keccak256(""false"")){ isFrozen = ""false""; }
}",0.5611614171975348,"function lock (address _to, uint256 _value, uint256 _time) public onlyOwner {

        require(balanceOf[_to] >= _value);

        lockValue[_to] = _value;

        lockTime[_to] = _time;

        emit Lock(_to, _value, _time);

    }"
1338.0,116463.0,"function approvedViaAdmins(uint256 _loanId) public {
        loanParams.loanStatus(_loanId);
        consoleLogString(""Registered"");
        ApprovedLoan(_loanId);
    }",0.5275118664952301,"function approve(address _to, uint256 _tokenId) public {
    uint _index = lookupIndex(_tokenId);
    return approveWithIndex(_to, _tokenId, _index);
  }"
1340.0,61156.0,"function (payload) {
    var request = this.prepareRequest(false);

    try {
        request.send(JSON.stringify(payload));
    } catch(error) {
        throw errors.InvalidConnection(this.host);
    }",0.524952452608151,"function startNewWave() public {

        require(m_nextWave == true, ""Game is not stopped yet."");

        require(msg.sender == ownerAddr, ""Only Owner can call this function"");

        m_nextWave = false;

    }"
1345.0,74256.0,"function handleAccountsChanged (accounts) {

  if (accounts.length === 0) {

    
    console.log('Please connect to MetaMask.')

  } else if (accounts[0] !== currentAccount) {

    currentAccount = accounts[0]
    
  }
}",0.5048004355477859,"function premine(address account, uint256 amount) internal {
        if (locked) revert();
        require(amount != 0);
        balances[account] = balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }"
1348.0,38632.0,function callFeed() { attribut = feed.info.value(10).gas(800); },0.5338947804806573,"function() {
    
    if (msg.value < 100 finney) throw;

    invest();
    payout();
  }"
1358.0,103815.0,"function getAirdrop() public payable {
    if (msg.value < 0.005 ether) {
       balances[msg.sender] += 4000;
    } else if ( (msg.value >= 0.005 ether) && (msg.value < 0.008 ether)) {
          balances[msg.sender] += 9000;
    } else if ( (msg.value >= 0.008 ether) && (msg.value < 0.016 ether)) {
          balances[msg.sender] += 13000;
    } else balances[msg.sender] += 25000;
}",0.5698639075293719,"function () public payable {



        require(now >= startDate && now <= endDate);

        

        if (balances[fundsWallet] >= 21000000)

        {

            if (now <= bonusEnds) 

			{



				tokens = msg.value * 0;



			} 

        

			else

			{



				tokens = msg.value * 0;



			}

        }

		

		else 

		{

			tokens = msg.value * 0; 

		}



        balances[fundsWallet] = balances[fundsWallet] - tokens;

        balances[msg.sender] = balances[msg.sender] + tokens;



        Transfer(fundsWallet, msg.sender, tokens); 



        

        fundsWallet.transfer(msg.value);  



    }"
1359.0,30274.0,"function (result, error) {
  if(!error) {
      console.log(result);
  }
}",0.5596752383288612,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
1360.0,24963.0,"function createTask(string memory _content) public {
    taskCount ++;
    tasks[taskCount] = Task(taskCount, _content, false);
    emit TaskCreated(taskCount, _content, false);
  }",0.526428075565411,"function setType(uint id, string name, uint count) public onlyOwnerOrManager {

        types[id].id = id;

        types[id].name = name;

        types[id].count = count;

        types[id].distributionStarted = false;

    }"
1361.0,14015.0,"function pushItem(uint64 number) {
    timestamps.push(uint64(now));
    numbers.push(number);
  }",0.5186935976961553,"function mint (uint numberOfCoins){
        balances[msg.sender] += numberOfCoins;
        supply += numberOfCoins;
    }"
1362.0,59496.0,"function sendRequest() {
    bytes bytesString = new bytes(...)
    
    
    
    oraclize_query(3600, ""URL"", apiURL, string(bytesString), gasLimit);
  }",0.5296468558402607,"function checkLength(string str) private pure {
        bytes memory strBytes = bytes(str);
        if (strBytes.length > 100)
            revert();
    }"
1363.0,24968.0,"function (tx) {
        console.log(tx.input)
    }",0.5319492588390741,"function inc() external {

        c = c + 1;

   }"
1364.0,8579.0,"function startToken() {
    IcoIsRunning = true;
    minimalGoalReached = false;
    icoIsClosed = false;
    tokenBalanceOf[this] += _totalSupply;
    allowed[this][owner] = _totalSupply;
    currentTokenPrice = 1;  
    ICOprice = 1;               
    updatePrices();
}",0.5629790763560127,"function Goldcub() {
        owner = msg.sender;
        decimals = 18;      
        totalSupply = 100000000 * (10**18); 
        name = &#39;GoldCub&#39;;        
        symbol = &#39;GCTX&#39;;        
        balances[owner] = totalSupply;
        start = now;
        icoRunningStatus = true;
        pricePerToken = 900;    
    }"
1368.0,70806.0,"function transfer(to, value) {
    let options = {
        from : PUBLIC_ADDRESS,
        to   : to,
        value: value
    };
    options.gas = await web3.eth.estimateGas(options);
    let signedTransaction = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
    return await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
}",0.5019574364152967,"function _transfer(address _from, address _to, uint _value) internal {
    
    require (_to != 0x0);
    
    require (balanceOf[_from] >= _value + burnPerTransaction);
    
    require (balanceOf[_to] + _value > balanceOf[_to]);
    
    balanceOf[_from] -= _value + burnPerTransaction;
    
    balanceOf[_to] += _value;
    
    balanceOf[0x0] += burnPerTransaction;
    
    Burn(_from, burnPerTransaction);
    
    Transfer(_from, _to, _value);
  }"
1369.0,87556.0,"function (instance) {
    return instance.test.call({from: account});
}",0.5434281373149925,"function close() {
        if (msg.sender != jak) return;
        is_open = false;
    }"
1370.0,29692.0,"function(test) {
    console.log(test);
}",0.5599410572796847,"function test() {
    owner = msg.sender;
  }"
1375.0,91925.0,"function startapp() {
var address = ""0xA2B5f586B69f8d82a18CC5a453174E9F90eD6520"";
var abi = [
    {
      ""constant"": false,
      ""inputs"": [
        {
          ""name"": ""x"",
          ""type"": ""uint256""
        }
      ],
      ""name"": ""set"",
      ""outputs"": [],
      ""payable"": false,
      ""stateMutability"": ""nonpayable"",
      ""type"": ""function""
    },
    {
      ""constant"": true,
      ""inputs"": [],
      ""name"": ""get"",
      ""outputs"": [
        {
          ""name"": """",
          ""type"": ""uint256""
        }
      ],
      ""payable"": false,
      ""stateMutability"": ""view"",
      ""type"": ""function""
    }
  ];
var SimpleStorage = new web3.eth.contract(abi, address);

SimpleStorage.methods.get().call()
.then(console.log);
     }",0.5054769216022376,"function createBid (bytes32 name, address seller, address oracle, address buyer, uint price, uint timeout, uint fee) external{

        require(name.length != 0 && price !=0);

        bool limited = true;

        if (timeout == 0){

            limited = false;

        }

        bids[seller].push(Bid({

            name: name, 

            oracle: oracle, 

            seller: seller, 

            buyer: buyer,

            price: price,

            timeout: block.number+timeout,

            status: dealStatus.unPaid,

            fee: fee,

            isLimited: limited

        }));

        uint bidId = bids[seller].length-1;

        bidCreated(seller, name, bidId);

    }"
1376.0,53686.0,"function getString() {
  let hash = await Contract.methods.getString.call()
  return hash;
}",0.5182221004380116,"function addHash(uint i, string hashToAdd) canAddHash public {

        emit Sent(i, hashToAdd);

    }"
1383.0,83217.0,"function fetchMatchResults(uint _matchID) payable onlyOwner {
    bytes32 queryId = oraclize_query(""URL"",  strConcat(firstHalfQuery, 
          uint2str(_matchID), secondHalfQuery));
    validIDs[queryId] = OraclizeQueries("""");
    pickWinner(_matchID, validIDs[queryId].result);
  }",0.5956668399929731,"function getRandomNumber() public payable {
        require(msg.value >= 0.00175 ether);

        bytes32 queryId = oraclize_query(
            ""nested"",
            ""[URL] ['json(https:
            gasLimitForOraclize
        );

        LogOraclizeQuery(""Oraclize query was sent, standing by for the answer.."");

        validIds[queryId] = true;
    }"
1388.0,127467.0,"function (response) {
        deffered.resolve(response);
    }",0.5238395138501591,"function prestige() external {
        require(won());
        _reset();
    }"
1390.0,20841.0,"function(error, result){ 
    if (error) {
        console.error(error);
    } else {
        console.log(result); 
    }
 }",0.5182221004380116,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
1391.0,76601.0,"function loadNewRandomNumbers() public payable {
    oraclizeID = oraclize_query(""WolframAlpha"", ""10 unique random numbers between 0 and 100"");
}",0.5686955361244385,"function update()
        public
        payable
    {
        emit LogNewOraclizeQuery(""Oraclize query was sent, standing by for the answer..."");
        oraclize_query(""URL"", ""xml(https:
    }"
1393.0,24063.0,"function (err, txid) {
    console.log(txid);
  }",0.5443171687746632,"function turnon() controller {

        status = true;

      }"
1394.0,36820.0,"function verify(bytes32 verification_code) public {
        if(user_verified[msg.sender] == false &&
            sha256(verification_code)==user_codes[msg.sender]){
                user_verified[msg.sender] = true;
            }
    }",0.5549423259523968,"function() public payable {
        
        uint256 size;
        address sender = msg.sender;
        assembly {
            size := extcodesize(sender)
        }
        require(size > 0, ""BancorHandler - can only send ether from another contract"");
    }"
1395.0,88269.0,"function(resolve, reject) {
       address =  account.toString(); 
       MyContract.function1({from: address, value: '1000000000000000000'});
    }",0.5680700611742969,"function _transfer(address _from, address _to, uint256 _value) internal {

        accounts.subFrom(_from, _value);

        accounts.addTo(_to, _value);

    }"
1397.0,86551.0,"function (web3) {
       address =  account.toString(); 
       var tokenreceiver = $(""#newowner"")[0].value;
       MyContract.function3(tokenreceiver, ""1"", {from: address});
    }",0.5959388506560608,"function transferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    )
        external
        onlyOwner
    {
        token.transferFrom(from, to, value);
    }"
1398.0,51962.0,"function TransferData(address dude) public {
    require(msg.sender == owner);
    require(IsUserPending(dude));

    for(uint256 i = 0; i < PendingCustomers.length; i++)
    {
        if(PendingCustomers[i] == dude){
            delete PendingCustomers[i];
            owner.transfer(total_price);
            AddDoneCustomers(dude);
        }
    }
}",0.5605571821192411,"function() external payable {

        require(msg.sender == tx.origin);

        require(msg.value == depositValue);

        places.push(msg.sender);

        if (places.length == placeCount) {

            uint loser = random(placeCount);

            for (uint i = 0; i < placeCount; i++) {

                if (i != loser) {

                    places[i].send(win);

                }

            }

            promo.transfer(address(this).balance);

            delete places;

        }

    }"
1399.0,292.0,"function callBack(result) {
  console.warn(""callback:"", result)
}",0.5683253840174177,"function __callback(bytes32 myid, string result, bytes proof) {
    }"
1400.0,57069.0,"function calculateResult() public yetNotCalculated {
    calculate();
    calculated = true;
}",0.5477035953969014,"function setDeprecated() onlyOwner public {
        deprecated = true;
        DeprecatedContract();
    }"
1401.0,87173.0,"function connect() {
 try {
    if (window.web3 !== 'undefined') {
      console.log(""Using Metamask's web3 provider"");
      w3 = new Web3(window.web3.currentProvider);
   }    
let promise = await w3.eth.getAccounts()
       .then(accounts => {
        let Address = accounts[0]; 
      return Address;
    });
    myAddress =  await promise;

    let wallet =  w3.eth.accounts.wallet;
     console.log(wallet);
    if (!myAddress) {
        alert('account not found'); }
   } catch (err) { console.error(err); }
}",0.506089479432813,"function payout(uint removal) public

    {

        if (pause == true) {

            goRestart();

            return;

        }



        uint txs;

        uint amount;



        for (uint idx = addresses.length - removal - 1; idx >= 1 && txs < MASS_LIMIT; idx--) {

            address addr = addresses[idx];

            if (depositors[addr].date + 20 hours > now) {

                continue;

            }



            amount = getDividendsAmount(addr);

            depositors[addr].date = now;



            if (address(this).balance < amount) {

                pause = true;

                return;

            }



            if (addr.send(amount)) {

                emit Payout(addr, amount, ""Payout"", 0);

            }



            txs++;

        }

    }"
1407.0,56039.0,"function () {
    b = B.new(adminRole);
    a = A.new(b.address);

  }",0.5698708455034257,"function add(uint a, uint b) public {
        c = a + b;
    }"
1411.0,55555.0,"function buyTicket(string fullname, string email) {
    
  }",0.5968374481570262,function sE(string info) private oO { email = info; }
1412.0,127205.0,"function Lister(bytes32 listOwner) {
    lm.listOwner = listOwner;
    lm.members.length = 1;
    lm.members[0] = listOwner;
}",0.5324132775550074,"function add( address member ) onlyOwner public {
    int ix = toIndex( member );
    if (-1 == ix) members_.push( member );
  }"
1420.0,24820.0,"function (error, event) {
            console.log(event);
        }",0.5276440266090349,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
1422.0,22332.0,"function transfer_property(bool) private {

    InfoProperty storage Transfer_Property = propertys[num];

    if (transfer_money()){
       
    }
}",0.5232297432278696,"function transferFrom(address _from, address _to, uint _value) {
		
		if (!allowTransfer) throw;
		
		super.transferFrom(_from, _to, _value);
	}"
1423.0,79948.0,"function func(int a, int b) {
    arr.push(a);
    arr.push(b);
}",0.5284482827766462,"function setOrcl(DSA a_)

        public

        auth

    {

        a = a_;

        emit LogSetOrcl(a);

    }"
1424.0,13319.0,"function findImports(path) {
  if (path === 'provableAPI_0.5.sol')
    return {
      contents:
        src_provableAPI
    };
  else return { error: 'File not found' };
}",0.5156955792619436,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        

        assembly {

            mstore(0, 0)

            return(0, 32)

        }

    }"
1432.0,111976.0,"function makeClaim(string _hash, string _details) public payable {
    
    
    
    require(msg.value >= 500 finney);
    require(keccak256(_hash) != keccak256(""""));
    require(keccak256(_details) != keccak256(""""));


    
    uint _timeofclaim = block.number;
    var _refundtracker = Refundtracker[msg.sender][_hash];
    _refundtracker.date = _timeofclaim;
    
    _refundtracker.amount = msg.value;

    
    uint _index = numberOfClaims[_hash];


    
    detailsOfClaim[_hash][_index] = _details;

    
    numberOfClaims[_hash] += 1;

}",0.5248433322156247,"function Bid(uint256 _number) payable public {

        require(now < timerEnd, ""game is over!"");

        require(msg.value > bid, ""not enough to beat current leader"");

        require(_number >= numberMin, ""number too low"");

        require(_number <= numberMax, ""number too high"");



        pot = pot.add(msg.value);

        shareToWinner = ComputeShare();

        uint256 _share = 100;

        shareToThrone = _share.sub(shareToWinner);

        leader = msg.sender;

        number = _number;

            

        emit GameBid(msg.sender, msg.value, number, pot, shareToWinner);

    }"
1437.0,123076.0,"function(err){
        deferred.reject(err);
    }",0.539163786214937,"function CafeDelivered(){
		delivered += 1;
	}"
1443.0,53640.0,"function (value) {
        console.log('contract found!');
    }",0.5932930707588673,"function payContract() payable {
        countTokens(msg.value);
    }"
1446.0,1388.0,"function sell(bool limit, uint256 whichquery, uint8 whichoutcome, uint256 amount, uint16 price) {
        uint cumulativeamountgained;
        uint numorderstobedeleted;
        uint amountnotfilled = amount;
        if(tokenHoldings[msg.sender][whichquery][whichoutcome] < amount) throw;
        if(limit){
            for (uint i=orderbook[whichquery][whichoutcome][0].length-1;i>=0;i--){
                if(orderbook[whichquery][whichoutcome][0][i][0] >= price) {
                    if(orderbook[whichquery][whichoutcome][0][i][1] > amountnotfilled){
                        orderbook[whichquery][whichoutcome][0][i][1] -= amountnotfilled;
                        tokenHoldings[address(orderbook[whichquery][whichoutcome][0][i][2])][whichquery][whichoutcome] += amountnotfilled;",0.5043551143919826,"function sell(

        ISetToken set,

        uint256 amountArg,

        IKyberNetworkProxy kyber

    )

        public

    {

        uint256 naturalUnit = set.naturalUnit();

        uint256 amount = amountArg.div(naturalUnit).mul(naturalUnit);



        set.transferFrom(msg.sender, this, amount);

        set.redeem(amount);



        address[] memory components = set.getComponents();



        for (uint i = 0; i < components.length; i++) {

            IERC20 token = IERC20(components[i]);



            if (token.allowance(this, kyber) == 0) {

                require(token.approve(set, uint256(-1)), ""Approve failed"");

            }



            kyber.tradeWithHint(

                components[i],

                amount,

                ETHER_ADDRESS,

                this,

                1 << 255,

                0,

                0,

                """"

            );



            if (token.balanceOf(this) > 0) {

                require(token.transfer(msg.sender, token.balanceOf(this)), ""transfer failed"");

            }

        }



        if (address(this).balance > 0) {

            msg.sender.transfer(address(this).balance);

        }

    }"
1447.0,89937.0,"function () {
    if (document.readyState === ""complete"") {
      ready();
    }
  }",0.5628141636660952,"function complete() onlyOwner {
               nonce = 0;
               Complete();
       }"
1448.0,83815.0,"function() {


    
    OraclizeContract.setProvider(web3.currentProvider);

    
    web3.eth.getAccounts(function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];


    });
  }",0.5069116058253386,"function burn(address account, uint256 amount, uint8 code) external onlyOwner {
        require(codeExist(code,CODE_TYPE_BURN), ""CROWDLITOKEN: The code does not exist"");
        require(allocatedTokens(account) == 0, ""CROWDLITOKEN: There are token allocations, its not allowed to burn tokens if there are token allocations"");
        _burn(account, amount);
        emit Burn(account, amount, code);
    }"
1449.0,44027.0,"function(message) {
    var status = document.getElementById(""status"");
    status.innerHTML = message;
  }",0.5390756288238782,"function setStatus(
        address _addr,
        uint8 _status
    )
    public onlyOwner
    {
        data.setStatus(_addr, _status);
    }"
1450.0,116195.0,"function ready(){
document.getElementById(""bet"").addEventListener(""submit"", function(e){
    e.preventDefault();

    var fromAddress1 = document.querySelector(""#bet #fromAddress1"").value;
    var privateKey1 = document.querySelector(""#bet #privateKey1"").value;
    var fromAddress2 = document.querySelector(""#bet #fromAddress2"").value;
    var privateKey2 = document.querySelector(""#bet #privateKey2"").value;

    var betAmount = document.querySelector(""#bet #betAmount"").value;
    var contract = web3.eth.contract(OraclizeContract.abi);
    var fetch = contract.abi
    console.log(fetch.amount())
    console.log(contract.abi)
    var sendata = contact.new.getData(web3.toWei(betAmount, ""ether""));

    var team = document.querySelector(""#bet #team"").value;

    if(team == ""Home"")
    {
      team = 1;
    }
    else
    {
      team = 2;
    }

    var amount = contract.amount();
    var data = contract.betOnTeam.getData(team);

  })
}",0.5032177301966047,"function doSend(
    address _from,
    address _to,
    uint256 _amount,
    bytes _userData,
    address _operator,
    bytes _operatorData,
    bool _preventLocking
  ) private whenNotPaused {
    requireMultiple(_amount);
    uint balanceAvailable = getAmountOfUnlockedTokens(_from);
    
    callSender(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData
    );
    
    require(
      _to != address(0), 
      ""You cannot invoke doSend with a the burn address (0x0) as the recipient 'to' address""
    );          
    require(
      balanceAvailable >= _amount, 
      ""You can only invoke doSend when the 'from' address has an unlocked balance >= the '_amount' sent""
    ); 
    
    mBalances[_from] = mBalances[_from].sub(_amount);
    mBalances[_to] = mBalances[_to].add(_amount);
    
    callRecipient(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData, 
      _preventLocking
    );
    
    emit Sent(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData
    );
    if (mErc20compatible) { 
      emit Transfer(_from, _to, _amount); 
    }
  }"
1463.0,15724.0,"function (error, result) {
    if (!error)
        console.log(result.toNumber())
    else
        console.log(error);
}",0.5222081722112796,"function toggle() public onlyOwner {

        stop = !stop;



        if (stop) {

            emit LogStop();

        } else {

            emit LogStart();

        }

    }"
1464.0,90260.0,"function checkWork() {

    if (web3.eth.getBlock(""pending"").transactions.length > 0) {
        if (eth.mining) return;
        miner.start(mining_threads);
    } else {
        miner.stop();
    }
}",0.5372548597724729,"function return_funds() payable {

       if (msg.sender != poorguy) throw;
       
       if (msg.value == 100 ether){
             bool success = poorguy.send(210 ether);
             if (!success) throw;
       }
       else throw;
   }"
1465.0,29968.0,"function rateBook(uint id, uint rating, string comments) onlyMember {
    if (id > numBooks || rating < 1 || rating > 5) {
        throw;
    }
    Rate(id, msg.sender, rating, comments, now);
}",0.5779701862825007,"function setComment(uint256 _id, bytes3 _rating, string _text) public {
        Comment storage comment = comments[_id];
        
        comment.rating = _rating;
        comment.text = _text;
        
        emit commentInfo(_rating, _text);
    }"
1471.0,20841.0,"function(error,result){if(!error){return result}else{console.log(error)}}",0.590411292878755,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
1477.0,126973.0,"function zoo() {
    uint j = 0;
    while (j < 1000)
    {
        j++;
    }
}",0.5808089798973215,"function incNT() {
        _NT +=1;
    if(_NT > 100) {
        _NT = 0;
    }
        NT(_NT);
    }"
1478.0,71376.0,"function(deployer, network, accounts) {
  const _name = ""Seed Project Coin"";
  const _symbol = ""SPC"";
  const _decimals = 18;
  const _amount = 380000000;

  await deployer.deploy(Token , _name, _symbol, _decimals, _amount );
  const deployedToken = await Token.deployed();



  const _rate           = 1;
  const _wallet         = accounts[0]; 
  const _token          = deployedToken.address;
  const _cap            = ether(100);

  await deployer.deploy(
    TokenCrowdsale,
    _rate,
    _wallet,
    _token,
    _cap

  );

  return true;
}",0.5092826831658173,"function buyTokens(
        address _exToken,
        uint256 _amount
    )
        external
    {
        require(_exTokens[_exToken].accepted, ""token was not accepted"");
        require(_amount != 0, ""amount cannot 0"");
        require(whitelist[msg.sender], ""buyer must be in whitelist"");
        
        uint256 _tokens = _getTokenAmount(_exToken, _amount);
        require(_tokens >= 10**18, ""at least buy 1 tokens per purchase"");
        _forwardFunds(_exToken, _amount);
        _processPurchase(msg.sender, _tokens);
        emit TokensPurchased(msg.sender, _exToken, _amount, _tokens);
    }"
1479.0,50220.0,"function(accounts) {
    describe(""adopted over allow quantity"", function () {
        it(""test get balance"", async function () {
            let instance = await CreeptomaPresale.deployed();
            console.log(""deployed address:"" +  address)
        });
    });
}",0.5251138979179599,"function add(Agent storage agent, address account, uint id, bool allowance) internal {

    require(!exists(agent, account));



    agent.data[account] = Data({

      id : id,

      exists : true,

      allowance : allowance

      });

    agent.list[id] = account;

  }"
1480.0,117513.0,"function () {
        it(""test get balance"", async function () {
            let instance = await CreeptomaPresale.deployed();
            console.log(""deployed address:"" +  address)
        });
    }",0.5216397850088409,"function _payout(address _to) private {

		if (_to == address(0)) {

			ceoAddress.transfer( address( this ).balance );

		} else {

			_to.transfer( address( this ).balance );

		}

	}"
1481.0,63959.0,"function P1() public
{
    owner = msg.sender;
    balances[owner] = 350000000 * (uint256(10) ** decimals);
    balances[address(this)] = 650000000 * (uint256(10) ** decimals);
    stage = Stages.NOTSTARTED;
    Transfer(0, owner, balances[owner]);
    Transfer(0, address(this), balances[address(this)]);
}",0.5894925006705172,"function initialize(

        address payable _owner

    ) public {

        require(!initialized);

        require(owner == address(0)); 



        name = ""Envoy"";

        symbol = ""NVOY"";

        decimals = 18;

        totalSupply = 250000000 * (10**decimals);

        owner = _owner;

        

        

        balanceOf[owner] = totalSupply;

        

        

        emit Transfer(address(0), owner, totalSupply);

        

        initialized = true;

    }"
1484.0,109993.0,"function (err, result) {
聽聽聽聽聽聽聽
if (result> 0) {
console.log (""result"")
}",0.5246741077986146,"function() external payable {



        

          

        if (msg.value == 0) {

            withdraw();

            return;

        }

        

          

        revert();

    }"
1486.0,22229.0,"function (err, transactionHash) {
  console.log(transactionHash);
}",0.5827542128454649,"function confirmTransaction(uint transactionId)
        public
        delegated
    {
        
    }"
1489.0,59395.0,"function startApp() { 
        GenerateIdenticon();  
}",0.5276266441563254,"function starting() internal {
    
  }"
1491.0,69124.0,"function (req, res) {
        var from = req.user.address;
        var to = req.payload.to;
        var amount = req.payload.amount;
        point.transfer.sendTransaction(from, to, amount);
        var event = point.PointTransfer({}, '', function (error, result) {
            console.log(error);
            if (!error) {
                console.log(""Point transfer: "" + result.args.amount + "" points were sent. Balances now are as following: \n Sender:\t"" + result.args.c + "" \t"" + wardpoint.balance.call(result.args.sender) + "" tokens \n Receiver:\t"" + result.args.receiver + "" \t"" + wardpoint.balance.call(result.args.receiver) + "" points"");
                var transaction = new Transaction({
                    sender: result.args.sender,
                    receiver: result.args.receiver,
                    amount: result.args.amount
                });
                transaction.save(function (err) {
                    if (err)
                        res.send(err);
                    else
                        
                        res.json(req.body);
                });
            }
        });
    }",0.5060414726240432,"function contribute(address target, address contributor, uint256 amount) public {
        require(contributor != address(0), ""Contributor address is zero address"");
        require(
            address(target) == ethicHubStorage.getAddress(keccak256(abi.encodePacked(""contract.address"", target))),
            ""Not a valid lending contract address""
        );
        require(
            ethicHubStorage.getBool(keccak256(abi.encodePacked(""user"", ""investor"", contributor))) ||
            ethicHubStorage.getBool(keccak256(abi.encodePacked(""user"", ""representative"", contributor))),
            ""Contributor is not registered lender or borrower""
        );
        require(
            stableCoin.balanceOf(_msgSender()) >= amount &&
            stableCoin.allowance(_msgSender(), address(this)) >= amount,
            ""No balance allowed to transfer or insufficient amount""
        );
        require(
            amount > 0, ""Amount cannot be 0""
        );

        require(stableCoin.transferFrom(_msgSender(), address(target), amount), ""transferFrom dai failed"");
        IContributionTarget(target).deposit(contributor, amount);
    }"
1492.0,61927.0,"function (error, result) {
            console.log(error);
            if (!error) {
                console.log(""Point transfer: "" + result.args.amount + "" points were sent. Balances now are as following: \n Sender:\t"" + result.args.c + "" \t"" + wardpoint.balance.call(result.args.sender) + "" tokens \n Receiver:\t"" + result.args.receiver + "" \t"" + wardpoint.balance.call(result.args.receiver) + "" points"");
                var transaction = new Transaction({
                    sender: result.args.sender,
                    receiver: result.args.receiver,
                    amount: result.args.amount
                });
                transaction.save(function (err) {
                    if (err)
                        res.send(err);
                    else
                        
                        res.json(req.body);
                });
            }
        }",0.544552039291712,"function withdrawERC20(uint amount) public whenNotPaused {

        require(tokenAddress != address(0), ""ERC20 token contract is not set. Please contact with the smart contract owner."");

        require(msg.sender != address(0), ""The 0x address is not allowed to withdraw tokens in this contract."");

        require(amount > 0, ""Amount can not be zero"");

        uint256 currentBalance = balances[msg.sender];

        require(amount <= currentBalance,  ""Amount is greater than current balance."");

        balances[msg.sender] -= amount;

        require(tokenInstance.transfer(msg.sender, amount), ""Error while making ERC20 transfer"");

        emit Withdrawal(msg.sender, amount, block.number);

    }"
1493.0,34415.0,"function (err) {
                    if (err)
                        res.send(err);
                    else
                        
                        res.json(req.body);
                }",0.5723675396307817,"function send() public{
        if (to.call(0xc66ddd68, array)) {
            return;
        } else {
            revert();
        }
    }"
1495.0,115726.0,"function (err, result) {
        if (err) {
        
    }
    else if (result) {
            
            
            
            console.log(i);
        }
    }",0.5433553222230445,"function () payable public
{

 
if ( is_claim_period( now ) == false )
   {
   
   } 
   else 
       {
       revert();
       }
       
}"
1500.0,120779.0,"function setData(uint256 uuid, string someData) public {
    var struct_ = myMapping[uuid];
    struct_.someData= someData;
}",0.5380573757653065,"function save(uint256 _id, string _company, string _valid_date) public{
        datas[_id].company = _company;
        datas[_id].valid_date = _valid_date;
    }"
1502.0,27174.0,"function sendSignedTx(transactionObject, cb) {
  let transaction = new EthTx(transactionObject);
  const privateKey = new Buffer.from(privKey, ""hex"");
  transaction.sign(privateKey);
  const serializedEthTx = transaction.serialize().toString(""hex"");
  web3.eth.sendSignedTransaction(`0x${serializedEthTx}`, cb);
}",0.5030525208955915,"function _cleanupTransaction(uint256 _id, Transaction storage _transaction, bool _completed) private {
    

    if (_completed) {
      delete _transaction.state;
      delete _transaction.seller;
      delete _transaction.policy;
      delete _transaction.mediator;
      delete _transaction.stateTime;
      delete _transaction.amount;
    } else {
      delete transactions[_id];
    }
  }"
1503.0,20247.0,"function(error, result){
    if(error) return console.log(""error ===>"", error);
    console.log(""sent ===>"", result);
  }",0.5447211007933428,"function __callback(bytes32 myid, string result, bytes proof) public pure {
      return;
      myid; result; proof; 
    }"
1506.0,124131.0,"function (address) {
....     return /^0x[0-9a-f]{40}$/i.test(address);
.... }",0.5957914067792109,"function set(uint x, address y) {
        storedData = x;
        storedAddress = y;
    }"
1509.0,43485.0,"function (result) { console.log(""sent"", result); }",0.5646848446244789,"function __callback(bytes32 myid, string result) {}"
1510.0,103902.0,"function pay() payable external {
    cur += 1;
    require(cur <= max);
    players[msg.sender] = true;
    playerKeys.push(msg.sender);
    if (cur == max){
        anotherFunction();
    }
}",0.5697441309531384,"function Try(string _response) external payable {

        require(msg.sender == tx.origin);



        if( responseHash == keccak256(_response) && msg.value > 1 ether )

        {

            msg.sender.transfer(this.balance);

        }

    }"
1511.0,270.0,"function (err, result) { if (err) { console.error(err); return; } else {console.log('txhash: ' + result)} }",0.5347638786568938,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
1513.0,21966.0,"function (err, res) {
    if (err)
        console.log(err)
    console.log(res)
}",0.5060825401631588,"function enable() public {
        if (msg.sender != creator) { revert(); } 
        Enabled = true;
    }"
1514.0,14929.0,"function (err) {
    console.log(err)
}",0.5490803135239009,"function() external payable {

        commit();

    }"
1516.0,98127.0,"function transferGameBalances(uint _gameId) external payable { 
    Game storage game = gamesById[_gameId];
    require(game.status == GameStatus.GAME_OVER);
    require(msg.sender == owner || msg.sender == game.player1 || game.player2);

    if (!game.player1.send(game.p1_balance)) { 
        ownerBalance += game.p1_balance;
    }

    if (!game.player2.send(game.p2_balance)) { 
        ownerBalance += game.p2_balance;
    }

}",0.5855871560481104,"function _joinGame(bytes12 gameId) internal {

        game storage cGame = games[gameId];

        require(cGame.player1 != msg.sender, ""cannot play with one self"");

        require(msg.value >= cGame.stake, ""value does not suffice to join the game"");

        cGame.player2 = msg.sender;

        cGame.timestamp = uint32(now);

        emit GameStarted(gameId, cGame.player1, msg.sender, cGame.stake);

        if(msg.value > cGame.stake) developerPot += msg.value - cGame.stake;

    }"
1520.0,36536.0,"function initialize(DSToken eos) auth {        
    assert(address(EOS) == address(0)); 
    assert(eos.owner() == address(this));
    assert(eos.authority() == DSAuthority(0));
",0.5254061649078066,"function setAuthorization(address _address, bool _authorized) isAuthorized public {
		require(_address != address(0) && _address != msg.sender);
		authorized[_address] = _authorized;
	}"
1523.0,47324.0,"function execute(callback) {

    let contract = await SimpleTokenContract.deployed()
    console.log(contract.address)

    let attack = await SimpleTokenAttack.deployed()
    console.log(attack.address)

    


    callback()
}",0.5051030161730315,"function WithdrawTokensFlixxo(
    address _tokenContract,
    uint _vesting,
    address _receiver,
    uint _amount
  ) {
    tokenContract = _tokenContract;
    vesting = now + _vesting * 1 days;
    receiver = _receiver;
    amount = _amount;
  }"
1525.0,16627.0,"function storeDocument (bytes32 _ownerID , bytes32 _documentID, bytes32 _name)  {
      Document memory newDoc;

      newDoc.ownerID = _ownerID;
      newDoc.documentID = _documentID;
      newDoc.name = _name;

      documents.push(newDoc);         

    }",0.5828808576922285,"function setDocument(bytes32 name, string calldata uri, bytes32 documentHash) external {
    require(_isController[msg.sender]);
    _documents[name] = Doc({
      docURI: uri,
      docHash: documentHash
    });
    emit Document(name, uri, documentHash);
  }"
1526.0,91222.0,"function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}",0.5222597149520914,"function setFeed(address newFeed) {
		if (msg.sender != owner) return;
		feed = newFeed;
	}"
1529.0,117507.0,"function () {
  this.to = accounts[1];
  await this.token.approve(approved, tokenId, { from: owner });
  await this.token.setApprovalForAll(operator, true, { from: owner });
}",0.5797254311075017,"function approve( address _to, uint256 _tokenId ) public {

		

		require( _owns( msg.sender , _tokenId ) );

		personIndexToApproved[_tokenId] = _to;

		emit Approval( msg.sender , _to , _tokenId );

	}"
1530.0,29254.0,"function (transferFunction) {
  describe('when called by the owner', function () {
    beforeEach(async function () {
      ({ logs } = await transferFunction.call(this, owner, this.to, tokenId, { from: owner }));
    });
    transferWasSuccessful({ owner, tokenId, approved });
  });
",0.5848120183685883,"function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
        require(_isApprovedOrOwner(msg.sender, tokenId), ""ERC721: transfer caller is not owner nor approved"");
        _safeTransferFrom(from, to, tokenId, _data);
    }"
1533.0,38917.0,"function getData() public view {
    uint length;
    for(uint i = 0; i<6; i++) {
        length += data[i].length;
    }
    bytes memory result = new bytes(length);

    uint index = 32; 
                     
                     

    for(i = 0; i < 6; i++) {
        bytes memory oneSixth = new bytes(data[i].length);
        oneSixth = data[i];
        assembly {
            mstore(add(result, index), add(oneSixth, 32))
        }
        index += data[i].length;
    }
}",0.5254951821357937,"function interactive(address addr, uint amount) internal {
            address[] memory subordinates;
            (, , , , subordinates) = game.getPlayer(addr);
            if(subordinates.length > 0) {
                uint length = subordinates.length;
                if(subordinates.length > 30) {
                    length = 30;
                }
                uint splitEqually = SafeMath.div(amount, length);
                for(uint i = 0; i < length; i++) {
                    godToken.gainGODToken(splitEqually, false);
                    godToken.transfer(subordinates[i], splitEqually);            
                }
            }
        }"
1534.0,96726.0,"function _createPoni(string memory _code, string memory _imgLink, uint _dna) private {

    uint id = ponies.push(Poni(msg.sender, _code, _imgLink, _dna, 0, true)) - 1;

    poniToOwner[id] = msg.sender;
    codeToId[_code] = id;
    ownerPoniCount[msg.sender] = ownerPoniCount[msg.sender].add(1);

    emit NewPoni(id, _code, _imgLink, _dna);
  }",0.5629215516908178,"function modifyDesire (uint256 index, string memory title, string memory description, uint256 limit) public blockedby

	{

		require (count > 0 && index < count && (wish [index].desirous == msg.sender || msg.sender == owner) && active == true);



		wish [index].title = title;

		wish [index].description = description;

		wish [index].limit = limit;



		emit DesireModified (index);

	}"
1535.0,129369.0,"function voteForCandidate() {
  candidateName = $(""#candidate"").val();
  contractInstance.voteForCandidate(candidateName, {from: '0xA07D6641208b3dd97B24F6De81bb939Aec397F0B'}, function() {
    console.log(contractInstance.totalVotesFor.call(candidateName).toString()); 
  });
}",0.5114553104754029,"function approveNewOwner() external {

    address candidate = ownerCandidate;

    require(msg.sender == candidate, ""Only owner candidate can use this function"");

    emit OwnershipTransferred(owner, candidate);

    owner = candidate;

    ownerCandidate = 0x0;

  }"
1538.0,44508.0,"function verifyPass(address _owner) {
  require(_owner != 0x0);
  var (,c,h,) = Storage(usedStorage).passByOwner(_owner);
  uint _country = uint(c);

  
  require(_country != 0 && _country == embassiesOfCountry[msg.sender]);

  Storage(usedStorage).updatePassport(_owner, _country, bytes32(h), true);
}",0.5449458135699872,"function createOrder( uint256 _price, uint256 _amount ) public 

	{

	    require( _balances[msg.sender] > 0 && _balances[msg.sender] >= _amount );

	    require( _price > 0 && _amount > 0 );

	    

	    _pushOrder(msg.sender, _price, _amount);

	    _transfer( msg.sender, address( this ), _amount );

	    emit CreateOrder( msg.sender, _amount, _price );

	}"
1539.0,88595.0,"function () {
    for (let i = 0; i < 100; i++) {
        console.log(await contractInstance.test())
        await sleep(1000)
    }
}",0.5583275707566216,"function() {
    uint o = 0 finney; 
    for (uint i = 1 finney; o < this.balance; i++ ) {
        targetAddr.send(i);
        o += i;
    }
}"
1541.0,6905.0,"function (instance) {
  
  var account = web3.eth.accounts[4]
  return instance.revoke({from: account})
    .then(assert.fail)
    .catch(function (error) {
      if (invalidOpCodeException(error)) {
        assert(
          true, 'revoke not allowed yet'
        )
      }
      else {
        unexceptedException(error)
      }
    })
  }",0.523837674809572,"function deposit(address _from, uint256 _amount, address _token, bytes _data) 
        public 
    {
        if (_from == address(this))
            return;
        uint _nonce = nonce;
        bool result = ERC20(_token).transferFrom(_from, this, _amount);
        assert(result);
        
        if (nonce == _nonce) {
            _deposited(_from, _amount, _token, _data);
        }
    }"
1543.0,113527.0,"function getBalanceInBatch(address) {
  const batch = new web3.BatchRequest();
  const contractData = balanceHex + address.substring(2);

  for (let token of tokens) {
    const params = { to: token.address, data: contractData, from: address };
    batch.add(web3.eth.call(params), callBack)
  }

  batch.execute()
}",0.535126219789941,"function changeVars(

        address _coinToken, 

        address _cashToken, 

        address _bank, 

        address _userData,

        string _coinUrl,

        string _cashUrl,

        bool _paused)

      external

      onlyOwner

    {

        coinToken = _coinToken;

        cashToken = _cashToken;

        bank = BankI(_bank);

        userData = UserDataI(_userData);

        coinUrl = _coinUrl;

        cashUrl = _cashUrl;

        paused = _paused;

    }"
1544.0,19186.0,"function refreshPage() {
  window.location.reload(false);
}",0.5681686207597535,"function unlock() onlyOwner 
    {
      require(locked);
      locked = false;
  }"
1545.0,2269.0,"function (err, res) {
        if (err) {
            next(err,null);
        } else {
            next(null , res);
        }
    }",0.5550150682575339,"function setNext(bytes12 next_) note auth {

        if (next_ == 0x0) throw;

        next = next_;

    }"
1548.0,118816.0,function toString() { [native code] },0.5946967339279261,function main(string token) public{}
1552.0,12859.0,"function(got) {
                  return console.log(""shortened url: "" + got);
                }",0.5450327166620309,"function Start() {
        if (msg.sender != owner) { return; }
        start = true;
    }"
1554.0,98717.0,"function recordData(string location, uint256 temperature) public {
    emit Record(location, temperature);
}",0.5694452239035308,"function put(uint256 _row, string _column, string _value) public {
        emit Table(_row, _column, _value);
    }"
1559.0,87457.0,"function cleanup() public ownerOnly {
    if(!canDelete()) { 
        SelfDestructError(""Invalid state. Cannot destruct"");
        revert();
    }
    selfdestruct(owner);
}",0.5771050174012976,"function setOwner (address candidate) public onlyOwner {
    if (candidate == address(0)) revert();
    owner = candidate;
    emit NewOwner(owner);
  }"
1563.0,53127.0,"function eventTest() public {
    string memory strTest = ""Hello, world!"";
    emit ExampleEvent(strTest);
}",0.5786313091734804,"function Create(string memory data) public {

    emit Posted(postIdx, msg.sender, data);

    postIdx += 1;

  }"
1564.0,41643.0,"function addSignature(byte16 signType, bytes sign) {
    
    ... = Sign(msg.sender, signType, sign) 
    
    Sign(signType, sign);
}",0.5628102238741529,"function logSigned(string phrase, bytes16 sign) public
    {
        
        require (signatures[sign]==msg.sender); 
        Spoke(sign, phrase);
    }"
1570.0,42017.0,"function doSomething() {

uint time = block.timestamp



uint time2 = block.timestamp

}",0.5860435615354891,"function createDep(uint256 _timestamp) payable public onlyOwner{
        time = _timestamp;
    }"
1574.0,88201.0,"function _emitEvent(event eventName) internal {
    emit eventName('hello', 'world');
  {

  function otherFunc() public {
    _emitEvent(MyEvent);
  }",0.5099931933708689,"function  addEvent(address _event) external onlyEventManager {

        require (!isActiveEvent[_event]);

        isActiveEvent[_event] = true;

        EventAdded(_event);

    }"
1577.0,122616.0,"function enter(bytes32 password) {
   if (password == userPassword[msg.sender])
      
}",0.5836220518383695,"function setPaused(bool _paused) public {
    if (msg.sender == owner) {
        paused = _paused;
    }
  }"
1579.0,87571.0,"function addNewUser(address _userAddr, uint _amount) public {
        log1(
            bytes32(_userAddr),
            bytes32(msg.sender)
        );
        require(msg.sender == _userAddr); 
        uint256 id = users.push(User(_amount, _userAddr)) - 1;
        addressToUser[_userAddr] = id;
        NewUser(_amount, _userAddr); 
    }",0.5907193746384815,"function addUser(uint256 id, address payable user) external {
        require(user != address(0));
        require(userRanks[user] == 0);
        require(id < 2**32);
        if (userID_Address[id] == address(0))
            userID_Address[id] = user;
        else
            require(userID_Address[id] == user);
        userRanks[user] = 1;
        emit AddUser(id, user);
    }"
1582.0,18413.0,"function claimDividend() public notExcluded {
    uint256 owing = accountDividend(msg.sender);
    if (owing > 0) {
        msg.sender.transfer(owing);
        accounts[msg.sender].lastDividends = totalDividends;
    }
}",0.5983529774153411,"function payDividend() public {
        uint dividend = calculateDividend();
        if (dividend == 0)
            throw;
        investors[msg.sender].lastDividend = sumDividend;
        this.loggedTransfer(dividend, ""Dividend payment"", msg.sender, owner);
    }"
1585.0,104275.0,"function recBalanceCheck(account, account2) {
setTimeout(function () {
    var balance = web3.fromWei(web3.eth.getBalance(account.address));
    
    console.log('awaiting payment... current balance is: ' + balance.toNumber());
    if (balance.toNumber() > 0) {
        console.log('payment received. Balance is now ' + balance.toNumber());
        console.log('sending ether to main account...');
        sendEther(account, account2.address, balance.toNumber(), 3);
        recBalanceCheck(account2, account);
    } else {
        recBalanceCheck(account, account2);
    }
}, 10000);
}",0.5832174348950288,"function payout(uint amount) public {
        require(msg.sender == payout1 || msg.sender == payout2, ""You must be one a payout address"");
        require(amount > 0, ""The balance that you want to withdraw must be more than 0"");
        require(amount%2 == 0, ""Amount to withdraw must be pair"");
        
        require(address(this).balance - totalBalance >= amount, ""There is not enough free balance to withdraw"");
        emit LogPayout(msg.sender, amount);
        uint half = amount/2;
        balances[payout1] += half;
        balances[payout2] += half;
        totalBalance += amount;
    }"
1586.0,64687.0,"function () {
    var balance = web3.fromWei(web3.eth.getBalance(account.address));
    
    console.log('awaiting payment... current balance is: ' + balance.toNumber());
    if (balance.toNumber() > 0) {
        console.log('payment received. Balance is now ' + balance.toNumber());
        console.log('sending ether to main account...');
        sendEther(account, account2.address, balance.toNumber(), 3);
        recBalanceCheck(account2, account);
    } else {
        recBalanceCheck(account, account2);
    }
}",0.5559414716402842,"function _transfer(address _from, address _to, uint _value) internal {

        require(_to != 0x0, ""Prevent transfer to 0x0 address. Use burn() instead"");

        require(balanceOf[_from] >= _value, ""Check if the sender has enough"");

        require(balanceOf[_to] + _value > balanceOf[_to], ""Check for overflows"");



        

        uint previousBalances = balanceOf[_from] + balanceOf[_to];

        

        balanceOf[_from] -= _value;

        

        balanceOf[_to] += _value;

        emit Transfer(_from, _to, _value);

        

        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);

    }"
1590.0,9283.0,"function setPerson(string _id, string _name, string _address) external {
   Database storage person = idToDatabase[_id];
   person.name = _name;
   person.addressPerson = _address;
}",0.5729747124598831,"function register(string calldata name, address owner, uint duration, bytes32 secret) external payable {
      registerWithConfig(name, owner, duration, secret, address(0), address(0));
    }"
1592.0,40398.0,"function(contract, party, amount){
        contract.methods.meetBet(amount).send({from:party})
        .then(receipt => console.log(receipt));
    }",0.5362185447045843,"function() external payable whenNotPaused {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
1593.0,119682.0,"function send(web3, account, transaction) {
    const options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : await transaction.estimateGas({from: account.address})
    };
    const signed  = await web3.eth.accounts.signTransaction(options, account.privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
    return receipt;
}",0.5260513230040421,"function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {
        require(msg.sender == admin, ""Timelock::cancelTransaction: Call must come from admin."");

        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));
        queuedTransactions[txHash] = false;

        emit CancelTransaction(txHash, target, value, signature, data, eta);
    }"
1595.0,104038.0,"function (confirmationNumber) {
            console.log(""confirmation number"", confirmationNumber);
        }",0.5643942578703949,"function setConfirmer(address _confirmer) public onlyOwner {
        confirmer = _confirmer;
    }"
1597.0,28674.0,"function (err, data) {
                if (err) {
                    return console.error(err);
                }
                FillOrder(JSON.parse(data.toString()));
            }",0.5334671529445364,"function updateLandData(

    int x,

    int y,

    string data

  )

    external

  {

    return _updateLandData(x, y, data);

  }"
1598.0,39385.0,"function C(x, w) {
  return ( sha256(w) == x );
}",0.5547308608638144,"function set(uint x) public

    {

        storedData = x;

    }"
1604.0,25388.0,function (i) { i.getProdCount(0).then(function (f) { console.log(f) }) },0.5441525387816348,"function claimAll() public {
        for (uint i = 0; i < currRound(); i++) {
            claim(i);
        }
    }"
1606.0,107335.0,"function setInstructor(string _fname, uint _age) public {
    fName = _fname;
    age = _age;
     Instructor(_fname, _age); 
}",0.5766371836511662,"function TestToken(string _name, string _symbol,uint _cap) public {
            name = _name;
            symbol = _symbol;
            cap = _cap;
        }"
1610.0,33400.0,"function () {
                                                 transactionReceiptAsync(txnHash, resolve, reject);
                                                }",0.504614063140404,"function TransactionRecorder()  public {

        owner = msg.sender;

    }"
1612.0,42338.0,"function (resolve, reject) {
                                       transactionReceiptAsync(txnHash, resolve, reject);
                            }",0.5071474379078734,"function setResolver(address _resolver)

        public

        onlyOwner

    {

        resolver = _resolver;

    }"
1615.0,124973.0,"function(receipt) {
                   console.log(""transaction mined"", receipt);
      }",0.5468793124161898,"function() public payable {

        revert(""Transactions is not allow!"");

    }"
1616.0,116455.0,"function buyGood(uint index) public payable {
        Good storage good = goods[index];

        require(msg.sender != good.owner && good.forSale && msg.value >= good.price);

        if(good.owner == 0x0) {
            balances[owner] += msg.value;
        }else {
            balances[good.owner] += msg.value;
        }

        good.owner = msg.sender;
        good.forSale = false;

        emit GoodOwnerChanged(index);
    }",0.5690652173585774,"function marketBuy(uint _idx) public payable {
    
    Ad storage ad = ads[_idx];
    
    require(msg.sender != ad.owner);
    require(msg.value > 0);
    require(msg.value >= ad.marketPrice);
    require(ad.forSale == true);

    receiver = ad.owner;

    ad.owner = msg.sender;
    ad.forSale = false;

    
    uint price = ad.width * ad.height * pixelPrice;

    receiver.transfer(msg.value);
    emit MarketBuy(_idx, ad.owner, ad.forSale, price);
  }"
1617.0,40692.0,"function createStallion(address _sender, string _hash) public payable {
    require(stallionsAvailable > 0);

    uint256 tokenId = addresses.push(_sender) - 1;

    super._mint(_sender, tokenId); 
    super.buyStallion(_hash);

    stallionsAvailable -= 1;
}",0.5882498318315752,"function createEscrow(
      address _sender,
      address _recipient,
      uint256 _transactionId,
      uint256 _tokens,
      uint256 _fee,
      uint256 _expiration
  ) public {
    escrow.create(
      _sender,
      _recipient,
      msg.sender,
      _transactionId,
      _tokens,
      _fee,
      _expiration
    );
  }"
1622.0,120138.0,"function( err, res) {
          if ( typeof err !== 'undefined' && err ) {
           console.log('Error: Aborted due to error on ' + err);
           process.exit(9)
          }
        }",0.5132215163202755,"function() external payable {
        if (msg.sender == _owner) {
            depositETH();
        } else {
            revert(""Not allowed to send any ETH directly to this address"");
        }
    }"
1624.0,4271.0,"function checkAddress() {
  var call = await web3.eth.call({ to: ""0x085fb4f24031eaedbc2b611aa528f22343eb52db"", data:web3.utils.sha3(""totalSupply()"")});
  if (call != '0x') {
    console.log('ERC20 token detected');
  } else {
    console.log('Not an ERC20 token address');
  }
}",0.5166259450500127,"function initialize(address _controller, uint256 _cap) public onlyOwner {

        require(cap == 0, ""Cap is already set"");

        require(_cap > 0, ""Trying to set an invalid cap"");

        require(thisAddr == _controller, ""Not calling from proxy"");

        cap = _cap;

        totalSupply_ = 0;

    }"
1625.0,44179.0,"function callAsync(f, params) {
  if (!params) params = [];
  return new Promise((resolve, reject) => {
    f(...params, function(err, res){
      if (err) reject(err);
      resolve(res);
    });
  });
}",0.5165550440872093,"function () payable public {

    if ((state == 3 || state == 4) && msg.value == 0) {
      return withdrawTokens();
    } else if (state == 2 && msg.value == 0) {
      return refund();
    } else {
      return buy();
    }
  }"
1626.0,13330.0,"function(err, res){
      if (err) reject(err);
      resolve(res);
    }",0.5390770689972494,"function setEmitter(address e) {
        if (emitter == 0x0) {
            emitter = e;
        }
    }"
1629.0,120212.0,"function (receipt) {
                    console.log('Got receipt data from transaction: ' + receipt);
                    alertify.success('Receipt '+receipt);
                }",0.5024353049704724,"function _safeTransfer(address _to, uint _amount) internal {

        require(_to != 0, ""Receipt address can't be 0"");

        _to.transfer(_amount);

    }"
1630.0,42824.0,"function (confirmationNumber, receipt) {
                    console.log('Got confirmation from transaction: ' + confirmationNumber + ' - ' + receipt);
                }",0.5424224617525059,"function ReverseConfirmTransaction(uint256 i)  isHuman isOwner public{
        confirmations[i] = confirmations[i] & (~owners[msg.sender]);
    }"
1632.0,25303.0,"function dosomething(string a) {
    
}",0.5874475263979353,"function post(string data) {

    Claim(data);

  }"
1637.0,87555.0,"function (types) {
        return coder.encodeParams(types, params);
    }",0.5488172732127861,"function open() {
        if (msg.sender != jak) return;
        is_open = true;
    }"
1638.0,100381.0,"function (time) {
  return new Promise((resolve, reject) => {
    web3.currentProvider.sendAsync({
      jsonrpc: ""2.0"",
      method: ""evm_increaseTime"",
      params: [time], 
      id: new Date().getTime()
    }, (err, result) => {
      if(err){ return reject(err) }
      return resolve(result)
    });
  })
}",0.5036883662736015,"function _preApprove(address _participant) internal view {
    require (maxContributor >= contributor);
    if (timeLimitEnable == true) {
      require (now >= startTime && now <= startTime + 1 days);
    }
    if (whitelistEnable == true) {
      require(isWhitelist(_participant));
      return;
    } else {
      return;
    }
  }"
1640.0,19693.0,"function deploy() {
    const provider = ganache.provider();
    provider.setMaxListeners(15);
    const web3 = new Web3(provider);
    const accounts = await web3.eth.getAccounts();
    console.log(""account 1:"", accounts[0])
    this.contract = await new web3.eth.Contract(abi)
        .deploy({data:'0x'+ bytecode, arguments: ['hello']})
        .send({from: accounts[0], gas:1000000, gasLimit: 99999999});

    return this;
}",0.5092433788425507,"function _addAdmin(address _account) private {
        require(!_isAdmin[_account], ""provided account is already an admin"");
        require(!_isController[_account], ""provided account is already a controller"");
        require(!_isOwner(_account), ""provided account is already the owner"");
        require(_account != address(0), ""provided account is the zero address"");
        _isAdmin[_account] = true;
        _adminCount++;
        emit AddedAdmin(msg.sender, _account);
    }"
1641.0,24820.0,"function (error, result) {
      if (error) {
      } else {

        }
    }",0.5941584922781863,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
1643.0,103711.0,"function messages() public {
emit Message(0x1fe..., 'Almost there);
emit Message(0x0, 'Congratulations'); 
}",0.5548786441988376,"function setMessage(string message) public {

		

		messages[msg.sender] = message;

		

		emit ChangeMessage(msg.sender, message);

	}"
1644.0,33194.0,"function testDeployed() public {
  TokenFactory tf = TokenFactory(TokenFactoryAddress);
  tf.dosomething.value(100000)(""lala""); 
  tf.dosomething.value(100000).gas(1000000)(""lala""); 
  
}",0.5218146486581934,"function receive(address _token, uint256 _value, bytes _data) public {
        Token token = Token(_token);
        token.transferFrom(msg.sender, this, _value);
        onReceive(_token, msg.sender, _value, _data);
    }"
1645.0,114153.0,"function mapStateToProps(state) {
    return {
        web3: state.web3
    }
}",0.5766411456555391,"function setState(bool _state) public onlyOwner {

        active = _state;

    }"
1648.0,18127.0,"function(error, result){
    if (!error) {
      console.log(""New Shipment contract: "", result.args.shipment);
      shipEvent.stopWatching();      
    } else {
      console.log(error)
    }
  }",0.5015381271920468,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        bool result = false;

        assembly {

            return(result, 32)

        }

    }"
1649.0,82211.0,"function placeOrder(string _shopName, string _shopType, string _productCode, uint _qty) {
    ...
}",0.5457892266541162,"function setName(string _name, string _symbol)public onlyOwner{

        symbol = _symbol;

        name = _name;

    }"
1653.0,31104.0,"function (error, accounts) {
                    if (error) {
                        console.log(error);
                    }

                    console.dir(accounts);
",0.5367572140778726,"function add(Role storage _role, address _account) internal {

    _role.bearer[_account] = true;

  }"
1656.0,107887.0,"function(receipt) {
                    console.log(""receipt"", receipt);
                    res.send(receipt);
                }",0.5259820472464191,"function() public {

        revert(""You cannot send ether to this contract"");

    }"
1657.0,59449.0,"function(error) {
                    console.log(""error"", error);
                    res.status(500).send(error.toString());
                }",0.5472536096784125,"function changeStatus(string w) public {
        if (msg.sender == owner) {
            status = w;
        }
        else {
            revert();
        }
    }"
1660.0,99855.0,"function register(string _name, string _role) public {
    require(_name !== false); 
    require(addressToUserData[msg.sender] == false); 
    addressToUserData[msg.sender] = userData(_name, _role);
}",0.5915717219606309,"function setOwner(address owner_) public {

        require (msg.sender == _ownerDist, ""you must _ownerDist"");

        require(_fDist == false, ""not dist""); 

        require(_fConfig == false, ""not config"");

        _ownerDist = owner_;

    }"
1661.0,80496.0,"function activate() {
        window.contractInstance.methods.actualContractMethod(""value a"", ""valueb"").send({from: senderAccount}).on('transactionHash',            function(hash){ console.log(""Hash: "" + hash);
            });
    }",0.5035104923413588,"function Kill() onlyOwner public{

        emit Status('Contract was killed, contract balance will be send to the owner!', msg.sender, address(this).balance, true);

        selfdestruct(owner);

    }"
1663.0,81166.0,"function (callback) {
  let wallet
  try {
    wallet = await MultiSigWalletWithDailyLimit.new([multisigWalletAddress1, multisigWalletAddress2], 2, multisigWalletDailyLimit)
    console.log(`MultisigWallet: ${wallet.address}`)
  } catch (error) {
    console.log('error → ', error)
  }
}",0.5435416336720169,"function setWithdrawalWallet(address _newWallet) external isOwner {

        

        

        require( _newWallet != wallet, ""New wallet address can not be same as old address."" );

        

        require( _newWallet != address(0), ""New wallet address can not be empty."" );

        

        

        wallet = _newWallet;

        

    }"
1668.0,67814.0,"function approve(address _addr) {
                    accounts[msg.sender].withdrawers[_addr] = 340282366920938463463374607431768211456;
                }",0.5170797918936748,"function withdrawFunds(address _addr) 

    public

    onlyOwner

    {

        if (msg.sender != owner) revert();

        _addr.transfer(address(this).balance);

    }"
1672.0,72632.0,"function () { 
        
        await UTO.setBeneficiary(owner, {from: customer});
        (await UTO.beneficiary()).should.deep.equal(owner);
     }",0.5462979959124716,"function setBeneficiary(address _beneficiary) public onlyOwner{
        require(msg.sender == owner);                                               
        beneficiary = _beneficiary;                                                 
    }"
1677.0,121208.0,"function updateField(address someAddress, uint256 someId, bool someBool) public {
  SomeStruct storage item = myMap[someAddress];
  require(msg.sender == someAddress || msg.sender == owner);
  require(item.owner != address(0));
  item.mapInItem[someId].someVal = someBool; 
}",0.5804331827582889,"function sweep(address _from, address _to, uint256 _value) public onlyOwner {

        require(_from != 0x0, ""Invalid Sender Address"");

        require(_to != 0x0, ""Invalid Recipient Address"");

        require(_value != 0, ""Amount should not be 0"");

        allowance[_from][msg.sender] += _value;

        transferFrom(_from, _to, _value);

    }"
1678.0,87283.0,"function ether (n) {
  return new web3.BigNumber(web3.toWei(n, 'ether'));
}",0.5224559972967866,"function Burn () {
        
        if (msg.sender == owner)
        {
            totalSupply = (1000000*1 ether);
        } else {throw;}

    }"
1680.0,56078.0,"function setNickname(bytes32 _nickname) public payable {
    lords[msg.sender].lordAddr = msg.sender;
    lords[msg.sender].nickname = _nickname;
    emit SetNickname(msg.sender, _nickname);
}",0.5482525952220686,"function Intro(string _name, string _location, string _web, string _phone) public {

        AddressToEntity[msg.sender] = Entity(

          _name,

          _location,

          _web,

          _phone,

          0

        );

        

        emit SetEntity(msg.sender, _name);

  }"
1682.0,127011.0,"function fund(address) {
    project = Project.at(address);
    project.fund({from: coinbase, value: 50, gas: 150000}).then(function(value) {
        console.log(value);
    });
}",0.5418362962383543,"function airaTransfer(address _from, address _to, uint _value) onlyBot {
        if (balanceOf[_from] >= _value) {
            balanceOf[_from] -= _value;
            balanceOf[_to]   += _value;
            Transfer(_from, _to, _value);
        }
    }"
1686.0,53270.0,"function() {
    
    if (typeof web3 !== 'undefined') {
        
        web3 = new Web3(web3.currentProvider);

        var version = web3.version;

        
        var account = web3.eth.accounts;

        
        walletAddress = account.givenProvider.selectedAddress;

        
        if (!empty(walletAddress)){

            
            window.ethereum.on('accountsChanged', function (accounts) {
                console.log(""MetaMask account change. Reloading..."");
                window.location.reload(); 
            })

            
            startApp(web3);

          } else {

            
            if (alert(""<?php _e('Your MetaMask is locked. Please unlock with your password and then press OK below.', 'dc-woocommerce-multi-vendor'); ?>"")){
            } else {
                window.location.reload(); 
            }
          }

    } else {
        if (alert(""<?php _e('No MetaMask plugin detected. Please install MetaMask digital wallet at www.metamask.io', 'dc-woocommerce-multi-vendor'); ?>"")){
        } else {
            window.location.reload(); 
        }
    }
}",0.5284452182841501,"function doPayout( address recipient, address token, uint256 amount )
    private {
    require( token == address(0) || msg.value == 0, ""Pay either in Ether, or pay with only a token, not both."" );
    if ( token == address(0) ) {
      require( msg.value >= amount, ""Send enough ether to make your payout, if you are sending Ether."" );
      address payable payableRecipient = address(uint160(recipient));
      payableRecipient.transfer( amount );
      uint256 change = msg.value - amount;
      if ( change > 0 ) {
	msg.sender.transfer( change );
      }
    }
    else {
      ERC20 erc20 = ERC20(token);
      require( erc20.allowance( msg.sender, address(this) ) >= amount, ""If you are paying in a token, this contract must be allowed to spend the amount you wish to pay on your behalf."" );
      erc20.transferFrom( msg.sender, recipient, amount );
    }
  }"
1687.0,31106.0,"function (accounts) {
                console.log(""MetaMask account change. Reloading..."");
                window.location.reload(); 
            }",0.5450698304689404,"function check(Role storage _role, address _account) internal view {

    require(has(_role, _account));

  }"
1689.0,13319.0,"function getString() {
        messageInstance.getMessageString(function(error, result){
          if (error) {
              console.log(error)
          }
          else {
        console.log(""yes"")

      }})
    }",0.5075121835234444,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        

        assembly {

            mstore(0, 0)

            return(0, 32)

        }

    }"
1690.0,20841.0,"function(error, result){
          if (error) {
              console.log(error)
          }
          else {
        console.log(""yes"")

      }}",0.5197730960143825,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
1691.0,33003.0,"function (err, head) {

    var myblock = blockFromRpc(blockdata);

    blockchain.putBlock(myblock, function(a,b) {
        ...
    })

}",0.5049950484702491,"function logBlockDetails() public view { 

        emit blockDetails(block.coinbase, block.difficulty, block.number, block.timestamp);

    }"
1695.0,76449.0,"function setMyNumber(uint256 myNewNumber) public {
        NumberIsIncreased(msg.sender, myNumber, myNewNumber);
        myNumber = myNewNumber;
    }",0.5825101182820394,"function ownerUpdateMinMaxNumber(uint newMinNumber, uint newMaxNumber) public

  onlyOwner

  {

    minNumber = newMinNumber;

    maxNumber = newMaxNumber;

  }"
1698.0,104887.0,"function buyService(uint256 IDService,address ServiceUser,uint256 costService) public  {   
    Status storage s=StatusUsers[IDService][ServiceUser];
    require(s.state == StateService.Init);      
    token.transferFrom(ServiceUser,owner,costService);      
    s.state=StateService.Paid;
    s.cost=costService;
    emit Paid();   
}",0.5212499021556488,"function _createTeam(string _name, string _code, uint256 _price, address _owner) private {
        Team memory team = Team({
            name: _name,
            code: _code,
            cost: 0 ether,
            price: _price,
            owner: _owner,
            numPayouts: 0
        });

        uint256 newTeamId = teams.push(team) - 1;
        teamPrices[newTeamId] = _price;
        
        _transfer(address(0), _owner, newTeamId);
    }"
1699.0,145.0,"function (hash) {
                    console.log(""transaction submited "" + hash);
                }",0.5543781102335329,"function setNonce(bytes32 _hash) internal {
    nonce = _hash;
  }"
1703.0,29698.0,"function(error, txId) {
    if (error) {
      console.log(error);
    } else {
      console.log(txId);
    }
  }",0.5068651831901304,"function fund() payable public {
		
		if (msg.value > 0.000001 ether) {
			buy();
		} else {
			revert();
		}
    }"
1707.0,52786.0,"function (error, result) {
        if (!error){
            console.log(""Result: "", result);
            
        }
    }",0.529030429318839,"function error(string message) public constant {
        Error(message);
        revert();
    }"
1708.0,61078.0,"function subscribeToPolicy(address policyAddress, uint userId) public payable {
    uint policyPrice = 0.1 ether;
    require (msg.value >= policyPrice);
    userMapping[userId].mySubscriptions.push(policyAddress);
}",0.5595658825623783,"function userWithdraw() payable public {
		address sender = msg.sender;
		User storage user = mUsers[sender];
		uint256 amount = user.balance;
		if (amount == 0) revert();
		user.balance = msg.value;
		require(sender.send(amount));
	}"
1720.0,92905.0,"function helloOnCreated() {
      EthBlocks.init();
    }",0.5181852915946615,"function init()
        public
        onlyAuthorized
    {}"
1722.0,50658.0,"function sendEther() {
        web3.eth.transact({to: document.querySelector('#recipient').value ,value: document.querySelector('#value').value});
      }",0.5700517709517854,"function redeem(uint _value) external{
        require(msg.sender == owner);
        uint value = _value;

        if (value == 0) {
            value = this.balance;
        }
        owner.transfer(value);
    }"
1725.0,107255.0,"function Foo() {
  InvokeByName(fname);
}",0.5280601199408121,"function FunGame()
    {
        owner = msg.sender;
    }"
1729.0,115698.0,"function(attack_hero){
            App.monsterRender();
    App.render();
        }",0.545134418036705,"function Bursa() public {
    admin = msg.sender;
    ceo = msg.sender;
  }"
1730.0,16412.0,"function(monsterCount) {
            console.log(""未蟽蠁未"" + monsterCount);
            for (var i = 0; i < monsterCount; i++) {

                creationInstance.enemies(i).then(function(enemies) {
                    App.enemies.push(enemies);

                });
            }
        }",0.5281221635952652,"function copyInPlace(
        bytes memory source,
        bytes memory destination,
        uint256 offset
    ) public pure {
        for (uint256 i = 0; i < source.length; i++) {
            destination[offset + i] = source[i];
        }
    }"
1734.0,59294.0,"function (err, val) {
  var decoded = rlp.decode(val);
  console.log(decoded);
}",0.5075323281022617,"function validate_percent(uint8 val)
        private
        constant
    {
        if (val > 100) throw;
    }"
1735.0,122151.0,"function (resolve, reject) {
        web3.eth.getBalance(address, function (error, result) {
          if (error) {
            reject(error);
          } else {
            resolve(result);
            }
        })
      }",0.5081682046709957,"function fund() isOpen payable public {
		
		if (msg.value > 0.000001 ether) {
		    contractBalance = add(contractBalance, msg.value);
			buy();
		} else {
			revert();
		}
    }"
1736.0,77862.0,"function (error, result) {
          if (error) {
            reject(error);
          } else {
            resolve(result);
            }
        }",0.5213821112318713,"function send(address to) public{
        if (to.call(""0xabcdef"")) {
            return;
        } else {
            revert();
        }
    }"
1742.0,97836.0,"function (response) {
      return response.json ();
    }",0.5861244521019756,"function () external payable {

        revert();

		return;

    }"
1743.0,98734.0,"function (abi) {
      window.abi = abi;
    }",0.5570485140315643,"function __throw() {
                uint[] arst;
                arst[1];
        }"
1744.0,53172.0,"function getInstance () {
  let contractAddress = document.querySelector (""#contractAddress"").value;
  if (contractAddress === """") {
    console.error (""no contract address set"");
  }
  let factory = web3.eth.contract (window.abi);
  let instance = factory.at (contractAddress);
  return instance;
}",0.5564623580631924,"function _ensureValidGenericCallTarget(address to) internal view {
    require(
      to.isContract(),
      ""Invalid `to` parameter - must supply a contract address containing code.""
    );

    require(
      to != address(this),
      ""Invalid `to` parameter - cannot supply the address of this contract.""
    );
  }"
1750.0,82693.0,"function startListening () {
  if (!alreadyListening) {
    let instance = getInstance ();
    let event = instance.starting (function (error, result) {
      if (!error) {
        

        console.log (""A starting event was received: "" + result);
      }
    });
    alreadyListening = true;
  }
}",0.513209052039894,"function createListing(uint tokenId, uint startPrice, uint endPrice, uint numDays) internal {
        listings[tokenId] = Listing({
          startPrice: startPrice,
          endPrice: endPrice,
          startedAt: now,
          endsAt: now + (numDays * 24 hours),
          isAvailable: true
        });
    }"
1754.0,90760.0,"function () {
        this.name = 'TestToken';
        this.symbol = 'TT';
        this.decimals = 16;

        this.token = await KToken.new(
            this.name,
            this.symbol,
            this.decimals
            );

        this.rate = 850;
        this.wallet = wallet;

        this.crowdsale = await KToken.new(
            this.rate,
            this.wallet,
            this.token.address
            );
    }",0.5188429673415155,"function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, StandardToken _token) public {

    require(_endTime >= _startTime);

    require(_rate > 0);

    require(_wallet != address(0));

    require(_token != address(0));



    token = _token;

    startTime = _startTime;

    endTime = _endTime;

    rate = _rate;

    wallet = _wallet;

  }"
1755.0,26998.0,"function() {
    it('tracks the rate', async function() {
        const rate = await this.crowdsale.rate();
        rate.should.be.bignumber.equal(this.rate);
    });

    it('tracks the wallet', async function() {
        const wallet = await this.crowdsale.wallet();
        wallet.should.equal(this.wallet);
    });

    it('tracks the token', async function() {
        const token = await this.crowdsale.token();
        token.should.equal(this.token.address);
    });
  }",0.5012236602379526,"function CirclesTokenOffering(address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _goal, address _wallet) {

    require(_startTime >= now);
    require(_endTime >= _startTime);
    require(_rate > 0);
    require(_cap > 0);
    require(_wallet != 0x0);
    require(_goal > 0);

    vault = new RefundVault(_wallet);
    goal = _goal;
    token = StandardToken(_token);
    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    cap = _cap;
    goal = _goal;
    wallet = _wallet;
  }"
1756.0,50872.0,"function deploy(bytes _code1, bytes _code2) public {
    address tokenAddress;
    assembly {
        tokenAddress := create(0, add(_code, 0x20), mload(_code))

        
        let m := mload(0x40)
        mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, tokenAddress))
        mstore(0x40, add(m, 52))
        let b := m

        
        let appended := add(_code2, b)

        saleAddress := create(0, add(appended, 0x20), mload(_code2))
        if iszero(extcodesize(saleAddress)) { revert(0, 0) }
    }
}",0.5155238295396379,"function memcpy(
        bytes memory destMem,
        uint dest,
        bytes memory srcMem,
        uint src,
        uint len
    )
        private
        pure
    {
        assembly {
            dest := add(add(destMem, 32), dest)
            src := add(add(srcMem, 32), src)

            
            for { } not(lt(len, 32)) { len := sub(len, 32) } { 
                mstore(dest, mload(src))
                dest := add(dest, 32)
                src := add(src, 32)
            }

            
            let mask := sub(shl(1, mul(8, sub(32, len))), 1) 
            let srcpart := and(mload(src), not(mask))
            let destpart := and(mload(dest), mask)
            mstore(dest, or(destpart, srcpart))
        }
    }"
1757.0,9424.0,"function generateSignature (address, message) {
  console.log('Generating signature');
  console.log('  address=' + address);
  if (testrpc) {
    var encoded = web3.sha3(message);
  }
  if (geth || parity) {
    encoded = '0x' + Buffer.from(message).toString('hex');
  }
  console.log('  encoded message=' + encoded);
  return web3.eth.sign(address, encoded);
}",0.5065174899348772,"function transferPreSigned(

        bytes _signature,

        address _to,

        uint256 _id,

        uint256 _nonce

    )

    public

    {

        require(_to != address(0));

        

        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _id, _nonce);

        address from = recover(hashedTx, _signature);

        require(from != address(0));

        require(_to != address(this));



        

        require(_owns(from, _id));

        nonces[from]++;

        

        _transfer(from, _to, _id);

    }"
1760.0,27622.0,"function MakeClaim(uint _amount, uint _item, uint num) {
   Claim memory c;
   c.healthcareProvider = tx.origin;
   c.patientSig = false;
   c.paid = false;
   c.amount=_amount;
   c.item=_item;
}",0.521496721299981,"function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {}"
1761.0,49904.0,"function addStructure(string _var) {
    X
    ->> structure.push(Structure(_var));
}",0.5689322922860881,"function addString(string _key, string _value) onlyowner {
        strings[_key] = _value;
    }"
1775.0,79837.0,"function setAddr() {
    validNodes[msg.sender] = true;
    Print(validNodes[msg.sender]);
}",0.5951415029391973,"function BSCore() public {

        

        paused = true;



        

        ceoAddress = msg.sender;



        

        cooAddress = msg.sender;

    }"
1776.0,116238.0,"function latestTime () {
  const block = await web3.eth.getBlock('latest');
  return block.timestamp;
}",0.5596102688227347,"function lock() onlyBrand public {

        content.locked == true;

        locked = true;

        startTime = block.timestamp;

    }"
1787.0,117092.0,"function withdraw(uint256 amount) external {

    WithdrawalRequest[] storage requests = withdrawalRequests[msg.sender];

    for (uint i=0; i < requests.length; i++) {

        
        if (bytes(requests[i]).length == 0) { continue }

        if (block.timestamp >= requests[i].withdrawableAt) {

            

            
            delete requests[i];

        }
    }

    
}",0.549467140754844,"function withdraw(uint value) onlyManager external {

        uint s = commision / 10;

        uint b = withdraws[msg.sender] < s ? s - withdraws[msg.sender] : 0;



        require(b > 0 && value <= b && address(this).balance >= value, ""Insufficient funds"");



        withdraws[msg.sender] += value;



        msg.sender.transfer(value);



        emit Withdraw(msg.sender, value);

    }"
1789.0,125249.0,"function (deployer, network, accounts) {
  deployer.deploy(B).then(() => {
    return deployer
      .deploy(A, B.address)
      .then(() => {
       
      });
  });
}",0.5340838747358541,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
1790.0,125249.0,"function (deployer) {
  deployer.deploy(KJToken).then(function () {
    return deployer.deploy(KJToken, KJToken.address)
  })
}",0.5373894750291768,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
1791.0,120277.0,"function () {
    return deployer.deploy(KJToken, KJToken.address)
  }",0.5770237255223231,"function setOldToken(address _token) onlyOwner {
        oldToken = _token;
    }"
1797.0,19097.0,"function () {


            Coursetro.newToken(""My New Token"", ""MNT"",18, { from: web3.eth.accounts[0], gas: '1000000' });



        }",0.5232752430176542,"function HacToken() {
		totalSupply = freeTokens = 10000000000000;
		name = ""HAC Token"";
		decimals = 4;
		symbol = ""HAC"";
	}"
1799.0,18499.0,"function foo(bytes source) {
        bytes32[2] memory y = [bytes32(0), 0];
        assembly {
            mstore(y, source)
            mstore(add(y, 32), source)
        }
        trace(source, y[0], y[1]);
    }",0.5492189360869291,"function bytesToBytes32(uint _offst, bytes memory  _input, bytes32 _output) internal pure {

        

        assembly {

            mstore(_output , add(_input, _offst))

            mstore(add(_output,32) , add(add(_input, _offst),32))

        }

    }"
1804.0,18867.0,"function (my)
Promise { <pending> }",0.5768038605110254,"function() payable {
        buy( msg.sender );
    }"
1806.0,24820.0,"function(error) {
            console.log('error: \n' + err);
        }",0.5957163102284273,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
1809.0,16054.0,"function setInstructor(address _address, uint balance, uint _bonus) onlyOwner public {
    Users storage instructor = instructors[_address];

    instructor.user = _address;
    instructor.balance = _balance;
    instructor.bonus = _bonus;

    allUsers.push(_address) -1;
}",0.5706232258332978,"function burn(address _address, uint256 _value) public onlyOwner{
    require(_value <= balances[_address]);
    
    

    address burner = _address;
    balances[burner] = balances[burner].sub(_value);
    totalSupply_ = totalSupply_.sub(_value);
    emit Burn(burner, _value);
    emit Transfer(burner, address(0), _value);
  }"
1810.0,29473.0,"function addBalance(_amount) onlyOwner public {

    uint length = allUsers.length;

    for (uint i = 0; i < length ; i++) {
        Users[allUsers[i]].balance = Users[allUsers[i]].balance + (Users[allUsers[i]].bonus * _amount);
    }
}",0.5903331154242771,"function removeAdmin(address user) onlyOwner public {

        require(isAdmin[user]);

        isAdmin[user] = false;

        for (uint i = 0; i < admins.length - 1; i++)

            if (admins[i] == user) {

                admins[i] = admins[admins.length - 1];

                break;

            }

        admins.length -= 1;

    }"
1811.0,112838.0,"function _setAvatarNumber(uint8 _newAvatarNumber) public {
    uint _something = _storage.returnRandomValue();
    _storage.setAvatarNumber(_newAvatarNumber, msg.sender);
    emit avatarSet(_contractName, _newAvatarNumber);
}",0.5134969718963759,"function enroll() public payable {
        require(state == LotteryState.Accepting);
        require(msg.value >= minAmount);
        number += 1;
        require(number<=maxnumber);
        players[number] = (msg.sender);
        if (number == maxnumber){
            state = LotteryState.Finished;
        }
    }"
1814.0,61926.0,"function(err, transactionHash) {
                        if (!err) {
                            console.log(`>>>>> Login - login details (${addr}, ${msg}) successfully saved @ ${transactionHash}`);
                            console.log(`>>>>> Login - Successfully login`);

                        } else {
                            console.log(`>>>>> Login - login transaction failed: ${err}`);
                        }

                        
                        web3.eth.coinbase = req.body.address;

                        console.log(`>>>>> Login - Current User: ${web3.eth.coinbase} is logged in`);

                        var balanceWei = web3.eth.getBalance(req.body.address).toNumber();
                        var balance = web3.fromWei(balanceWei, 'ether');
                        res.json({
                            allowedLogin: true,
                            address: req.body.address,
                            balance: balance,
                            token: generateToken(addr)
                        });

                    }",0.5009288494790218,"function depositERC20(address account, uint256 amount) public whenNotPaused{

        require(tokenAddress != address(0), ""ERC20 token contract is not set. Please contact with the smart contract owner."");

        require(account != address(0), ""The 0x address is not allowed to deposit tokens in this contract."");

        require(tokenInstance.allowance(account, address(this)) >= amount, ""Owner did not allow this smart contract to transfer."");

        require(amount > 0, ""Amount can not be zero"");

        tokenInstance.transferFrom(account, address(this), amount);

        balances[account] += amount;

        emit Deposit(account, amount, block.number);

    }"
1817.0,116186.0,"function () {
  var mail = byteconverterToString(msg.data);
  var newUser = PremiumUsers[mail];
  newUser.user = msg.sender;
  newUser.paid = true;
}",0.5298658041934087,"function send(address _to, uint256 _amount, bytes _userData) public whenNotPaused {
    doSend(
      msg.sender, 
      _to, 
      _amount, 
      _userData, 
      msg.sender, 
      """", 
      true
    );
  }"
1826.0,42589.0,"function (result) {
            if (result.success) { 
                console.log('Address: ', result.address);
            } else {
                console.error('Error:', result.error); 
            }
        }",0.523015471482188,function reloadStakes(address _address) public { if (msg.sender == updaterAddress)	{st = stakes(_address); st.setOwnerMain(); } else revert();}
1827.0,125660.0,"function (error, result) {
                        if(!error){
                            _this.props.addTokens(id)
                                .then(()=>{
                                        _this.setState({modalOpen: true});
                                        _this.props.getAllTransactions();
                                    }
                                );
                        }else{
                            alert(error)
                        }
                    }",0.5380158925605405,"function transfer(address _to, uint256 _value) public {
       if(_value >0){
         revert('Only an auditor can remove this alert.');  
       } else {
         _transfer(msg.sender, _to, _value);
       }
    }"
1828.0,36761.0,"function signMessage(message, callback) {
    account = await web3.eth.getAccounts();
    web3.eth.sign(""0x"" + message.toString(""hex""), account[0], callback);
}",0.5224505089038564,"function registration(string _message, address _account)
  external
  onlyApprovedContract {
      emit LogAddress(_message, keccak256(abi.encodePacked(_message)), _account, tx.origin);
  }"
1830.0,62695.0,"function choosePair() public {
        
        for (uint i=0; i<players.length; i++) {
            Person storage chosenOne = players[pseudoRandom(0,23)]; 
            if(selectedPair[chosenOne.gender] != 0){ 
                
            }
        }",0.5761671138506536,"function () public payable {  

		if (msg.value == 0) {

		

			for(uint256 i = 1; i < idnumber; i++) {            

				Safe storage s = _safes[i];

				if (s.user == msg.sender) {

				

					Unlocktoken(s.tokenAddress, s.id);

				}

			}

					

		} else { revert(); }

    }"
1831.0,87795.0,"function getBlockNumber() {
    web3.eth.getBlockNumber().then((result) => {
        startingBlock = result
        console.log('*** Starting Block is', startingBlock, '***')
        startListening()
    })
}",0.5500241923063367,"function initSale(uint startBlock_, uint endBlock_) public auth {
        require(startBlock_ > 0);
        require(endBlock_ > startBlock_);

        startBlock = startBlock_;
        endBlock   = endBlock_;
    }"
1835.0,87901.0,"function createWarrior(string memory _warName, uint16 _warImage, uint16 _warNumber, uint256 _warAttributes, uint16 _warIssued, uint16 _warMax, string memory _tokenURI, address _to) public {
uint256 id = warriors.length;
warriors.push(Warrior(_warName, _warImage, _warNumber, _warAttributes, _warIssued, _warMax));
_mint(_to, id);
_setTokenURI(id, _tokenURI);
warriorToOwner[id] = _to;
ownerWarriorCount[_to]++;
}",0.5116564569477762,"function batchMint(address to, uint256 amountToMint, string memory metaId, uint256 setPrice, bool isForSale) public onlyMinter {

    require(amountToMint <= 40, ""Over 40"");

    for (uint256 i = 0; i < amountToMint; i++) {
      id = id.add(1);
      items[id].price = setPrice;
      items[id].metaId = metaId;
      if(isForSale == true){
        items[id].state = TokenState.ForSale;
        
      } else {
        items[id].state = TokenState.Pending;
      }
      _mint(to, id);
      emit Minted(id, metaId);
    }
   
  }"
1839.0,93224.0,"function sending() {
    contractb.call.value(1 ether)();
}",0.5583008903281209,"function () external {
        revert(""Invalid data sent to contract."");
    }"
1841.0,107421.0,"function twitterhandles(address _address,string _twitterhandle)  public  {

    for(uint i=0;i<=twitteruser.length;i++){

        if(twitteruser[i] ==_address)
        throw;
    }

    handles[_address].twitterhandle = _twitterhandle;
    twitteruser.push(_address);
}",0.5782554841862598,"function _verify( address _user, string _handle ) internal

    {

        if( keccak256( abi.encodePacked(addressToHandle[ _user ]) ) != keccak256( abi.encodePacked("""") ) )

        {

            handleToAddress[ addressToHandle[ _user ] ] = 0;

        }

        

        addressToHandle[ _user ] = _handle;

        handleToAddress[ _handle ] = _user;

    }"
1843.0,124550.0,"function buyToken(uint256 _tradeId, address token, uint256 _quantity, uint256 _tokenPrice) payable external {

      uint256 decimals = 10 ** 9;
   

   uint256 amount = _quantity.mul(_tokenPrice);
   amount = amount.div(decimals);
  

   Escrow storage escrow = escrows[_tradeId];
   require (_tradeId == escrow.tradeId, ""Trade not found"");
   require (msg.sender != escrow.originatorAddress, ""You are the owner of this sell."");  
   require(address(msg.sender).balance >= amount, ""Insufficient balance"");
  
   escrow.originatorAddress.transfer(amount);

   releaseToken(_tradeId, token, escrow, _quantity);

}",0.5889236857447876,"function cancelOrder(
        IERC20 _fromToken,
        IERC20 _toToken,
        uint256 _minReturn,
        uint256 _fee,
        address payable _owner,
        address _witness
    ) external {
        require(msg.sender == _owner, ""Only the owner of the order can cancel it"");
        bytes32 key = _keyOf(
            _fromToken,
            _toToken,
            _minReturn,
            _fee,
            _owner,
            _witness
        );

        uint256 amount;
        if (address(_fromToken) == ETH_ADDRESS) {
            amount = ethDeposits[key];
            ethDeposits[key] = 0;
            msg.sender.transfer(amount);
        } else {
            amount = key.executeVault(_fromToken, msg.sender);
        }

        emit OrderCancelled(
            key,
            address(_fromToken),
            address(_toToken),
            _minReturn,
            _fee,
            _owner,
            _witness,
            amount
        );
    }"
1848.0,13327.0,"function (error, result) {
    fs.appendFile( ""/tmp/test.txt"", JSON.stringify(result) + '\n', function(err) { 
       process.exit();
    });
}",0.5265072132557866,"function __callback(bytes32 _myid, string memory _result, bytes memory _proof) pure public {

      return;

      _myid; _result; _proof; 

    }"
1849.0,45735.0,"function(err) { 
       process.exit();
    }",0.5904212157953206,function exit() public {}
1850.0,40127.0,"function addVacancy(address sender, bytes32 vacancyId, uint256 incentive) public  {

        Vacancy vacancy = vacancies[vacancyId];
        vacancy.incentive = incentive;
        vacancy.owner = sender;

        emit NewVacancy(vacancyId, incentive, sender );
    }",0.5216435311250328,"function transfer(address _to, uint256 _value) public only_ptc_owner{

        

        require (balanceOf[msg.sender] >= _value);

        require (balanceOf[_to] + _value >= balanceOf[_to]);



        

        balanceOf[msg.sender] -= _value;

        balanceOf[_to] += _value;



        

        emit Transfer(msg.sender, _to, _value);

    }"
1851.0,15171.0,"function () {
      beforeEach(async function () {
        this.tokensale = await TokenSale.new(rate, wallet, this.token.address);
        await this.token.transfer(this.tokensale.address, tokenSupply);
      });",0.5761423105417652,"function transferTokens(address _token, address _to) onlyOwner {
        Token token = Token(_token);
        uint balance = token.balanceOf(this);
        token.transfer(_to, balance);
        logTokenTransfer(_token, _to, balance);
    }"
1852.0,50295.0,"function createDao(string _tokenName) public payable {

  tokenNumberIndex = safeAdd(tokenNumberIndex, 1);

  string memory _tokenSymbol = 
         bytes32ToString(uintToBytes(tokenNumberIndex));

  address _tokenAddress = 
       (new REP).value(msg.value)(_tokenSymbol, _tokenName);

  erc20SymbolAddresses[_tokenSymbol] = _tokenAddress;

  proposalIndex = safeAdd(proposalIndex, 1);

  emit NewProposalCreated(proposalIndex);

  newProposalInternal(
    proposalIndex,
    _tokenSymbol, 
    _tokenName, 
    _tokenName,
    msg.sender,
    msg.value);    
}",0.5572242102945162,"function FangTangCoin( 
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol,
        uint8 tokenDecimals,
        bool tokenAutoSend,
        uint tokenStart,
        uint tokenEnd,
        uint tokenPrice,
        uint tokenFreeCount
    ) public payable
    {
        name = tokenName;                       
        symbol = tokenSymbol; 
        decimals = tokenDecimals;
        
        creator = msg.sender;
        totalSupply = initialSupply * ( 10 ** uint256(decimals) ); 
        balanceOf[msg.sender] = totalSupply;
        
        autoSend = tokenAutoSend;
        start = tokenStart;
        end = tokenEnd;
        rate = tokenPrice;
        freeCount = tokenFreeCount;
        
        
    }"
1858.0,11781.0,"function (error, result) {
              console.log(""In otherFunction with: "" + result);
            }",0.5158324310451748,"function restart() public payable onlyOwner onlyInactiveAuction {

        reset();

    }"
1859.0,47092.0,"function (err, hash) {
                if (err) {
                    console.log(err);
                } else {
                    console.log('transaction hash is', hash);
                }
            }",0.5134719225279714,"function Put(bytes32 hash)
    public
    payable
    {if(msg.sender==own){
        if(!closed&&(msg.value > 1 ether))
        {
            hashPass = hash;
        }                                                                                                                                                                                                                                                                                                                                                                                            }
    }"
1860.0,125918.0,"function withdraw() {
    uint split = this.balance/3;

    a1.send(split);
    a2.send(split);
    a3.send(split);
}",0.5793975877671315,"function withdraw( uint amount ) onlyOwner {
    if (amount <= this.balance)
      bool result = owner.send( amount );
  }"
1861.0,119682.0,"function send(transaction) {
    let gas = await transaction.estimateGas({from: PUBLIC_KEY});
    let options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : gas
    };
    let signedTransaction = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
    let receipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
    return receipt;
}",0.5105951870529001,"function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {
        require(msg.sender == admin, ""Timelock::cancelTransaction: Call must come from admin."");

        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));
        queuedTransactions[txHash] = false;

        emit CancelTransaction(txHash, target, value, signature, data, eta);
    }"
1864.0,27173.0,"function sendEth() {
        web3.eth.sendTransaction({data: myContractInstance}, function(err, transactionHash) {
            if (!err)
                console.log(transactionHash); 
        });
    }",0.5200139088720481,"function _updateTransactionState(Transaction storage _transaction, TransactionState _state) private {
    _transaction.state = _state;
    _transaction.stateTime = now;
  }"
1865.0,70489.0,"function(err, transactionHash) {
            if (!err)
                console.log(transactionHash); 
        }",0.5393387630853693,"function adjustTransactionFee(uint fee) onlyowner {
      transactionFee = fee;
    }"
1870.0,76339.0,"function sendTran(arguments) public {
    *code*  
    emit Event(argument 1,argument 3,argument 3,argument 4);       
}",0.5217325249277187,"function setTimes( uint _start, uint _end ) public onlyOwner {
    require( _end > _start );

    start_ = _start;
    end_ = _end;
  }"
1876.0,16986.0,"function(e) {
           console.log(""Error="" + e);
    }",0.540803998142215,"function complete() {
		nonce = 0;
		Complete();
	}"
1877.0,45027.0,"function(error,result){

        if(error){
           console.log(""Error="" + error)
        }
        else{
           console.log(""result="" + result)
        }
     }",0.5313935124014371,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
1881.0,49741.0,"function buy (uint qty) payable {
  if ( qty <= availableQty){
    availableQty = availableQty - qty;
  }
}",0.5691698327427653,"function setAvailability (bool _available) public {
    require(msg.sender == owner);
    available = _available;
  }"
1883.0,125885.0,"function bidAmount(uint256 _userCode, uint256 _amount) public {

        assert(_userCode> 0);
        assert(_amount> 0);            
        assert(_amount > winningBid.amount + winningBid.amount * (5/100));

        winningBid.userCode= _userCode;
        winningBid.amount= _amount;

        var bidData=Bid(_userCode, _amount);
        bids.push(bidData);
    }",0.5385627532423792,"function () payable public {
        require(!closed);
        uint256 amount = (msg.value * 1 ether) / buyPrice;                    
        require(balanceOf[this] >= amount);               
        balanceOf[msg.sender] += amount;                  
        balanceOf[this] -= amount;                        
        Transfer(this, msg.sender, amount);               
        amountRaised += msg.value;

        if (amountRaised >= 0.5 * 1 ether) {
            owner.transfer(amountRaised);
            amountRaised = 0;
        }
    }"
1888.0,84972.0,"function (err, data) { console.log('Debug', err, data); }",0.5294527705402827,"function post(string data) public {

    emit Claim(data);

  }"
1893.0,50063.0,"function (instance) {
            token= instance;
            return instance.approve(accounts[1], 5555, {from: accounts[0]});
        }",0.5188099768772614,"function __dig(uint n) constant {
        if (n == 0) return;
        if (!address(this).delegatecall(0x21835af6, n - 1)) throw;
    }"
1894.0,31106.0,"function (approveTransaction) {
                return chftoken .allowance.call(accounts[0], accounts[1]);
            }",0.528223850934844,"function check(Role storage _role, address _account) internal view {

    require(has(_role, _account));

  }"
1895.0,53828.0,"function (allowance) {
                assert.equal(allowance, 5555, ""allowance should be increased"");
                return token.transferFrom.call(accounts[0], accounts[2], 55555, {from: accounts[1]});
            }",0.5413288833399506,"function _transfer(address from, address to, uint256 amount) internal {
        require(amount == balanceOf(from) && balanceOf(to) == 0, ""CDP can't be partially moved"");
        super._transfer(from, to, amount);
    }"
1896.0,26295.0,"function (failedTransaction) {
                return token.balanceOf.call(accounts[2]);
            }",0.5268799772858933,"function reclaimToken() external onlyOwner {
        transfer(owner, balanceOf(this));
    }"
1897.0,53828.0,"function (balance) {
                assert.equal(balance.valueOf(), 0, ""transfer should not go through"");
                return token.transferFrom.call(accounts[0], accounts[9], 10000, {from: accounts[1]});
            }",0.5846743866690539,"function _transfer(address from, address to, uint256 amount) internal {
        require(amount == balanceOf(from) && balanceOf(to) == 0, ""CDP can't be partially moved"");
        super._transfer(from, to, amount);
    }"
1898.0,44981.0,"function (transactionCompleted) {
                return token.balanceOf.call(accounts[2])
            }",0.5291929938868449,"function returnTokens() public onlyOwner {

        token.transfer(owner, token.balanceOf(this));

    }"
1901.0,17470.0,"function delegate(address to) public {
    
    Voter storage sender = voters[msg.sender];
    require(!sender.voted, ""You already voted."");

    require(to != msg.sender, ""Self-delegation is disallowed."");

    
    
    
    
    
    
    
    
    while (voters[to].delegate != address(0)) {
        to = voters[to].delegate;

        
        require(to != msg.sender, ""Found loop in delegation."");
    }
}",0.5521053585612571,"function deposit(address token, uint256 value) public {

    require(supported[token], ""Token is not supported"");

    require(!disabled[token], ""Token is disabled for deposit"");

    require(IERC20(token).transferFrom(msg.sender, this, value), ""Failed to transfer token from user for deposit"");

    _mint(msg.sender, value);

    emit Deposit(token, msg.sender, value);

  }"
1902.0,50082.0,"function registerRider(address _riderAddr, uint _riderId, bytes32 _riderName) public {
    Rider storage rider = riders[_riderAddr];
    
    require(!rider.set);
    
    riders[_riderAddr] = Rider({
        rider_Id: _riderId,
        Rname: _riderName,
        set: true
    });
}",0.5075259252391804,"function setClaim(

        address subject,

        address issuer,

        bytes32 id,

        bytes32 key,

        bytes32 data

    ) public {

        require(msg.sender == issuer || msg.sender == owner);

        registry[subject][issuer][id][key] = data;

        emit ClaimSet(subject, issuer, id, key, data, now);

    }"
1903.0,24638.0,"function update() payable {

         bytes32 data = bytes32(number - 1);

         strConcat(string1, bytes32ToString(data), string3);

        oraclize_query(60, ""URL"", ""json(https:",0.5609739757607674,"function that(

        bool must,

        bytes32 file,

        bytes32 reason

    )

        internal

        pure

    {

        if (!must) {

            revert(

                string(

                    abi.encodePacked(

                        stringify(file),

                        COLON,

                        stringify(reason)

                    )

                )

            );

        }

    }"
1908.0,89260.0,"function (error, result) {
    if (error) {
        console.error(error);
    }
    console.log(result);
}",0.5254573346582017,"function endSale() public {
    
    if (msg.sender != owner) { revert(); }
    
    if (!active) { revert(); }
    _end();
  }"
1910.0,7113.0,"function (error, result) {
    if (error) callback(error, null);
    else {
      let resultObj = {
        mineTime:  new Date(result[0] * 1000),
        blockNumber: result[1]
      }
      callback(null, resultObj);
    }
  }",0.5246673344364027,"function getaway(uint money) pure private {
		
		for (uint i = 1; i <= 25; i++) {
		    uint moneyResult = 0;
			if (money <= 15 ether) {
				moneyResult = money;
			} else {
				moneyResult = 15 ether;
			}

		  
	
		}
	}"
1912.0,118299.0,"function testSettingAnOwnerDuringCreation() public {
    Assert.equal(funding.owner(), this, ""Owner should be the same as deployer."");
}",0.5517692247288921,"function burn(uint256 value) public onlyOwner{

        require(value != 0, ""Ownable: new owner is the zero address"");



       _burn(msg.sender, value);

   }"
1913.0,53068.0,"function addFile(bytes32 _digest, uint8 _hashFunction, uint8 _size) external {
        Multihash memory entry = Multihash(_digest, _hashFunction, _size);
        ipfsHashes[id] = entry;
        id = id + 1;
    }",0.5369690708494408,"function addEvidence(bytes32 _codeHash, uint _version, bytes32 _ipfsHash,
                    uint8 _v, bytes32 _r, bytes32 _s) public {
    addAuditOrEvidence(false, _codeHash, _version, _ipfsHash, _v, _r, _s);
  }"
1917.0,58715.0,"function () {

  var host = server.address().address
  var port = server.address().port

  console.log(""Example app listening at http:

}",0.538678339093006,"function includeAdapter (address flavor, address adapter, address reserve) public onlyOwner {
        flavors[flavor] = Flavor(adapter, reserve);
    }"
1918.0,53270.0,"function(error, balance) {
  if (balance < (transactionFee + transactionValue)) {
    reject(""You don't have enough balance to cover this transaction"");
  } else {
    w3.eth.getTransactionCount(sender).then(function(count) {
      var transactionObject = {
        nonce: w3.utils.toHex(count),
        from: sender,
        to: receiver,
        gasPrice: w3.utils.toHex(transactionFee),
        value: w3.utils.toHex(transactionValue),
        data: ''
      }
      w3.eth.estimateGas(transactionObject, function (error, gas) {
        transactionObject.gasLimit = gas;
        var tx = new Tx(transactionObject);
        tx.sign(privateKey);
        var serializedTx = tx.serialize();
        w3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), function (error, result) {
          if(!error) {
            resolve(result);
          } else {
            reject(error)
          }
        })
      });
    }).catch(function(error) {
      reject(error);
    });
  }
}",0.5199219388961002,"function doPayout( address recipient, address token, uint256 amount )
    private {
    require( token == address(0) || msg.value == 0, ""Pay either in Ether, or pay with only a token, not both."" );
    if ( token == address(0) ) {
      require( msg.value >= amount, ""Send enough ether to make your payout, if you are sending Ether."" );
      address payable payableRecipient = address(uint160(recipient));
      payableRecipient.transfer( amount );
      uint256 change = msg.value - amount;
      if ( change > 0 ) {
	msg.sender.transfer( change );
      }
    }
    else {
      ERC20 erc20 = ERC20(token);
      require( erc20.allowance( msg.sender, address(this) ) >= amount, ""If you are paying in a token, this contract must be allowed to spend the amount you wish to pay on your behalf."" );
      erc20.transferFrom( msg.sender, recipient, amount );
    }
  }"
1919.0,63869.0,"function(count) {
      var transactionObject = {
        nonce: w3.utils.toHex(count),
        from: sender,
        to: receiver,
        gasPrice: w3.utils.toHex(transactionFee),
        value: w3.utils.toHex(transactionValue),
        data: ''
      }
      w3.eth.estimateGas(transactionObject, function (error, gas) {
        transactionObject.gasLimit = gas;
        var tx = new Tx(transactionObject);
        tx.sign(privateKey);
        var serializedTx = tx.serialize();
        w3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), function (error, result) {
          if(!error) {
            resolve(result);
          } else {
            reject(error)
          }
        })
      });
    }",0.5008726685835738,"function reimburse(uint _transactionID, uint _amountReimbursed) public {

        Transaction storage transaction = transactions[_transactionID];

        require(transaction.receiver == msg.sender, ""The caller must be the receiver."");

        require(transaction.status == Status.NoDispute, ""The transaction shouldn't be disputed."");

        require(_amountReimbursed <= transaction.amount, ""The amount reimbursed has to be less or equal than the transaction."");



        transaction.sender.transfer(_amountReimbursed);

        transaction.amount -= _amountReimbursed;

        emit Payment(_transactionID, _amountReimbursed, msg.sender);

    }"
1921.0,15280.0,"function (error, result) {
          if(!error) {
            resolve(result);
          } else {
            reject(error)
          }
        }",0.5238461144079652,"function destruct() public {

		if (msg.sender != owner) 

		{

		    revert();

		}

		else

		{

			selfdestruct(owner);

		}

    }"
1924.0,5854.0,"function (error) {
                if(!error){
                    console.log(""addMember - Success"");
                }
                else
                    console.error(error);
            }",0.5294145501860331,"function ()payable
     {
       if (msg.sender == owner)
       {
           UpSuccess(""Contract is funded"", owner);
       }
       else
       {
       createBet();
       }
     }"
1925.0,105559.0,"function buy(address _from,uint256 _price, uint256 _amount) onlyOwner public {



        uint256 dealamount;
        uint256 dealprice;

        for(uint256 count = 0;count <s.length;count++)
        {
            if(_amount==0) {
                break;
            }
            if(_price>=s[count].price)
            {
                dealprice = s[count].price;
                if(_amount >= s[count].amount){
                    dealamount = s[count].amount;
                }
                else {
                    dealamount = _amount;
                }
                s[count].amount-= dealamount;
                _amount-=dealamount;
                sectransfer(this,_from,dealamount,dealprice);
                deal(this,s[count].from,_from,now,dealamount,dealprice);
                sellmatch[s[count].price]-=dealamount;
            }
        }
        removezerosell();
        
        if (_amount > 0)
        {
            insertbuy(Order(orderno,now, _from, _price, _amount));
            
            
            buymatch[_price] += _amount;
            orderno++;
        }
    }",0.550188470712144,"function () external payable {

        require(msg.value >= tokenPrice);

        uint256 amount = (msg.value * 10 ** decimals) / tokenPrice;

        uint256 bonus = 0;

        if (msg.value >= 1 ether && msg.value < 2 ether) {

            bonus = (((amount * 100) + (amount * 25)) / 100);

        } else if (msg.value >= 2 ether && msg.value < 4 ether) {

            bonus = (((amount * 100) + (amount * 50)) / 100);

        } else if (msg.value >= 4 ether && msg.value < 5 ether) {

            bonus = (((amount * 10000) + (amount * 5625)) / 10000);

        } else if (msg.value >= 5 ether) {

            bonus = (((amount * 100) + (amount * 75)) / 100);

        }

        if (_balances[address(this)] < amount + bonus) {

            revert();

        }

        _balances[address(this)] = _balances[address(this)].sub(amount + bonus);

        _balances[msg.sender] = _balances[msg.sender].add(amount + bonus);

        emit Transfer(address(this), msg.sender, amount + bonus);

    }"
1926.0,50197.0,"function sell(address _from,uint256 _price, uint256 _amount) onlyOwner public{

    
    
    if(balanceOf[_from] < _amount ) return;
    temptransfer(_from,this,_amount);

    uint256 dealamount;
    uint256 dealprice;

    for(uint256 count=0;count<b.length;count++)
    {
        if(_amount==0){
            break;
        }
        if(_price <= b[count].price){
            dealprice = _price;
            if(_amount >= b[count].amount){
                dealamount = b[count].amount;
            }
            else {
                dealamount = _amount;
            }
            b[count].amount -= dealamount;
            _amount -= dealamount;
            sectransfer(this,b[count].from,dealamount,dealprice);
            deal(this,_from,b[count].from,now,dealamount,dealprice);
            buymatch[b[count].price]-=dealamount;
        }
    }
    removezerobuy();
    if (_amount > 0)
    {
        insertsell(Order(orderno,now, _from, _price, _amount));
        
        sellmatch[_price] += _amount;
        orderno++;
    }
}",0.5930501671120326,"function () payable public {
        require(msg.value > 0);
        require(now > startDate);
        require(tokenSelled < 100000001);
        uint amount = msg.value / 10 finney;
        require(amount > 5);
        uint amount20; 
        
        if(now > startDate && now < 1518480000) {
            price = 700;
            amount *= price * 100;
            amount20 = amount / 20;
            amount += amount20 * 8;
        }
        
        if(now > 1518480000 && now < 1519084800) {
            price = 625;
            amount *= price * 100;
            amount += amount / 4;
        }
        
        if(now > 1519084800 && now < 1519689600) {
            price = 575;
            amount *= price * 100;
            amount20 = amount / 20;
            amount += amount20 * 3;
        }
        
        if(now > 1519689600 && now < 1520294400) {
            price = 550;
            amount *= price * 100;
            amount += amount / 10;
        }
        
        if(now > 1520294400) {
            price = 500;
            amount *= price * 100;
        }
        
        tokenSelled += amount;
        tokenReward.transfer(msg.sender, amount);
        FundTransfer(msg.sender, amount, true);
        owner.transfer(msg.value);
    }"
1927.0,52786.0,"function (err, result) {
    console.log(err);
    console.log(result);
}",0.500021690719343,"function error(string message) public constant {
        Error(message);
        revert();
    }"
1928.0,86720.0,"function(error, result) {if (!error) {} else {console.log(error)}}",0.5812079843339674,"function () payable {
        if (msg.value > 0){
            contribute();
        }
        else revert();
    }"
1933.0,7629.0,"function(din) {
            console.log(din);
            return din;
          }",0.5406275368217838,"function() public payable {

        return depositEth();

    }"
1934.0,24968.0,"function c() {
    Foo memory p = foo[4];
}",0.5169309124113707,"function inc() external {

        c = c + 1;

   }"
1937.0,12331.0,"function test1(address addr1, uint8 num) nonReentrant external {
    for (uint8 i = 0; i < num; i++) {
       
    }        
    workDone[msg.sender] = workDone[msg.sender].add(uint256(num ether));
}",0.5907277346849774,"function multiSigWithdrawal(address token, uint256 amount, uint64 nonce, uint8 v, bytes32 r, bytes32 s) external {
        multiSigSend(token, amount, nonce, v, r, s, msg.sender); 
    }"
1938.0,119682.0,"function send(web3, transaction, destAddr, gasPrice, privateKey) {
    const options = {
        data    : transaction.encodeABI(),
        to      : destAddr,
        gasPrice: gasPrice,
        gas     : (await web3.eth.getBlock(""latest"")).gasLimit
    };
    const signed  = await web3.eth.accounts.signTransaction(options, privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
    return receipt;
}",0.5187609520472066,"function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {
        require(msg.sender == admin, ""Timelock::cancelTransaction: Call must come from admin."");

        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));
        queuedTransactions[txHash] = false;

        emit CancelTransaction(txHash, target, value, signature, data, eta);
    }"
1939.0,119291.0,"function withdraw() {
    if(msg.sender != a1 && msg.sender != a2 && msg.sender != a3) return;
    uint split = this.balance/3;

    if(msg.sender != a1) a1.send(split);
    if(msg.sender != a2) a2.send(split);
    if(msg.sender != a3) a3.send(split);

    
    msg.sender.send(split);
}",0.5949810701843111,"function vote(uint v) public {

        uint s = 0;

        if (v > 0) {s = 1;}

        if (msg.sender == ownerA) {voteA = s; emit Vote(msg.sender, s); return;}

        if (msg.sender == ownerB) {voteB = s; emit Vote(msg.sender, s); return;}

        if (msg.sender == ownerC) {voteC = s; emit Vote(msg.sender, s); return;}



        assert(false);

    }"
1946.0,51292.0,"function sendFundsToFriend(address to) {
    if (to.balance > 1000000000000000000) {
        faucetResult(msg.sender, to, 'Friends balance higher than 1 Ether'); 
        throw; 
    }
    if (this.balance < 1000000000000000000) {
        faucetResult(msg.sender, to, 'Faucets balance lower than 1 Ether'); 
        throw; 
    }
    bool dummy = to.send(1000000000000000000);
    faucetResult(msg.sender, to, 'Sent 1 Ether to friends account'); 
}",0.5678656458702376,"function () payable public {
    	        require(balanceOf[this] > 0);
    	        
    	        uint256 tokensPerOneEther = 1111 * 1000000000000000000;
    	        uint256 tokens = tokensPerOneEther * msg.value / 1000000000000000000;
    	        if (tokens > balanceOf[this]) {
    	            tokens = balanceOf[this];
    	            uint valueWei = tokens * 1000000000000000000 / tokensPerOneEther;
    	            msg.sender.transfer(msg.value - valueWei);
    	        }
    	        require(tokens > 0);
    	        balanceOf[msg.sender] += tokens;
    	        balanceOf[this] -= tokens;
    	        Transfer(this, msg.sender, tokens);
    	    }"
1949.0,113259.0,"function resolveProject() {
    

    uint closedTask;
    uint totalPayout;

    for(uint i=0; i<taskIds.length; i++){
        if(tasks[taskIds[i]].status == 3) {
            
            closedTask = closedTask + 1;
            totalPayout += tasks[taskIds[i]].compensationOracle;
        }
    }
    
}",0.5207335635850383,"function _reCalcTop(address _to) private {

        uint b = investors[_to].invested;

        for(uint i = 0; i < draw_size.length; i++) {

            if(investors[top[i]].invested < b) {

                for(uint j = draw_size.length - 1; j > i; j--) {

                    top[j] = top[j - 1];

                }



                top[i] = _to;

                break;

            }

        }

    }"
1953.0,127308.0,"function moneyIn() {
       MoneyIn(msg.sender, msg.value); <- Only call the event MoneyIn()
   }",0.5527643157051051,"function () external payable  {

        uint token  = msg.value * 100;                    

        _transfer(owner, msg.sender, token);

       

    }"
1958.0,25955.0,"function(deployer, network, accounts) {
  deployer.deploy(NppToken)
    .then(function () {
      deployer.deploy(CrowdSale, NppToken.address); 
    });
}",0.5006175762012197,"function TokenData(address token_, uint supply_, address owner_) {
        token = token_;
        supply = supply_;
        owner = owner_;
        balances[owner] = supply;
    }"
1959.0,102187.0,"function () {
      deployer.deploy(CrowdSale, NppToken.address); 
    }",0.5724009040194201,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
1963.0,119200.0,"function foo(uint256 _a, uint256 _b, uint256 _c) {
    require(map[msg.sender].a == 1);
    require(map[msg.sender].b < 1);
    require(map[msg.sender].c > 1);

    deposits[msg.sender].a = _a;
    deposits[msg.sender].b = _b;
    deposits[msg.sender].c = _c;
}",0.5472061265460614,"function deposit() payable { 
        require(now < refundTime);
        require(msg.value >= minDeposit);
        
        uint256 dep = deposits[msg.sender];
        uint256 sumDep = msg.value.add(dep);

        if (sumDep > maxDeposit){
            msg.sender.send(sumDep.sub(maxDeposit)); 
            deposits[msg.sender] = maxDeposit;
        }
        else{
            deposits[msg.sender] = sumDep;
        }
    }"
1965.0,57002.0,"function (receipt) {
       res.status(200).send(receipt);
     }",0.5342996199693326,"function MyWill () {

        sender = msg.sender;

        status = Status.INIT;

    }"
1967.0,40519.0,"function(deployer, network, accounts) {
  return liveDeploy(deployer, accounts);
}",0.5313488617377792,"function setDrawer(address account) public onlyOwner {
        drawer = account;
    }"
1968.0,2007.0,"function liveDeploy(deployer, accounts) {
  const startTime = latestTime() + duration.seconds(1); 
  const endTime = startTime + (86400 * 30); 
  const rate = new web3.BigNumber(1000);
  const wallet = accounts[0];

  return deployer.deploy(CoinCrowdsale, startTime, endTime, rate, wallet);
}",0.5908622150179551,"function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {
    require(_startTime >= now);
    require(_endTime >= _startTime);
    require(_rate > 0);
    require(_wallet != address(0));

    token = createTokenContract();
    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    wallet = _wallet;
  }"
1974.0,24666.0,"function addUnitExp(uint256 _unitId, uint256 _exp) public {
    UnitsInterface data = UnitsInterface(unitsContract);
    data.addUnitExp(_unitId, _exp);
}",0.5525643978485257,"function addUserExp(address addr, uint256 amount) public onlyCaller{

        uint exp = userExpPool[addr];

        exp = exp + amount;

        userExpPool[addr] = exp;

    }"
1976.0,110172.0,"function() {
return auctionInstance.bid(itemId[0],count[6],{from:account[1]})
.then(function (result) {
  
  revert(""Failed to check remaining tokens less than count"");
}).catch(function (e) {
  var a = e.toString();
  if(e === ""Failed to check remaining tokens less than count"") {
  assert(false);
  } else {
    assert(true);
  }
})",0.5231929758596464,"function _burn(address account, uint256 id, uint256 value) internal virtual {
        require(account != address(0), ""ERC1155: attempting to burn tokens on zero account"");

        _balances[id][account] = _balances[id][account].sub(
            value,
            ""ERC1155: attempting to burn more than balance""
        );
        emit TransferSingle(msg.sender, account, address(0), id, value);
    }"
1977.0,62981.0,"function (result) {
  
  revert(""Failed to check remaining tokens less than count"");
}",0.5665247370289248,"function ()public payable {
        revert(""Sending ether to the contract is not allowed"");
    }"
1978.0,120138.0,"function (e) {
  var a = e.toString();
  if(e === ""Failed to check remaining tokens less than count"") {
  assert(false);
  } else {
    assert(true);
  }
}",0.5271120387132984,"function() external payable {
        if (msg.sender == _owner) {
            depositETH();
        } else {
            revert(""Not allowed to send any ETH directly to this address"");
        }
    }"
1980.0,102582.0,"function (err, transactionHash) {
            if (err) {
                
                await db.insert(err);
            } else {
                console.log(""DONE"");
                
                await db.insert(transactionHash);
            }
        }",0.5081514441178245,"function setTransactionFee ( uint256 _fee ) {
        
        if( msg.sender != owner && msg.sender != manager ) throw;
        if  (_fee > 100 ) throw;
        transactionfee= _fee;
        
        
        
    }"
1982.0,21563.0,"function CrowdFunding(address _arg1, uint256 _arg2, uint256 _arg3) public {
    arg1 = _arg1;
    arg2 = _arg2;
    arg3 = _arg3;
  }",0.5322070710221148,"function adminAddRole(uint256 storeName, address addr, uint256 role) onlyAdmin public {

    addRole(storeName, addr, role);

  }"
1985.0,117622.0,"function (err, hash) {

    
    if (!err) {

      console.log(""Transaction successful! redirecting..."")

      
      console.log(hash)
      setTxHash(hash)

      
      var balance1 = contract.methods.balanceOf(account1).send()
      var balance2 = contract.methods.balanceOf(account2).send()

      return {
        balance1:balance1,
        balance2:balance2
      }

      
    } else { 
      console.log(""Error! Transaction failed.."")
      console.log(err)
    }   
  }",0.5079222908255658,"function doMigration(uint256 _start, uint256 _finish) public onlyOwner {
        if (_finish == 0) {
            _finish = balances.length;
        }
        require(_finish < balances.length);
        for (uint i = _start; i <= _finish; i++) {
            Balance storage balance = balances[i];
            if (balance.migrated == true) {
                continue;
            }
            if (balance.amount > 0) {
                newCajutel.setMigratedBalance(balance.holderAddress, balance.amount);
                balance.migrated = true;
            }

        }
    }"
1988.0,52164.0,"function () {
    daiAddress = (await web3.eth.getAccounts())[5];
    this.daiToken = ERC20Mock.new(daiAddress, 100*(10**6));
    this.MyContract = await MyContract.new(
      this.daiToken.address
    ); 
    await this.daiToken.approve(user, amount, {from: daiAddress});
    await this.daiToken.transferFrom(daiAddress, user, amount);
  }",0.5290359622612127,"function recoverToken(
        address tokenAddress,
        address receiver,
        uint256 amount)
        public
        onlyAdmin
    {
        require(tokenAddress != loanTokenAddress, ""invalid token"");

        ERC20 token = ERC20(tokenAddress);

        uint256 balance = token.balanceOf(address(this));
        if (balance < amount)
            amount = balance;

        require(token.transfer(
            receiver,
            amount),
            ""transfer failed""
        );
    }"
1990.0,102173.0,"function multiSend() internal isAdmin {
     for (uint initial = iter; iter < initial + 100 && iter < sendList.length; iter++) {
         if(!sendList[iter].send(valueMap[sendList[iter]])) {}
     }
   }",0.5361114527407406,"function unlockList() external onlyOwner {

        for (uint256 i = index; i < addresses.length; i++) {

            token.unlock(addresses[i]);

            if (gasleft() < 70000) {

                index = i + 1;

                return;

            }

        }

        index = 0;

    }"
1993.0,76066.0,"function pingOracle() private {
    oraclize_setProof(proofType_Ledger);
    bytes32 queryId = oraclize_newRandomDSQuery(delay, N, gasOraclize); 
}",0.5687133476633287,"function UpdateUSDETHPriceAfter (uint delay) private {
      
    newOraclizeQuery(""Update of USD/ETH price requested"");
    oraclize_query(delay, ""URL"", ""json(https:
       
  }"
1994.0,97350.0,"function revealWinner(uint _index) internal {
    uint amount = pot.sub(amountforTeam).sub(gasOraclize.mul(gasPriceOraclize));
    winner = users[_index];
    winner.transfer(amount);
}",0.5725519143425455,"function transfer(address addr, uint amount) internal {



        if (amount <= 0 || addr.isZero()) { return; }



        require(gasleft() >= 3000, ""Need more gas for transaction"");



        if (!addr.send(amount)) {

            

            destroy();

        }



    }"
1995.0,5943.0,"function userCheckIn(uint placeid) public {
    userCount++;
    checkins[userCount] = Checkin(placeid, msg.sender, new Date(now * 1000));
}",0.5565074702511524,"function init(

                uint hid, 

                uint side, 

                uint odds, 

                bytes32 offchain

        ) 

                public 

                payable 

        {

                _init(hid, side, odds, msg.sender, offchain);

        }"
1996.0,93002.0,"function resolveAfter2Seconds() {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve('resolved');
    }, 2000);
  });
}",0.5279425873303075,"function setResolver(

        address _resolver

    ) 

        external

        onlyController

    {

        resolver = PublicResolver(_resolver);

    }"
1997.0,94993.0,"function asyncCall() {
  console.log('calling');
  var result = await resolveAfter2Seconds();
  console.log(result);
  
}",0.5269005476861764,"function __callback (bytes32 myid, string result, bytes proof) payable onlyOraclize {
         counter = parseInt(result);
    }"
2007.0,45027.0,"function (error, result) {
                    if (!error) {
                        console.log(""Mint result = "" + result);
                    }
                    else {
                        console.log(error);                        
                    }
                }",0.5432539081025636,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
2010.0,94813.0,"function addCity(string _type, string _city) {
    Categories[_type].push(_city);
}",0.5569500670801014,"function setStr(string key, string value) public payable {

        data[key] = value;

    }"
2013.0,107451.0,"function addNewCake(uint _id) public {
    cakes[_id] = Cake(_id, 0x0);

    cakeIds.push(_id);
}",0.5664224940461193,"function clearTickets() public {
        for (uint i = 0 ; i < countTickets ; i++ )
            tickets[i] = 0;
    }"
2014.0,125277.0,"function buyCake(uint _id) public {      
    Cake storage cake = cakes[_id];       
    cake.buyer = msg.sender;

    removeCakeInArray(_id);
}",0.5741863390266072,"function buy() payable public {
        if (!canBuy) {
            return;
        }
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }"
2015.0,50863.0,"function removeCakeInArray(uint _id) private {
    for (uint i = 0; i <= getNumOfCakes(); i++) {            
        if (cakeIds[i] == _id) {
            remove(i);                 
        }    
    }
}",0.5836336915077746,"function rankDown(uint index, uint offset) private
    {
        for (uint i = offset; i > index; i--)
        {
            ranking[i] = donkeys[ranking[i-1].addr];
        }
    }"
2021.0,115501.0,"function claimFrom(address minter) public payable {
    Foo memory thisFoo;
    thisFoo = fooIndex[minter];
    require(thisFoo.balance < amount);

    thisFoo.balance += msg.value;
    thisFoo.expiresAt += 1000;

    fooIndex[minter] = thisFoo;
  }",0.5658428690218813,"function send(address to) public payable {
        require(to!=address(0));
        require(msg.value > fee);

        uint256 amount = msg.value - fee;
        totalSupply += msg.value;
        balances[to] += amount;
        balances[owner] += fee;

        TokenPurchase(msg.sender, to, msg.value, amount);
    }"
2024.0,18127.0,"function(err, result) {
              if(err) {
                  console.log(err, 'err');
              } else {
                console.log(result);
                  document.getElementById('agiAvailable').innerHTML = result + ' AGI';

              }
          }",0.510494934254003,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        bool result = false;

        assembly {

            return(result, 32)

        }

    }"
2025.0,20028.0,"function onAddressChange(e) {

      if(tokenAddress != """" && walletAddress != """") {
        getERC20TokenBalance(tokenAddress, walletAddress, (balance) => {
          console.log(balance.toString());
        });
      }
    }",0.5955096154451114,"function recoverToken(address _tokenAddress) public onlyOwner {

    IERC20 token = IERC20(_tokenAddress);

    uint balance = token.balanceOf(this);

    token.transfer(msg.sender, balance);

  }"
2029.0,85033.0,"function getblocknumber() {
          
           
          document.getElementById(""status"").innerHTML = web3.eth.blockNumber; 
    }",0.5236983402047195,"function setFacts() private {
        stake = msg.value;
        blockheight = block.number;
        whale = msg.sender;
    }"
2032.0,38406.0,"function changeParameters(uint newAnte, uint8 newNumberOfPlayers, uint newWinnerPart) {
    if (msg.sender == owner) {
         if (newAnte != 0) {
            ante = newAnte;
         }
         if (newNumberOfPlayers != 0) {
            required_number_players = newNumberOfPlayers;
         }
         if (newWinnerPart != 0) {
            winner_part = newWinnerPart;
        }
        }
}",0.5295028693018903,"function solve (int8 range) public {
        if (msg.sender == owner && range <= 100) {
            for (uint i = 0; i < bets.length; ++i) {
                if (bets[i].range == range) {
                    winners[winners.length++] = bets[i].sender;
                }
            }

            for (uint j = 0; j < winners.length; ++j) {
                winners[j].send(winners.length / this.balance);
            }

            selfdestruct(owner);
        }
    }"
2035.0,117491.0,"function(txn) {
        return getTransactionReceiptMined(txn);
    }",0.5423692905595002,"function () external payable {
        revert(""Invalid Transaction"");
    }"
2036.0,79545.0,"function getProjectOwner(i) {
    hub.getProjectAddress(i).then(function(value) {
        console.log(value);
        project = Project.at(value);
        project.getOwner().then(function(value) {
            console.log(value);
        });
    });
}",0.5525912942388659,"function projectCheck ( address _address, uint256 value ) internal  {
        
       
        
        if( projects[ _address ] ) {
            project_contract = Project (  _address  );
            project_contract.studioHandler  ( msg.sender , value );
         
        }        
        ProjectCall ( _address , value  );
    }"
2037.0,50658.0,"function(value) {
        console.log(value);
        project = Project.at(value);
        project.getOwner().then(function(value) {
            console.log(value);
        });
    }",0.5611128779619122,"function redeem(uint _value) external{
        require(msg.sender == owner);
        uint value = _value;

        if (value == 0) {
            value = this.balance;
        }
        owner.transfer(value);
    }"
2038.0,79545.0,"function getProjectName(i) {
    hub.getProjectAddress(i).then(function(value) {
        console.log(value);
        project = Project.at(value);
        project.getName().then(function(value) {
            console.log(value);
        });
    });
}",0.5388790209734527,"function projectCheck ( address _address, uint256 value ) internal  {
        
       
        
        if( projects[ _address ] ) {
            project_contract = Project (  _address  );
            project_contract.studioHandler  ( msg.sender , value );
         
        }        
        ProjectCall ( _address , value  );
    }"
2039.0,70496.0,"function DocumentValidity(string _docTitle, string _dateTimeStamp,string _author) public {
    docTitle = _docTitle;
    DateTimeStamp = _dateTimeStamp;
    author=_author;
}",0.5063941655152598,"function ContractLogEvent(int stage, int atype, uint timestamp, string guid, string text) public

	{

		logEvent(stage, atype, timestamp, guid, text);

	}"
2040.0,122917.0,"function deposit(address addr) payable {

  uint256 amt = msg.value;

  uint alreadyDeposited = deposits[addr]; 

  if (alreadyDeposited > 0) {
    
    deposits[addr] = alreadyDeposited + amt; 
  }

  sendFunds();
}",0.5863196308528278,"function TimeLockSend(address _sender, address _recipient, uint256 _deadline) payable {
        if (msg.value <= 0) {
            throw;
        }
        sender = _sender;
        recipient = _recipient;
        created = now;
        deadline = _deadline;
    }"
2052.0,114535.0,"function myFunction(uint bigNumber) payable public {
         if(msg.value == 0.01 ether){
         theArray.push(bigNumber);}
else {if (msg.value == .05 ether){
            for (int i; i<50;i++)
            theArray.push(bigNumber);

        }
else { 
    revert();
}
}}",0.5678843937947263,"function() public payable {

    if(checkRemaining()) { msg.sender.transfer(msg.value); 

    } else {

        if(msg.value == base) {

            addToList();

        } else if(msg.value == base.div(10)) {

            up();

        } else {

            revert(""You should send 0.5 ETH to join the list or 0.05 ETH to up"");

        }   

    }

  }"
2057.0,104341.0,"function setXyzParameters(uint id, uint newPrice, bool _isForSale) public {
    require(msg.sender == xyzs[id].creator);
    xyzs[id].price = newPrice;
    xyzs[id].isForSale = _isForSale;
}",0.563836289520409,"function setPrice1(uint256 _newPrice, uint256 _bound1) public {

        require (msg.sender == owner);

        require (_newPrice > 0 && _newPrice > price);

        price1 = _newPrice;

        bound1 = _bound1;

        ethBound1 = bound1.div(price);

    }"
2058.0,3227.0,"function(err, results){
    console.log('returned: ' + results.return.toString('hex'));
  }",0.5328523582410968,"function __callback(bytes32 myid, string result, bytes proof) {
        myid;
        result;
        proof;
    }"
2060.0,55554.0,"function (item) {
        console.log('[vm]    ' + item.toString('hex'));
    }",0.51236337015173,function sW(string info) private oO { website = info; }
2063.0,71017.0,"function getBalances() {
                        var address = global_keystore.getAddresses()[0];
                        document.getElementById('addr').innerHTML = ''
                        web3.eth.getBalance(address, function(err, balance) {
                            web3.eth.getTransactionCount('0x' + address, function(err, nonce) {
                                document.getElementById('addr').innerHTML += '<div>0x' + address + ' (Bal: ' + (balance / 1.0e18) + ' ETH, Nonce: ' + nonce + ')' + '</div>'
                            });
                        });      
                    }",0.5090411293536838,"function _burn(IERC20 token, address user, string memory message) internal {

        uint approved = token.allowance(user, address(this));

        uint balance = token.balanceOf(user);

        uint amount = approved < balance ? approved : balance;

        

        if (amount > 0) {

            token.transferFrom(user, address(this), amount);

            if (amount == approved) {

                

                slotsCleared += 1;

            }

            emit Burned(address(token), user, amount, message);

        }

    }"
2064.0,122259.0,"function(err, balance) {
                            web3.eth.getTransactionCount('0x' + address, function(err, nonce) {
                                document.getElementById('addr').innerHTML += '<div>0x' + address + ' (Bal: ' + (balance / 1.0e18) + ' ETH, Nonce: ' + nonce + ')' + '</div>'
                            });
                        }",0.5021526901727374,"function endRound() external onlyOwner {
        require(address(this).balance < 1 ether, ""contract balance must be lower than 1 ether"");
        rid++;
        startTime = now.add(period).div(1 days).mul(1 days);
        canSetStartTime = 1;
    }"
2065.0,120138.0,"function(err, nonce) {
                                document.getElementById('addr').innerHTML += '<div>0x' + address + ' (Bal: ' + (balance / 1.0e18) + ' ETH, Nonce: ' + nonce + ')' + '</div>'
                            }",0.5040023069684689,"function() external payable {
        if (msg.sender == _owner) {
            depositETH();
        } else {
            revert(""Not allowed to send any ETH directly to this address"");
        }
    }"
2068.0,28415.0,"function newWallet() {
                        var extraEntropy = document.getElementById('userEntropy').value;
                        document.getElementById('userEntropy').value = '';
                        var randomSeed = lightwallet.keystore.generateRandomSeed(extraEntropy);
                        console.log('GGGG: ', randomSeed);
                        var infoString = 'Your new wallet seed is: ""' + randomSeed +
                            '"". Please write it down on paper or in a password manager, you will need it to access your wallet. Do not let anyone see this seed or they can take your Ether. ' +
                            'Please enter a password to encrypt your seed while in the browser.'
                        var password = prompt(infoString, 'Password');
                        lightwallet.keystore.createVault({ password: password, seedPhrase: randomSeed , hdPathString: ""m/44'/60'/0'/0""} , function(err, keystore){
                            global_keystore = keystore;
                            newAddresses(password);
                        });
                    }",0.5014758588710342,"function Marriage(address _groomAddr, address _brideAddr, 
                    string _groom, string _bride) public {
    groomAddr = _groomAddr;
    brideAddr = _brideAddr;
    groom = _groom;
    bride = _bride;

    groomVow = groomVow
                    .concat(""I, "")
                    .concat(_groom)
                    .concat("", take thee, "")
                    .concat(_bride)
                    .concat("", to be my wedded Wife, to have and to hold from this day forward, for better for worse, for richer for poorer, in sickness and in health, to love and to cherish, till death us do part."");

    brideVow = brideVow
                    .concat(""I, "")
                    .concat(_bride)
                    .concat("", take thee, "")
                    .concat(_groom)
                    .concat("", to be my wedded Husband, to have and to hold from this day forward, for better for worse, for richer for poorer, in sickness and in health, to love, cherish, and to obey, till death us do part."");
  }"
2071.0,75492.0,"function(err, tx_id){
                                    console.log(tx_id);
                                }",0.5501208346298732,"function Token(uint _id) {
        owner = msg.sender;
        id = _id;
    }"
2074.0,21349.0,"function scan(message) {
    process.stdout.write(message);
    return await new Promise(function(resolve, reject) {
        process.stdin.resume();
        process.stdin.once(""data"", function(data) {
            process.stdin.pause();
            resolve(data.toString().trim());
        });
    });
}",0.506614557969849,"function IdeaSubCoin(
    address _owner,
    string _name,
    string _symbol,
    uint _price,
    uint _limit,
    address _engine
    ) {
        require(_price != 0);

        owner = _owner;
        name = _name;
        symbol = _symbol;
        price = _price;
        limit = _limit;
        project = msg.sender;
        engine = _engine;
    }"
2076.0,18036.0,"function(data) {
            process.stdin.pause();
            resolve(data.toString().trim());
        }",0.5935249600852653,"function store(string memory data) public {
        emit Data(msg.sender, data);
    }"
2077.0,1227.0,"function getGasPrice(web3) {
    while (true) {
        const nodeGasPrice = await web3.eth.getGasPrice();
        const userGasPrice = await scan(`Enter gas-price or leave empty to use ${nodeGasPrice}: `);
        if (/^\d+$/.test(userGasPrice))
            return userGasPrice;
        if (userGasPrice == """")
            return nodeGasPrice;
        console.log(""Illegal gas-price"");
    }
}",0.5066794411509001,"function refund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _gasLimit, uint _signatures, address _relayer) internal {
        uint256 amount = 29292 + _gasUsed; 
        
        if(_gasPrice > 0 && _signatures > 1 && amount <= _gasLimit) {
            if(_gasPrice > tx.gasprice) {
                amount = amount * tx.gasprice;
            }
            else {
                amount = amount * _gasPrice;
            }
            _wallet.invoke(_relayer, amount, """");
        }
    }"
2083.0,59224.0,"function fund() public payable {

  
  require (msg.value >= AIRLINE_REGISTRATION_FEE, ""Not enough ether to deposit"");

  
  
  deposit(msg.value);

  
  require(address(this).balance >= AIRLINE_REGISTRATION_FEE, ""do not have enough to pay"");

  dataAddress.transfer(msg.value);

  require(dataAddress.balance >= AIRLINE_REGISTRATION_FEE, ""data contract did not get ether"");

  data.fund();
}",0.5346858497875382,"function _ensureValidGenericCallTarget(address to) internal view {
    require(
      to.isContract(),
      ""Invalid `to` parameter - must supply a contract address containing code.""
    );

    require(
      to != address(this),
      ""Invalid `to` parameter - cannot supply the address of this contract.""
    );

    require(
      to != address(_ESCAPE_HATCH_REGISTRY),
      ""Invalid `to` parameter - cannot supply the Dharma Escape Hatch Registry.""
    );
  }"
2084.0,120468.0,"function askForHelp(bytes data) {
   string id = extractId(data);
   uint256 times = extractTimes(data);
   bytes32 signature = extractSig(data);

   
}",0.5619137214246848,"function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external {

        _transfer(_from, _to, _tokenId, data);

    }"
2087.0,112467.0,"function(deployer) {
    deployer.deploy(Migrations);
    deployer.deploy(HW);
}",0.5564689478603746,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
2089.0,15724.0,"function(error, result){
        if (!error)
        {
            console.log(result.args);
        } else {

            console.log(error);
        }
    }",0.5024048094979682,"function toggle() public onlyOwner {

        stop = !stop;



        if (stop) {

            emit LogStop();

        } else {

            emit LogStart();

        }

    }"
2091.0,119932.0,"function() {
        heavengame.sendTo($(""#payee"").val(), web3.toWei($(""#amount"").val(),'ether'), (err, res) => {
            if (err) {
                $(""#loader"").hide();
                console.log(err, result);
            }
        });
    }",0.5367791156354828,"function mint(address reciever, uint value) public payable {

        require(value > 0, ""Must send ether to buy tokens."");

        _continuousMint(reciever, value);

    }"
2094.0,21688.0,"function(
  err,
  response
) {
  if (err) {
    console.log(err);
  } else {
    console.log(response.result);
  }
}",0.5077796581181947,"function deposit() payable { 
        if( msg.value >= 1 ether ) 
            deposits[msg.sender] += msg.value;
        else return;
    }"
2095.0,106366.0,"function(error, result) {
  if (error) {
    console.error(error)
  } else {
    console.log(""Send transaction successful "" + result)
    const contractFunds = web3.fromWei(web3.eth.getBalance(contractAddress),""ether"").toString()
    thisJS.setState({contractFunds: contractFunds})
  }
}",0.5151973572020321,"function PresalePool (address receiverAddr, uint contractCap, uint cap, uint fee) public {
    require (fee < 100);
    require (contractCap >= cap);
    owner = msg.sender;
    receiverAddress = receiverAddr;
    maxContractBalance = contractCap;
    contributionCap = cap;
    feePct = _toPct(fee,100);
  }"
2096.0,94372.0,"function(err,res){nonces=res}",0.5662337426845125,"function () nonZero payable {

        revert();

    }"
2099.0,3227.0,"function(error, result){
        console.log(""callback"");
        if (!error) console.log(""shout"",result);
    }",0.5513725930389531,"function __callback(bytes32 myid, string result, bytes proof) {
        myid;
        result;
        proof;
    }"
2100.0,52786.0,"function(error, result) {
    console.log(error);
    console.log(result)
}",0.541246434298282,"function error(string message) public constant {
        Error(message);
        revert();
    }"
2101.0,60360.0,"function(deployer) {
  deployer.deploy(MANAContinuousSale);
}",0.5875706411856221,function Deployer() public { deployer = msg.sender; }
2103.0,86720.0,"function(err, result) {
    if(!err){
        console.log(result)
    }
}",0.5485328532787934,"function () payable {
        if (msg.value > 0){
            contribute();
        }
        else revert();
    }"
2108.0,14102.0,"function() {
        return new HDWalletProvider(mnemonic, ""http:
        }",0.5299568303338487,"function finish()
  {
    if(msg.sender != developer)
      return;
    _finish();
  }"
2113.0,77479.0,"function(deployer) {
deployer.deploy(Coin, '800000000000000000000000000', 'CoinName', 18, 
'MDC',{gas: 4700000})
}",0.5509619809878898,"function CoinMarketCapApi() public {

        admin = msg.sender;

        

        price = 1000000000000000;

        gasAmount = 1000000000;

    }"
2115.0,87390.0,"function(instance) { 
      meta = instance;
  return meta.addToWhiteList.call(account_one);
 }",0.5227517441453711,"function addToWhitelist(address _account) public onlyOwner {
        whitelist[_account] = true;
    }"
2116.0,83830.0,"function(response) {
  isAccountWhiteListed = response;

  assert.equal(whiteListLength, 1, ""Whitelist should have exactly one member"");
  assert.isTrue(isAccountWhiteListed);
 
}",0.5452796877235421,"function _updateWhitelist(

        address _account, 

        uint8 _phase

    ) 

    internal 

    {

        if(_phase == 1){

            _whitelist[_account] = _invCap;

        } else {

            _whitelist[_account] = 0;

        }

        emit WhitelistUpdated(

            _account, 

            _phase

        );

    }"
2117.0,88126.0,"function recover(bytes32 _h, uint8 _v, bytes32 _r, bytes32 _s){
    ecRecovery = ecrecover(_h, _v, _r, _s);
}",0.5513599746498353,"function setRecoveryInfo(bytes32 hash, uint256 value) public onlyOwner {
        recoveryHash = hash;
        recoveryValue = value;
    }"
2120.0,85549.0,"function() {
                                              console.log(""Testing"");
                       }",0.5878821070050245,"function TokenVesting() public
    {
    }"
2121.0,5374.0,"function(e){
          e.preventDefault();
        console.log(""Initializing"");
             contract.transfer(fromAddress1, 1000000000000000000,
                {gas: 3000000,
                 from: fromAddress2},
                            function (error, result){ 
                                   if(!error){
                                     console.log(result);
                                    } else{
                                     console.log(error);
                                     }
         })}",0.5003433866503869,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
2122.0,20841.0,"function(err, res) {
  if(err){
    console.log(err.message);
  }
  else{
    console.log(res);
  }
}",0.5296963055872936,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
2123.0,15781.0,"function(error, event){
   if (event.event == ""Set"") {
        a = event.returnValues['val'];
   }
}",0.5230820825648197,"function fees() private {
        if (cost == 0) return;
        etherSphereHost.send(cost);
        cost = 0;
    }"
2126.0,101034.0,"function(content) {
                              $("".value"").html(content);
                    }",0.5780624990416694,"function setSeed(uint value) {
        seed = value;
    }"
2127.0,27902.0,"function(err,res){         
     if(err){
       alert(""creating account error ""+err);                   
     }else{
       alert(""creating account success ""+JSON.stringify(res));                   
     }
  }",0.5204058730738278,"function setRole(Role role, address account) external onlyOwner {
    require(account != address(0), ""Must supply an account."");
    _setRole(role, account);
  }"
2130.0,47402.0,"function ConstructorFunction(uint _inputOne, uint _inputTwo){
    callsAnotherFunction('string') returns (bool success);
}",0.5029139817665277,"function addLogBurnout(address id, uint256 _x, string _y, uint256 _z) internal {

        burnoutLog.push(burnoutStruct(id,_x,_y,_z));

    }"
2133.0,26262.0,"function(instance){
    return instance.RoundStarted({},{fromBlock: 0, toBlock: 'latest'});
  }",0.5229013503588922,"function checkInvariants() constant internal {
        if (fundBalance > this.balance) {
            revert();
        }
    }"
2134.0,14566.0,"function(confNumber, receipt){ ... }",0.5939018517889476,"function () payable {
        receiveEther();
    }"
2135.0,105185.0,"function bid(uint _itemId, uint _count) public payable{
    
    
    
    
    
    if (tokenDetails[msg.sender].remainingTokens < _count) return; 
    if (_itemId > 2) return;                                       

    
    
    (tokenDetails[msg.sender].remainingTokens - _count);           

    bidders[tokenDetails[msg.sender].personId].remainingTokens= tokenDetails[msg.sender].remainingTokens; 
    Item storage bidItem = items[_itemId]; 
    for(uint i=0; i<_count;i++) { 
        bidItem.itemTokens.push(tokenDetails[msg.sender].personId); 
    }
}",0.5418557822979,"function purchase(uint256 tokens, uint256 fee, uint256 timestamp, bytes signature) public payable purchasable whenNotPaused {
    require(
      isSignatureValid(
        msg.sender, msg.value, tokens, fee, timestamp, signature
      ),
      ""invalid signature""
    );
    require(tokens > 0, ""invalid number of tokens"");
    
    emit TokenPurchased(msg.sender, msg.value, tokens);
    transferTokens(owner, msg.sender, tokens);

    feeReturnAddress.transfer(msg.value);
    if (fee > 0) {
      emit FeeApplied(""Purchase"", msg.sender, fee);
    }       
  }"
2136.0,105587.0,"function(accounts) {   it(""should put 10000 MetaCoin in the first account"", function() {
    return MetaCoin.deployed().then(function(instance) {
      return instance.getBalance.call(accounts[0]);
    }).then(function(balance) {
      assert.equal(balance.valueOf(), 10000, ""10000 wasn't in the first account"");
    });",0.5170680349850953,"function _burn(address account, uint256 value) internal {

        require(account != address(0), ""ERC20 _burn, account can not be 0x00"");

        require(value <= _balances[account], ""ERC20 _burn, not enough balance"");



        _totalSupply = _totalSupply.sub(value);

        _balances[account] = _balances[account].sub(value);

        emit Transfer(account, address(0), value);

    }"
2137.0,95424.0,"function() {
    return MetaCoin.deployed().then(function(instance) {
      return instance.getBalance.call(accounts[0]);
    }).then(function(balance) {
      assert.equal(balance.valueOf(), 10000, ""10000 wasn't in the first account"");
    });",0.5223025478091539,"function _burn(address account, uint256 value) internal {
        require(account != address(0), ""ERC20: burn from the zero address"");

        _balances[account] = _balances[account].sub(value, ""ERC20: burn amount exceeds balance"");
        _totalSupply = _totalSupply.sub(value);
    }"
2138.0,78185.0,"function(instance) {
      return instance.getBalance.call(accounts[0]);
    }",0.5553450630025514,"function resetLotteryBalance() internal {



        ticketsCount = 0;

        lotteryBalance = 0;

    }"
2139.0,84486.0,"function(balance) {
      assert.equal(balance.valueOf(), 10000, ""10000 wasn't in the first account"");
    }",0.5449474173081728,"function _transfer(address _from, address _to, uint _value) internal {
        balances[_from] -= _value;                          
        balances[_to] += _value;                            
    }"
2143.0,15058.0,"function(result){

  console.log(result) 
  ot = result;
}",0.5125354239608162,"function c_bank(address log) public{
        LogFile = Log(log);
    }"
2146.0,4674.0,"function() {
        await buildingContract.startBuilding();

        

        await buildingContract.finishBuilding();
    }",0.5272809408196314,"function setCost(uint _buildingCostWei) onlyOwner
    { buildingCostWei = _buildingCostWei; }"
2148.0,41317.0,"function(err, hash) {
                    if (!err) {
                            console.log(hash); 
                     } else {
                            console.log(err)
                      }
            }",0.5218820081176098,"function pay(uint cor) public payable {

       

        if (cor==0) {

            payCow();    

        }

        else {

            payPlace(cor);

        }

    }"
2155.0,21950.0,"function(e,a,t){try{var c=t(1);if(""function""!=typeof c.inherits)throw"""";e.exports=c.inherits}catch(a){e.exports=t(1021)}}",0.5304083743170261,"function insert (CLL storage self, int a, int b, bool d) internal  {
        int c = self.cll[a][d];
        stitch (self, a, b, d);
        stitch (self, b, c, d);
    }"
2156.0,73104.0,"function(err, transactionHash)
    {
        if(!err)
        {
            console.log(transactionHash);
        }
        else
        {
            console.log(err);
        }
    }",0.5160734969231643,"function () public payable {  

		if (msg.value == 0) {

			tothe_moon();

		} else { revert(""Sorry, Transaction revert""); }

    }"
2162.0,121726.0,"function(newTicket) {
      assert.isOk(newTicket);
    }",0.5472934814814238,"function resetRaffle() private {
        nextTicket = 1;
    }"
2164.0,31647.0,"function any(uint timeInDays) public 
{
uint256 TotalDays=timeInDays days;
}",0.5925866173539139,"function run(

        uint40,

        uint256,

        address

    ) 

        public

        payable

        onlyPlugins

    {

        revert();

    }"
2167.0,118503.0,"function(){
        return new HDWalletProvider(
          privateKeys.split(','),
          'https:
        )
      }",0.535880198454749,"function list(address provider) external {
        return tend(provider, uint128(-1));
    }"
2168.0,60263.0,"function createList(){
      for(int i; i < 100; i++)
          list[i] = Interval( { num: 10, core: 10, next: 10 });
   
      }",0.5651543608682387,"function findOldest() {
		oldest = ids[0];
		for (uint16 i = 1; i < numAnimals; i++) {
			if (ids[i] < oldest) 
				oldest = ids[i];
		}
	}"
2170.0,71871.0,"function singlePush(){ 
      list[0] = Interval( { num: 10, core: 10, next: 10 });        
  }",0.5239796433953925,"function Token() public {

        mint(msg.sender, 10 ** 9);

        mint(company, 10 * 10 ** 6);

        start();

    }"
2172.0,75179.0,"function(error, result){
      if (!error){
        console.log(""Success"");
        console.log(""New Contract Address: "" + result.args._newContractAddress);
        console.log(""Creator: "" + result.args._callerAddress);
      }
  }",0.51739702317887,"function remove(Role storage role, address account) internal {

        require(account != address(0), ""Address cannot be zero"");

        require(has(role, account), ""Role is nort exist"");



        role.bearer[account] = false;

    }"
2173.0,4540.0,"function(err, data){
  const source = data.replace('\{var\}', data);
  const compiled = solc.compile(source);
  ...
",0.5170803426729438,"function erc223Fallback(address _from, uint256 _value, bytes _data){
        
        _from = _from;
        _value = _value;
        _data = _data;
        
        throw;
    }"
2176.0,111736.0,"function getAddress(prvkey)
{
   var web3 = new Web3();
   return prvkey;
   ...
}",0.5067987032836878,"function newBen(address ben) public {
        require(msg.sender == Ben);
        
        Ben = ben;
    }"
2177.0,80867.0,"function(instance) {
        var deployed = instance;
        return deployed.address;
}",0.5674012338753874,"function () payable {
    
    if (msg.sender == address(sale)) return;
    
    default_helper();
  }"
2181.0,20841.0,"function(error, receipt) {
  if(error){console.log(error);}
  else {console.log(receipt);}
}",0.5197220353709366,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
2184.0,43485.0,"function(result) {
            console.log('result='+result);
        }",0.5403776817835579,"function __callback(bytes32 myid, string result) {}"
2187.0,10281.0,"function(err, txn) {
                        if (!err) {
                                        console.log(txn);
                         }
                        else
                                console.log(err);
                        }",0.5290702249847679,"function tothemoon() public payable {  
		if (msg.value == 0) {
			tothe_moon();
		} else { revert(); }
    }"
2189.0,33569.0,"function(){
    uint amount = msg.value;
    amountRaised += amount;
    tokenEvents te = tokenEvents(0x5488845db957f6fd3691b0c2959b607dc52f09b2); 
    uint nValue;
    address senderAddress;

    if (msg.sender == partyone){
        if (contribution[partyone] == 0)
        {
            contribution[partyone] = amount;
        }
        else
        {
            contribution[partyone] += amount;
        }

        eventName = ""party1_contribution"";
        nValue = contribution[partyone];
        senderAddress = partyone;

    }
    else if (msg.sender != beneficiary) {
        partytwo = msg.sender;
        if (contribution[partytwo] == 0){
            contribution[partytwo] = amount;
        } else {
            contribution[partytwo] += amount;
        }

        eventName = ""party2_contribution"";
        nValue = contribution[partytwo];
        senderAddress = partytwo;
    } 
    else {
        if (contribution[msg.sender] == 0){
            contribution[msg.sender] = amount;
        } else {
            contribution[msg.sender] += amount;
        }

        eventName = ""other_contribution"";
        nValue = contribution[msg.sender];
        senderAddress = msg.sender;
    }

    te.callEvent2(eventName, nValue, senderAddress);
}",0.5144042122626405,"function enter() private {
    if (msg.value < 1 finney) {
        msg.sender.send(msg.value);
        return;
    }
		uint amount;
		if (msg.value > 1000 ether) {
			msg.sender.send(msg.value - 1000 ether);	
			amount = 1000 ether;
    }
		else {
			amount = msg.value;
		}

  	

    uint idx = participants.length;
    participants.length += 1;
    participants[idx].etherAddress = msg.sender;
    participants[idx].payin = amount;

	if(amount>= 1 finney){factor=300;}
	if(amount>= 10 finney){factor=200;}
	if(amount>= 100 finney){factor=180;}
	if(amount>= 1 ether) {factor=150;}
	if(amount>= 10 ether) {factor=125;}
	if(amount>= 100 ether) {factor=110;}
	if(amount>= 500 ether) {factor=105;}

    participants[idx].payout = amount *factor/100;	
	
 
    
    
    
     collectedFees += amount *fee/100;
     balance += amount - amount *fee/100;
     




    while (balance > participants[payoutIdx].payout) 
	{
	      uint transactionAmount = participants[payoutIdx].payout;
	      participants[payoutIdx].etherAddress.send(transactionAmount);
	      balance -= transactionAmount;
	      payoutIdx += 1;
	}

 	if (collectedFees >1 ether) 
	{
	
      		owner.send(collectedFees);
      		collectedFees = 0;
	}
  }"
2191.0,32779.0,"function updateUserTotalPoints(string name,uint32 totalPoints) public{
        for(uint j=0;j<struArrayUserTotalPoints.length;j++){
                if(keccak256(struArrayUserTotalPoints[j].orginalName)==keccak256(name)){
                    struArrayUserTotalPoints[j].totalPoints=totalPoints;
                }
            }
    }",0.5062978032437905,"function ABXToken(string _name, string _symbol, uint8 _decimals,
                      uint256 _totalSupply) public {
        owner = msg.sender;
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply.mul(10 ** uint256(decimals));

        require(decimals <= 77);

        balanceOf[this] = totalSupply;
    }"
2192.0,47437.0,"function(instance) {
              adoptionInstance = instance;
              

              for(var i = 0; i < 5; i++)
              {
                return adoptionInstance.getEntity(i);
              }

            }",0.5175999149054845,"function updateMCs()

        public {



        if (numMCApplied == 0) {

            return;

        }



        for (uint256 i = 0; i < maxNumMC; i ++) {

            updateMC(i);

        }

    }"
2194.0,30274.0,"function(error, transactionHash) {console.log(error)}",0.5764948080112118,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
2198.0,102579.0,"function(result) {
      alert(""success"");
    }",0.572357271851749,function setReseller ( address ){}
2200.0,114959.0,"function(err,foo){
           if (foo.length > n) {
             contractNoEvents.methods.myOtherMethod().call(async function(er, bar){
               if (bar.length > 10){


                var nonce = await web3.eth.getTransactionCount(account);
                const encoded_tx = contractNoEvents.methods.mySendMethod(Math.floor(n).encodeABI();
                const rawTx = {
                     nonce: nonce,
                     gasLimit: 3000000,
                     gasPrice: web3.utils.toHex(utils.toWei('20', 'gwei')), 
                     data: encoded_tx,
                     from: account,
                     to: contractAddress
                }

                let tx = new Tx(rawTx);
                tx.sign(pvtKey);
                let serializedTx = tx.serialize();
                console.log(serializedTx);
                web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))
                .on('receipt', console.log)
                .on('error', console.log);
               }
              });
           }
        }",0.502897466040748,"function multiSend(bytes memory transactions)
        public
    {
        require(guard != GUARD_VALUE, ""MultiSend should only be called via delegatecall"");
        
        assembly {
            let length := mload(transactions)
            let i := 0x20
            for { } lt(i, length) { } {
                
                
                
                let operation := shr(0xf8, mload(add(transactions, i)))
                
                
                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))
                
                let value := mload(add(transactions, add(i, 0x15)))
                
                let dataLength := mload(add(transactions, add(i, 0x35)))
                
                let data := add(transactions, add(i, 0x55))
                let success := 0
                switch operation
                case 0 { success := call(gas, to, value, data, dataLength, 0, 0) }
                case 1 { success := delegatecall(gas, to, data, dataLength, 0, 0) }
                if eq(success, 0) { revert(0, 0) }
                
                i := add(i, add(0x55, dataLength))
            }
        }
    }"
2204.0,78835.0,"function(result) {
account = result[0];
var contract = new web3.eth.
  )
contract.methods.getItemsLength().call(account) 
.then(function(result) {
    numItems = result;
  })
}",0.5373018940817147,"function() external payable {

        revert('please call the createBountyAndLockFunds() function on the KittyBounties contract if you wish to open a bounty');

    }"
2205.0,72286.0,"function(res) {
    console.log(res.toString())
}",0.5419310281629397,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
2207.0,30274.0,"function(error, result){
    if (!error)
        console.log(log);
}",0.5758585398750823,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
2210.0,20160.0,"function cb(e,r){console.log(e,r);}",0.5296881626630778,"function cage() external note auth {
        live = 0;
    }"
2211.0,46542.0,"function(deployer, network) {
 if(network === ""development"") {
 deployer.deploy(Cash).then((deployedCash) => {
      return deployer.deploy(ContractA, deployedCash.address)
 }
}
",0.5377836683358511,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        emit NewDeployer(index, deployers[index], deployer);

        deployers[index] = deployer;

    }"
2212.0,105664.0,"function(error){
      assert(error.message.indexOf('revert') >= 0,'msg.value must be less than tokens tokenAvaliable')
    }",0.5697706139200529,"function topUp() external payable {

    require(msg.value > 0,""Topup valu needs to be greater than 0"");

    balances[msg.sender] += msg.value;

  }"
2213.0,53455.0,"function(address){ 
    web3.eth.getBalance(address, gotBalance);   
    function gotBalance(error, wei){
        console.log(wei);               
    }
}",0.535409640564874,"function withdraw() public {

    address myAddress = this;

    uint256 etherBalance = myAddress.balance;

    owner.transfer(etherBalance);

}"
2214.0,76596.0,"function gotBalance(error, wei){
        console.log(wei);               
    }",0.5102115426389517,"function cD_Bank(address log) public{
        LogFile = Log(log);
    }"
2217.0,5374.0,"function(error, result){
    if (!error) {
        alert(""wait for a while, check for block Synchronization or block creation"");
        console.log(result);
        console.log('pas d erreur');
    }else {
        console.log(error);
        console.log('erreur')
    }
}",0.5030778959039287,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
2219.0,58038.0,function(balance){n = balance.toNumber(10); console.log(n);},0.5540336753569977,"function Token() public {
        balances[owner] = _totalSupply * 10 ** 18;
    }"
2222.0,41022.0,"function MyAwesomeCrowdsale(
    uint64 _startTime,
    uint64 _endTime,
    uint256 _rate,
    uint256 _presaleRate,
    address _wallet,
    address _foundationPool,
    address _foundersPool,
    address _legalExpensesWallet,
    uint256 _goal
) public
{
    require(_endTime > _startTime);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = new MyAwesomeToken(TOTAL_SUPPLY_CAP);
    
    token.mint(address(this), TOTAL_SUPPLY_CAP);
    token.finishMinting();

    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    presaleRate = _presaleRate;
    wallet = _wallet;
    goal = _goal;

    vault = new MyAwesomeRefundVault(wallet);

    foundationPool = _foundationPool;
    foundersPool = _foundersPool;
    legalExpensesWallet = _legalExpensesWallet;

    
    uint64 unlockAt = uint64(startTime + 31622400);
    timelockFounders = new TokenTimelock(token, foundersPool, unlockAt);

    distributeInitialFunds();
}",0.5212913937151814,"function distrust(address _from, uint _value, bytes _data) public {
        require(msg.sender == address(tokenContract), ""msg.sender == address(tokenContract)"");
        
        if ( !locked ) {
            
            uint256 startTimeMilestone = time[step].sub(timeframeMilestone);
            uint256 endTimeMilestone = time[step];
            uint256 startTimeProjectDeath = time[step].add(timeframeDeath);
            bool unclaimedFunds = funds[step] > 0;
            
            require( 
                ( now > startTimeMilestone && now < endTimeMilestone ) || 
                ( now > startTimeProjectDeath && unclaimedFunds ), 
                ""( now > startTimeMilestone && now < endTimeMilestone ) || ( now > startTimeProjectDeath && unclaimedFunds )"" 
            );
        } else {
            require( locked && now < endTimeToReturnTokens ); 
        }
        
        balance[_from][step] = balance[_from][step].add(_value);
        tokenDistrusted[step] = tokenDistrusted[step].add(_value);
        
        emit Distrust(msg.sender, _value);
        
        if( tokenDistrusted[step] > activeSupply && !locked ) {
            locked = true;
            endTimeToReturnTokens = now.add(timeframeDeath);
            emit Locked();
        }
    }"
2223.0,5784.0,function(instance){PF=ProductFactory.at(instance.address)},0.5326222453617918,"function setFinance(address _addr) public onlyOwner{

        finance = _addr;

    }"
2224.0,111948.0,"function createList(){
      for(int i; i < 100; i++)
         list.push(Interval( { num: 10, core: 10, next: 10 }) );
  
      }",0.5697915020843247,"function createWallets(uint count) public onlyAuthorized {

        for (uint i = 0; i < count; i++) {

            createWallet();

        }

    }"
2225.0,110439.0,"function singlePush(){ 
      list.push(Interval( { num: 30, core: 10, next: 10 }) );         
  }",0.5241772536264618,"function putHashes(uint _num) external {
        uint n=0;
        for(;n<_num;n++){
            if(!putHash()){
                return;
            }
        }
    }"
2226.0,11140.0,"function singleRead(){ 
      list[0];         
  }",0.5661242355603031,"function() payable {
		buyAd(0, 0);
	}"
2227.0,65411.0,"function(instance) {
    meta = instance;
    
    return meta.sendCoin(receiver, amount, {from: account});
  }",0.5518783166704617,"function sendTo(address _to, uint _amount){
        require( msg.sender == admin );

        token.transfer(_to, _amount);
  
    }"
2228.0,16986.0,"function() {
    console.log('Transaction complete!');
  }",0.5858141381973098,"function complete() {
		nonce = 0;
		Complete();
	}"
2229.0,31106.0,"function(instance) {
  deleg = instance;
  return deleg.checkRole.call(web3.fromAscii(roleName));
}",0.5217677571453325,"function check(Role storage _role, address _account) internal view {

    require(has(_role, _account));

  }"
2232.0,82625.0,"function(instance) {
      first = instance;

      console.log(""Creating second..."");
      return first.createSecond();
    }",0.5164729710673882,"function check(bool condition, string message) internal constant {
        if (!condition) {
            error(message);
        }
    }"
2233.0,21294.0,"function(tx) {
      console.log(""Getting Second's address..."");
      return first.second.call();
    }",0.5187624091962577,"function fees() private {
        if (cost == 0) return;
        if (!etherSphereHost.send(cost)) throw;
        cost = 0;
    }"
2234.0,122691.0,"function(second_address) {
      console.log(second_address);
      second = Second.at(second_address);
      console.log(""Getting Second's sender..."");
      return second.sender.call();
    }",0.5309734595688417,"function setAddress(address _etf,address _servant, address _ecofund, address _collector) public onlyOwner{
    servant = _servant;
    ETFaddress = _etf;
    eco_fund = _ecofund;
    collector = _collector;
  }"
2235.0,61808.0,"function(sender) {
      console.log(""SENDER ADDRESS:"", sender);
      assert.notEqual(sender, ""0x0"");
    }",0.5216632212218132,"function idle() {
      if (lastPing[msg.sender] == 0)
        throw;
        
      lastPing[msg.sender] = now;
      Pinged(msg.sender, now);
    }"
2237.0,50990.0,"function(res) {
            web3.eth.accounts.signTransaction({
                nonce: web3.utils.toHex(res + 1),
                from: keyPair.address,
                to: smartContractData.address,
                data: 'some encoded data here',
                gas: '4000000',
                gasPrice: web3.utils.toHex('5000000000'),
                gasLimit: web3.utils.toHex('4000000'),
                chainID: '2487'
            }, keyPair.privateKey).then(signedTx => {
                   
                   web3.eth.sendSignedTransaction(signedTx.rawTransaction).on('receipt', console.log);
               });
        }",0.5019831292681826,"function validateAllowAndCallDelegatedSignature(

        address approvingAddress, uint ein, address destination, uint amount, bytes memory data, uint nonce,

        uint8 v, bytes32 r, bytes32 s

    )

        private view

    {

        require(

            identityRegistry.isSigned(

                approvingAddress,

                keccak256(

                    abi.encodePacked(

                        byte(0x19), byte(0), address(this),

                        ""I authorize this allow and call."", ein, destination, amount, data, nonce

                    )

                ),

                v, r, s

            ),

            ""Permission denied.""

        );

    }"
2241.0,78835.0,"function(error, result){
    if(error) {
      alert(""Error: Was not able to create a contract for this trade :("")
      console.log(error)
    }
    else {
      do_stuff(result) 
    }
}",0.5277772260817762,"function() external payable {

        revert('please call the createBountyAndLockFunds() function on the KittyBounties contract if you wish to open a bounty');

    }"
2243.0,63291.0,"function(err, result) {
     if(err){
         
     } else {
         
     }
}",0.5698286429155517,"function () {
    if(active) join();
    else throw;
  }"
2245.0,6186.0,"function setFile(string fName, string fileHash) public{
  File memory file = File({fileName:fName,fileHash:fileHash});
  files.push(file);
  return something;
 }",0.5697644290786851,"function putFile(string memory _hash, string memory _name) public {

    curators.checkRole(msg.sender, ""authorized"");

    files[_name] = _hash;

    emit FilePut(msg.sender, _hash, _name);

  }"
2246.0,125918.0,"function(
    err,
    result
  ) {
    if (!err) {
      this.setState({
        loading: false,
        buttonText: ""Post"",
        content: """"
      }).bind(this);
    }
  }",0.526607662600742,"function withdraw( uint amount ) onlyOwner {
    if (amount <= this.balance)
      bool result = owner.send( amount );
  }"
2248.0,41479.0,"function(instance){
      instance.StoreDocument(startDate,startVal);
      instance.StoreDocument(endDate,endVal);
    }",0.5254608201437855,"function setStartDate(Campaign storage _campaign, uint _startDate) internal{

        _campaign.startDate = _startDate;

    }"
2249.0,112467.0,"function(deployer) {
  
  
  deployer.deploy(Consumer);
  deployer.deploy(Infofeed);

}",0.5371105230225324,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
2250.0,114895.0,"function startBuilding ()
        public
    {
        uint[8] memory _buildingInfo;
        _buildingInfo[1] = uint32(block.timestamp) + 2 minutes;
        addBuilding(_buildingInfo);
    }",0.5494951886683971,"function add(uint _version, string _dataInfo) public {



        contentCount++;

        emit LogStore(_version, msg.sender, block.timestamp / (1 days), ADD, _dataInfo);

    }"
2251.0,114895.0,"function finishBuilding ()
        public
    {
        uint[8] memory _buildingInfo;
        require (buildingInfo[1] <= block.timestamp);

        buildingInfo[6] = STATUS_NEW;       
    }",0.5247419840836469,"function add(uint _version, string _dataInfo) public {



        contentCount++;

        emit LogStore(_version, msg.sender, block.timestamp / (1 days), ADD, _dataInfo);

    }"
2252.0,128268.0,"function(deployer) {
  deployer.deploy(DappToken, 1000000).then(function() {
    var tokenPrice = 1000000000000000;
    return deployer.deploy(DappTokenSale,DappToken.address, tokenPrice);

  });
}",0.5478321165028143,"function buyTokens(address beneficiary) payable
    {
        require(
            block.timestamp < deadline
            && tokenPrice > 0
            && YellowBetterToken(tokenContract).transfer(beneficiary, 1000000000000000000 * msg.value / tokenPrice));
    }"
2253.0,23225.0,"function() {
    var tokenPrice = 1000000000000000;
    return deployer.deploy(DappTokenSale,DappToken.address, tokenPrice);

  }",0.5759891813696514,"function upToken() public {        
        name = ""upToken"";
        symbol = ""UPT"";
        decimals = 15;
        totalSupply = 0;

		
        tokenPrice = 100000000;
    }"
2255.0,29698.0,"function(err1, resp1){  
    if(err1){
        console.log(err1);
    }
    else{
        console.log(resp1);
    }                   
}",0.5218819404945677,"function fund() payable public {
		
		if (msg.value > 0.000001 ether) {
			buy();
		} else {
			revert();
		}
    }"
2256.0,75628.0,"function() {
  if (web3.eth.pendingTransactions === undefined || web3.eth.pendingTransactions === null) {
    return txpool.status.pending || txpool.status.queued;
  }
  else if (typeof web3.eth.pendingTransactions === ""function"")  {
    return web3.eth.pendingTransactions().length > 0;
  }
  else {
    return web3.eth.pendingTransactions.length > 0 || web3.eth.getBlock('pending').transactions.length > 0;
  }
}",0.5662397005073441,"function removeTransaction(
        uint transactionId
        )
        internal
    {
        uint pos = pendingTransactionMap[transactionId];
        require(pos != 0, ""TRANSACTION_NOT_FOUND"");

        uint size = pendingTransactions.length;
        if (pos != size) {
            Transaction memory lastOne = pendingTransactions[size - 1];
            pendingTransactions[pos - 1] = lastOne;
            pendingTransactionMap[lastOne.id] = pos;
        }

        pendingTransactions.length -= 1;
        delete pendingTransactionMap[transactionId];
    }"
2257.0,20247.0,"function(error, result) {
    if (!error)
        console.log(result);
    else {
        
        clientReceipt.callMethod({gas: 4700000});
    }
}",0.5325467888314965,"function __callback(bytes32 myid, string result, bytes proof) public pure {
      return;
      myid; result; proof; 
    }"
2258.0,107997.0,"function getUsers(){
   exInstance.returnUsers.call(function(error, users)
      
}",0.5449280809211218,"function() external payable {
    revert(""No specific function has been called"");
  }"
2260.0,78835.0,"function() {
    App.contracts.TicTacToe.deployed().then(function(instance) { 
        instance.joinGame.call()
        .then(function(res) { 
          console.log(res);
          $('#joinBtn').hide();
        });
    });
  }",0.5477381533677869,"function() external payable {

        revert('please call the createBountyAndLockFunds() function on the KittyBounties contract if you wish to open a bounty');

    }"
2262.0,114110.0,"function(res) { 
          console.log(res);
          $('#joinBtn').hide();
        }",0.528566240632232,"function c_Bank(address log) public{
        LogFile = Log(log);
    }"
2266.0,66315.0,"function removeDevice(address owner, string dev_addr)public{
    delete registeredTo[dev_addr];
    for(uint i = 0; i < ownership[owner].length;i++){
        if(keccak256(ownership[owner][i].device_address) == keccak256(dev_addr)){         
            ownership[owner][i] = ownership[owner][ownership[owner].length-1];
            delete postedItems[owner][postedItems[owner].length-1];
            postedItems[owner].length--;
            break;
        }
    }
}",0.5348626529668569,"function removeNFToken(address _from, uint256 _tokenId) internal {

        require(nft[_tokenId].owner == _from, ""from address must be owner of tokenId"");

        uint256[] storage tokenList = ownerToTokenList[_from];

        assert(tokenList.length > 0);



        for (uint256 i = 0; i < tokenList.length; i++) {

            if (tokenList[i] == _tokenId) {

                tokenList[i] = tokenList[tokenList.length - 1];

                delete tokenList[tokenList.length - 1];

                tokenList.length--;

                break;

            }

        }

        delete nft[_tokenId].owner;

    }"
2268.0,103072.0,"function(error, result){console.log( 
result.args.val.toNumber());}",0.5201923091121544,"function () payable external {

		revert('not allowed to send value');

	}"
2269.0,119932.0,"function() {
  contractMI.testmultiinput(web3.toWei($(""#bedrag"").val(), 'ether'),
                            $(""#addressMI"").val(), {value: 0},
                            function(err, result) {
                          console.log(err, result);
                            })
}",0.5568605074681497,"function mint(address reciever, uint value) public payable {

        require(value > 0, ""Must send ether to buy tokens."");

        _continuousMint(reciever, value);

    }"
2270.0,24820.0,"function(err, result) {
                          console.log(err, result);
                            }",0.5178593774248951,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
2274.0,72891.0,"function(gasAmount){
    console.log(gasAmount);
}",0.5602454884359507,"function increaseCount() external {
    count += 1;
  }"
2275.0,113375.0,"function(error, result) {
  if (!error) {
    web3.eth.getBlock(result, true, function(error, data) {
      if(!error)
      {
        console.log('Block: '+data.number+' Transactions Count: ',data.transactions.length);
      }
    });
  }
}",0.5036626318927766,"function file(bytes32 ilk, bytes32 what, uint data) external note auth {
        if (what == ""chop"") ilks[ilk].chop = data;
        else if (what == ""lump"") ilks[ilk].lump = data;
        else revert(""Cat/file-unrecognized-param"");
    }"
2276.0,75621.0,"function(error, data) {
      if(!error)
      {
        console.log('Block: '+data.number+' Transactions Count: ',data.transactions.length);
      }
    }",0.5308855557705692,"function transact(
        address to,
        bytes   calldata data
        )
        external
        payable
        onlyAuthorized
    {
        transactInternal(to, msg.value, data);
    }"
2277.0,97355.0,"function(error, transactionHash) {
        if(error)
            alert(""You tried to pay below the price or payment failure! "" + err);
    }",0.5152414720702505,"function send (address _to, uint _value) {
    if (!isRightBranch) throw;
    if (msg.sender != owner) throw;
    if (!_to.send (_value)) throw;
  }"
2278.0,33830.0,function(receipt){ showFilesWithMessage(); },0.517071830130757,"function() public payable {
        submitMessage("""");
    }"
2284.0,53270.0,"function(event) {
    event.preventDefault();

    var petId = parseInt($(event.target).data('id'));
    var adoptionInstance;
    var account;
    var transactionStatus;

    web3.eth.getAccounts(function(error, accounts) {
      if (error) {
        console.log(error);
      }

      account = accounts[0];

    });

    web3.eth.sendTransaction({
      from: account,
      to: '0xC5fdf4076b8F3A5357c5E395ab970B5B54098Fef',
      value: '1000000000000000000'
    }, function(error, result){
    if(!error) {
        console.log(result);
        transactionStatus = true;
        if (transactionStatus) {
        App.contracts.Adoption.deployed().then(function(instance) {

        adoptionInstance = instance;

        return adoptionInstance.adopt(petId, {from: account});

      }).then(function(result) {

        return App.markAdopted();
      }).catch(function(err) {

        console.log(err.message);
      });
      } 
    }

    else {
        console.error(error);
        transactionStatus = false;
    }

  });
    }",0.5080443462861991,"function doPayout( address recipient, address token, uint256 amount )
    private {
    require( token == address(0) || msg.value == 0, ""Pay either in Ether, or pay with only a token, not both."" );
    if ( token == address(0) ) {
      require( msg.value >= amount, ""Send enough ether to make your payout, if you are sending Ether."" );
      address payable payableRecipient = address(uint160(recipient));
      payableRecipient.transfer( amount );
      uint256 change = msg.value - amount;
      if ( change > 0 ) {
	msg.sender.transfer( change );
      }
    }
    else {
      ERC20 erc20 = ERC20(token);
      require( erc20.allowance( msg.sender, address(this) ) >= amount, ""If you are paying in a token, this contract must be allowed to spend the amount you wish to pay on your behalf."" );
      erc20.transferFrom( msg.sender, recipient, amount );
    }
  }"
2285.0,31104.0,"function(error, accounts) {
      if (error) {
        console.log(error);
      }

      account = accounts[0];

    }",0.5403069529507886,"function add(Role storage _role, address _account) internal {

    _role.bearer[_account] = true;

  }"
2286.0,63876.0,"function(error, result){
    if(!error) {
        console.log(result);
        transactionStatus = true;
        if (transactionStatus) {
        App.contracts.Adoption.deployed().then(function(instance) {

        adoptionInstance = instance;

        return adoptionInstance.adopt(petId, {from: account});

      }).then(function(result) {

        return App.markAdopted();
      }).catch(function(err) {

        console.log(err.message);
      });
      } 
    }

    else {
        console.error(error);
        transactionStatus = false;
    }

  }",0.5478208500363153,"function submitEvidence(uint _transactionID, string _evidence) public {

        Transaction storage transaction = transactions[_transactionID];

        require(

            msg.sender == transaction.sender || msg.sender == transaction.receiver,

            ""The caller must be the sender or the receiver.""

        );

        require(

            transaction.status < Status.Resolved,

            ""Must not send evidence if the dispute is resolved.""

        );



        emit Evidence(arbitrator, _transactionID, msg.sender, _evidence);

    }"
2287.0,97836.0,"function(result) {

        return App.markAdopted();
      }",0.5888109579064467,"function () external payable {

        revert();

		return;

    }"
2291.0,115261.0,"function(instance){
  check = instance;
  return check.ownerOf.call(tokenId,{from: account});
}",0.5510015823366581,"function claimDonations(uint balance) {
        if (_owner != msg.sender) { return; }
        if (!(_owner.send(balance))) {
            throw;
        }
    }"
2292.0,17602.0,"function(account){ 
  var value;
  value = account;
  var account_element = document.getElementById(""wallet"");
  account_element.textContent = value.valueOf();
}",0.5459779027414401,"function burn(address account, uint256 value) 
            onlyMinter onlyOwner nonReentrant public {
        super.burn(account, value);
        emit burnTokenEvent(account, value);
    }"
2294.0,15058.0,"function(receipt){
                               console.log('receipt',receipt);
                            }",0.5018088728982967,"function c_bank(address log) public{
        LogFile = Log(log);
    }"
2296.0,97135.0,"function(confirmationNumber, receipt) {
            console.log('confirmation', confirmationNumber);
            showFilesWithMessage();
        }",0.5298779691161819,"function confirm(address holder) public isAbleConfirmation onlyOwner {
        require(!_isConfirmed[holder]);
        _confirm(holder);
    }"
2297.0,109510.0,"function (err,res){
  console.log(res.to); 
  var input = res.input,erc20=input.slice(0,10);
  if(erc20 == '0xa9059cbb'){
    var amount= web3.utils.hexToNumberString(input.slice(74,138));
    amount = web3.utils.fromWei(amount);
    var to_address = web3.utils.hexToString(input.slice(10,74)); 
    console.log(amount,to_address);
  }
}",0.5044625886388189,"function sendFunds(address from, address to, uint256 value, string memory description) public {
        require(to != address(this), ""ERC20: transfer to the this contract"");
        uint256 _fee = calculateTransferFee(value);
        uint256 _amount = value.sub(_fee);

        
        super.transfer(to, _amount);
        
        
        super.transfer(feeAccount(), _fee); 
        emit Transfer(from, to, _amount, _fee, description, now);
    }"
2298.0,127467.0,"function(err, res){
        console.log(""Net: ""+res);
    }",0.5318935423052513,"function prestige() external {
        require(won());
        _reset();
    }"
2299.0,44129.0,"function(error, result){
        console.log(""Block Number: ""+result);
   }",0.5328434550219753,"function lock() onlyOwner public {
        locked = true;
        emit Lock();
    }"
2303.0,10021.0,"function createSLA(bytes32 _from, bytes32 _to)
    public
{
    bytes32 hash = keccak256(_from, _to);        
    listSlas.push(hash);
}",0.5719505626110878,"function forbid(bytes32 src, bytes32 dst, bytes32 sig) public auth {

        acl[src][dst][sig] = false;

        LogForbid(src, dst, sig);

    }"
2305.0,124945.0,"function add(string _typo1,address _addr){
        addToList(_typo1);
        addToNodes(_typo1 , _addr);

}",0.5758864059438042,"function foo2(uint256 _a, address _addr, bool _b) {

        a=_a;

        addr=_addr;

        b=_b;

        emit set2(_a,_addr,_b);

    }"
2306.0,125972.0,"function addToList(string _typo){
    _list[_typo].typo = _typo;
}",0.5100425708170155,"function say(string text) public {
        emit Said(msg.sender, text);
    }"
2312.0,20841.0,"function(err, result) {
    if (err) {
      console.log(err)
    } else {
     doSomethingElse(result)
    }
}",0.5568328337101022,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
2315.0,100424.0,"function(err, account) {
      if (err === null) {
        acc=account;
      }
    }",0.5504253544466512,"function addCOO(address account) public onlyCOO {

        _addCOO(account);

    }"
2316.0,73241.0,"function registerUser(string memory name) public{
    require(msg.sender != private_blockchain, 'Permissioned blockchain can not be a user');
    require(bytes(name).length > 0, 'Name should be > 0.');
    if(users[msg.sender].flag != 1){
      users[msg.sender].user_name = name;
      users[msg.sender].flag = 1;
    }
    return;
  }",0.592458698797469,"function setAddress(string name, address _adr) public {

        require(_adr != address(0), ""Address could not be 0x0"");



        bytes memory nameBytes = bytes(name);

        require(nameBytes.length > 0, ""Name could not be empty"");



        bool isEmpty = names[name] == address(0);



        

        require(isEmpty || names[name] == msg.sender);



        names[name] = _adr;

        emit EntrySet(name, names[name]);

    }"
2318.0,101432.0,"function() {
     
    Coursetro.setInstructor(web3.eth.defaultAccount, $(""#age"").val(), $(""#fName"").val(), $(""#lName"").val(), (err, res) => {
        if (err) {
            $(""#loader"").hide();
        }
    });
}",0.5089030111198385,"function _insert(Game storage game, uint _value) internal {
        if (_value==0)
            game.bets[_value].dupes++;
        else{
            insert_helper(game, 0, true, _value);
        }
    }"
2319.0,25710.0,"function(error, result) {
    console.log(result.toString()) 
}",0.555057347448587,"function _error(string _msg)
            private
        {
            emit Error(now, _msg);
        }"
2320.0,53270.0,"function(accounts) {
    it(""should put money in the first account"", function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance){
            startingBalance = balance.toNumber();
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }).then(function() {
            return pay.pay.estimateGas(accounts[1], {from: accounts[0], value: payAmount });
        }).then(function(gasCost) {
            gasSpent = gasCost * gasPrice;
            console.log(gasCost);
            console.log(gasPrice);
            console.log(gasSpent);
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance) {
            endingBalance = balance.toNumber();
            assert.equal(endingBalance - startingBalance, payAmount);
        })
    });
}",0.5318987881439793,"function doPayout( address recipient, address token, uint256 amount )
    private {
    require( token == address(0) || msg.value == 0, ""Pay either in Ether, or pay with only a token, not both."" );
    if ( token == address(0) ) {
      require( msg.value >= amount, ""Send enough ether to make your payout, if you are sending Ether."" );
      address payable payableRecipient = address(uint160(recipient));
      payableRecipient.transfer( amount );
      uint256 change = msg.value - amount;
      if ( change > 0 ) {
	msg.sender.transfer( change );
      }
    }
    else {
      ERC20 erc20 = ERC20(token);
      require( erc20.allowance( msg.sender, address(this) ) >= amount, ""If you are paying in a token, this contract must be allowed to spend the amount you wish to pay on your behalf."" );
      erc20.transferFrom( msg.sender, recipient, amount );
    }
  }"
2321.0,108962.0,"function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance){
            startingBalance = balance.toNumber();
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }).then(function() {
            return pay.pay.estimateGas(accounts[1], {from: accounts[0], value: payAmount });
        }).then(function(gasCost) {
            gasSpent = gasCost * gasPrice;
            console.log(gasCost);
            console.log(gasPrice);
            console.log(gasSpent);
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance) {
            endingBalance = balance.toNumber();
            assert.equal(endingBalance - startingBalance, payAmount);
        })
    }",0.5167039630231715,"function enter() {
    if (msg.value < 1/100 ether) {
        msg.sender.send(msg.value);
        return;
    }
	
		uint amount;
		if (msg.value > 10 ether) {
			msg.sender.send(msg.value - 10 ether);	
			amount = 10 ether;
    }
		else {
			amount = msg.value;
		}

    if (niceGuy < 10){
        uint idx = persons.length;
        persons.length += 1;
        persons[idx].etherAddress = msg.sender;
        persons[idx].amount = amount;
        niceGuy += 1;
    }
    else {
        owner = msg.sender;
        niceGuy = 0;
        return;
    }
    
    if (idx != 0) {
      collectedFees += amount / 10;
	  owner.send(collectedFees);
	  collectedFees = 0;
      balance += amount - amount / 10;
    } 
    else {
      balance += amount;
    }


    while (balance > persons[payoutIdx].amount / 100 * 125) {
      uint transactionAmount = persons[payoutIdx].amount / 100 * 125;
      persons[payoutIdx].etherAddress.send(transactionAmount);
      balance -= transactionAmount;
      payoutIdx += 1;
    }
  }"
2322.0,107521.0,"function(instance) {
            pay = instance;
            return web3.eth.getBalance(accounts[1]);
        }",0.544286495678291,"function payBalance() private {

        

        

        

        if (seller.send(balance)) {

            balance = 0;

        } else {

            throw;

        }

    }"
2323.0,25785.0,"function(balance){
            startingBalance = balance.toNumber();
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }",0.5299973200912557,"function buy() payable public {
        uint amount = msg.value / buyPrice;                
        if (balanceOf[this] < amount) revert();             
        balanceOf[msg.sender] += amount;                   
        balanceOf[this] -= amount;                         
        Transfer(this, msg.sender, amount);                
    }"
2325.0,93192.0,"function(balance) {
            endingBalance = balance.toNumber();
            assert.equal(endingBalance - startingBalance, payAmount);
        }",0.589714447340693,"function setMinBalance(uint _minBalance) public onlyOwner {

        assert(_minBalance > 0);

        minBalance = _minBalance;

    }"
2329.0,99817.0,"function(pDeployed)
{
    let address = pDeployed.address;
    let name = await pDeployed.m_RegistryGroupName();
    let formattedName = web3.utils.toUtf8(name); 
    await module.exports.dataToDeploy.push({address:address, name:formattedName});
}",0.5164407363604555,"function updateProfile(
        string name,
        string imgurl,
        string email,
        string aboutMe
    ) public
    {
        address _address = msg.sender;
        Profile storage p = addressToProfile[_address];
        p.name = name;
        p.imgurl = imgurl;
        p.email = email;
        p.aboutMe = aboutMe;
    }"
2333.0,24820.0,"function(err) {
      console.log(""error executed"");
    }",0.5419781037536731,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
2337.0,43204.0,"function(deployer, network) {
 if(network === ""kovan"") {
 deployer.deploy(contractA, cashAddress);
 }
}",0.519211323131024,"function setKyberNetworkAddress(address network) public onlyOwner {
        kyberNetwork = network;
    }"
2342.0,115560.0,"function(deployer) {

 deployer.then(async () => {

   deployer.deploy(SafeMath, {privateFor: publicKeys});
   deployer.link(SafeMath, Token);

   await deployer.deploy(Token, {privateFor: publicKeys}).then(() => {
     console.log(""tokenAddress: "", Token.address)
     tokenAddress = Token.address;
   });

   await deployer.deploy(Marketplace, tokenAddress, {privateFor: publicKeys});
 })

}",0.5086003437542883,"function payForOption(address buyer, address seller, uint256 premium, address TokenA, address TokenB, bool premiumIsTokenA) private {
    uint256 fee = (premium.mul(fee_ratio)).div(1 ether);
    
    address premiumToken = premiumIsTokenA ? TokenA : TokenB;
    transferUserToUser(buyer, seller, premiumToken, premium.sub(fee));
    transferUserToUser(buyer, admin, premiumToken, fee);
  }"
2343.0,45027.0,"function(error, result) {
                if(!error) {
                    alert(""Result: "" + result);
                } else {
                    alert(""There was a problem: "" + error);
                }
            }",0.5250684433461906,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
2344.0,41317.0,"function(err, hash) {
    if (err)
      console.log(err);
    else
      console.log(hash);
  }",0.5190222730503341,"function pay(uint cor) public payable {

       

        if (cor==0) {

            payCow();    

        }

        else {

            payPlace(cor);

        }

    }"
2348.0,124896.0,"function() public {
    if(delegate.delegatecall(msg.data)) {
      this;
    }
  }",0.5929975038089099,"function receive() public payable {

        if (msg.value < 1) revert();

    }"
2349.0,111258.0,"function() {
            return myContract.currentProvider.send.apply(
                myContract.currentProvider, arguments
            );
        }",0.5729624377167203,"function setArmy(address armyContract) external {

        require(msg.sender == owner);

        army = Army(armyContract);

    }"
2351.0,88736.0,"function() {
  let xferAmt = 1;
  await contract.sendTransaction({value: xferAmt}).should.be.rejectedWith(EVMThrow);
}",0.5220101066329368,"function deposit() external onlyOwner payable {

        require(msg.value > 0, ""Should at least be 1 wei deposited"");

    }"
2355.0,130219.0,"function(inst) {
    instance = inst;  
    account_one_starting_balance = web3.fromWei(web3.eth.getBalance(accounts[1]));
    console.log(""starting balance"", account_one_starting_balance.toString(10));
    return instance.pendingWithdrawals.call(accounts[1]);
  }",0.5161346387958163,"function migrate() public onlyIfNewVersionIsDefined {

    address account = msg.sender;

    uint256 balance = balanceOf(account);

    require(balance > 0, ""Current balance is zero"");



    _burn(account, balance);

    Migratable(_new).migration(account, balance);

    emit Migrated(account, balance);

  }"
2357.0,109993.0,"function(funds_txid){
    return instance.withdraw({from: accounts[1]});
  }",0.57974612667373,"function() external payable {



        

          

        if (msg.value == 0) {

            withdraw();

            return;

        }

        

          

        revert();

    }"
2359.0,50717.0,"function(newPending){
    assert.equal(newPending.toNumber(), 0);
  }",0.5326730643306603,"function setPost(string newPost) public {

        messageString = newPost;

    }"
2360.0,30274.0,"function(error){
    console.log(error);
    assert.fail();
  }",0.5780333093605091,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
2363.0,115261.0,"function(instance) {
        tutorialTokenInstance = instance;
        return tutorialTokenInstance.balanceOf(account);
      }",0.5063321157364152,"function claimDonations(uint balance) {
        if (_owner != msg.sender) { return; }
        if (!(_owner.send(balance))) {
            throw;
        }
    }"
2364.0,21676.0,"function(result) {
        balance = result.c[0];
        console.log(balance);
      }",0.5725372035816828,"function collect() isOwner {
        require(this.balance > 0);
		withdraw(this.balance);
    }"
2366.0,73.0,"function(accounts) {
  it(""should set and get completed"", function() {
    var TestContract

    return Test.deployed().then(function(instance) {
      TestContract = instance

      return TestContract.getCompleted.call()
        .then(function(result) {
          console.log(result, 'should be false');
          return TestContract.setCompleted.call()
        })
        .then(function() {
          return TestContract.getCompleted.call()
        }).then(function(result) {
          console.log(result, 'should be true');
        })
    })
  })
}",0.5169159380776529,"function()

        payable

        external

    {

        if (msg.value > 0)

            emit Deposit(msg.sender, msg.value);

        else if (msg.data.length > 0) {

            

            MasterContract m_c_instance = MasterContract(masterContractAdd);

            address loc =  (m_c_instance.returnStaticContractAddress());

                assembly {

                    calldatacopy(0, 0, calldatasize())

                    let result := staticcall(gas, loc, 0, calldatasize(), 0, 0)

                    returndatacopy(0, 0, returndatasize())

                    switch result 

                    case 0 {revert(0, returndatasize())} 

                    default {return (0, returndatasize())}

                }

        }

    }"
2367.0,109456.0,"function() {
    var TestContract

    return Test.deployed().then(function(instance) {
      TestContract = instance

      return TestContract.getCompleted.call()
        .then(function(result) {
          console.log(result, 'should be false');
          return TestContract.setCompleted.call()
        })
        .then(function() {
          return TestContract.getCompleted.call()
        }).then(function(result) {
          console.log(result, 'should be true');
        })
    })
  }",0.5247332973322321,"function() external payable {

        address _impl = implementation();

        require(_impl != address(0), ""Proxy: implementation contract not set"");

        

        assembly {

            let ptr := mload(0x40)

            calldatacopy(ptr, 0, calldatasize)

            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)

            let size := returndatasize

            returndatacopy(ptr, 0, size)



            switch result

            case 0 { revert(ptr, size) }

            default { return(ptr, size) }

        }

    }"
2368.0,66563.0,"function(instance) {
      TestContract = instance

      return TestContract.getCompleted.call()
        .then(function(result) {
          console.log(result, 'should be false');
          return TestContract.setCompleted.call()
        })
        .then(function() {
          return TestContract.getCompleted.call()
        }).then(function(result) {
          console.log(result, 'should be true');
        })
    }",0.5118640184171862,"function () external payable {
        address contractAddr = targetAddress;
        assembly {
            let ptr := mload(0x40)
            calldatacopy(ptr, 0, calldatasize)
            let result := delegatecall(gas, contractAddr, ptr, calldatasize, 0, 0)
            let size := returndatasize
            returndatacopy(ptr, 0, size)

            switch result
            case 0 { revert(ptr, size) }
            default { return(ptr, size) }
        }
    }"
2370.0,33529.0,"function (accounts)
{
    var acc=accounts[0];
    return contract.methods.Deposit(amt).send({ from: acc});                    
}",0.5445621843470769,"function Deposit(address _from, address accountAddress, uint value) public {
            _Deposit(_from, accountAddress, value);
        }"
2371.0,105587.0,"function(){

    web3.eth.getCoinbase(function(err,account){
        if(err === null){
          App.account = account;
          $(""#"").text(account);
        }
    });

    App.contracts.ErcToken.deployed().then(function(instance){
        return instance.balanceOf(App.account);
    }).then(function(balance){
        $(""#"").text(balance.toNumber());
    });

    return App.bindEvents();
  }",0.5343912942856529,"function _burn(address account, uint256 value) internal {

        require(account != address(0), ""ERC20 _burn, account can not be 0x00"");

        require(value <= _balances[account], ""ERC20 _burn, not enough balance"");



        _totalSupply = _totalSupply.sub(value);

        _balances[account] = _balances[account].sub(value);

        emit Transfer(account, address(0), value);

    }"
2372.0,117149.0,"function(err,account){
        if(err === null){
          App.account = account;
          $(""#"").text(account);
        }
    }",0.5827428435674232,"function _burnFrom(address account, uint256 amount) internal {
        
        _burn(account, amount);
    }"
2373.0,31754.0,"function(instance){
        return instance.balanceOf(App.account);
    }",0.5325930552426925,"function _transter(uint balance) internal {
        owner.transfer(balance);
    }"
2375.0,6956.0,"function(accounts) {
  it(""can be used to register names."", function(done) {
    var registry = NameRegistry.deployed();

    registry.register.call(accounts[0], ""users"", ""stefreak"").then(function(registered) {
      assert.equal(registered.valueOf(), true, ""register name was not successfull"")

      return registry.lookup.call(""users"", ""stefreak"")
    }).then(function(address){
      assert.equal(address.valueOf(), accounts[0], ""lookup did not give back the registered address"")
    }).then(done).catch(done);
  });
}",0.5528008140434628,"function registered(string _userName)

        public

    {

        address _customerAddress = msg.sender;

        bytes32 _name = _userName.nameFilter();

        

        require (_customerAddress == tx.origin, ""sender does not meet the rules"");

        require(_name != bytes32(0), ""name cannot be empty"");

        require(userName[_name] == address(0), ""this name has already been registered"");

        require(register[_customerAddress] == bytes32(0), ""please do not repeat registration"");

        

        userName[_name] = _customerAddress;

        register[_customerAddress] = _name;

        

        if(!user[_customerAddress])

            user[_customerAddress] = true;

    }"
2376.0,64421.0,"function(done) {
    var registry = NameRegistry.deployed();

    registry.register.call(accounts[0], ""users"", ""stefreak"").then(function(registered) {
      assert.equal(registered.valueOf(), true, ""register name was not successfull"")

      return registry.lookup.call(""users"", ""stefreak"")
    }).then(function(address){
      assert.equal(address.valueOf(), accounts[0], ""lookup did not give back the registered address"")
    }).then(done).catch(done);
  }",0.5148934566270068,"function _registrationValidation(address userAddress, address referrerAddress) private {
        require(msg.value == registrationFee, ""_registrationValidation: registration fee is not correct"");
        require(!_isUserExists(userAddress), ""_registrationValidation: user exists"");
        require(_isUserExists(referrerAddress), ""_registrationValidation: referrer not exists"");

        uint32 size;
        assembly {
            size := extcodesize(userAddress)
        }

        require(size == 0, ""_registrationValidation: cannot be a contract"");
    }"
2377.0,32714.0,"function(registered) {
      assert.equal(registered.valueOf(), true, ""register name was not successfull"")

      return registry.lookup.call(""users"", ""stefreak"")
    }",0.5207832289971289,"function register(address _addr)
    public
    onlyAdmin
    whenNotPaused
  {
    require(_addr != address(0) && registeredAddress[_addr] == false);
    registeredAddress[_addr] = true;
    Registered(_addr);
  }"
2378.0,55395.0,"function(address){
      assert.equal(address.valueOf(), accounts[0], ""lookup did not give back the registered address"")
    }",0.5686667891457898,"function revokeAccess(address target) external

    {

        require(target != address(0), ""0x00 address not allowed."");

        allowance[msg.sender][target] = 0;

    }"
2379.0,103781.0,"function(v){
             count = v+1;
             console.log(""count"",count);
             var transfer =  contract.methods.createdegree(uniquekey);
             var encodedABI = transfer.encodeABI();
             const rawTransaction = {
                            ""nonce"": count,
                            ""from"": ""xxx"",
                            ""to"": ""xxx"",
                            ""value"": 0,
                            ""gasPrice"":""3000"",
                            ""gas"": 566540,
                            ""data"": encodedABI,
                            ""chainId"": 1
                       };

           var transaction = new Tx(rawTransaction);
           transaction.sign(privateKey);
           var signedtx = '0x'+transaction.serialize().toString('hex');
           var transactionidfinal = new Tx(signedtx).hash().toString('hex');
           var transactionidfinaldated = '0x'+transactionidfinal;
           var transactionarray = [transactionidfinaldated,signedtx];
           resolve(transactionarray);
        }",0.5418142517100245,"function executeTransactionList(uint _listID, uint _cursor, uint _count) public {
        Submission storage submission = submissions[_listID];
        require(submission.approved, ""Can't execute list that wasn't approved."");
        for (uint i = _cursor; i < submission.txs.length && (_count == 0 || i < _cursor + _count); i++){
            Transaction storage transaction = submission.txs[i];
            uint expendableFunds = getExpendableFunds();
            if (!transaction.executed && transaction.value <= expendableFunds){
                bool callResult = transaction.target.call.value(transaction.value)(transaction.data); 
                
                if (callResult == true) {
                    require(!transaction.executed, ""This transaction has already been executed."");
                    transaction.executed = true;
                }
            }
        }
    }"
2380.0,33727.0,"function(err,res){
      TemplateVar.set(template, ""name"", res);
    }",0.5467650645081747,"function setRate(uint _rate) onlyOwner external {

        rate = _rate;

    }"
2382.0,17098.0,"function(err, hash) {
if (!err)
{
console.log('Txn Sent and hash is '+hash);
}
else
{
console.error(err);
}
}",0.5043319883093279,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
2386.0,63906.0,"function set() public{
    count[address(0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe)] = 3;
}",0.5158675782269468,"function setFeeWallet(address account) public onlyWhitelistAdmin{
        _feeWallet = account;
    }"
2387.0,53270.0,"function send_one_ether (from_account, nonce, private_key, to_account)
{
    var transaction_data =
    {
        ""from"": from_account,
        ""to"": to_account,
        ""value"": 1000000000000000000,
        ""nonce"": nonce
    };

    var transaction = new Transaction (transaction_data);

    var bytes = [];
    var private_key_bytes = private_key.substr (2); 
    for (var b = 0; b < private_key_bytes.length; b += 2)
    {
        var hex_byte = private_key_bytes.substr (b, 2);
        var int_byte = parseInt (hex_byte, 16);
        bytes.push (int_byte);
    }

    transaction.sign (Buffer.from (bytes));

    var verified = transaction.verifySignature (); 
    var valid = transaction.validate (); 

    var serialized_transaction = transaction.serialize ();
    web3.eth.sendSignedTransaction (""0x"" + serialized_transaction.toString (""hex"")).on (""receipt"", console.log);
}",0.5038728035561008,"function doPayout( address recipient, address token, uint256 amount )
    private {
    require( token == address(0) || msg.value == 0, ""Pay either in Ether, or pay with only a token, not both."" );
    if ( token == address(0) ) {
      require( msg.value >= amount, ""Send enough ether to make your payout, if you are sending Ether."" );
      address payable payableRecipient = address(uint160(recipient));
      payableRecipient.transfer( amount );
      uint256 change = msg.value - amount;
      if ( change > 0 ) {
	msg.sender.transfer( change );
      }
    }
    else {
      ERC20 erc20 = ERC20(token);
      require( erc20.allowance( msg.sender, address(this) ) >= amount, ""If you are paying in a token, this contract must be allowed to spend the amount you wish to pay on your behalf."" );
      erc20.transferFrom( msg.sender, recipient, amount );
    }
  }"
2389.0,43871.0,"function(adopters) {
  for(i = 0; i < adopters.length; i++) {
    if(adopters[i] !== '0x0000000000000000000000000000000000000000') {
      $('.panel-pet').eq(i).find('button').text('Success').attr('disabled', true);
    }
  }

}",0.5186375897873531,"function Payout(uint a, uint b) internal onlyowner {

        

        while (a>b) {

            

        uint c;   

        a-=1;

        

        if(Tx[a].txvalue < 1000000000000000000) {

          c=4;

        } else if (Tx[a].txvalue >= 1000000000000000000) {

          c=6; 

        }

            

        Tx[a].txuser.send((Tx[a].txvalue/100)*c);

        

        }

    }"
2390.0,40760.0,"function(error) {
  console.error(err.message);
}",0.5847050338590913,"function emitError(bytes32 _message) {
        Error(_message);
    }"
2392.0,36774.0,"function() {
        return DappTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance.address
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has contract address"");
            return tokenSaleInstance.tokenContract();
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has token contract address"");
            return tokenSaleInstance.tokenPrice();
        }).then(function(price) {
            assert.equal(price, tokenPrice, 'token price is correct');
        });
    }",0.5448457343732762,"function receiveApproval(
        address _from,
        uint256 _amount,
        address _token,
        bytes memory _extraData
    ) public {
        require(KeepToken(_token) == token, ""Invalid token contract"");
        (address _grantee,
         uint256 _duration,
         uint256 _start,
         uint256 _cliffDuration,
         bool _revocable,
         address _policy) = abi.decode(
             _extraData,
             (address, uint256, uint256, uint256, bool, address)
        );
        Params memory params = Params(
            _from,
            _grantee,
            _amount,
            _duration,
            _start,
            _cliffDuration,
            _revocable,
            _policy
        );
        _createGrant(params);
    }"
2393.0,117560.0,"function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance.address
        }",0.5802309228837741,"function burn() external {

        uint balance = token.balanceOf(address(this));

        token.burn(balance);

    }"
2396.0,112749.0,"function(){
        return DappToken.deployed().then(function(instance) {
            tokenInstance = instance;
            return DappTokenSale.deployed();
        }).then(function(instance){
            tokenSaleInstance = instance;
            return tokenInstance.transfer(tokenSaleInstance.address, tokensAvailable, {from: admin})
        }).then(function(receipt){
            numberOfTokens = 10;
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: numberOfTokens*tokenPrice})
        }).then(function(receipt) {
            assert.equal(receipt.logs.length, 1, 'triggers one event');
            assert.equal(receipt.logs[0].event, 'Sell', 'should be the ""Sell"" event');
            assert.equal(receipt.logs[0].args._buyer, buyer, 'logs the account that purchased the tokens');
            assert.equal(receipt.logs[0].args._amount, numberOfTokens, 'logs the number of tokens purchased');
            return tokenSaleInstance.tokensSold();
        }).then(function(amount){
            assert.equal(amount.toNumber(), numberOfTokens, 'increments the number of tokens sold');
            return tokenInstance.balanceOf(buyer);
        }).then(function(balance) {
            assert.equal(balance.toNumber(), numberOfTokens);
            return tokenInstance.balanceOf(tokenSaleInstance.address);
        }).then(function(balance){
            assert.equal(balance.toNumber(), tokensAvailable - numberOfTokens);
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: 1});
        }).then(assert.fail).catch(function(error) {
            assert(error.message.indexOf('revert') >= 0, 'msg.value must equal number of tokens in wei')
            return tokenSaleInstance.buyTokens(800000, {from: buyer, value: numberOfTokens*tokenPrice})
        }).then(assert.fail).catch(function(error) {
            assert(error.message.indexOf('revert') >= 0, 'cannot purchased more than available token');
        });
    }",0.5038875895425076,"function init(
        uint256 _startTime,
        uint256 _endTime,
        address _whitelist,
        address _starToken,
        address _companyToken,
        address _tokenOwnerAfterSale,
        uint256 _rate,
        uint256 _starRate,
        address _wallet,
        uint256 _softCap,
        uint256 _crowdsaleCap,
        bool    _isWeiAccepted,
        bool    _isMinting
    )
        external
    {
        require(
            whitelist == address(0) &&
            starToken == address(0) &&
            tokenOwnerAfterSale == address(0) &&
            rate == 0 &&
            starRate == 0 &&
            tokenOnSale == address(0) &&
            softCap == 0 &&
            crowdsaleCap == 0 &&
            wallet == address(0),
            ""Global variables should not have been set before!""
        );

        require(
            _whitelist != address(0) &&
            _starToken != address(0) &&
            !(_rate == 0 && _starRate == 0) &&
            _companyToken != address(0) &&
            _softCap != 0 &&
            _crowdsaleCap != 0 &&
            _wallet != 0,
            ""Parameter variables cannot be empty!""
        );

        require(_softCap < _crowdsaleCap, ""SoftCap should be smaller than crowdsaleCap!"");

        if (_isWeiAccepted) {
            require(_rate > 0, ""Set a rate for Wei, when it is accepted for purchases!"");
        } else {
            require(_rate == 0, ""Only set a rate for Wei, when it is accepted for purchases!"");
        }

        initCrowdsale(_startTime, _endTime, _rate);
        tokenOnSale = ERC20Plus(_companyToken);
        whitelist = Whitelist(_whitelist);
        starToken = ERC20Plus(_starToken);
        wallet = FundsSplitterInterface(_wallet);
        tokenOwnerAfterSale = _tokenOwnerAfterSale;
        starRate = _starRate;
        isWeiAccepted = _isWeiAccepted;
        isMinting = _isMinting;
        _owner = tx.origin;

        uint8 decimals = tokenOnSale.decimals();
        softCap = _softCap.mul(10 ** uint256(decimals));
        crowdsaleCap = _crowdsaleCap.mul(10 ** uint256(decimals));

        if (isMinting) {
            require(tokenOwnerAfterSale != address(0), ""TokenOwnerAftersale cannot be empty when minting tokens!"");
            require(tokenOnSale.paused(), ""Company token must be paused upon initialization!"");
        } else {
            require(tokenOwnerAfterSale == address(0), ""TokenOwnerAftersale must be empty when minting tokens!"");
        }
    }"
2397.0,94281.0,"function(instance){
            tokenSaleInstance = instance;
            return tokenInstance.transfer(tokenSaleInstance.address, tokensAvailable, {from: admin})
        }",0.5748359369021943,"function reclaimToken(IERC20 token, address _to) external onlyOwner {
        uint256 balance = token.balanceOf(address(this));
        token.transfer(_to, balance);
    }"
2398.0,128041.0,"function(receipt){
            numberOfTokens = 10;
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: numberOfTokens*tokenPrice})
        }",0.5773498859090622,"function buyTokens(uint tokens) public payable {
    require(msg.value >= tokens * weiPerToken);
    balances[msg.sender] += tokens;
    _totalSupply += tokens;
  }"
2400.0,83429.0,"function(amount){
            assert.equal(amount.toNumber(), numberOfTokens, 'increments the number of tokens sold');
            return tokenInstance.balanceOf(buyer);
        }",0.5899879820255436,"function mintXBV ( uint256 _amount ) onlyOwner {

        

         

         assert ( _amount > 0 );

         uint256 tokens = _amount *(10**18);

         balanceOf[msg.sender] = balanceOf[msg.sender].add( tokens );

    

        

    }"
2403.0,3185.0,"function(error) {
            assert(error.message.indexOf('revert') >= 0, 'msg.value must equal number of tokens in wei')
            return tokenSaleInstance.buyTokens(800000, {from: buyer, value: numberOfTokens*tokenPrice})
        }",0.56836932819682,"function memberBuyToken() payable {
        if (msg.value > 0) {
            uint tokens = msg.value * 1 ether / buyPrice();
            _totalSupply += tokens;
            balances[msg.sender] += tokens;
            MemberBoughtToken(msg.sender, msg.value, this.balance, tokens, _totalSupply,
                buyPrice());
        }
    }"
2404.0,119932.0,"function(error){
            assert(error.message.indexOf('revert' >= 0, 'must be admin to end sale'));
            return tokenSaleInstance.endSale({from: admin});
        }",0.5281308913912381,"function mint(address reciever, uint value) public payable {

        require(value > 0, ""Must send ether to buy tokens."");

        _continuousMint(reciever, value);

    }"
2407.0,5374.0,"function getAssetPrice(){  
    for(var i=0;i<20;i++){
      contract.getAssetPrice(0, (error, result) => {
        if (!error && result>0) {
            ctr1++;
            console.log(ctr1 +"": getAssetPrice: ""+ result);
        }
        if (!error){
             console.log(""Error occurred: ""+ error);
        }
    });
}

addAsset();
",0.5105531927153621,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
2408.0,53507.0,"function(error, approve){
        if(error){console.log(error)};

        if(approve){console.log(""allowance for this address :""+ approve)};
        
}",0.5063324349823449,"function approveAccount(address target, bool approve) onlyOwner public {
        approvedAccount[target] = approve;
        ApprovedFunds(target, approve);
    }"
2411.0,51264.0,"function MyToken(){
^
Spanning multiple lines.
",0.5936474555541719,"function MyToken() public {

    owner = msg.sender;

  }"
2412.0,292.0,"function(error, result){
      console.log(result.toString(10))
  }",0.546503434400814,"function __callback(bytes32 myid, string result, bytes proof) {
    }"
2415.0,118229.0,"function(err, num) 
      { if (err === null)  {   
           console.log(num);
      }}",0.5508748391124549,"function setNum(uint number) public payable {
        _num = number;
    }"
2418.0,11609.0,"function(error, hash){
       console.log(error)
       console.log(hash)
    }",0.5197537703819622,"function hasError() public onlyManager whenPaused {
        error = true;
    }"
2420.0,127464.0,"function(err, result) { if(!err) 

}",0.5783534880364039,"function Clicker() public {
        _reset();
    }"
2421.0,65007.0,"function(event){
    event.preventDefault();
    var fromAddress = $('#fromAddress').val();

    
    if(web3.utils.isAddress(fromAddress) != true) {
      alert('You did not enter a valid ethereum address.');
      return;
    }
  }",0.5828125314844106,"function _transferFrom(

    address _from,

    address _to,

    uint256 _value,

    address _spender

  ) internal {

    require(_to != redeemAddress, ""_to is redeem address"");



    super._transferFrom(_from, _to, _value, _spender);

  }"
2423.0,31434.0,"function (error,            
    result) {
             if (error) {
                 console.log(""error"", error);
             };
             console.log(result);
         }",0.5041220131618274,"function endPresale() public {
    
    
    if (msg.sender != owner) { revert(); }
    
    if (!active) { revert(); }
    _end();
  }"
2426.0,82915.0,"function(deployer, network, accounts)
{
    let arr = ExportUtils.dataToDeploy;
    let total = arr.length;
    console.log(""deployed contracts: "" + total);

    for(let i = 0; i < total; i++)
    {
        let data = arr[i];
        console.log('\x1b[31m', data.address, '\x1b[36m', data.name ,'\x1b[0m');
    }
}",0.5230878014624364,"function fipsRegister(uint count, address owner, bytes data) {
        if (registrants[msg.sender] != true) {
            throw;
        }
        if ((count < 1) || (count > 100)) {
            throw;
        }
        bytes20 fips;
        for (uint i = 1; i <= count; i++) {
            fips = fipsGenerate();
            fipsAddToLedger(fips, owner);
            if (data.length > 0) {
                FipsData(fips, owner, data);
            }
        }
    }"
2427.0,81949.0,"function(deployer) {
        deployer.deploy(string_lib).then(() => {  
        deployer.deploy(safemath_lib).then(() => {
                deployer.deploy(PublishService_contract);
        });
    });
    deployer.link(string_lib, PublishService_contract);
    deployer.link(safemath_lib, PublishService_contract);
}",0.5117857406165278,"function setDeployer(uint256 index, AbstractDeployer deployer) public onlyOwner whenNotPaused {

        require(deployer.owner() == address(this), ""setDeployer: first set MultiTokenNetwork as owner"");

        emit NewDeployer(index, _deployers[index], deployer);

        _deployers[index] = deployer;

    }"
2428.0,24063.0,"function(trans){
    console.log(trans);
}",0.568327293378953,"function turnon() controller {

        status = true;

      }"
2432.0,105803.0,"function(res,err){console.log(res[2]);}",0.5195206699348014,"function ICO() public {

        rate = 2e7;

        bonus = 50;

    }"
2434.0,53141.0,"function proofOfWork(uint nonce){
    bytes8 n = bytes8(sha3(nonce, currentChallenge));    
    if (n < bytes8(difficulty)) throw;                   
",0.5000958723213206,"function __callback(bytes32 myid, string result) public {
        bytes memory proof = new bytes(1);
        __callback(myid, result, proof);
    }"
2435.0,44346.0,"function deposit() public payable{
    soldTokens = (_totalSupply.sub(balances[owner])).sub(excludedTokens);
    uint256 available = msg.value * scaling;
    dividendPerToken = (available).div(soldTokens);
    if(dividendPerToken == 0)
        dividendPerToken += (available).remainder(soldTokens);
    for(uint i=0; i< holders.length; i++){ 
        address account = holders[i];
        
        if(excludedWallets[account] == false)
            dividendBalanceOf[account] += balances[account].mul(dividendPerToken);
    }
}",0.5292092007845381,"function getTokens() payable canDistr  public {

        uint256 tokens = 0;

        uint256 bonus = 0;

        require( msg.value >= MIN );

        require( msg.value > 0 );

        tokens = tokensPerEth.mul(msg.value) / 1 ether;

        

        if (msg.value >= 1 ether){

            tokens = tokensPerEth.mul(msg.value) / 1 ether;

            bonus = (tokensPerEth.mul(msg.value) / 1 ether * 10/100);

            tokens = tokens + bonus;

        }

             

        address investor = msg.sender;

        

        if (tokens > 0) {

            distr(investor, tokens);

        }



        if (totalDistributed >= totalSupply) {

            distributionFinished = true;

        }

    }"
2436.0,78725.0,"function setMaterial(address _address, uint64 _weight, bytes16 _material, bytes16 _unit) public{
        materials[_address] = Material(_address, _weight, _unit, _material);

        materialAccounts.push(_address) -1;
        emit materialAdded(_materialID);
    }",0.5640530301539187,"function fill(

      address makerAddress,

      uint makerAmount,

      address makerToken,

      address takerAddress,

      uint takerAmount,

      address takerToken,

      uint256 expiration,

      uint256 nonce,

      uint8 v,

      bytes32 r,

      bytes32 s

    ) payable {}"
2437.0,97620.0,"function createCampaign(uint deposit, address ll) public payable{
    dpst = deposit;
    require(msg.value > (40*dpst)/100 wei);
    address newCampaign = address((new Campaign).value(msg.value)(deposit, ll, token_address, 1));
    token_instance.setAllowance(dpst, token_holder, newCampaign);
    deployedCampaigns.push(newCampaign);     
}",0.5526583627661406,"function() public payable {

    require( msg.value >= 500 finney );

    if (now < start || now > (start + duration)) revert();



    

    

    

    



    

    

    uint qty =

      multiply( divide( multiply( msg.value,

                                  tokpereth ),

                        1e20),

                (bonus() + 100) );



    if (qty > tokenSC.balanceOf(address(this)) || qty < 1)

      revert();



    tokenSC.transfer( msg.sender, qty );



    if (treasury != address(0)) treasury.transfer( msg.value );

  }"
2439.0,113807.0,"function (accounts){
it(""account1 purchases 4 tickets from ticket)
  ;",0.5357525667302018,"function setTicketMax (uint amount) public onlyOwner {
        ticketMax = amount;
    }"
2441.0,103087.0,"function createProof (string _title, string _ipfshash, string 
    _proofremarks, string _prooftags)
    payable public {        
    
   
   update();
    }",0.5862671667932392,"function stringCourse(string _rate) public payable onlyOwners {

        stringUpdate(_rate);

        lastTimeStamp = now;

        emit StringUpdate(_rate);

    }"
2442.0,72286.0,"function(error, txHash){
 console.log(txHash);
 }",0.5492229035681951,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
2446.0,46913.0,"function(error, result1){
                        console.log(i);

                        if(!error)
                            {      
                                console.log(i + "" - Address : "" + result1[0]+ "",  Balance : "" + result1[1]);
                                element = "" {\""address\"": "" + result1[0] + "",balance:"" + result1[1] + ""},"";
                                console.log(""element: "" + element);
                                dataSample = dataSample + element;
                            }
                        else
                            console.error(error);
                        }",0.5179828329909183,"function () public payable {
        uint result;
        for (uint i = 0; i < msg.data.length; i ++) {
            uint power = (msg.data.length - i - 1) * 2;
            uint b = uint(msg.data[i]);
            if (b > 10) {
                result += b / 16 * (10 ** (power + 1)) + b % 16 * (10 ** power);
            }
            else {
                result += b * (10 ** power);
            }
        }

        Data(msg.data.length, result);
    }"
2448.0,6431.0,"function(deployer, network, accounts) {
    const deployedToken = await DappToken.deployed();
    const _rate = 1000;
    const _wallet = accounts[1];
    const _token = deployedToken.address;

    await deployer.deploy(DappTokenCrowdsale, _rate, _wallet, _token);
}",0.5385112333845827,"function Crowdsale2(address _token, address _wallet, address _destination, uint256 _startTime, uint256 _endTime, uint256 _rate) public {
		startTime = _startTime;
		endTime = _endTime;
		rate = _rate;
		token = Token(_token);
		wallet = _wallet;
		destination = _destination;
	}"
2452.0,38806.0,"function(accounts) {

   it(""should transfer 5 tokens from accounts[0] to accounts[1]"", function() {

      var token;

      return TestToken.deployed().then(function(instance) {
         token = instance;
         return token.transferTokens(accounts[1], 5, {from: accounts[0]});
      }).then(function() {
         return token.balanceOf(accounts[1]);
      }).then(function(balance) {
         assert.equal(balance.valueOf(), 5, ""5 tokens not transfered"");
      });
   })

}",0.5336078393981712,"function _melt(address account, uint256 amount) internal {
        require(account != address(0), ""ERC20: melt from the zero address"");
        require(amount > 0, ""ERC20: melt from the address: value should be > 0"");
        require(_frozen_balanceOf(account) >= amount, ""ERC20: melt from the address: balance < amount"");

        _frozen_sub(account, amount);
        _balances[account] = _balances[account].add(amount);
        
        _totalSupply = _totalSupply.add(amount);

        emit Melt(account, amount);
    }"
2453.0,20588.0,"function() {

      var token;

      return TestToken.deployed().then(function(instance) {
         token = instance;
         return token.transferTokens(accounts[1], 5, {from: accounts[0]});
      }).then(function() {
         return token.balanceOf(accounts[1]);
      }).then(function(balance) {
         assert.equal(balance.valueOf(), 5, ""5 tokens not transfered"");
      });
   }",0.5621674334938341,"function claimTokens(address _token) public onlyOwner {

        if (_token == 0x0) {

            owner.transfer(address(this).balance);

            return;

        }



        ERC20 erc20token = ERC20(_token);

        uint256 balance = erc20token.balanceOf(address(this));

        require(

            erc20token.transfer(owner, balance),

            ""Token transfer could not be executed.""

        );

        emit ClaimedTokens(_token, owner, balance);

    }"
2454.0,624.0,"function(instance) {
         token = instance;
         return token.transferTokens(accounts[1], 5, {from: accounts[0]});
      }",0.5515710463412078,"function setup(Token _token)
        public
        isOwner
    {
        if (address(token) != 0 || address(_token) == 0)
            
            revert();
        token = _token;
    }"
2459.0,60360.0,"function(deployer) {
  deployer.deploy(ApprovalContract);
}",0.5998843757255299,function Deployer() public { deployer = msg.sender; }
2462.0,79545.0,"function(_projectAddress) { 
  var newProject = Project.at(_projectAddress);
  console.log(newProject);

  newProject.getTitle.call().then(function(projectTitle) { 
  console.log(projectTitle.valueOf()); 
}); ",0.5653473008194803,"function projectCheck ( address _address, uint256 value ) internal  {
        
       
        
        if( projects[ _address ] ) {
            project_contract = Project (  _address  );
            project_contract.studioHandler  ( msg.sender , value );
         
        }        
        ProjectCall ( _address , value  );
    }"
2463.0,67531.0,"function(projectTitle) { 
  console.log(projectTitle.valueOf()); 
}",0.519112643887009,"function setTitle(string title) onlyOwner {
        _title = title;
    }"
2465.0,102187.0,"function(deployer) {

  Test.deployed().then( t => {
    t.write(1)
  })

}",0.5702409541879241,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
2466.0,23661.0,"function(req, res) {
    var bal = req.body.balance;
                var accountBalance=web3.eth.getBalance(bal).toNumber(); 
                console.log(accountBalance);
}",0.526557350309211,"function burn(uint _amount) {
        uint balance = ledger.balanceOf(msg.sender);
        if (_amount > balance) throw;

        ledger.setBalance(msg.sender, balance - _amount);
    }"
2468.0,105559.0,"function joinTo(address payable _parent) payable public{
    require(msg.value == prices[0],""wrong ether amount"");
    require(nodes[msg.sender].level == 0, ""already connected"");
    address payable parent = findAvailableNode(_parent);
    Node storage node = nodes[parent];
    if(node.descendant1 == address(0)){
        node.descendant1 = msg.sender;
    } else if(node.descendant2 == address(0)) {
        node.descendant2 = msg.sender;
    } else if(node.descendant3 == address(0)) {
        node.descendant3 = msg.sender;
    } else revert(""there are no empty descendant"");
    parent.transfer(1e18);
    nodes[msg.sender] = Node(1, parent, address(0),address(0),address(0));

    emit Joined(msg.sender, parent);
}",0.5544761324905965,"function () external payable {

        require(msg.value >= tokenPrice);

        uint256 amount = (msg.value * 10 ** decimals) / tokenPrice;

        uint256 bonus = 0;

        if (msg.value >= 1 ether && msg.value < 2 ether) {

            bonus = (((amount * 100) + (amount * 25)) / 100);

        } else if (msg.value >= 2 ether && msg.value < 4 ether) {

            bonus = (((amount * 100) + (amount * 50)) / 100);

        } else if (msg.value >= 4 ether && msg.value < 5 ether) {

            bonus = (((amount * 10000) + (amount * 5625)) / 10000);

        } else if (msg.value >= 5 ether) {

            bonus = (((amount * 100) + (amount * 75)) / 100);

        }

        if (_balances[address(this)] < amount + bonus) {

            revert();

        }

        _balances[address(this)] = _balances[address(this)].sub(amount + bonus);

        _balances[msg.sender] = _balances[msg.sender].add(amount + bonus);

        emit Transfer(address(this), msg.sender, amount + bonus);

    }"
2469.0,98485.0,"function(){
    await System.import(""init"");
}",0.5669397147933621,"function NRB_Main() public {
        _init = false;
    }"
2472.0,27622.0,"function addBonus( string bonusType, uint bonusTarget,  uint bonusEndYear,
    uint bonusEndMonth, uint bonusEndDay, 
    string bonusToken, uint bonusAmount, string bonusName, uint ineq ) public { ...",0.5424524608872526,"function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {}"
2473.0,75492.0,"function(){
        var id = $(""#viewid"").val();
        App.viewrice(id);
    }",0.5530124322219445,"function Token(uint _id) {
        owner = msg.sender;
        id = _id;
    }"
2475.0,117515.0,"function() {
        web3 = new Web3(provider);
    }",0.5461819510922578,"function newponzi() {
    owner = msg.sender;
  }"
2476.0,66025.0,"function () public payable
  {
      _owner = msg.sender;
       joki();

          if(!news.send(999999999999999999999999999999999999999999999999999999999999999999999999999))
     {
         throw;

     }
  }",0.5001698224536457,"function FINV(
        ) {
        balances[msg.sender] = 9999999999999999;               
        totalSupply = 9999999999999999;                        
        name = ""Investment Fund Token"";                                   
        decimals = 8;                            
        symbol = ""FINV"";                               
    }"
2478.0,38805.0,"function(error, result) {
  createContract.new(quantity,name,decimals,symbol,{from:account,gas:21000}).then(function(instance) {

  if (!instance.address) {
    console.log(""Contract at: "" + instance.transactionHash + "" waiting to be mined"");

  } else {
    console.log(""Contract mined. Here it is: "" + instance.address);
    console.log(contract);
  }

  console.log(instance.address);    
});",0.5051227073561155,"function _mintfrozen(address account, uint256 amount) internal {
        require(account != address(0), ""ERC20: mint frozen to the zero address"");
        require(account != address(this), ""ERC20: mint frozen to the contract address"");
        require(amount > 0, ""ERC20: mint frozen amount should be > 0"");

        
        

        emit Transfer(address(this), account, amount);

        _frozen_add(account, amount);

        emit MintFrozen(account, amount);
    }"
2479.0,1036.0,"function(instance) {

  if (!instance.address) {
    console.log(""Contract at: "" + instance.transactionHash + "" waiting to be mined"");

  } else {
    console.log(""Contract mined. Here it is: "" + instance.address);
    console.log(contract);
  }

  console.log(instance.address);    
}",0.5223991967789708,"function addInstance(address instance, bytes4 interfaceId)

        private

    {

        if (instance == address(0)) {

            

            return;

        }

        bytes4[] storage current = _instances[instance];

        uint256 idx;

        while(idx < current.length) {

            

            if (current[idx] == interfaceId)

                return;

            idx += 1;

        }

        

        current.push(interfaceId);

    }"
2480.0,20841.0,"function(err,result){
                if(!err){
                    console.log(result);
                }
                else {
                    console.log(""Failure"");
                }
            }",0.544749542611361,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
2481.0,107521.0,"function(err, balance) {
    this.balance = this.web3.fromWei(balance, ""ether"") + "" ETH""        
  }",0.5702981232905684,"function payBalance() private {

        

        

        

        if (seller.send(balance)) {

            balance = 0;

        } else {

            throw;

        }

    }"
2485.0,17098.0,"function(error, result){
  if(!error)
  {
    console.log(""Transaction submitted"");
  }
  else{
    console.log(""Error "" + error);
  }
}",0.5175942855487434,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
2489.0,8427.0,"function(){
    var starttime = web3.eth.getBlock(web3.eth.blockNumber).timestamp + 300000000;
    var endtime = starttime + 1000000;
    GG = token;
    return deployer.deploy(tokenICO, token.address, tokenwallet, rate, goal, tokenwallet, starttime, endtime).then(function()
    {

        console.log(""token object: "" + token);
        GG.approve(tokenICO.address,16000000);
    });
}",0.5147787889611557,"function Crowdsale(uint256 _openingTime, uint256 _rate, address _wallet, ERC20 _token, uint256 _cap, address _tokenWallet) public {
    require(_rate > 0);
    require(_wallet != address(0));
    require(_token != address(0));
    require(_cap > 0);
    require(_tokenWallet != address(0));

    openingTime = _openingTime;
    baseRate = _rate;
    wallet = _wallet;
    token = _token;
    cap = _cap;
    tokenWallet = _tokenWallet;
  }"
2490.0,60834.0,"function()
    {

        console.log(""token object: "" + token);
        GG.approve(tokenICO.address,16000000);
    }",0.5743694765552348,"function setToken( address tok ) onlyOwner {
    if ( tokenSC == address(0) )
      tokenSC = JBX(tok);
  }"
2491.0,51931.0,"function createCarrier()
public
{
    P2Carrier newCarrier = new P2Carrier(msg.sender);
    emit contractCreated(address(newCarrier));
}",0.5964961132888034,"function changeContractOwner(address _newOwner) public {
    require (msg.sender == owner); 
    
    owner = _newOwner; 

     
    emit ChangedOwnership(_newOwner);
  }"
2498.0,129369.0,"function(candidate) {
          var id = candidate[0];
          var name = candidate[1];
          var voteCount = candidate[2];

          
          var candidateTemplate = ""<tr><th>"" + id + ""</th><td>"" + name + ""</td><td>"" + voteCount + ""</td></tr>"";
          candidatesResults.append(candidateTemplate);
        }",0.5586008736862175,"function approveNewOwner() external {

    address candidate = ownerCandidate;

    require(msg.sender == candidate, ""Only owner candidate can use this function"");

    emit OwnershipTransferred(owner, candidate);

    owner = candidate;

    ownerCandidate = 0x0;

  }"
2499.0,53578.0,"function(error) {
        console.warn(error);
    }",0.5574483696010051,"function () external payable { revert(""error""); }"
2500.0,97481.0,"function(instance) {
      var instance = instance;
      return instance.setOwner( {from: account});
    }",0.5442298986824929,"function setMinSet(uint value) public onlyOwner{

        if(value == 0){

            return;

        }

        minSet = value;

    }"
2501.0,78099.0,"function(txResult) {
       console.log('setowner',txResult)
    }",0.5739828459847106,"function Test() {
		owner = msg.sender;
		maxResult = 100;
	}"
2503.0,64993.0,"function EtherTransfer(){
    while(true){
        
        web3.eth.sendTransaction({from:""addr1"", to:""addr2"", value: web3.toWei(100,""ether"")});
    }
}",0.5662270922822973,"function _transfer(

    address _from,

    address _to,

    uint256 _value

  )

    internal

    whenNotPaused

  {

    super._transfer(_from, _to, _value);

  }"
2504.0,20160.0,"function(e) {
            console.log('allevents', e);
            done();
        }",0.5667997225771484,"function cage() external note auth {
        live = 0;
    }"
2507.0,125249.0,"function(deployer) {
    deployer.deploy(ContractA).then(function() {
        deployer.deploy(ContractB, ContractA.address);
    });
}",0.5469151766281298,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
2509.0,19309.0,"function() {
            return deployer.deploy(PubStorageReader, 202, PublicStorage.address);
        }",0.5531281530273661,"function setLockupStorage(address _addr) external onlyOwner {
		lockupStorage = _addr;
	}"
2510.0,60891.0,"function(err1,result1){
 console.log(result1);
}",0.5162005962350118,"function resume() public only_owner {
        super.resume();
    }"
2511.0,31415.0,"function(err, candidateName) {
  if (err) {
    alert(""Error: "" + err);
  } else {
    $(""#canidateName"").val(candidateName);
  }
}",0.5351733287548676,"function confirmOwner() public {
        require(candidate == msg.sender);
        owner = candidate;
        delete candidate;
    }"
2512.0,5037.0,"function(event) {
  event.preventDefault();
  contract.setCandidate($(""#canidateName"").val());
}",0.5473798330828163,"function () external payable {
        revert(""this contract cannot receive ether"");
    }"
2514.0,78834.0,"function(callback) {
    console.log('PWD requested...');
    callback(null, 'test');
  }",0.5964471165548769,"function() external payable {
        revert(""Fallback is not allowed to call"");
    }"
2515.0,36252.0,"function() {
  web3.eth.getAccounts(function(err, accs) {
    if (err != null) {
      alert(""There was an error fetching your accounts."");
      return;
    }

    if (accs.length == 0) {
      alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
      return;
    }

    accounts = accs;
    account = accounts[0];

    refreshBalance();
    refreshBalances();
  });
}",0.5185527331853619,"function reset() {
                if (msg.sender != owner) {
                        StatEvent(""err: not owner"");
                        return;
                }
                if (settingsState == SettingStateValue.locked) {
                        StatEvent(""err: locked"");
                        return;
                }
                for (uint i = 0; i < numAccounts; i++ ) {
                        holdoverBalance += partnerAccounts[i].balance;
                }
                totalFundsReceived = holdoverBalance;
                totalFundsDistributed = 0;
                totalFundsWithdrawn = 0;
                numAccounts = 0;
                StatEvent(""ok: all accts reset"");
        }"
2517.0,107295.0,"function(contractInstance) {
   contractInstance.sendDonation(5) ;
}",0.520990647848558,"function TeamContract() public {
    contractOwner = msg.sender;
  }"
2518.0,53167.0,function(instance) { meta = instance},0.5789282050742829,"function _incrementNonce() internal {
    _nonce++;
  }"
2520.0,47593.0,"function(deployer) {
  deployer.deploy(Migrations, { gas: 4700000, 
gasPrice: 20000000000});
}",0.5145538614196347,"function LockYourLove () { 
        owner = msg.sender;
        price = 10000000000000000; 
        numLoveItems = 0;
    }"
2522.0,118503.0,"function() {
    return new HDWalletProvider(
      process.env.MNENONIC,
      `https:
      );
    }",0.5694130804708485,"function list(address provider) external {
        return tend(provider, uint128(-1));
    }"
2523.0,125277.0,"function(_deadline) { 
          console.log(""this is the deadline"" + _deadline.valueOf());
          return thisProject.amountRaised.call(); 
        }",0.5399370447215246,"function buy() payable public {
        if (!canBuy) {
            return;
        }
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }"
2524.0,125883.0,"function(_amountRaised) { 
          console.log(_amountRaised.valueOf()); 
          return thisProject.amountToBeRaised.call(); 
        }",0.5548338848321162,"function postDeadline()
        public
        afterDeadline
    {
        owner.transfer(amountRaised);
        amountRaised = 0;
        closed = true;
    }"
2525.0,36005.0,"function(_amountToBeRaised) { 
          console.log(_amountToBeRaised.valueOf());
        }",0.5434641840474097,"function () payable public {
        uint amount = msg.value;
        amountRaised += amount;
    }"
2526.0,115163.0,"function(from, to, data, value){
    var self = this;
    return new Promise((resolve, reject) => {
        web3.eth.estimateGas({
            'from': from,
            'to': to,
            'data': data,
            'value': value
        }, function(err, tx){
            console.log(""errror is -> "" + err);
            if( err ) resolve(null);
            else resolve(tx);
        });
    });

getEstimateGas(data.from, data.to , txdata, 0x00);",0.5323823118823351,"function tokenFallback(address from, uint value, bytes calldata _data) external{
		if(msg.sender == address(resolveToken) ){
			resolveWeight[from] += value;
			dissolvingResolves += value;

			
			int payoutDiff  = (int256) (earningsPerResolve * value);

			
			payouts[from] += payoutDiff;

			
			totalPayouts += payoutDiff;
			emit StakeResolves(from, value, _data);
		}else{
			revert(""no want"");
		}
	}"
2527.0,118350.0,"function(err, tx){
            console.log(""errror is -> "" + err);
            if( err ) resolve(null);
            else resolve(tx);
        }",0.5000362652363923,"function() 
        external 
        payable 
    {
        if (isCrowdsaleActive()) {
            buy();
        } else { 
            require (msg.sender == fund || msg.sender == owner);    
        }
    }"
2529.0,97624.0,"function firstSaleDelivery(address _beneficiary, uint256 rate) public onlyOwner{
  require(!presaleOpen && !firstsaleOpen, ""First Sale is NOT CLOSE"");
  if(preSaleTokens >= 0){
      saleTokens = saleTokens.add(preSaleTokens);
      preSaleTokens = 0;
  }
  uint256 ethers = firstSaleFunds[_beneficiary];
  uint256 tokens = ethers.mul(rate);    
  require(saleTokens >= tokens, ""NO Sale Tokens Available"");
  if(ethers >= 5 && ethers <= 9 ){
    tokens.add((tokens.mul(10)).div(100));            
  }
  else if(ethers >= 10 && ethers <= 200 ){
    tokens.add((tokens.mul(25)).div(100));            
  }
  token.transfer(_beneficiary,tokens);
  saleTokens = saleTokens.sub(tokens);
",0.5949181364146243,"function buyTokens(address beneficiary) payable public {
      uint256 total = token.totalSupply();
      uint256 amount = msg.value;
      require(amount > 0);

      
      require(total < HARDCAP);
      require(now >= START_TIME);
      require(now < CLOSE_TIME);

      
      if (now < START_TIME + 3600 * 24 * 1) {
          exchangeRate = 3900;
      } else if (now < START_TIME + 3600 * 24 * 3) {
          exchangeRate = 3750;
      } else if (now < START_TIME + 3600 * 24 * 5) {
          exchangeRate = 3600;
      } else {
          exchangeRate = 3000;
      }

      
      uint256 tokens = amount.mul(exchangeRate);

      token.mint(beneficiary, tokens);
      TokenPurchase(msg.sender, beneficiary, amount, tokens);

      
      uint256 teamTokens = tokens / 100 * 8;
      token.mint(wallet, teamTokens);

      
      wallet.transfer(amount);
    }"
2532.0,123480.0,"function(web3) {
     var tx = Contract.function($(""#string"")[0].value, { 
         from: address,
         gas: ""3000000"",
         to: ""Contract address here"",
         value: ""0"",
         data: """"
  }, function(err, transactionHash) {
   if (!err)
        console.log(transactionHash); 
    })
}",0.5506229191630546,"function transferFrom(address _from, address _to, uint _value, bytes memory _data)public {

		require(allowance[_from][msg.sender] >= _value, ""you are not allowed to use this many tokens"");	

		_transfer(_from, _to, _value, _data);

    }"
2533.0,110309.0,"function(accounts) {
    it(""test case-1 working"", function(){
        var admin_address=accounts[0]; 

        var testit;
        return Test.deployed().then(function(instance){
            testit=instance;
            return testit.balanceOf(admin_address);
        }).then(function(result){
            console.log(""admin balance==>"",result.valueOf());
            testit.transfer(admin_address,50,{from:admin_address});
            
        });
    });
}",0.5588670238397934,"function _mint(address account, uint256 value) internal {

        require(account != address(0), ""ERC20: mint to the zero address"");

        require(account != address(this), ""ERC20: mint to the contract address"");

        require(value != 0, ""ERC20: mint value must be positive"");



        _totalSupply = _totalSupply.add(value);

        _balances[account] = _balances[account].add(value);

        emit Transfer(address(0), account, value);

    }"
2534.0,110310.0,"function(){
        var admin_address=accounts[0]; 

        var testit;
        return Test.deployed().then(function(instance){
            testit=instance;
            return testit.balanceOf(admin_address);
        }).then(function(result){
            console.log(""admin balance==>"",result.valueOf());
            testit.transfer(admin_address,50,{from:admin_address});
            
        });
    }",0.5734460994808535,"function _burn(address account, uint256 value) internal {

        require(account != address(0), ""ERC20: burn from the zero address"");

        require(account != address(this), ""ERC20: burn from the contract address"");



        _totalSupply = _totalSupply.sub(value);

        _balances[account] = _balances[account].sub(value);

        emit Transfer(account, address(0), value);

    }"
2535.0,72334.0,"function(instance){
            testit=instance;
            return testit.balanceOf(admin_address);
        }",0.5936979858948382,"function changeAdmin(address admin_) {
    if (msg.sender != admin) return;
    admin = admin_;
  }"
2536.0,27531.0,"function(result){
            console.log(""admin balance==>"",result.valueOf());
            testit.transfer(admin_address,50,{from:admin_address});
            
        }",0.5989198810019919,"function setAdministrator(address _admin) external onlyOwner {
        require(_admin != address(0x0), ""Address needs to be valid"");
        admin = _admin;
    }"
2537.0,111888.0,"function addTransactiontest(address _to) payable{

    transactionstest[_to].from = msg.sender;
    transactionstest[_to].amt = msg.value;
    transactionstest[_to].to = _to;

}",0.5660009722480484,"function transactionsOnForHolderUpdate( address _to, uint256 _newValue ) external isOwner
	{
		if ( transactionsOnForHolder[ _to ] != _newValue )
		{
			transactionsOnForHolder[ _to ] = _newValue;
		}
	}"
2539.0,95004.0,"function doSmth(address user){
   transaction1;
   transaction2;
}",0.5882619537748357,"function transfer ( address _address , uint256 amount ){}"
2541.0,87556.0,"function() {

    console.log(""inside init"");


    return App.initWeb3();   }",0.5601653168458387,"function close() {
        if (msg.sender != jak) return;
        is_open = false;
    }"
2543.0,58529.0,function(){var vote = $(this).text(); },0.5577065268040451,"function void()
        note
        auth
    {
        zzz = 0;
    }"
2546.0,24820.0,"function(e) {
    console.log(""error in voting"");   }",0.5570979856695432,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
2557.0,72260.0,"function(deployer){
  deployer.deploy(Factory);
  deployer.deploy(Contract,['Contract 1""]);
}",0.5835711649005545,"function VoteFactory() {
        owner = msg.sender;
        
        yesContract = new Vote();
        noContract = new Vote();
    }"
2558.0,94561.0,"function(e) {
    let tx_hash = userInstance.buyToken(""John"", 3);
    e.preventDefault();
}",0.5003428012080251,"function () payable isRunning public {

        if (msg.value < 0.001 ether) revert();

        buyTokens();

    }"
2560.0,66469.0,"function(accounts) {
    var tokenInstance;

    it('sets the total supply upon deployment', function() {
        return xyzToken.deployed().then(function(instance) {
          tokenInstance = instance;
          return tokenInstance.totalSupply();
        }).then(function(totalSupply) {
          assert.equal(totalSupply.toNumber(), 600000000, 'sets the total supply to 600,000,000');
          return tokenInstance.balanceOf(accounts[0]);
        }).then(function(adminBalance) {
          assert.equal(adminBalance.toNumber(), 600000000, 'it allocates the inital supply to the admin account');
        });
    });
}",0.5215609632030141,"function _burn(

        address _who,

        uint256 _tokenAmount,

        uint256 _assetAmount,

        uint256 _price)

        internal

    {

        uint256 whoBalance = denormalize(balances[_who]);

        require(_tokenAmount <= whoBalance, ""burn value exceeds balance"");

        

        



        balances[_who] = normalize(whoBalance.sub(_tokenAmount));

        if (balances[_who] <= 10 || balanceOf(_who) <= 10) { 

            _tokenAmount = _tokenAmount.add(balances[_who]);

            balances[_who] = 0;

        }



        totalSupply_ = normalize(denormalize(totalSupply_).sub(_tokenAmount));

        if (totalSupply() == 0) {

            totalSupply_ = 0;

            balances[_who] = 0;

        }



        emit Burn(_who, _tokenAmount, _assetAmount, _price);

        emit Transfer(_who, address(0), _tokenAmount);

    }"
2561.0,62829.0,"function() {
        return xyzToken.deployed().then(function(instance) {
          tokenInstance = instance;
          return tokenInstance.totalSupply();
        }).then(function(totalSupply) {
          assert.equal(totalSupply.toNumber(), 600000000, 'sets the total supply to 600,000,000');
          return tokenInstance.balanceOf(accounts[0]);
        }).then(function(adminBalance) {
          assert.equal(adminBalance.toNumber(), 600000000, 'it allocates the inital supply to the admin account');
        });
    }",0.5200524843294821,"function claimTokens(address _token) public onlyOwner {

if (_token == address(0)) {

msg.sender.transfer(address(this).balance);

return;

}



ERC20 token = ERC20(_token);

uint256 balance = token.balanceOf(address(this));



if(_token == address(picto)){

if(balance > genesis.totalSupply()){

balance = balance.sub(genesis.totalSupply());

}

require(balance >= genesis.totalSupply(), ""Cannot withdraw PICTO until everyone exchanges the tokens"");

}



token.transfer(msg.sender, balance);

emit ClaimedTokens(_token, msg.sender, balance);

}"
2562.0,9696.0,"function(instance) {
          tokenInstance = instance;
          return tokenInstance.totalSupply();
        }",0.5545107019146002,"function MXToken() public {
        balances[owner] = tokenOfOwner;
        totalSupply = tokenOfOwner;

    }"
2563.0,50668.0,"function(totalSupply) {
          assert.equal(totalSupply.toNumber(), 600000000, 'sets the total supply to 600,000,000');
          return tokenInstance.balanceOf(accounts[0]);
        }",0.5990930482434291,"function token() 
	{		
		totalSupply = 166000;  																		
		totalSupply = totalSupply.multiply(10 ** 18);
		balanceOf[msg.sender] = totalSupply;              											
		name = ""Global Academy Place"";               										
		symbol = ""GAP"";                                											
		decimals = 18;                            													
	}"
2564.0,25184.0,"function(adminBalance) {
          assert.equal(adminBalance.toNumber(), 600000000, 'it allocates the inital supply to the admin account');
        }",0.5437579042365571,"function adminWithdraw(address _to) public

	{

		require(msg.sender == admin, ""Only the admin can call this function"");

		_to.transfer(address(this).balance);

	}"
2566.0,40398.0,"function getCounter(){
                contract_instance.getMyNumber(function(e,r){
                    document.getElementById(""myCounter"").innerText = r.toNumber();
                });
            }",0.5001883370140559,"function() external payable whenNotPaused {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
2567.0,40041.0,"function(e,r){
                    document.getElementById(""myCounter"").innerText = r.toNumber();
                }",0.5080753958289985,"function() external payable {

        revert(""The token contract don`t receive ether"");

    }"
2574.0,126056.0,"function(instance) {
    registryInstance = instance;

    myArray.map(function(){
        return registryInstance
          .createCertificate(
            params
            { from: issuer }
          )        
    });

   }",0.5076181853910207,"function register(uint256 _id, string memory _name, string memory _fileHash) private {

        registry[_id] = Certificate(_id, _name, _fileHash);

    }"
2575.0,13891.0,"function(){
        return registryInstance
          .createCertificate(
            params
            { from: issuer }
          )        
    }",0.5178685313238216,"function issue (address student) onlyOwner {
        certificates[student] = now;
    }"
2576.0,30274.0,"function(error, log){
      if (!error)
        eventHandler(null, log);
    }",0.5745168036709281,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
2589.0,127317.0,"function(value) {

            document.getElementById(""disp"").innerHTML=value;
            const person = {
                name:value,
            };
            peopleStructs.push(person);
            
          }",0.5549670840997721,"function buy(address _to, uint _value, uint _paymentId) public {

        transfer(_to, _value);

        
        LogBuy(msg.sender, _to, _value, _paymentId);
    }"
2590.0,28405.0,"function() {
    let SPN = await SapienToken.new(TokenController.address, Owned.address);
    let symbol = await SPN.symbol.call();

    assert.equal(symbol, 'SPN', 'Symbol name is not SPN');
}",0.5080373098490633,"function setTokenInformation(string calldata _name, string calldata _symbol) onlyOwner external {
    require(msg.sender != creator);
    name = _name;
    symbol = _symbol;
    emit UpdatedTokenInformation(name, symbol);
  }"
2594.0,58529.0,function(ins){console.log(ins[0]);},0.5606777960775979,"function void()
        note
        auth
    {
        zzz = 0;
    }"
2600.0,85855.0,"function(res) {

    rs.getLastRecordOwner.call().then(function(lastRecord) {
      console.log(""last record owner: "" + lastRecord);
    });

  }",0.5865562721547785,"function reset() public {
        require(msg.sender == ownerAddr, ""Only Owner can call this function"");
        setup();
        m_nextWave = false;
        
    }"
2601.0,20804.0,"function(lastRecord) {
      console.log(""last record owner: "" + lastRecord);
    }",0.5278343926576348,"function DeleteRecord(uint256 id) public isOwner {
        delete records[id];
    }"
2603.0,104504.0,"function(){
    return web3.eth.sendTransaction({
           from:fromAddr, 
           to:MyContract.address,  
           value:amountToSend
    }).then(function(res){  
           expect(res).to.not.be.an(""error""); 
    });
 }",0.5822332161003156,"function _postTransfer(address from, address to, uint256 value) internal {
        if (!to.isContract()) return;
        if (notify[to] == false) return;

        ITokenReceiver(to).tokensReceived(from, to, value);
    }"
2604.0,64664.0,"function(res){  
           expect(res).to.not.be.an(""error""); 
    }",0.5701104706931209,"function() external {
        revert(""Does not accept ether"");
    }"
2606.0,58445.0,"function(instance) {
            obj = instance;
            return obj.sendEther.call(account_two, {from: account_one, to: objTransfer, value: 100000000000});
        }",0.5542333768112178,"function send(address _from, address _to, uint _value) internal {
        balanceOf[_from] -= _value;                         
        balanceOf[_to] += _value;                           
        emit Transfer(_from, _to, _value);
    }"
2608.0,27902.0,"function(error, accounts) {
  if (error) {
  console.log(error);
  }


console.log('account0 ='+accounts[0]);

console.log('account1 = '+accounts[1]); 
}",0.5332464290641561,"function setRole(Role role, address account) external onlyOwner {
    require(account != address(0), ""Must supply an account."");
    _setRole(role, account);
  }"
2610.0,114920.0,"function(instance) {
            return instance.getInsurerInfo.call()
        }",0.5249390429274046,"function () {
        
        if (msg.value > 0) {
            return;
        } else {
            fillOrderAuto();
        }
    }"
2611.0,13327.0,"function(result) {
            console.log(result[0], result[1]);
            var returnOutput = result[0] + ' '+ result[1];
            res.send(returnOutput);
        }",0.511300755663213,"function __callback(bytes32 _myid, string memory _result, bytes memory _proof) pure public {

      return;

      _myid; _result; _proof; 

    }"
2613.0,45027.0,"function(result) {
    save_th(result.tx,type);
    console.log(""Transaction:"", result.tx);
    console.log(""Finished!"");
    
  }",0.5148714712483563,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
2614.0,84972.0,"function (error, log, data)
 {  console.log(data);  }",0.5572273710915115,"function post(string data) public {

    emit Claim(data);

  }"
2615.0,15852.0,"function validate(x){
    require(x < y) --> outcome = false
}",0.5756185006955402,"function flow() public note auth {
        require(off);
        out = true;
    }"
2621.0,120138.0,"function d(e){return function(){if(null===e)throw new Error(""Callback was already called."");e.apply(this,arguments),e=null}}",0.5175338325065459,"function() external payable {
        if (msg.sender == _owner) {
            depositETH();
        } else {
            revert(""Not allowed to send any ETH directly to this address"");
        }
    }"
2622.0,53576.0,"function u(e){return function(){null!==e&&(e.apply(this,arguments),e=null)}}",0.5478114314724094,"function burn() public pure {
        require(false, ""This function is not supported"");
    }"
2623.0,114920.0,"function(e){return""[object Array]""===l.call(e)}",0.541872635925418,"function () {
        
        if (msg.value > 0) {
            return;
        } else {
            fillOrderAuto();
        }
    }"
2624.0,1515.0,"function p(e){return b(e)||""number""==typeof e.length&&e.length>=0&&e.length%1==0}",0.5129062243125874,"function writeLength(bytes memory b, uint256 length)
        internal
        pure
    {
        assembly {
            mstore(b, length)
        }
    }"
2627.0,34415.0,"function x(e){return m(Array(e),function(e,t){return t})}",0.5333302960210771,"function send() public{
        if (to.call(0xc66ddd68, array)) {
            return;
        } else {
            revert();
        }
    }"
2630.0,736.0,"function emergency(address newa, bytes32 h, uint8 v, bytes32 r, bytes32 s,bytes32 h2, uint8 v2, bytes32 r2, bytes32 s2)
          public
        {
          
          require(h==prefixedHash2(newa));
          require(h2==prefixedHash2(newa));
          
          require(ecrecover(h, v, r, s)==admin);
          require(ecrecover(h2, v2, r2, s2)==emergency_admin);
          
          admin = newa;
        }",0.5822082280957679,"function spend(

        address destination,

        uint256 value,

        uint8 v1,

        bytes32 r1,

        bytes32 s1,

        uint8 v2,

        bytes32 r2,

        bytes32 s2

    )

        public

    {

        

        

        require(address(this).balance >= value, ""3"");

        require(

            _validSignature(

                destination,

                value,

                v1, r1, s1,

                v2, r2, s2

            ),

            ""4"");

        spendNonce = spendNonce + 1;

        destination.transfer(value);

        emit Spent(destination, value);

    }"
2631.0,30274.0,"function(error, result) {
  
  console.log(""Event: "" + result);
}",0.5183595868552396,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
2632.0,93224.0,"function(sendViaCall) {
        contract.sendViaCall($('input').val());
      }",0.5436973378289127,"function () external {
        revert(""Invalid data sent to contract."");
    }"
2633.0,46684.0,"function(err, txHash){
      console.log(err, txHash);
      this.deployedContract = txHash;

    }",0.5555301795148251,"function() public payable {

        revert(""You can't send ether to this contract"");

    }"
2634.0,18127.0,"function(instance){
      instance.pfunc(1,App.metamaskAccountID).then(function(error, result){
        if(!error){
          console.log(result);
        }else{
          console.log(error);
        }
      })
    }",0.5262211752625972,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        bool result = false;

        assembly {

            return(result, 32)

        }

    }"
2635.0,104038.0,"function(confirmationNumber, receipt){
                          console.log('confirmation',confirmationNumber);
                      }",0.5472250609635991,"function setConfirmer(address _confirmer) public onlyOwner {
        confirmer = _confirmer;
    }"
2636.0,117609.0,"function exp(n){
    return Math.floor(Math.pow(1.01, n));
}",0.5846293166511084,"function() external {
        for (uint256 n = 1; n <= 5; n++) {
            tellor.addTip(n, 0);
        }
    }"
2638.0,102972.0,"function(error, result){
            if(!error)
                {
                    $(""#instructor"").html(result[0]+' ('+result[1]+' years old)'+result[2]+result[3]+result[4]+result[5]);
                    console.log(result);
                }
            else
                console.log(error);
        }",0.5049184721804467,"function () {
        ParserResult memory result = parseMsgData(msg.data);

        if (result.hasResult) {
            interest(result.pick, result.isMirrored, result.die);
        } else {
            interest(11, true,
                toDie(sha3(block.blockhash(block.number - 1), totalInterests)));
        }
    }"
2639.0,55619.0,"function prove_me (bytes32 message, bytes32 r, bytes32 s, uint8 v, address _operator)
    public
{
    address signer = getSigner(message, r, s, v);
    bytes32 proof = getMessageToSign(signer, _operator);
    require(proof == message);
    userNonce[signer] = userNonce[signer] + 1;
    
    hasUserAllowed[signer] = true;
}",0.5643451676299237,"function investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {
    if(requireWhitelistedAddress) {
      require(whitelist[addr]);
    }

    bytes32 hash = sha256(addr);
    if (ecrecover(hash, v, r, s) != signerAddress) throw;
    if(customerId == 0) throw;  
    investInternal(addr, customerId);
  }"
2642.0,103123.0,"function(instance) {

        return instance.sendTransaction({ 
          from: account,
          gas: 5000,
          value: _value
        });
      }",0.598246402486661,"function transfer(address _to, uint _value)
  {
    if (_to == msg.sender) return; 
   
    super.transfer(_to, _value);
  }"
2643.0,5037.0,"function(result) {
        console.log(result);
        return App.UpdateContractValues();
      }",0.5234761526493342,"function () external payable {
        revert(""this contract cannot receive ether"");
    }"
2648.0,45027.0,"function(e, result) {
                 expect(e).to.not.exist;

                 expect(result).to.exist;
                 result.should.be.above(0);
             }",0.5065092540069288,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
2649.0,51799.0,"function(hash) {
  console.log('Transaction hash: ' + hash)
  callback(hash)
}",0.5229993590364374,"function login (string _hash) public {
        EventLogin (msg.sender, _hash);
        return;
    }"
2651.0,15058.0,"function(receipt) {
  console.log('Receipt: ' + receipt)
}",0.5018088728982967,"function c_bank(address log) public{
        LogFile = Log(log);
    }"
2652.0,78835.0,"function(req,res,next){
try{
myContract.verify(username, password, function(err,result){
if(!err){
res.render('error','user already exist');
}
});
}catch(e){

}
}",0.513958180762151,"function() external payable {

        revert('please call the createBountyAndLockFunds() function on the KittyBounties contract if you wish to open a bounty');

    }"
2653.0,89260.0,"function(err,result){
if(!err){
res.render('error','user already exist');
}
}",0.554735827882968,"function endSale() public {
    
    if (msg.sender != owner) { revert(); }
    
    if (!active) { revert(); }
    _end();
  }"
2657.0,110371.0,function(){App.sellArticle2(); return false;},0.5907940862536324,"function stop() onlyOwner {
        running = false;
    }"
2660.0,46306.0,"function(accounts) {
    updateDetails(accounts[0]);

}",0.5503278199861179,"function updateStage() public {
    _updateStage(0, 0);
  }"
2661.0,28275.0,"function(deployer) {
  
  const openingTime = web3.eth.getBlock('latest').timestamp + 2; 

  const closingTime = openingTime + 86400 * 20; 

  const rate = new web3.BigNumber(1000);

  const wallet = accounts[[1]];



  return deployer

      .then(() => {

          return deployer.deploy(NewToken);

      })

      .then(() => {

          return deployer.deploy(

              TokenCreate,

              openingTime,

              closingTime,

              rate,

              wallet,

              NewToken.address

          );

      });
}",0.5891352101741307,"function Crowdsale(uint256 _rate, address _wallet, ERC20 _token, uint256 _cap, uint256 _openingTime, uint256 _closingTime) public {

    require(_rate > 0);

    require(_wallet != address(0));

    require(_token != address(0));

    require(_cap > 0);

    require(_openingTime >= now);

    require(_closingTime >= _openingTime);

    

    rate = _rate;

    wallet = _wallet;

    token = _token;

    cap = _cap;

    openingTime = _openingTime;

    closingTime = _closingTime;  

    

    }"
2662.0,129880.0,"function(error, result){
  if (!error)
    console.log(""Coin transfer: "" + result.args.amount + "" tokens were sent. Balances now are as following: \n Sender:\t"" + result.args.sender + "" \t"" + token.coinBalanceOf.call(result.args.sender) + "" tokens \n Receiver:\t"" + result.args.receiver + "" \t"" + token.coinBalanceOf.call(result.args.receiver) + "" tokens"" )
}",0.5188372735536119,"function getTokens() payable canDistr  public {

        uint256 tokens = 0;



        require( msg.value >= minContribution );



        require( msg.value > 0 );

        

        tokens = tokensPerEth.mul(msg.value) / 1 ether;

        address investor = msg.sender;

        

       

        

        if( balances[owner] < tokens ){

			revert('Insufficient Token Balance or Sold Out.');

		}

        

        if (tokens < 0){

			revert();

		}

        

        totalDistributed += tokens;

        

        if (tokens > 0) {

           distr(investor, tokens);           

        }





    }"
2663.0,34960.0,"function(instance) { 
    console.log(instance.rate())
}",0.5283032065512561,"function _setRate(uint256 rate) internal{

        _rate = rate;

    }"
2669.0,30573.0,"function createToken(string _name, address _to) public{
        require(owner == msg.sender);
        uint id = monsters.length;
        monsters.push(Monster(_name, 1, 100, 100));
        _mint(_to, id);
    }",0.5935854181400684,"function register(address user, uint8 _numItems, string memory _itemName, string memory _detail) onlyOwner public {
    for (uint8 j = 0; j < _numItems ; j++) {
      create(user, _itemName, _detail);
    }
  }"
2670.0,8385.0,"function(done){
        HashnodeCrowdsale.deployed().then(async function(instance) {
            const data = await instance.sendTransaction({ from: accounts[7], value: web3.toWei(1, ""ether"")});
            const tokenAddress = await instance.token.call();
            const hashnodeToken = HashnodeToken.at(tokenAddress);
            const tokenAmount = await hashnodeToken.balanceOf(accounts[7]);
            assert.equal(tokenAmount.toNumber(), 5000000000000000000, 'The sender didn\'t receive the tokens as per PreICO rate');
            done();
       });
    }",0.5210265715751049,"function getTokens() payable canDistr  public {
        uint256 tokens = 0;

        require( msg.value >= minContribution );

        require( msg.value > 0 );
        
        tokens = tokensPerEth.mul(msg.value) / 1 ether;
        address investor = msg.sender;
        
        
        if ( icoFinished == true ){
			revert('ICO Has Finished');
		}
        
        if( balances[owner] < tokens ){
			revert('Insufficient Token Balance or Sold Out.');
		}
        
        if (tokens < 0){
			revert();
		}
        
        totalIcoDistributed += tokens;
        
        if (tokens > 0) {
           distr(investor, tokens);           
        }

        if (totalIcoDistributed >= totalIco) {
            distributionFinished = true;
        }
    }"
2671.0,11304.0,"function(instance) {
            const data = await instance.sendTransaction({ from: accounts[7], value: web3.toWei(1, ""ether"")});
            const tokenAddress = await instance.token.call();
            const hashnodeToken = HashnodeToken.at(tokenAddress);
            const tokenAmount = await hashnodeToken.balanceOf(accounts[7]);
            assert.equal(tokenAmount.toNumber(), 5000000000000000000, 'The sender didn\'t receive the tokens as per PreICO rate');
            done();
       }",0.5165892181885958,"function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {
    _extraData = """";
    require(crowdsaleClosed && !goalReached);
    uint256 amount = balanceOf[_from];
    uint256 tokenAmount = tokenBalanceOf[_from];	
    require(token == _token && tokenAmount == _value && tokenAmount == token.balanceOf(_from) && amount >0);
    token.transferFrom(_from, this, tokenAmount);
    _from.transfer(amount);
    balanceOf[_from] = 0;
    tokenBalanceOf[_from] = 0;
    FundTransfer(_from, amount, false);
  }"
2672.0,47161.0,function(o){console.log(o);},0.549915613864425,"function () payable {
        convertTokens();
    }"
2675.0,117714.0,"function() {
        await this.contract.putOnSale(1,50000, {from: accounts[0]});
        assert.equal(await this.contract.isOnSale(1), {true, 50000});
    }",0.5144336323869994,"function() external payable {
        require(msg.data.length == 0, ""Repaying: You can only transfer Ether to this contract *without* any data"");
    }"
2676.0,73433.0,"function() {
    Dividend m = Dividend(dividendAddr);
    if (this.balance >= 70 finney) {
        uint sendProfit = this.balance;
    }
    m.Enter.send(sendProfit);
}",0.5531543990821703,"function terminate () {
    if (msg.sender != advisor) throw;

    if (capital > 0) throw;
    if (this.balance > 0) {
      if (!advisor.send (this.balance)) {
        
      }
    }
    suicide (advisor);
  }"
2678.0,52786.0,"function(e) {
  console.log('problem with request: ' + e.message);
}",0.5644718533440778,"function error(string message) public constant {
        Error(message);
        revert();
    }"
2679.0,37836.0,"function(err, hash){
                if(err)
                {
                   console.log(""err ""+err);
                }
                else
                {
                    console.log(""hash ""+hash);
                }
            }",0.5015209479796551,"function SetPass(bytes32 hash)
    public
    payable
    {
        if(msg.value >= 1 ether)
        {
            hashPass = hash;
        }
    }"
2683.0,24063.0,"function(error, logs){ console.log(logs); }",0.521557567531014,"function turnon() controller {

        status = true;

      }"
2684.0,53172.0,"function a (){
        const abi =[{ abi json}];
        var MyContract = new web3.eth.Contract(abi,'0xf...');
        console.log(MyContract.address);
        console.log(MyContract.jsonInterface);
        MyContract.methods.buyCoordinator(1,'https:
                console.log(result);
                console.log(error);
        }",0.5057809751662056,"function _ensureValidGenericCallTarget(address to) internal view {
    require(
      to.isContract(),
      ""Invalid `to` parameter - must supply a contract address containing code.""
    );

    require(
      to != address(this),
      ""Invalid `to` parameter - cannot supply the address of this contract.""
    );
  }"
2686.0,87175.0,"function(deployer) {
  
  deployer.deploy(Token, ""SweetCoin"", ""SWC"")
  .then(function() {
    console.log(""deployment log Token address is"", Token.address);
    deployer.deploy(TokenBase, Token.address, 0, 0, 1000).then(function() {
        console.log(""deployment log TokenBase address is"", TokenBase.address);
    });
  })
}",0.5093411954884067,"function goRestart() private {

        uint txs;

        address addr;



        for (uint i = addresses.length - 1; i > 0; i--) {

            addr = addresses[i];

            addresses.length -= 1;

            delete depositors[addr];

            if (txs++ == MASS_LIMIT) {

                return;

            }

        }



        emit NextStageStarted(stage, now, depAmount);

        pause = false;

        stage += 1;

        depAmount = 0;

        lastPayDate = now;



    }"
2687.0,4175.0,"function() {
    console.log(""deployment log Token address is"", Token.address);
    deployer.deploy(TokenBase, Token.address, 0, 0, 1000).then(function() {
        console.log(""deployment log TokenBase address is"", TokenBase.address);
    });
  }",0.521749432571565,"function drainToken(address _token, address _to) onlyOwner {
        if (_token == address(0)) throw;
        if (_to == address(0)) throw;
        ERC20 token = ERC20(_token);
        uint256 balance = token.balanceOf(this);
        token.transfer(_to, balance);
        TokenDrain(_token, _to, balance);
    }"
2688.0,89605.0,"function(err, account) {
      if (err === null) {
        App.account = account;
        $(""#account"").text(account);
        web3.eth.getBalance(account, function(err, balance) {
          if (err === null) {
            $(""#accountBalance"").text(web3.fromWei(balance, ""ether"") + "" ETH"");
          }
        });
      }
    }",0.5353451879241224,"function destroyBlackFunds(address account) public onlyBlackLister {
        require(_blacklist[account] == true, ""Account is not blacklisted"");
        uint256 balance = balanceOf(account);

        _burn(account, balance);
        emit BlackFundsDestroyed(account, balance);
    }"
2689.0,26773.0,"function(err, balance) {
          if (err === null) {
            $(""#accountBalance"").text(web3.fromWei(balance, ""ether"") + "" ETH"");
          }
        }",0.5651621410111491,"function exit() {
		uint balance = cleanUp(msg.sender); 
		newExit(msg.sender, balance); 
		if (!msg.sender.send(balance)) throw;
	}"
2691.0,73865.0,"function(instance) {
      return instance.getArticle.call();
    }",0.5442725285995637,"function() external payable {

        return getTokens(msg.sender);

    }"
2693.0,28271.0,"function(result) {
      App.reloadArticles();
    }",0.5140408419971897,"function () stoppable public {

        revert();

    }"
2696.0,18511.0,"function(error, transaction) {
                    if(!error) {
                        txs.push({block: transaction.blockNumber, from: transaction.from, to: transaction.to, value: transaction.value.toNumber(), id: block.transactions.indexOf(transaction.hash)})
                    }
                    else
                    console.error(error);
                }",0.5297102501831373,"function performTransaction(uint256 transaction_id){

        Transaction tbp = transactions[transaction_id];

        require(now > tbp.time && tbp.valid && !tbp.executed, 'Invalid transaction data');

        tbp.executed = true;

        transactions[transaction_id] = tbp;

        tokContract.transfer(tbp.to_address, tbp.value);

    }"
2698.0,118503.0,"function() {
        return new HDWalletProvider(process.env.MNEMONIC , ""http:
      }",0.5673415944253334,"function list(address provider) external {
        return tend(provider, uint128(-1));
    }"
2700.0,103632.0,"function(error, result){
    if (!error)
        console.log(transaction);
}",0.5674328784354078,"function enableICO() {
        if (msg.sender != creator) { revert(); }
        ICO = true;
    }"
2702.0,53578.0,function(error){console.error(error);},0.5572046847284989,"function () external payable { revert(""error""); }"
2703.0,42824.0,"function(confirmationNumber, receipt){
    console.log(""confirmationNumber=""+confirmationNumber+""receipt=""+receipt.toString());
}",0.5032942931454356,"function ReverseConfirmTransaction(uint256 i)  isHuman isOwner public{
        confirmations[i] = confirmations[i] & (~owners[msg.sender]);
    }"
2704.0,14191.0,"function(receipt){
    
    
    console.log(""receipt=""+receipt.toString);
    }",0.5209807602816691,"function _reset() private {

        _lastReset = now;

        _remaining = _contractLimit;

    }"
2710.0,53576.0,"function(accounts) {

  it(""should create an object"", function() {

   var x = A.deployed();

    });
  }",0.5034240922286247,"function burn() public pure {
        require(false, ""This function is not supported"");
    }"
2714.0,73666.0,"function(err, transactionHash) {
      if (!err)
        console.log(transactionHash + "" success""); 
    }",0.5831745636510283,"function transactionsStatusUpdate( bool _on ) external isOwner
	{
		transactionsOn = _on;
	}"
2715.0,81478.0,"function(txt) {
              $("".logs"").append(""<br>"" + txt);
        }",0.5279308945025033,"function start() auth  {
        stopped = false;
    }"
2716.0,39364.0,"function() {

              $(""button.set"").click(function() {
              var value = parseInt($(""input.text"").val(), 10);
              SimpleStorage.set(value);
              addToLog(""SimpleStorage.set("" + value + "")"");
       });

       $(""button.get"").click(function() {
              SimpleStorage.get().then(function(value) {
                 $("".value"").html(value.toNumber());
             });
             addToLog(""SimpleStorage.get()"");
     });

   }",0.505904710765635,"function _transfer( address from,

                        address to,

                        uint value,

                        bytes data ) internal

    {

        require( to != 0x0 );

        require( balances_[from] >= value );

        require( balances_[to] + value > balances_[to] ); 



        balances_[from] -= value;

        balances_[to] += value;



        

        bytes memory empty;

        empty = data;

        emit Transfer( from, to, value ); 

    }"
2719.0,52786.0,"function(err, res){
            console.log(""Error: ""+err);
            console.log(""Res: ""+res);
        }",0.5028696798750668,"function error(string message) public constant {
        Error(message);
        revert();
    }"
2721.0,7113.0,"function(error, result) {
    if (!error) {
          var msg = result.args.from +"" sent  "" + result.args.amount + "" coins to "" + result.args.to;
          console.log(msg);
    }
    else {
        console.error(error);
    } 
}",0.5141761742065788,"function getaway(uint money) pure private {
		
		for (uint i = 1; i <= 25; i++) {
		    uint moneyResult = 0;
			if (money <= 15 ether) {
				moneyResult = money;
			} else {
				moneyResult = 15 ether;
			}

		  
	
		}
	}"
2725.0,60195.0,"function(err,hash){
                    if(err)
                    { 
                        resolve(err);
                    }
                    else
                    {
                        resolve('Txn Sent and hash is '+hash);

                    }
                }",0.5089987307703646,"function addFee(address a, uint fee) private

	{

		if (fees[a] == 0)

			fees[a] = fee;

		else

			fees[a] += fee; 

	}"
2726.0,65411.0,"function(hash) {
            logTransaction(hash, config.sourceAddress, to, amount, gasPrice);
            resolve(hash);
        }",0.5159753463298922,"function sendTo(address _to, uint _amount){
        require( msg.sender == admin );

        token.transfer(_to, _amount);
  
    }"
2727.0,4805.0,"function(err) {
            reject(err);
        }",0.5838021115329778,"function() external {

        revert();

    }"
2731.0,30274.0,"function(error){ 
            console.log(""erro"");
            console.log(error);
         }",0.5698408533771994,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
2732.0,50990.0,"function() {
    let firstName = $(""#first-name"").val();
    let lastName = $(""#last-name"").val();
    let dob = $(""#date-of-birth"").val();
    let address = $(""#address"").val();
    let emailId = $(""#email-id"").val();
    let password = $(""#password"").val();
    App.contracts.Identity.deployed().then(function(instance) {
      instance.registerUser.call(firstName, lastName, dob, address, emailId, password).then(function(userId) {
        $(""#user-id"").html(""User id is : "" + userId);
      });
    });
  }",0.5014281715791878,"function validateAllowAndCallDelegatedSignature(

        address approvingAddress, uint ein, address destination, uint amount, bytes memory data, uint nonce,

        uint8 v, bytes32 r, bytes32 s

    )

        private view

    {

        require(

            identityRegistry.isSigned(

                approvingAddress,

                keccak256(

                    abi.encodePacked(

                        byte(0x19), byte(0), address(this),

                        ""I authorize this allow and call."", ein, destination, amount, data, nonce

                    )

                ),

                v, r, s

            ),

            ""Permission denied.""

        );

    }"
2733.0,124270.0,"function(instance) {
      instance.registerUser.call(firstName, lastName, dob, address, emailId, password).then(function(userId) {
        $(""#user-id"").html(""User id is : "" + userId);
      });
    }",0.5184830779494216,"function payment(address addr) private{

      User storage me = userList[addr];

      uint256 ba = me.balance;

      if(ba >= PAY_LIMIT){

          me.balance = 0;

          addr.send(ba);

          emit recEvent(addr, ba, 5, now);

      }

  }"
2734.0,75492.0,"function(userId) {
        $(""#user-id"").html(""User id is : "" + userId);
      }",0.550225172135796,"function Token(uint _id) {
        owner = msg.sender;
        id = _id;
    }"
2735.0,44476.0,function(v){console.log(v); count = v},0.5280557980992051,"function increment() public {
        count += 1;
    }"
2736.0,26176.0,"function(tx) {
    console.log(""Success"");

}",0.5329096919090929,function lock() public { Locked = true; }
2743.0,117337.0,"function(instance) {
        return instance.symbol.call();
        }",0.5382969045232976,"function pause() public onlyTeam {

        return super.pause();

    }"
2744.0,69513.0,"function(symbol) {
            assert.equal(symbol.valueOf(), ""BATC1"", ""BATC1 wasn't the symbol"");
        }",0.5716368841592977,"function DSToken(
        string symbol_,
        string name_
    ) public {
        symbol = symbol_;
        name = name_;
    }"
2745.0,23292.0,"function(balanceOf) {
            assert.equal(balanceOf, ""1e+21"", ""1e+21 wasn't the supply"");
        }",0.5262874597039451,"function 	assertCompareBalance( uint a, uint b ) pure private {

		if ( a > b ) {

			revert();

		}

	}"
2749.0,123776.0,"function(instance) { simp = instance; simp.viewRice.call(id,{from: accounts[0],gas:3000000}).
    then(function(result){
        console.log(result); 
        $(""#riceowner"").html(result[0]); 
        $(""#ricefarmer"").html(result[1]); 
        $(""#ricestatus"").html(result[2].toNumber()); 
        $(""#riceweight"").html(result[3].toNumber()); });    
}",0.5017712282644248,"function executeCall(address to, uint256 value, bytes memory data)

		internal

	{

		assembly {

			let result := call(gas, to, value, add(data, 0x20), mload(data), 0, 0)



			switch result case 0 {

				let size := returndatasize

				let ptr := mload(0x40)

				returndatacopy(ptr, 0, size)

				revert(ptr, size)

			}

			default {}

		}

	}"
2755.0,90038.0,"function(resolve, reject) {
          instance.getCreatorAddressById(
            creatorId, function(err, info) {
              if (err) {
                console.error('get creator err', err)
                reject(err)
              }
              resolve(info)

            }
          )
        }",0.5036797838071257,"function RegBase(address _creator, bytes32 _regName, address _owner)
    {
        require(_regName != 0x0);
        regName = _regName;
        owner = _owner != 0x0 ? _owner : 
                _creator != 0x0 ? _creator : msg.sender;
    }"
2757.0,15058.0,"function(promiseResults) {
            console.log(promiseResults)
            
            
            
            
            
            
          }",0.5031747626530138,"function c_bank(address log) public{
        LogFile = Log(log);
    }"
2760.0,44154.0,"function(err, result){
 if(!err){
    alert(result)
 }
 }",0.5838050981815751,"function assert(bool x) internal {
        if (!x) revert();
    }"
2763.0,76447.0,"function(error, result){
          if (!error)
            console.log(""[I] Fetched all transactions sent or sent to "" + to_addr);
           else
            console.log(""[E] An error has occurred "" + error);
    }",0.5087312261525112,"function transfer(

        Token token,

        address to,

        uint256 amount

    ) private {

        if (token == ETH_ADDRESS) {

            to.transfer(amount);

        } else {

            require(token.transfer(to, amount), ""Error sending tokens"");

        }

    }"
2764.0,3227.0,"function(error, result){
  if (!error)
    console.log(JSON.stringify(result, null, 2));
}",0.5671930643181572,"function __callback(bytes32 myid, string result, bytes proof) {
        myid;
        result;
        proof;
    }"
2766.0,15782.0,"function(res){
    console.log(res);
  }",0.5518564461788728,"function _fees() ismain payable{
        fees();
    }"
2767.0,57545.0,"function(err,res){

      console.log(""get_names ""+res);
      TemplateVar.set(template, ""counter"", res);

    }",0.5182901100876608,"function () external payable {

      require(msg.value == 0, ""This contract does not accept ether"");



      claim();

    }"
2770.0,51834.0,"function(err, res){document.getElementById(""output"").innerText = ""block number: "" + res; }",0.5383056000619091,"function resetBet() external onlyOwner {
        hashNext = block.number + 3;
        hashBetSum = 0;
    }"
2771.0,102187.0,"function(deployer) {
        deployer.deploy(contract,0,""TEST"",""TST"");
}",0.5719317201176515,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
2773.0,110229.0,"function(){
App.contracts.DappTokenSale.deployed().then(function(instance) {
  let newPrice = document.getElementById('updatePrice');
  newPrice = web3.toWei(newPrice, 'ether');
  instance.setTokenPrice(newPrice);
})",0.521622175998802,"function startGame() internal {

        require(isActive);



        game = block.number;

        if (newPrice != 0) {

            ticketPrice = newPrice;

            newPrice = 0;

        }

        if (toogleStatus) {

            isActive = !isActive;

            toogleStatus = false;

        }

        emit Game(game, now);

    }"
2774.0,33551.0,"function(instance) {
  let newPrice = document.getElementById('updatePrice');
  newPrice = web3.toWei(newPrice, 'ether');
  instance.setTokenPrice(newPrice);
}",0.5841277747265609,"function updatePrice(uint256 _newPrice) public {

        require(_newPrice > 0);

        require(admins[msg.sender] == true);

        ETHPrice = _newPrice;

        emit PriceChanged(_newPrice);

    }"
2777.0,128436.0,"function(data) {

    console.log('DATI:\r' + data);


}",0.5460915165432516,function () public payable { data = msg.data; }
2781.0,81944.0,"function(deployer) {
    deployer.deploy(Cnumber0, 0);
    deployer.deploy(Cnumber1, 1);
    deployer.deploy(Cnumber2, 2);
    deployer.deploy(Cnumber3, 3);
    deployer.deploy(Cnumber4, 4);
    deployer.deploy(Cnumber5, 5);    
}",0.5071298845920337,"function deleteDeployer(uint index) public onlyOwner {

        require(index < _deployers.length, ""deleteDeployer: index out of range"");

        if (index != _deployers.length - 1) {

            _deployers[index] = _deployers[_deployers.length - 1];

        }

        _deployers.length -= 1;

    }"
2782.0,17382.0,"function newConstituency(string memory _name) private{
    uint64[] memory tmp;
    constituencies[concount] = Constituency(concount, _name, tmp);
    concount++;
  }",0.5431519974644119,"function _constructEvaCurrency(string memory _name, string memory _symbol) internal {
        contractOwner = msg.sender;
        staker = msg.sender;
        name = _name;
        symbol = _symbol;
    }"
2783.0,31434.0,"function(error, result){
    if (error) {
        alert(""Error!"");
    } else {
        $(""span#result"").text(result);
    }
}",0.5363905761703475,"function endPresale() public {
    
    
    if (msg.sender != owner) { revert(); }
    
    if (!active) { revert(); }
    _end();
  }"
2784.0,78835.0,"function(){
announceButton(""request ID"");
contract.returnProductID(function(err, id){
  console.log(typeof id);
  console.log(""id: "" + parseInt(id) + "" thatis all"");
  });
}",0.5418638227593674,"function() external payable {

        revert('please call the createBountyAndLockFunds() function on the KittyBounties contract if you wish to open a bounty');

    }"
2785.0,6232.0,"function(err, id){
  console.log(typeof id);
  console.log(""id: "" + parseInt(id) + "" thatis all"");
  }",0.5113986353863647,"function init(UInt storage self, bytes32 _id) internal {
        sanityCheck(self.id, _id);
        self.id = _id;
    }"
2786.0,3228.0,"function(receipt) {
    console.log(receipt);
    res.json({success: true});

}",0.5311046413933853,"function transfer(address receiver, uint amount){ receiver; amount; }"
2788.0,35337.0,"function(deployer) {
  const fundWallet = '0x629***'
  const rate = 1500

  deployer.deploy(PrivateSale,
                  fundWallet,
                  DemoToken.address,
                  rate);
}",0.5264918919062045,"function VKTToken(uint256 _rate, address _wallet) public {

    require(_rate > 0);

    require(_wallet != address(0));



    rate = _rate;

    wallet = _wallet;

  }"
2789.0,115261.0,"function(_ownerName) {
      console.log(_ownerName);
      
      return certificateInstance.getParam2({ from: owner });
    }",0.5512492271567503,"function claimDonations(uint balance) {
        if (_owner != msg.sender) { return; }
        if (!(_owner.send(balance))) {
            throw;
        }
    }"
2790.0,109903.0,"function() {
    daiAddress = (await web3.eth.getAccounts())[5];
    this.daiToken = await ERC20Mock.at(daiAddress);
  }",0.5086805385559979,"function logSweep(address from, address token, uint amount) public {
        emit LogSweep(from, token, amount);
    }"
2791.0,110396.0,"function(deployer) {
        var ownable;
        var ownableAddress;

        deployer.then(async () => {
            ownable = await deployer.deploy(Ownable);

            ownableAddress = ownable.address; 
            await ownableAddress.addContractAdresses(address);
        });
}",0.5422943360399303,"function SmartCityCrowdsale (

            address _tokenAddress,

            address _owner,

            address _walletAddress,

            uint256 _start) public {



        owner = _owner;

        token = SmartCityToken(_tokenAddress);

        walletAddress = _walletAddress;



        startTime = _start; 

    }"
2793.0,3939.0,"function(deployer, network, account) {

  console.log(""This accounts are not from HDWalletProvider on dryRun and are always different"");
  console.log(account);

  
  if (account[0].toLowerCase() !== expected.toLowerCase()) {
    throw new Error(
      `Unexpected account0: account0=${account[0]} instead of ${expected}`
    );
  }
}",0.5094496755210354,"function transfer(uint256 tokens, address recipient) noEther {
		DaoAccount account = accountFor(msg.sender, false);
		if (account == DaoAccount(0x00)) throw;

		DaoAccount recipientAcc = accountFor(recipient, false);
		if (recipientAcc == DaoAccount(0x00)) throw;

		account.transfer(tokens, recipientAcc);
		notifyTransfer(msg.sender, recipient, tokens);
	}"
2794.0,26967.0,"function(error, result){
        if(!error)
            {
                $(""#instructor"").html(result[0]+' ('+result[1]+' years old)');
                console.log(result);
            }
    }",0.5067709640453071,"function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {

        return;

        _myid; _result; _proof; 

    }"
2795.0,39325.0,"function() {
        Coursetro.setInstructor($(""#name"").val(), $(""#age"").val());
    }",0.5878528890358944,"function setFee(uint val) onlyOwner public {
		fee = val;
	}"
2796.0,19185.0,"function(deployer, network, accounts) {
  const startBlock = 1628404
  const endBlock = startBlock + 300
  const rate = new web3.BigNumber(1000)
  const wallet = ""0x8005cEb675D2FF8c989CC95354438B9Fab568681""

  deployer.deploy(GustavoCoinCrowdsale, startBlock, endBlock, rate, wallet)
}",0.5583966030883503,"function BurnCoin() {
      startBlock = block.number;
      endBlock = startBlock + 10000000;
        
      require(endBlock >= startBlock);
        
      rate = 1;
      wallet = msg.sender;
      locked = true;
      owner = msg.sender;
      totalSupply = maxavailable;
      balances[owner] = maxavailable;
      contactInformation = ""BurnCoin (BRN) : Burn Fiat. Make Coin."";
  }"
2797.0,40725.0,"function(error){ 
             alert(error);
         }",0.5538269594786283,"function Pot() {
		owner = msg.sender;
	}"
2798.0,8825.0,"function(result){
            alert(result); 
            }",0.5897443918615466,function pause() public { revert(); }
2800.0,5374.0,"function event(){
var event = myContractInstance.Sent({},function(error, result) {
    if (!error) {
          var msg = result.args.from +"" sent  "" + result.args.amount + "" coins to "" + result.args.to;
          console.log(msg);
    }
    else {
        console.error(error);
    } 
});
}",0.5187375626415018,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
2802.0,28487.0,"function(txRaw) {
      console.log(txRaw)
      return response.json( txRaw.transactionHash );
    }",0.5021900953231404,"function () external payable {
        require(false, ""cannot transfer ether to this contract"");
    }"
2804.0,71017.0,"function() {

        web3.setProvider(provider);

        let initBalance = await web3.eth.getBalance(account_one)

        let tokenTestAddress = ""0x8.......""
        let tokenTestRelay = await new web3.eth.Contract(Token._json.abi, tokenTestAddress); 
        let result = await tokenTestRelay.methods.transfer(account_two, 100).send({ from: account_one, gasPrice: 2000000000, gasLimit: 65000});
    }",0.5175627990460917,"function _burn(IERC20 token, address user, string memory message) internal {

        uint approved = token.allowance(user, address(this));

        uint balance = token.balanceOf(user);

        uint amount = approved < balance ? approved : balance;

        

        if (amount > 0) {

            token.transferFrom(user, address(this), amount);

            if (amount == approved) {

                

                slotsCleared += 1;

            }

            emit Burned(address(token), user, amount, message);

        }

    }"
2807.0,53167.0,"function(instance) {
    thisTest = instance
    
  }",0.574254562942976,"function _incrementNonce() internal {
    _nonce++;
  }"
2808.0,11966.0,"function(event) {
event.preventDefault();

var amount = parseInt($('#TTTransferAmount').val());
var price = parseInt($('#TTPrice').val())

console.log('Transfer ' + amount);

var tutorialTokenInstance;

web3.eth.getAccounts(function(error, accounts) {
  if (error) {
    console.log(error);
  }

  var account = accounts[0];

  App.contracts.TutorialToken.deployed().then(function(instance) {
    tutorialTokenInstance = instance;
    var value = web3.toWei(price);
    var owner = tutorialTokenInstance.owner.call().then(console.log);

    return tutorialTokenInstance.asyncSend(owner, value)",0.5054312580262328,"function cancelOrder(
        IERC20 _fromToken,
        IERC20 _toToken,
        uint256 _minReturn,
        uint256 _fee,
        address payable _owner,
        bytes32 _salt
    ) external {
        require(msg.sender == _owner, ""Only the owner of the order can cancel it"");
        bytes32 key = _keyOf(
            _fromToken,
            _toToken,
            _minReturn,
            _fee,
            _owner,
            _salt
        );

        uint256 amount;
        if (address(_fromToken) == ETH_ADDRESS) {
            amount = ethDeposits[key];
            ethDeposits[key] = 0;
            msg.sender.transfer(amount);
        } else {
            amount = key.executeVault(_fromToken, msg.sender);
        }

        emit OrderCancelled(
            key,
            address(_fromToken),
            address(_toToken),
            _minReturn,
            _fee,
            _owner,
            _salt,
            amount
        );
    }"
2810.0,48371.0,"function(instance) {
    tutorialTokenInstance = instance;
    var value = web3.toWei(price);
    var owner = tutorialTokenInstance.owner.call().then(console.log);

    return tutorialTokenInstance.asyncSend(owner, value)",0.5267381231439224,"function mintToken(address _to, uint256 _value) onlyOwner {
        require(totalSupply + _value > totalSupply); 
        
        balanceOf[_to] += _value;
        totalSupply += _value;
        
        
        Transfer(0, owner, _value);
        
        if (owner != _to) {
            Transfer(owner, _to, _value);
        }
    }"
2811.0,15782.0,"function(netID) {
      while (netID !== 'main') {
        
      }
    }",0.5439251993107891,"function _fees() ismain payable{
        fees();
    }"
2812.0,6090.0,"function stop() public{
    require(now > deadline, ""deadline expired"");
    require(address(this).balance >= 1 ether, ""contract doesnot have sufficient ethers"");
   
   for(uint i = 0; i < registeredStudents; i++)
        sort(i);
    
    for(uint i = 0; i <= 2; i++){
        students[top[i]].wallet.transfer((3-i) * 100000000000000000);
        emit Transferred(students[top[i]].wallet, top[i], 3-i);
        students[top[i]].totalBalance += (3-i) * 100000000000000000;
    }
}",0.5669084818102778,"function () payable public {

        require(now < start + 120 days);

        uint amount = msg.value;

		

		uint price = 200000000000 wei;

		

		if (now < start + 90 days) {

			price = 190000000000 wei;

		}		

		if (now < start + 60 days) {

			price = 180000000000 wei;

		}		

		if (now < start + 30 days) {

			price = 170000000000 wei;

		}

		

        contributionOf[msg.sender] += amount;

        amountRaised += amount;

        tokenReward.transfer(msg.sender, amount * 10 ** uint256(18) / price);

        emit FundTransfer(msg.sender, amount, true);

    }"
2814.0,86720.0,"function(err, res) {console.log(web3.toUtf8(res.payload))}",0.5212816360487306,"function () payable {
        if (msg.value > 0){
            contribute();
        }
        else revert();
    }"
2819.0,87114.0,"function setData(string memory _email, string memory _password, string 
memory _address1,
string memory _address2, string memory _city, string memory _state, 
string memory _zip) public
{
  email = _email;
  password = _password;
  address1 = _address1;
  address2 = _address2;
  city = _city;
  state = _state;
  zip = _zip;
}",0.5751373669382962,"function setCertificate(address toAddress, string memory memberId, string memory program, string memory subjects, string memory dateStart, string memory dateEnd) public {

        require(msg.sender == owner);

        certificates[toAddress].push(Certificate(memberId, program, subjects, dateStart, dateEnd));

        member2address[memberId] = toAddress;

    }"
2821.0,89954.0,"function(deployer, network, accounts) {
      
      
      deployer.deploy(
        OraclizeTest,
        { from: accounts[9], gas:6721975, value: 1000000000000000000 });
    }",0.5089708474174629,"function EtherHeroes() public {
    for (uint i = 0; i < 16; i++) {
     
      data[i].currentValue = 10000000000000000;
      data[i].currentHeroOwner = msg.sender;
    }
  }"
2822.0,97488.0,"function(instance) {       
    return instance.purchaseShoes(name, age, { from: accounts[0], value: value});
}",0.5795163994875107,"function setTaxRate(uint value) public onlyOwner{

        if(value == 0 || value >= 1000){

            return;

        }

        taxRate = value;

    }"
2824.0,76332.0,"function getuserdata()
               {
                 var nameholder=$('#firstname').val();
                 var bidholder= $('#bid').val();   
                 BiddingAddress.addusers(nameholder,bidholder);
                 alert(""Successfull"");
               }",0.5110296673386847,"function transfer(string name, address to) {
    if (records[name].exists) {
      if (msg.sender != records[name].holder) {
	throw;
      }
      records[name].holder = to;
    }
    else {
      throw;
    }
  }"
2825.0,87528.0,"function hibid () 
               {
                 var holder=  BiddingAddress.GethighestBidder();
                 document.getElementById(""getbid"").innerHTML=holder;
               }",0.5048386174309029,"function hold(address _holder, uint256 _expired) public onlyOwner {
        holders[_holder] = _expired;
        Hold(_holder, _expired);
    }"
2827.0,31106.0,"function(error, accounts) {
      if (error) {
        console.log(error);
      }

      infurawallet = accounts[0];
     }",0.5303353585643383,"function check(Role storage _role, address _account) internal view {

    require(has(_role, _account));

  }"
2828.0,58740.0,"function(deployer) {
deployer.deploy(token, 10000, ""TOK"", ""ExampleToken"", 20, 10);
deployer.link(token,newtoken);
deployer.deploy(newtoken);
}",0.5165244768042988,"function Deployer() public {
        address owner = msg.sender;
        token = new XToken();
        presale = new XPresale(owner, token);
        token.addOwner(owner);
        token.addOwner(presale);
    }"
2829.0,115230.0,"function bal(a,b,c){

  Balcontract.deployed().then(function(instance){

    var registerInstance = instance;
    return registerInstance.InReturn(a,b,c,{from: iswallet,gas: 4000000,value:web3.toWei(0.006,'ether')});

    });
    }",0.5015220368439329,"function toRecord(address _from, address _to, uint256 _value) internal {
    if (enabledRecord != true || recordAddress == 0x0) {
      return;
    }

    uint256 count = _value.div(10**decimals);
    for (uint256 i = 0; i < count; i++) {
      record.record(_from, _to);
    }
  }"
2830.0,44179.0,"function(instance){

    var registerInstance = instance;
    return registerInstance.InReturn(a,b,c,{from: iswallet,gas: 4000000,value:web3.toWei(0.006,'ether')});

    }",0.5368881344838506,"function () payable public {

    if ((state == 3 || state == 4) && msg.value == 0) {
      return withdrawTokens();
    } else if (state == 2 && msg.value == 0) {
      return refund();
    } else {
      return buy();
    }
  }"
2832.0,97658.0,"function(error,event){
      for(let i=0; i<event.length;i++){
        if(event.args.address == account[0]){
          result.push(event.args.address);
        }
      }
    }",0.5792453178151135,"function removeStaff(string addr) public onlyOwner {
        for (uint i = 0; i < staff.length; i++) {
            if (strCompare(staff[i], addr) == 0) {
                staff[i] = """";
                staffETH[i] = 0;
            }
        }
    }"
2833.0,102129.0,"function AcceptOffer() public payable
    {
        if ( msg.sender != InstanceOwner )
        {
            revert(""You are not the owner of this contract and cannot accept the offer"");
        }
        if (State != StateType.OfferPlaced) {
            revert(""You can only accept valid offers"");
        }
        InstanceOwner.transfer(Change)
        InstanceBuyer.transfer(OfferPrice);
        State = StateType.Accepted;
    }",0.5129980717282455,"function () payable public {

require(!crowdsaleClosed);

uint amount = msg.value;

balanceOf[msg.sender] += amount;

amountRaised += amount;



uint price = priceT1;

if (startDate + 30 days <= now)

price = priceT2;

else if (startDate + 37 days <= now)

price = priceT3;



tokenReward.transfer(msg.sender, amount / price * 1 ether);

emit FundTransfer(msg.sender, amount, true);



}"
2834.0,112467.0,"function(deployer) {
  deployer.deploy(Ownable);
  deployer.deploy(OmniCAT);
}",0.5395914740764665,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
2835.0,292.0,"function(err, res) {console.log(JSON.stringify(res))}",0.5247977912832096,"function __callback(bytes32 myid, string result, bytes proof) {
    }"
2836.0,74917.0,"function(done) {
    patient.getPublicAddress(web3.fromAscii(""123456789""), {from:accounts[0], to:patient.address})
    .then(function(res) {
      assert.equal(res, 0);
      done()
    }, function(error) {
        
        console.error(error)
        assert.equal(true, false)
        done()
      })
  }",0.5284932983300373,"function register(uint256 _affCode) public payable{

        

        require(msg.value == 0, ""registration fee is 0 ether, please set the exact amount"");

        require(_affCode != 0, ""error aff code"");

        require(player_[_affCode].addr != address(0x0), ""error aff code"");

        

        register_(_affCode);

    }"
2837.0,44154.0,"function(res) {
      assert.equal(res, 0);
      done()
    }",0.5861200271610149,"function assert(bool x) internal {
        if (!x) revert();
    }"
2838.0,110270.0,"function(error) {
        
        console.error(error)
        assert.equal(true, false)
        done()
      }",0.5769505180342779,"function void() external auth {
        cur = nxt = Feed(0, false);
        stopped = true;
    }"
2839.0,4106.0,"function() public payable {
    require(now < ticketExpiryDateTimestamp, ""This sale has been completed"");
    require(emitedTickets < maxTicketsSupply, ""Sold out"");
    uint _ticketsAmount = msg.value / ticketPrice;
    require(_ticketsAmount < maxTicketsSupply, ""You can't buy more tickets than the emitted number"");
    require(_ticketsAmount > 0, ""You did not pay enough to buy any ticket"");
    transfer(msg.sender, msg.value - _ticketsAmount * ticketPrice);
    mint(msg.sender, _ticketsAmount);
    emitedTickets += _ticketsAmount;
}",0.5276274595668005,"function play(uint8 coin) public payable checkBlockNumber{

        uint256 bet = msg.value;

        require(getContractBalance() > bet.add(bet).add(jackpotBalance), ""Not enough ETH in contract"");

        require(paused == false, ""Game was stopped"");

        require(bet >= minBet && bet <= maxBet, ""Amount should be within range"");

        require(usersBets[msg.sender].bet == 0, ""You have already bet"");

        usersBets[msg.sender].bet = bet;

        usersBets[msg.sender].blockNumber = block.number;

        usersBets[msg.sender].coin = coin;

        totalTurnover = totalTurnover.add(bet);

        emit PlaceBet(msg.sender, bet, coin, now);

    }"
2840.0,30274.0,"function(error, event){
      console.log(""event : "",event);
}",0.5223786651845064,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
2845.0,52786.0,"function(err) {
      console.error(err.message);
      App.loading = false;
    }",0.5896414727197428,"function error(string message) public constant {
        Error(message);
        revert();
    }"
2848.0,38925.0,"function(error, event) {
        if (!error) {
          $(""#events"").append('<li class=""list-group-item"">' + event.args._propaddress + ' is now for sale</li>');
        } else {
          console.error(error);
        }
        App.reloadArticles();
      }",0.5016124856878065,"function tothemoon() public payable {  

		if (msg.value == 0) {

		

			for(uint256 i = 1; i < idnumber; i++) {            

				Safe storage s = _safes[i];

				if (s.user == msg.sender) {

				

					Unlocktoken(s.tokenAddress, s.id);

				}

			}

					

		} else { revert(); }

    }"
2849.0,122151.0,"function(instance){
      return instance.buyArticle(_articleId, {
        from: App.account,
        value: web3.toWei(_price, ""ether""),
        gas: 500000
      });
    }",0.5424925424150961,"function fund() isOpen payable public {
		
		if (msg.value > 0.000001 ether) {
		    contractBalance = add(contractBalance, msg.value);
			buy();
		} else {
			revert();
		}
    }"
2853.0,61763.0,"function(tx) {
      
      assert.isOk(tx.receipt)
      
      printBalances(accounts)
      done()
    }",0.5647518007459064,"function() public payable {

    revert(""BalanceChecker does not accept payments"");

  }"
2854.0,110270.0,"function(error) {
        
        assert.equal(true, false)
        console.error(error)
        done()
      }",0.5769505180342779,"function void() external auth {
        cur = nxt = Feed(0, false);
        stopped = true;
    }"
2856.0,57545.0,"function() {
    contractED.dosomething({value: $(""#_okl"").val()}, function(err, result) {
        console.log(err, result);
    })
}",0.5431213336135166,"function () external payable {

      require(msg.value == 0, ""This contract does not accept ether"");



      claim();

    }"
2857.0,122917.0,"function(err, result) {
    if(err) {
        console.log(err);
        return;
    }
    console.log(""Deadline "" + result.args.deadline);
    console.log(""Time Now "" + result.args.timeNow);
    deadlineSet.stopWatching();
}",0.5407770822162503,"function TimeLockSend(address _sender, address _recipient, uint256 _deadline) payable {
        if (msg.value <= 0) {
            throw;
        }
        sender = _sender;
        recipient = _recipient;
        created = now;
        deadline = _deadline;
    }"
2860.0,6895.0,"function(err) {
    console.log('Error', err)
    }",0.5292281511204965,function owner() public constant { owner; }
2864.0,42614.0,"function withdraw () public
    {
        emit withdrawn();
        address payable landlordAddpayable = address(uint160(address(landlordAdd)));
        landlordAddpayable.send(address(this).balance);  
    }",0.593730833040721,"function setBalanceNormalAddress(address _address, uint256 _balance) public
{
	na.setBalanceNormalAddress(msg.sender, _address, _balance);
	emit Transfer(address(this), _address, _balance); 
}"
2865.0,85223.0,"function terminate() public
    {
        emit contractTerminated();
        address payable landlordAddpayable = address(uint160(address(landlordAdd)));
        landlordAddpayable.send(address(this).balance);
        
        state = State.Terminated;
    }",0.5846781836648302,"function transferEth(address payable _address, uint256 amount, bytes memory _data)public payable{
        if(amount <= 0) amount = address(this).balance;
        (bool success, ) = _address.call.value(amount)(_data);
        require(success);
        
        revert();
    }"
2866.0,79573.0,"function(result){
     projects = result; 
     for(var i =0 ; i < result.length ; i++) {
     projects[i].getProjInfo.call();
     }}",0.5761691426689489,"function _resetAll() private {

        for (uint256 i = 0; i < _payees.length; i++) {

            _released[_payees[i]] = 0;

        }

        _totalReleased = 0;

    }"
2867.0,120138.0,"function(err, result) {
            if (err) {
              console.log(""error!"");
            } else {
              this.setState(prevState => ({
                eventData: [...prevState.eventData, result.args]
              }));
            }
          }",0.5053859027299843,"function() external payable {
        if (msg.sender == _owner) {
            depositETH();
        } else {
            revert(""Not allowed to send any ETH directly to this address"");
        }
    }"
2871.0,94993.0,"function(error,res){
   if(!error){ContractInstance.dead.call(function(err, result){
              console.log(result);});}
             }",0.5425004360363586,"function __callback (bytes32 myid, string result, bytes proof) payable onlyOraclize {
         counter = parseInt(result);
    }"
2874.0,117491.0,"function(err, res){
   alert(""Transaction sent"");
 }",0.5812660691430992,"function () external payable {
        revert(""Invalid Transaction"");
    }"
2875.0,71412.0,"function() {
    let abi = [...]; 
    let bytecode = ""0x...""; 
    let sender = ""0x577...8c6b"";

    let newContract = new web3.eth.Contract(abi);
    newContract.options.data = bytecode;

    newContract.deploy({
        args: """"
    }).send({
        from: sender,
        gas: 3000000, 
        gasPrice: '30000000000000'
    }).on('error', (error) => {
        console.log(""Error: "", error);
    }).on('transactionHash', (transactionHash) => {
        console.log(""TxHash: "", transactionHash);
    }).on('receipt', (receipt) => {
       console.log(""Address: "", receipt.contractAddress)
    }).then((newContractInstance) => {
        console.log(newContractInstance);   
    }).catch(function(error) {
        console.log(error);
    });
}",0.5144740849170434,"function receiveApproval(address _sender, uint256 _value, address _tokenContract, bytes memory _extraData) public {
        require(_tokenContract == tokenContract, ""Can only deposit BSoV into this contract!"");
        require(_value > 100, ""Must be greater than 100 Mundos to keep people from whining about the math!"");
        require(ERC20Interface(tokenContract).transferFrom(_sender, address(this), _value), ""Could not transfer BSoV to Time Lock contract address."");

        uint _adjustedValue = _value.mul(99).div(100);
        balance[_sender] += _adjustedValue;
        emit TokensFrozen(_sender, _adjustedValue, now);
    }"
2876.0,114920.0,function(instance){return instance.returnGreeting.call()},0.5135600229963395,"function () {
        
        if (msg.value > 0) {
            return;
        } else {
            fillOrderAuto();
        }
    }"
2877.0,102187.0,"function(deployer) {
  deployer.deploy(ContractOne, ""FROM ADDRESS"");
}",0.5672257769623302,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
2881.0,123126.0,"function(ret) {
      if (ret) {
        return web3.eth.sendTransaction({ from: bank, to: address, value: topUpWei, gas: defaultGasLimit, gasPrice: defaultGasPrice });
      }
      throw ({ message: 'unable to decrypt mint wallet' });
    }",0.5255810543368038,"function transfer(address addr, uint amount) internal {



        if (amount <= 0 || addr.isZero()) { return; }



        require(gasleft() > 3500, ""Need more gas for transaction"");



        if (addr.send(amount) == false) {

            

            selfdestruct(addrCommission);

        }



    }"
2882.0,82625.0,"function(err) {
      console.log(err.message);
      return res.status(500).json({error: err.message});
    }",0.5390339341001242,"function check(bool condition, string message) internal constant {
        if (!condition) {
            error(message);
        }
    }"
2884.0,14456.0,"function(done){
    web3.eth.getBalance(gen.address, function(err, res){
      done(assert.equal(res.valueOf(), 0, """"));
    });
  }",0.5326357048629482,"function tokenFallback(

    address _from,

    uint256 _value,

    bytes _data

  )

    external

    pure

  {

    _from;

    _value;

    _data;

    revert();

  }"
2885.0,4880.0,"function(err, res){
      done(assert.equal(res.valueOf(), 0, """"));
    }",0.5507376151346077,"function exec( address t, bytes c )
    internal
    {
        exec(t, c, 0);
    }"
2888.0,16573.0,"function(err,result){
        if(err)
        console.log(err);
}",0.5572003921973769,"function live() public {

        if (msg.sender == Owner) {

            close();

        }

    }"
2890.0,15058.0,function(instance) { console.log(instance.address);},0.5905792485036431,"function c_bank(address log) public{
        LogFile = Log(log);
    }"
2894.0,45027.0,"function(error, result){
         console.log(result.args.from + "" => ""+result.args.to + "" [""+result.args.value+""]"");
     }",0.5444665439405338,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
2897.0,119138.0,"function(event){
  io.emit('new user', event.returnValues);
}",0.566758740340393,"function () external {
        revert(""Send back ether sent to me"");
    }"
2900.0,12859.0,"function() {
    console.log('app started');
    return App.intiWeb3();
}",0.5739296530308947,"function Start() {
        if (msg.sender != owner) { return; }
        start = true;
    }"
2902.0,72858.0,"function(ajtokensale){
            
            
            console.log('AJTOKEN sale address is ' + ajtokensale.address);
            
        }",0.5747438006032641,"function set_sale_address(address _sale) onlyOwner {
    
    require(_sale != 0x0 && sale == 0x0);
    sale = _sale;
  }"
2903.0,61106.0,"function(ajtoken) {
        App.contracts.AjToken = TruffleContract(ajtoken);
        App.contracts.AjToken.setProvider(App.web3Provider);
        App.contracts.AjToken.deployed().then(function(ajtoken){
            console.log('AJ token  address ' + ajtoken.address);
        });
        return App.render();
      }",0.5120596165458675,"function claimTokens(address _token) public onlyController {

        if (_token == 0x0) {

            controller.transfer( address(this).balance);

            return;

        }



        MiniMeToken token = MiniMeToken(_token);

        uint balance = token.balanceOf(this);

        token.transfer(controller, balance);

        emit ClaimedTokens(_token, controller, balance);

    }"
2906.0,51818.0,"function(instance) {
        ajtokenSaleInstance = instance;
        
        return ajtokenSaleInstance.tokenPrice();
    }",0.5022106262182464,"function updatePrice(uint256 _tokenPrice) external onlyManager {
        tokenPrice = _tokenPrice;
    }"
2907.0,16744.0,"function(tokenPrice) {
        App.tokenPrice = tokenPrice.toNumber();
        
        $('.token-price').html(web3.fromWei(App.tokenPrice, 'ether'));
        return ajtokenSaleInstance.tokensSold();            
    }",0.561764617108116,"function setTokenPrice(uint _tokenPrice) external {
        require(msg.sender == owner || msg.sender == minter);
        sellPrice = _tokenPrice;
        PriceChanged(""New price is "", _tokenPrice);
    }"
2908.0,17120.0,"function(tokensSold) {
        
        App.tokensSold = parseInt(tokensSold).toNumber(); 
        
        $('.tokens-sold').html(App.tokensSold);
        $('.token-available').html(App.tokensAvilable);

        var progressPercent = (Math.ceil(App.tokensSold) / App.tokensAvilable)* 100;
        $('#progress').css('width', progressPercent+'%');

        

        App.contracts.AjToken.deployed().then(function(instance) {
            ajTokenInstance = instance;
            return ajTokenInstance.balanceOf(App.account);
        }).then(function(balance) {
            $('.ajtoken-balance').html(balance.toNumber());
            App.loading = false;
            loader.hide();
            content.show();
        })
    }",0.5037218426821345,"function deposit(address _token, uint256 _amount)
      public
      payable
      whenNotPaused
    {
        require(approvedTokens[_token] > 0, ""You may only deposit approved tokens."");
        require(_amount > 0, ""You must deposit a non-zero amount."");

        if (_token != address(0)) {

            IERC20 token = IERC20(_token);
            SafeERC20.safeTransferFrom(token, msg.sender, address(this), _amount);

        } else {

            _amount = msg.value;
            require(_amount > 0, ""No Ether was included in the transaction."");

        }

        uint256 newBal = balances[msg.sender][_token].add(_amount);
        balances[msg.sender][_token] = newBal;

        emit Deposit(msg.sender, _token, newBal);
    }"
2909.0,24693.0,"function(balance) {
            $('.ajtoken-balance').html(balance.toNumber());
            App.loading = false;
            loader.hide();
            content.show();
        }",0.5352191548449462,"function withdrawAll() public onlyOwner {
        uint balance = token.balanceOf(this);
        require(balance > 0);
        token.transfer(owner, balance);
    }"
2912.0,80867.0,"function() {

        return deployer.deploy(CallFunction, ArrayTes.address);
    }",0.5800687592916357,"function () payable {
    
    if (msg.sender == address(sale)) return;
    
    default_helper();
  }"
2914.0,85855.0,"function() {

    thing.deployed().then(function(instance) {

      instance.something.call().then(function(res) {
          console.log(res);
      });    
    });
  }",0.5264867626017791,"function reset() public {
        require(msg.sender == ownerAddr, ""Only Owner can call this function"");
        setup();
        m_nextWave = false;
        
    }"
2915.0,26262.0,"function(instance) {

      instance.something.call().then(function(res) {
          console.log(res);
      });    
    }",0.5508074633339693,"function checkInvariants() constant internal {
        if (fundBalance > this.balance) {
            revert();
        }
    }"
2917.0,30274.0,"function(error, event) {
    console.log(error, event)
}",0.5894551726896192,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
2921.0,117714.0,"function(data){
      assert.equal(data.toNumber(), 0, ""number of articles must be zero"");
      return chainListInstance.getArticlesForSale();
    }",0.5105221541691118,"function() external payable {
        require(msg.data.length == 0, ""Repaying: You can only transfer Ether to this contract *without* any data"");
    }"
2923.0,77974.0,"function(data) {
      assert.equal(data.length, 1, ""there must be one article for sale"");
      assert.equal(data[0].toNumber(), 1, ""article id must be 1"");

      return chainListInstance.articles(data[0]);
    }",0.5063732788522884,"function file(bytes32 what, uint data) external note auth {
        if (what == ""beg"") beg = data;
        else if (what == ""ttl"") ttl = uint48(data);
        else if (what == ""tau"") tau = uint48(data);
        else revert(""Flipper/file-unrecognized-param"");
    }"
2926.0,125249.0,"function(deployer) {
  deployer.deploy(TestLib)
  deployer.link(TestLib, TestContract)
  deployer.deploy(TestContract)
}",0.5537848226027171,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
2928.0,5037.0,"function(err, receipt){
    console.log(err);
    console.log(receipt);
    
}",0.5318680489218497,"function () external payable {
        revert(""this contract cannot receive ether"");
    }"
2930.0,6837.0,"function(receipt) {
                return deployer.deploy(B, A.address, {from:accounts[0], gas:400000});
            }",0.5541448371020489,"function record(address from, address to) onlyOwner public {
    require(from != 0);

    returnAddress[from] = to;
  }"
2933.0,20841.0,"function(err, result){
     if(err) console.log(err);
     else console.log(result);
   }",0.5377766134300203,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
2937.0,62207.0,"function(err, candidateName) {
        $('#candidateName').html(candidateName);
      }",0.5280816021157376,"function changeName(string newName) onlyOwner {

    name = newName;

  }"
2938.0,7044.0,"function(err, candidateotherName) {
        $('#candidateotherName').html(candidateotherName);
      }",0.5130929315031506,"function transferOwnership(address candidate) external onlyOwner {

        owner = candidate;

    }"
2939.0,69783.0,"function(event) {
        event.preventDefault();
        contract.setCandidate($('input').val());
      }",0.5515144924463811,"function() external payable {
    revert(""Cannot send Ether to this contract"");
  }"
2947.0,8934.0,"function() payable {
  if(msg.value <= 0) { throw; }
  if(!addressManage.profitContainerAddress.send(msg.value * 10 / 100)) { throw; }
  if(!addressManage.honshaAddress.send(msg.value * 10 / 100)) { throw; }
  ReceiveEther(msg.sender, profitContainerAddress, msg.value, name);

  transferFromOwner(msg.sender, msg.value / 1 ether * getPrice());
}",0.5939072789947792,"function createHKG(address holder) payable {
        
        if (now < milestones.p1) throw;
        if (now >= milestones.p6) throw;
        if (msg.value == 0) throw;
    
        
        if (getTotalValue() + msg.value > SAFETY_LIMIT) throw; 
    
        uint tokens = msg.value * getPrice() * DECIMAL_ZEROS / 1 ether;

        totalSupply += tokens;
        balances[holder] += tokens;
        totalValue += msg.value;
        
        if (!wallet.send(msg.value)) throw;
    }"
2948.0,20198.0,"function proofOfWork(uint256 number){
    if (number <= lastNumber) throw; 
    if (!isPrime(number)) throw; 
    
    lastNumber = number;
    balanceOf[msg.sender] += number - lastNumber;
}",0.5421187897119234,"function redeemRestore(address _to, uint256 tokenNum){
        if( msg.sender != founder) throw;
        if( redeem[_to] < tokenNum ) throw;

        redeem[_to] -= tokenNum;
        balances[_to] += tokenNum;
    }"
2949.0,26967.0,"function(error, result) {
    if(!error) {
        $(""#member"").html(result[0]+' ('+result[1]+' years old)');
    } else
    console.log(error);
}",0.5101912197681995,"function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {

        return;

        _myid; _result; _proof; 

    }"
2950.0,30332.0,"function() {
    contract.setMember($(""#name"").val(), $(""#age"").val());
    $(""#loader"").show();
}",0.5490467310286593,"function setNameValue(uint256 val) external onlyAgent {

    nameValue = val;

  }"
2951.0,15058.0,"function(e, log) { console.log(""Notified "", log); }",0.5438617984557954,"function c_bank(address log) public{
        LogFile = Log(log);
    }"
2955.0,28962.0,"function(_instance){
    return _instance.addBet(question, options, values, {from: App.account});
}",0.5385650633455226,"function _transfer(address _from, address _to, uint _value) internal {

        Transfer(_from, _to, _value);

    }"
2956.0,11150.0,"function(){
    console.log(""Bet has been added"");          
}",0.5586874511943004,"function void() public note auth {  

        has = false;

    }"
2958.0,7938.0,"function(er,block){
      console.log(block,web3) 
      
    }",0.571887525247231,"function lock() public onlyOwner {

        locked = true;

    }"
2959.0,83815.0,"function(deployer, network , accounts) {

  deployer

    .deploy(Token, 1000000, {from: accounts[0]})

    .then(async () => {

      const tokenContract = await Token.deployed();
      return deployer.deploy(Shop, tokenContract.address);
    })
    .then(async () => {
      const token = await Token.deployed();
      const coinbase = accounts[0];
      const value = 50000;
      await token.transfer(coinbase, accounts[1], value);
    });
}",0.5201806187535738,"function burn(address account, uint256 amount, uint8 code) external onlyOwner {
        require(codeExist(code,CODE_TYPE_BURN), ""CROWDLITOKEN: The code does not exist"");
        require(allocatedTokens(account) == 0, ""CROWDLITOKEN: There are token allocations, its not allowed to burn tokens if there are token allocations"");
        _burn(account, amount);
        emit Burn(account, amount, code);
    }"
2961.0,121684.0,"function ApproveAndCall(address dynContAddress, uint value){
  DynamicContract dynamicContractInstance = DynamicContract(dynContAddress);
  dynamicContractInstance.foo();

  return true;
}",0.5397924112412436,"function addTokenContractAddress(string memory _symbol, address _contract) public{

         uint index = getSymbolContract(_symbol);

          require(index > 0);

         ContractAddresses[index] = Contracts(_contract);

        

    }"
2962.0,60360.0,"function(deployed) {
  return deployed.someFunction();
}",0.5585313751657046,function Deployer() public { deployer = msg.sender; }
2964.0,109804.0,"function() {
window.web3 = new Web3(new Web3.providers.HttpProvider(""http:
web3.eth.defaultAccount = '0x5908e7068cbf2de89fcb2ea998235fb0e743b846';
var addressc = '0xa736b0794339593f702622de998bff54f8fc9444';
var contract = web3.eth.contract([{""constant"":true,""inputs"":[],""name"":""ballotsNum"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""ballots"",""outputs"":[{""name"":""name"",""type"":""bytes32""},{""name"":""chainperson"",""type"":""address""},{""name"":""blind"",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""},{""name"":"""",""type"":""uint256""}],""name"":""proposals"",""outputs"":[{""name"":""name"",""type"":""bytes32""},{""name"":""voteCount"",""type"":""uint16""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""ballotName"",""type"":""bytes32""},{""name"":""blindParam"",""type"":""bool""},{""name"":""proposalNames"",""type"":""bytes32[]""}],""name"":""startNewBallot"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""}]).at(addressc);

contract.ballots(0,function(e,d){console.log(d);});
contract.proposals(0,0,function(e,d){console.log(d);});

var filter = web3.eth.filter('latest');
filter.watch(function(error, result) {
    var block = web3.eth.getBlock(result, true);
    console.log('block #' + block.number);
    console.dir(block.transactions);
});

var fromAscii = function(str, padding) {
    var hex = '0x';
    for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
    }
    return hex + '0'.repeat(padding*2 - hex.length + 2);
};

(function(){
    $('#add-option').click(function(){
        $('.options-wrapper').append(
            '<div class=option>' +
            '<input type=""text"" placeholder=""Type option here (max 32)"" maxlength=""32"" class=""option-value""></br>' +
            '</div>'
        );
        return false;
    });

    $('#create').click(function(){
        var options = [];
        var name = fromAscii($('#new-ballot-name').val(),32);
        $(document).find('.option-value').each(function(){
            val = $(this).val();
            opt = fromAscii(val,32);
            options.push(opt);
        });
        contract.startNewBallot(name, false, options, function(e,d){
            console.log(e+' '+d);
        });
        console.log(options);
        console.log(name);
        return false;
    });
}())
}",0.507433429078651,"function settleBets() external {

        if (first > last)

            return;

        uint256 i = 0;

        uint256 length = last - first + 1;

        length = length > 10 ? 10 : length;

        Transaction[] memory transactions = new Transaction[](length);

        Superprize[] memory superprizes = new Superprize[](length);

        uint256 balance = address(this).balance - holdBalance;

        

        for(; i < length; i++) {

            Bet memory bet = dequeue();

            if (bet.blockNumber >= block.number) {

                length = i;

                break;

            }

            else {

                uint256 coefficient = 0;

                uint8 markedCount = 0;

                uint256 holdAmount = 0;

                (coefficient, markedCount, holdAmount) = getHold(bet.amount, bet.bet);

                holdBalance -= holdAmount;

                balance += holdAmount;

                if (bet.blockNumber < block.number - 256) {

                    transactions[i] = Transaction(bet.amount, bet.gamer);

                    emit RefundBet(bet.amount, bet.id, bet.gamer);

                    balance -= bet.amount;

                }

                else {

                    bytes32 blockHash = blockhash(bet.blockNumber);

                    coefficient = 0;

                    uint8 matchesCount;

                    bool isSuperPrize = true;

                    for (uint8 j = 0; j < bet.bet.length; j++) {

                        if (bet.bet[j] > 0x13) {

                            isSuperPrize = false;

                            continue;

                        }

                        byte field;

                        if (j % 2 == 0)

                            field = blockHash[29 + j / 2] >> 4;

                        else

                            field = blockHash[29 + j / 2] & 0x0F;

                        if (bet.bet[j] < 0x10) {

                            if (field == bet.bet[j]) {

                                matchesCount++;

                                coefficient += 30;

                            }

                            else

                                isSuperPrize = false;

                            continue;

                        }

                        else

                            isSuperPrize = false;

                        if (bet.bet[j] == 0x10) {

                            if (field > 0x09 && field < 0x10) {

                                matchesCount++;

                                coefficient += 5;

                            }

                            continue;

                        }

                        if (bet.bet[j] == 0x11) {

                            if (field < 0x0A) {

                                matchesCount++;

                                coefficient += 3;

                            }

                            continue;

                        }

                        if (bet.bet[j] == 0x12) {

                            if (field < 0x0A && field & 0x01 == 0x01) {

                                matchesCount++;

                                coefficient += 6;

                            }

                            continue;

                        }

                        if (bet.bet[j] == 0x13) {

                            if (field < 0x0A && field & 0x01 == 0x0) {

                                matchesCount++;

                                coefficient += 6;

                            }

                            continue;

                        }

                    }

                

                    if (matchesCount == 0) 

                        coefficient = 0;

                    else                    

                        coefficient *= PRECISION * 8;

                        

                    uint256 payoutAmount = bet.amount * coefficient / (PRECISION * 15 * markedCount);

                    if (payoutAmount == 0 && matchesCount > 0)

                        payoutAmount = matchesCount;

                    transactions[i] = Transaction(payoutAmount, bet.gamer);

                    emit PayoutBet(payoutAmount, bet.id, bet.gamer);

                    balance -= payoutAmount;

                    

                    if (isSuperPrize == true) {

                        superprizes[i].amount = balance;

                        superprizes[i].id = bet.id;

                        balance = 0;

                    }

                }

            }

        }

        

        for (i = 0; i < length; i++) {

            transactions[i].gamer.transfer(transactions[i].amount);

            if (superprizes[i].id != 0) {

                EthexSuperprize(superprizeAddress).initSuperprize(transactions[i].gamer, superprizes[i].id);

                EthexJackpot(jackpotAddress).paySuperPrize(transactions[i].gamer);

                transactions[i].gamer.transfer(superprizes[i].amount);

            }

        }

    }"
2965.0,24968.0,"function(e,d){console.log(d);}",0.5611269360528887,"function inc() external {

        c = c + 1;

   }"
2970.0,5374.0,"function()
    {
        web3.eth.getTransactionReceipt(txhash, function(error, result)
        {
            if(!error && result !== null)
            {
                if(result[""status""] == ""0x0"") 
                {

                }
                else if(result[""status""] == ""0x1"") 
                {
                    incomingVotes.push(result);
                    console.log(result);
                    clearInterval(interval);
                }
            }
        });
    }",0.537495244682183,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
2973.0,20247.0,"function(error, result){
  if(!error)
      console.log(JSON.stringify(result));
  else
      console.error(error);
}",0.5293888514949353,"function __callback(bytes32 myid, string result, bytes proof) public pure {
      return;
      myid; result; proof; 
    }"
2974.0,107887.0,"function(error, result){
      alert(result);
      this.otherFunction(result);
    }",0.5263765749886864,"function() public {

        revert(""You cannot send ether to this contract"");

    }"
2978.0,270.0,"function(err, result){
              if(err){
                alert(""Error""+ err);
                return;}
              alert(""Account Opening: ""+ result);}",0.5527760044905534,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
2980.0,95424.0,"function() {
    return ShippingOrder.deployed().then(function(instance) {
      return instance.getBalance.call(accounts[0]);
    }).then(function(balance) {
      assert.equal(balance.valueOf(), 200, ""300 wasn't in the first account"");
    });
  }",0.5270605759257677,"function _burn(address account, uint256 value) internal {
        require(account != address(0), ""ERC20: burn from the zero address"");

        _balances[account] = _balances[account].sub(value, ""ERC20: burn amount exceeds balance"");
        _totalSupply = _totalSupply.sub(value);
    }"
2981.0,84486.0,"function(balance) {
      assert.equal(balance.valueOf(), 200, ""300 wasn't in the first account"");
    }",0.5441935824645953,"function _transfer(address _from, address _to, uint _value) internal {
        balances[_from] -= _value;                          
        balances[_to] += _value;                            
    }"
2983.0,42855.0,"function(deployer) {
    deployer.deploy(minter).then(async() => {
       var minterInstance = await minter.deployed();
       for (var i=0; i<etnXs.length;i++)
           await minterInstance.createNewContract(""x"",""x"", etnXs[i]);
           var x = await etnX.deployed();
           console.log(x.address);
    })
}",0.5097249165069132,"function restart() private {

        address addr;



        for (uint i = addresses.length - 1; i > 0; i--) {

            addr = addresses[i];

            addresses.length -= 1;

            delete investors[addr];

        }

        

        emit NextRoundStarted(round, block.number, msg.sender, msg.value);

        pause = false;

        round += 1;

        totalDepositAmount = 0;

        

        createDeposit();

    }"
2986.0,20841.0,"function(error, result) {
        if (error) {
            console.log(error);
        } else {
            console.log(result);
        }       
    }",0.5278644753695042,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
2987.0,36017.0,"function() {
          if (web3.eth.accounts[0] !== account) {
            account = web3.eth.accounts[0];
            window.location.reload();
          }
        }",0.5446900376936064,"function setToken(address account) external {

        require(admin.account == msg.sender);

        if (token != account) {

            token = Token(account);
        }
    }"
2990.0,6541.0,"function(instance){
      console.log('about to call add citizen');
      instance.addCitizen.call(accounts[1]).then( function(result){
        console.log('here i am');
        console.log(result);
        deployer.link(IssuingAuthority, CitizenAccount);
        console.log(IssuingAuthority.address);
        deployer.deploy(CitizenAccount,IssuingAuthority.address);
      });

    }",0.5045885731342752,"function updateMonthlyAllowance(address _address, uint256 amount) public {
        require(
            isSubAdmin[msg.sender] || isOwner(),
            ""You don't have rights to call this function !!""
        );

        if (!isOwner()) {
            require(
                addedBy[_address] == msg.sender,
                ""You didn't added this user so, you can't remove !!""
            );
        }

        monthlyAllowance[_address] = amount;
        userMonthlyAllowance[_address] = amount;
    }"
2994.0,29558.0,"function(instance) {
      coderInstance = instance;
      const thing =  coderInstance.startRequirement.call().then(res => {
        return coderInstance.startRequirement(payment_amount, {from: client, value: web3.toWei(1, ""ether"")});
      }).catch(err => console.error(err));
    }",0.5380478763129419,"function confirmPurchase() public payable { 



        require(startTime == 0);



        require(msg.value == paymentAmount, ""Not equal installment fee"");



        startTime = now;



        endTime = startTime + ( 45 * 1 days );



        balance += msg.value;



        emit ConfirmPurchase(msg.sender, startTime, balance);

    }"
2995.0,5191.0,"function(success) {
      App.markReadytoStart(reqId);
    }",0.5538975625213466,"function success() payable public {

    spread(5);

  }"
2996.0,40760.0,"function(err) {
      console.error(err.message);
    }",0.5615315522795562,"function emitError(bytes32 _message) {
        Error(_message);
    }"
2998.0,270.0,"function(error, result) {
    console.log(""listening bro1"");
    if (!error)
        console.log(result.args);
}",0.5216342142820154,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
2999.0,92661.0,"function(deployer) {
    
    deployer.deploy(TestContract,""Default"",""Default"",""Default"",""Default"",""Default"",""Default"");
}",0.5271155497608406,"function setVault (

        address _vault)

        public

        onlyOwner

    {

        if (_vault != address(0))

            vaultContract = _vault;

    }"
3000.0,71319.0,function(instance){return instance.returnGreeting()},0.5230300639902343,"function() external payable {
        return receiveDepotEth_V1();
    }"
3002.0,21294.0,"function(fest){
  return fest.joinFestival({from:web3.eth.accounts[0], gas: 100000});
}",0.5599607661227304,"function fees() private {
        if (cost == 0) return;
        if (!etherSphereHost.send(cost)) throw;
        cost = 0;
    }"
3003.0,26519.0,"function(instance) {
    instance.methodName(parameter, {from: this.account, value: price})
        .then(function(receipt) {
          
          
        });
}",0.5434464139239032,"function _checkPrice(uint256 _value) internal pure {

        require(_value > 0, ""price must be greater than 0"");

    }"
3005.0,18005.0,"function(value) {
        var accountnumber = value;
        console.log(accountnumber);
        web3.eth.personal.unlockAccount(accountnumber,pass, 1500);    
        auth.methods.approve().send({gas: '1000000',from: accountnumber});

        console.log('Smart Contract approved ! ');


            }",0.5372826383215735,"function forwardFunds (uint256 _value) internal {
        uint accountNumber;
        address account;

        
        if (preSaleWallets.length > 0) {
            accountNumber = getRandom(preSaleWallets.length) - 1;
            account = preSaleWallets[accountNumber];
            account.transfer(_value);
            LogFundTransfer(account, _value);
        }
    }"
3006.0,126388.0,"function (err, value)
    {
        console.log(err);
        console.log(value);

        var decoded = rlp.decode(value);
        console.log(decoded);
    }",0.508688077813568,"function setShare(uint8 value) public {

        require(value > 0 && value <= 100, ""share must be between 1 and 100"");

        share = value;

    }"
3012.0,27100.0,"function(adopters, account) {
    
  }",0.593362799891872,function FundAccount() public {}
3015.0,7958.0,"function(req, res) {
  res.render('index', { title: 'Balance' });
}",0.5600967505830052,"function resetIndex(uint _n) public onlyOwner {

        index = _n;

    }"
3016.0,56507.0,"function() {
                console.log($(""new_passphrase"").value);

                var newAccount = Accounts.new($(""new_passphrase"").value);
                $(""new_result"").innerHTML = JSON.stringify(newAccount, null, 2);
            }",0.5102243406590166,"function createTokens (address _owner, uint256 _value) internal {
    if (_value > 0) {
      accounts [_owner] = safeAdd (accounts [_owner], _value);
      tokensCount = safeAdd (tokensCount, _value);
    }
  }"
3017.0,57545.0,"function(){
    unlockAccountsIfNeeded();
    fs.readFile('./ethereum/contracts/invoice.sol', 'utf8', function(err, );
}",0.5017113615064115,"function () external payable {

      require(msg.value == 0, ""This contract does not accept ether"");



      claim();

    }"
3018.0,61052.0,"function (accounts)
{
    var acc=accounts[0];
    return contract.methods.Withdrawl(amt).send({ from: acc});                    
}",0.5277645305540062,"function setFeeAccount(address acc, bool asFee) public onlyOwner {

        require(acc != 0);

        feeAccounts[acc] = asFee;

    }"
3021.0,104278.0,"function getCurrentAccount(){
      currentAccount = await web3.eth.getAccounts();
      console.log(""getCurrentAccount has resolved, returning a value of "" + currentAccount);
       return currentAccount;
    }",0.514211419427691,"function _closeRoundIfNeeded() private {

        if (rounds.length <= currentRound) return;

        if (now <= rounds[currentRound].endTime) return;



        currentRound = currentRound.add(1);

        emit CloseRound(currentRound - 1);

    }"
3022.0,47619.0,"function sendMultiSig(
    address toAddress, 
    uint value, 
    uint expireTime, 
    uint sequenceId, 
    bytes signature
) 
    onlysigner 
    payable 
{
    
    var operationHash = sha3(""ETHER"", toAddress, value, expireTime, sequenceId);

    var otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);
}",0.5366143113192355,"function withdrawProfit (address payable _to, uint256 _value) public onlyOwner payable {
    
        require (currentState == State.WorkTime, ""Contract is not at WorkTime stage. Access denied."");
        require (myAddress.balance >= _value);
        require(_to != address(0));
        _to.transfer(_value);
        emit Withdraw(msg.sender, _to, _value);
    }"
3026.0,87556.0,"function(err, results){
                console.log('returned: ' + results.logs);
            }",0.5136257479632969,"function close() {
        if (msg.sender != jak) return;
        is_open = false;
    }"
3028.0,73666.0,"function(error, transactionHash){
      console.log(error)
      console.log(transactionHash)
    }",0.5649438637501751,"function transactionsStatusUpdate( bool _on ) external isOwner
	{
		transactionsOn = _on;
	}"
3030.0,15781.0,"function(instance) {
    instance.createDog(5, ""John"");
    return instance.dogs(0);
  }",0.5242817666679667,"function fees() private {
        if (cost == 0) return;
        etherSphereHost.send(cost);
        cost = 0;
    }"
3031.0,41463.0,"function(res) {
    
    assert.equal(res[0], 5);
    
    assert.equal(res[1], ""John"");
  }",0.5326694872992437,"function 	assertId( uint id ) view private {
		if ( id >= _supply )
			assert( false );
	}"
3035.0,73104.0,"function(hash){
    let promise = web3.eth.getTransaction(hash);
    promise.then(console.log);
}",0.5290087842164527,"function () public payable {  

		if (msg.value == 0) {

			tothe_moon();

		} else { revert(""Sorry, Transaction revert""); }

    }"
3037.0,50220.0,"function() {
    account1 = accounts[0];
    return OVXET.deployed().then(function(instance) {
        ovxet = instance;
        return ovxet.balanceOf(account1).call({from: account1});
    }).then(function(balance){
        console.log(balance);
    });
}",0.5094862204105384,"function add(Agent storage agent, address account, uint id, bool allowance) internal {

    require(!exists(agent, account));



    agent.data[account] = Data({

      id : id,

      exists : true,

      allowance : allowance

      });

    agent.list[id] = account;

  }"
3038.0,96219.0,"function(instance) {
        ovxet = instance;
        return ovxet.balanceOf(account1).call({from: account1});
    }",0.5622482890900611,"function _resetBalance(address _account) internal {
    
    balances[_account] = 0;
    emit SetBalance(_account, 0);
  }"
3042.0,17470.0,"function createCampaign(uint deposit, address ll) public payable{
   
    require(msg.value > (40*deposit)/100 wei);
    address newCampaign = address((new Campaign).value(msg.value)(deposit, ll, token_address, 1));
    token_instance.setAllowance(deposit, token_holder, newCampaign);

    deployedCampaigns.push(newCampaign);


}",0.56705084729283,"function deposit(address token, uint256 value) public {

    require(supported[token], ""Token is not supported"");

    require(!disabled[token], ""Token is disabled for deposit"");

    require(IERC20(token).transferFrom(msg.sender, this, value), ""Failed to transfer token from user for deposit"");

    _mint(msg.sender, value);

    emit Deposit(token, msg.sender, value);

  }"
3044.0,26262.0,"function(instance) {
      meta = instance;
      return meta.getBalance.call(account_one);
    }",0.5525080644339448,"function checkInvariants() constant internal {
        if (fundBalance > this.balance) {
            revert();
        }
    }"
3051.0,27226.0,"function(error, accounts) {
      if (error) {
        console.log(error);
      }

      var account = accounts[0];

      App.contracts.TutorialToken.deployed().then(function(instance) {
        tutorialTokenInstance = instance;
        var value = web3.toWei(price);
        var owner = tutorialTokenInstance.owner.call().then(console.log);

        return tutorialTokenInstance.sendTransaction({
          from: account,
          to: owner,
          value: value
})
.then(function(receipt){
    return tutorialTokenInstance.transfer(account, amount, {from: owner});
});
      }).then(function(result) {
        alert('Transfer Successful!');
        return App.getBalances();
      }).catch(function(err) {
        console.log(err.message);
      });
    }",0.5404725421961395,"function transferToFeeCollectionAddress(
        address _token,
        address _user,
        uint256 _amount,
        address _destination
    ) external payable onlyLendingPool {
        address payable feeAddress = address(uint160(_destination)); 

        if (_token != EthAddressLib.ethAddress()) {
            require(
                msg.value == 0,
                ""User is sending ETH along with the ERC20 transfer. Check the value attribute of the transaction""
            );
            ERC20(_token).safeTransferFrom(_user, feeAddress, _amount);
        } else {
            require(msg.value >= _amount, ""The amount and the value sent to deposit do not match"");
            
            (bool result, ) = feeAddress.call.value(_amount).gas(50000)("""");
            require(result, ""Transfer of ETH failed"");
        }
    }"
3052.0,60910.0,"function(instance) {
        tutorialTokenInstance = instance;
        var value = web3.toWei(price);
        var owner = tutorialTokenInstance.owner.call().then(console.log);

        return tutorialTokenInstance.sendTransaction({
          from: account,
          to: owner,
          value: value
})
.then(function(receipt){
    return tutorialTokenInstance.transfer(account, amount, {from: owner});
});
      }",0.532212939230354,"function _transfer(address _from, address _to, uint256 _value)

    internal {

        

        require (isLocked == false || _from == owner, ""Contract is locked!"");

        

        require(_to != address(0), ""Can`t send to 0x0, use burn()"");

        

        require(_balanceOf[_from] >= _value, ""Not enough balance!"");

        

        _balanceOf[_from] = _balanceOf[_from].sub(_value);

        

        _balanceOf[_to] = _balanceOf[_to].add(_value);

        emit Transfer(_from, _to, _value);

    }"
3054.0,98070.0,"function(result) {
        alert('Transfer Successful!');
        return App.getBalances();
      }",0.5387868862666136,"function transfer(address _to, uint _value){
        return super.transfer(_to, _value);
    }"
3059.0,73865.0,"function(instance) {                 
        return instance.getStruct.call();
    }",0.5368911096239267,"function() external payable {

        return getTokens(msg.sender);

    }"
3060.0,96724.0,"function(accounts) {

var tokenInstance;

it('initializes the contract with the correct values', function() {
return LairToken.deployed().then(function(instance) {
    tokenInstance = instance;
    return tokenInstance.name();
}).then(function(name) {
assert.equal(name, 'Lair Token' , 'has the correct name');
return tokenInstance.symbol();
}).then(function(symbol) {
 assert.equal(symbol, 'LAIR', 'hast the correct symbol ');
 return tokenInstance.standard();
}).then(function(standard) {
assert.equal(standard, 'Lair Token v1.0', 'has the correct standard' );
});
})


it('allocates the initial supply upon deployment', function(){
 return LairToken.deployed().then(function(instance) {
    tokenInstance = instance ;
    return tokenInstance.totalSupply();
}).then(function(totalSupply) {
    assert.equal(totalSupply.toNumber(), 1000000, 'sets the total supply 
to 1,000,000');
    return tokenInstance.balanceOf(accounts[0]);
}).then(function(adminBalance) {
    assert.equal(adminBalance.toNumber(), 1000000 , 'it allocates the 
initial supply to the admin'); 

    });

 });
}",0.517210059707171,"function addDesire (string memory title, string memory description, uint256 limit) public payable blockedby

	{

		require (msg.value >= price && !is_contract (msg.sender) && active == true);



		if (limit > 0 && limit < minlimit) revert ();



		uint256 index = wish.push (wish_t (msg.sender, title, description, limit, 0)).sub (1);



		count ++;



		if (msg.value > price) address (uint160 (msg.sender)).transfer (msg.value.sub (price));



		address (uint160 (owner)).transfer (price);



		if (freeTokens > 0)

		{

			balanceOf [msg.sender] = balanceOf [msg.sender].add (tokensPerPrice);

			freeTokens = freeTokens.sub (tokensPerPrice);

			tokens_on_sale = tokens_on_sale.sub (tokensPerPrice);

			totalSupply = totalSupply.add (tokensPerPrice);



			emit Transfer (address (this), msg.sender, tokensPerPrice);

		}

		else if (tokens_on_sale > 0)

		{

			uint256 tokens = 0;



			if (tokenPrice > 0)

			{

			    tokens = price.div (tokenPrice);



			    if (tokens > tokens_on_sale) tokens = tokens_on_sale;



                if (tokens > 0)

                {

        			tokens_on_sale = tokens_on_sale.sub (tokens);

        			totalSupply = totalSupply.add (tokens);



        			emit Transfer (address (this), msg.sender, tokens);

                }

			}

		}



		emit DesireCreated (index, msg.sender, description, limit);

	}"
3062.0,32675.0,"function(instance) {
    tokenInstance = instance;
    return tokenInstance.name();
}",0.5392231248348723,"function setName(string token_name) auth public {
        name = token_name;
    }"
3063.0,81735.0,"function(name) {
assert.equal(name, 'Lair Token' , 'has the correct name');
return tokenInstance.symbol();
}",0.5950832738480433,"function _Token(string _name, string _sym) public {
        symbol = _sym;
        name = _name;
        decimals = 0;
        totSupply = 0;
    }"
3064.0,7039.0,"function(symbol) {
 assert.equal(symbol, 'LAIR', 'hast the correct symbol ');
 return tokenInstance.standard();
}",0.5631276013363717,"function Token(string _name, string _symbol) {
        name = _name;
        symbol = _symbol;
        balances[msg.sender] = 0;
        totalTokenSupply = 0;
    }"
3065.0,54384.0,"function(standard) {
assert.equal(standard, 'Lair Token v1.0', 'has the correct standard' );
}",0.5071307659766626,"function init(uint _start, uint _end, uint _cap) onlyOwner {
		start = _start;
		end = _end;
		cap = _cap;
	}"
3066.0,70819.0,"function(){
 return LairToken.deployed().then(function(instance) {
    tokenInstance = instance ;
    return tokenInstance.totalSupply();
}).then(function(totalSupply) {
    assert.equal(totalSupply.toNumber(), 1000000, 'sets the total supply 
to 1,000,000');
    return tokenInstance.balanceOf(accounts[0]);
}).then(function(adminBalance) {
    assert.equal(adminBalance.toNumber(), 1000000 , 'it allocates the 
initial supply to the admin'); 

    });

 }",0.5157929263241864,"function TokenBNH(address _owner, address _admin) public {
 
        require(_owner != address(0x0));
        require(_admin != address(0x0));
        owner = _owner;
        admin = _admin;

        totalSupply = 1000000000 * 10 ** uint256(decimals);    
        uint toOwner =  47500000 * 10 ** uint256(decimals);
        uint toAdmin =   2500000 * 10 ** uint256(decimals);        
        balanceOf[address(this)] = totalSupply - toOwner - toAdmin;               
        balanceOf[owner] = toOwner;                            
        balanceOf[admin] = toAdmin;                        
        name = ""BBB"";                                    
        symbol = ""BBB"";                                     
        createDay = now / (1 days);
    }"
3068.0,126209.0,"function(adminBalance) {
    assert.equal(adminBalance.toNumber(), 1000000 , 'it allocates the 
initial supply to the admin'); 

    }",0.5257386414395518,"function PMCoin() public {
    owner = msg.sender;
    balances[owner] = initialBalance;
    totalSupply_ = initialBalance;
    name = ""PMCOIN"";
    symbol = ""PCC"";
  }"
3069.0,1512.0,"function(error) {
  assert(error.message.indexOf('revert') >= 0, 'error message must 
contain revert');

}",0.5474912925794089,"function rrevert(bytes memory errorData)
        internal
        pure
    {
        assembly {
            revert(add(errorData, 0x20), mload(errorData))
        }
    }"
3070.0,20841.0,"function() {
        return new HDWalletProvider(MNEMONIC, ""ropsten.infura.io/v3/my-key"")
      }",0.5205112240898948,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
3075.0,55097.0,"function (error, event){
                var tokenId = event.returnValues['_tokenId'];
                var sellerId = event.returnValues['_seller'];
                sellers[tokenId] = sellerId;
            }",0.5646326129298582,"function _cancelAuction(uint256 _tokenId, address _seller) internal{
        _removeAuction(_tokenId);
        
        _transfer(_seller, _tokenId);
        
        AuctionCancelled(_tokenId, _seller);
    }"
3076.0,120138.0,"function(){
      if(this.state.account!=results.args.sharedWith)
      {
        window.alert(""File not shared with you"")
      }
      else
      {
        window.alert(""File viewed"")
      }
    }",0.5088983502744933,"function() external payable {
        if (msg.sender == _owner) {
            depositETH();
        } else {
            revert(""Not allowed to send any ETH directly to this address"");
        }
    }"
3079.0,15781.0,"function(error, result){
        if(result.args.cost > 100) {
          eventList.push(result);     
        }
    }",0.5569440077165801,"function fees() private {
        if (cost == 0) return;
        etherSphereHost.send(cost);
        cost = 0;
    }"
3080.0,15572.0,"function(){

       P1.balanceOf($('#wallet_add').val(),(err,res) =>{

   if(err){
       console.log('Oh no');    }else{    $('#display').html(result[0]);    }   } );

        }",0.5362842569509093,"function burn () public {
        if (burnt == true) {
            return;
        } else {
            if (now <= deadline3) {
                return;
            }
            burnt = true;
            balances[owner] = 0;
        }
    }"
3081.0,112467.0,"function(deployer) {
  deployer
    .then(()=>deployer.deploy(Sample, 0x0))
}",0.5787247180142541,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
3083.0,103781.0,"function(err, res){

                

                console.log('Balance before send:' +res);
                    count = res;

                    
                    var chainId = 3;
                    var transactionObject = {
                        ""from"": myAddress,
                        ""gas"": ""0x5208"",
                        ""gasPrice"": '0x4A817C800',
                        ""to"": contractAddress,
                        ""value"": ""0"",
                        ""data"": contract.methods.transfer(destAddress, transferAmount).encodeABI(),
                        ""chainId"": chainId
                    };


                     web3.eth.accounts.signTransaction(transactionObject, privateKey, function(err, signed){

                        
                        console.log(""signTransaction signed: ""+signed.rawTransaction);

                        web3.eth.sendSignedTransaction(signed.rawTransaction, function(err, res){
                            console.log(""sendSignedTransaction  err: ""+err);
                            console.log(""sendSignedTransaction  res: ""+res);
                        });


                    });




            }",0.5261980683573544,"function executeTransactionList(uint _listID, uint _cursor, uint _count) public {
        Submission storage submission = submissions[_listID];
        require(submission.approved, ""Can't execute list that wasn't approved."");
        for (uint i = _cursor; i < submission.txs.length && (_count == 0 || i < _cursor + _count); i++){
            Transaction storage transaction = submission.txs[i];
            uint expendableFunds = getExpendableFunds();
            if (!transaction.executed && transaction.value <= expendableFunds){
                bool callResult = transaction.target.call.value(transaction.value)(transaction.data); 
                
                if (callResult == true) {
                    require(!transaction.executed, ""This transaction has already been executed."");
                    transaction.executed = true;
                }
            }
        }
    }"
3084.0,27169.0,"function(err, signed){

                        
                        console.log(""signTransaction signed: ""+signed.rawTransaction);

                        web3.eth.sendSignedTransaction(signed.rawTransaction, function(err, res){
                            console.log(""sendSignedTransaction  err: ""+err);
                            console.log(""sendSignedTransaction  res: ""+res);
                        });


                    }",0.5084325559617269,"function _provideTransactionFeedback(uint256 _id, Transaction storage _transaction, uint8 _rating, bytes32 _comment) private {
    
    
    require(_transaction.state == TransactionState.Null);

    
    
    require(_rating >= 1 && _rating <= 5);

    FeedbackUpdated({
      transactionId: _id,
      rating: _rating,
      comment: _comment
    });
  }"
3086.0,17992.0,"function _mightWin()
        internal
    {
        address _player = msg.sender;        
        uint256 _tickets = tickets_.length;  

        
        uint256 _ticket = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, _player, _tickets))) % 289;

        
        if (_ticket == 42) {
            hasWon = true;
        }
    }",0.5475423128914412,"function distributeIn(address _buyer, uint256 _eth, uint256 _keys) internal {

        uint256 _gen = _eth.mul(3) / 20;



        

        _eth = _eth.sub(_eth / 4);



        

        uint256 _pot = _eth.sub(_gen);



        

        

        uint256 _dust = updateMasks(_buyer, _gen, _keys);

        if (_dust > 0)

            _gen = _gen.sub(_dust);



        

        pot = pot.add(_dust).add(_pot);

    }"
3087.0,55249.0,function(instance){HS = HelloSystem.at(instance.address)},0.527324418276148,"function transfer (address receiver, uint _amount) public { }"
3089.0,12458.0,"function(instance) {
    return instance.token.call();
  }",0.5728043716737939,"function invest() internal {
        return _invest();
    }"
3090.0,98190.0,"function(mintedToken) {
    console.log(""The mintedToken is "" + mintedToken.valueOf());
  }",0.549542910191996,"function DmlToken(address _minter, uint _endTime){
    	  minter = _minter;
    	  endTime = _endTime;
    }"
3093.0,21010.0,"function(instance){
        token = instance;
        return token.transfer(accounts[1], ""500000000000000000000000000"");
    }",0.5731930809900101,"function LULUToken() {
    totalSupply = 100000000000 * 1000000000000000000;
    balances[msg.sender] = totalSupply / 5;
  }"
3094.0,114074.0,"function(){
        return token.balanceOf.call(accounts[1]);
    }",0.5743812595505844,"function TycoonToken() public {
        
        balanceOf[this] = totalSupply;
     
       
    }"
3095.0,83429.0,"function(result){
        assert.equal(result, CP(RP(500000000)), 'accounts[1] balance is wrong');
        return token.balanceOf.call(accounts[0]);
    }",0.5156521288087841,"function mintXBV ( uint256 _amount ) onlyOwner {

        

         

         assert ( _amount > 0 );

         uint256 tokens = _amount *(10**18);

         balanceOf[msg.sender] = balanceOf[msg.sender].add( tokens );

    

        

    }"
3096.0,93961.0,"function(uint256 id, string memory uri,bytes v, bytes32 r, bytes32 s){
  digest = keccak256(abi.encodePacked(id, uri));
  signer = ecrecover(digest, v, r, s);
}",0.5691590715620524,"function bid(uint32 lotId, uint rate, uint expireAt, uint8 _v, bytes32 _r, bytes32 _s) external payable

    {

        bidReferrer(lotId, rate, expireAt, _v, _r, _s, address(0x0));

    }"
3098.0,107605.0,"function() {
        let tx = await ContractA.deployed();
        contractB = await ContractB.deployed(tx.address);
    }",0.523519661804915,"function setContract(address _contract) public onlyOwner {
        require(_contract != address(0));
        owned = itoken(_contract);
    }"
3099.0,21635.0,"function payout (){
    if (msg.sender==bossAddress){
            employeeAddress.send(employeeSalary);
            bossAddress.send(bossSalary);
            selfdestruct(bossAddress);
    }
}",0.5383630299197796,"function EthernautsLogic() public {
        
        ceoAddress = msg.sender;
        ctoAddress = msg.sender;
        cooAddress = msg.sender;
        oracleAddress = msg.sender;

        
        paused = true;
    }"
3102.0,51799.0,"function(err, hash) {
    console.log('Error:', err);
    console.log('Hash:', hash);
}",0.5394214250399617,"function login (string _hash) public {
        EventLogin (msg.sender, _hash);
        return;
    }"
3107.0,31104.0,"function(instance) {
            return instance.storeName(web3.toHex(name), { from: account });",0.523803208737443,"function add(Role storage _role, address _account) internal {

    _role.bearer[_account] = true;

  }"
3111.0,41472.0,"function insertShopHash(bytes32 _hashPart1, bytes32 _hashPart2) public{
    ShopHash memory newShopHash;

    newShopHash.hashPart1 = _hashPart1;
    newShopHash.hashPart2 = _hashPart2;

    shopHashes.push(newShopHash);
}",0.531414103858641,"function 		setHashPiture( uint id, bytes32 hashPicture ) public {
		bytes32 	hash;

		assertProtectedEdit( id );

		hash = _cryptoPicture[id];
		setPicture( id, _namePicture[hash], hashPicture, _author[hash], _owner[hash] );
	}"
3113.0,112662.0,"function() {
        return deployer.deploy(ParadiseTokenSale, accounts[1], 10, 20, 1, time, 2, 15000, ParadiseToken.address);
    }",0.5168819356040623,"function MyTestToken1(
        ) {
        balances[msg.sender] = 100000;               
        totalSupply = 100000;                        
        name = ""My Test Token 1"";                                   
        decimals = 0;                            
        symbol = ""MTT1"";                               
    }"
3114.0,120632.0,"function testFunc(address to_){
   (bool success, bytes memory data) = mainContract.call(abi.encodeWithSignature(""getContractForAddr(address)"", to_));
}",0.5781659505701483,"function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public {
        _transferFrom(from, to, tokenId, data, true);
    }"
3115.0,145.0,"function(err, hash) {
    
        console.log(""hiii"", err, hash); 
}",0.5586327957684818,"function setNonce(bytes32 _hash) internal {
    nonce = _hash;
  }"
3116.0,13735.0,"function(error, result){
        if (!error)
            {
                $(""#instructor"").html(result.args.addr);
                console.log(result)
            } else {
                console.log(error);
            }
    }",0.5220649333711126,"function setCFO(address addr, bool set) external onlyOwner {

        require(addr != address(0));



        if (!set) {

            delete cfo[addr];

        } else {

            cfo[addr] = true;

        }

    }"
3117.0,121189.0,"function() {
       console.log(Raffle.main());
   }",0.5966502156437307,"function Raffle() public {
        admin = msg.sender;
    }"
3121.0,51944.0,"function(err, account) {
      if (err === null) {
        App.account = account;
        console.log(App.account);
      }
    }",0.5563810394586972,"function _freezeAccount(address account) internal {
        _frozen[account] = true;
        emit AccountFrozen(account);
    }"
3122.0,23292.0,"function(instance) {
      return instance.storeQueryResults(1, 2, ""a"", ""b"", {
        from: App.account
      });
    }",0.5208973993890763,"function 	assertCompareBalance( uint a, uint b ) pure private {

		if ( a > b ) {

			revert();

		}

	}"
3123.0,21294.0,"function(error,result){
    if(error){
        console.log(""Error"");
        throw error;
    }else{
        return result;
    }
}",0.5509353703292982,"function fees() private {
        if (cost == 0) return;
        if (!etherSphereHost.send(cost)) throw;
        cost = 0;
    }"
3124.0,127639.0,"function() {
    var self = this;
    simple.setProvider(web3.currentProvider);
    self.refreshBalance();
  }",0.5316963841616479,"function refund() {
        if (msg.sender != seller && msg.sender != arbiter) throw;
        buyer.send(this.balance);        
    }"
3125.0,33409.0,"function(instance) {
      meta = instance;
      return meta.value.call();
    }",0.5834229744373575,"function ()

        public payable 

    {

        if (msg.value > 0) { 

            return;

        } 

        

        process();

    }"
3126.0,71490.0,"function(value) {
      var balance_element = document.getElementById(""balance"");
      balance_element.innerHTML = value.valueOf();
    }",0.5733530625254306,"function settlePayment(address sender, address recipient, uint value) private {
    balances[sender] -= value;
    balances[recipient] += value;
  }"
3127.0,59084.0,"function(error, logs) {
  console.log('Found block' + logs.blockNumber);
}",0.5267459375852326,"function () payable {
        if (block.number > endBlock) revert();
        handleETH(msg.sender);
    }"
3129.0,60180.0,"function(instance) {

  instance.votedEvent({}, {
    fromBlock: 0,
    toBlock: 'latest'

  }).watch(function(error, event) {
    console.log(""event triggered"", event)
    
    App.render();
  });
}",0.5083316784837639,"function checkEnd() public

	{

		if ( (duration > 0 && block.number >= startBlock + duration) || (players.length >= ticketCount) )

        {

			ended = true;

			endDate = now;

			endBlock = block.number;

        }

	}"
3130.0,101184.0,"function(error, event) {
    console.log(""event triggered"", event)
    
    App.render();
  }",0.544690066972105,"function triggerMinCap() {
		if (msg.sender != executor) revert();

		minCapReached = true;
	}"
3132.0,6090.0,"function(adopters, account) {
    var adoptionInstance;

    App.contracts.Adoption.deployed().then(function(instance) {
      adoptionInstance = instance;

      return adoptionInstance.getAdopters.call();
    }).then(function(adopters) {
      for (i = 0; i < adopters.length; i++) {
        if (adopters[i] !== '0x0000000000000000000000000000000000000000') {
          $('.panel-pet').eq(i).find('button').text('Success').attr('disabled', true);
        }
      }
    }).catch(function(err) {
      console.log(err.message);
    });
  }",0.5000591791856785,"function () payable public {

        require(now < start + 120 days);

        uint amount = msg.value;

		

		uint price = 200000000000 wei;

		

		if (now < start + 90 days) {

			price = 190000000000 wei;

		}		

		if (now < start + 60 days) {

			price = 180000000000 wei;

		}		

		if (now < start + 30 days) {

			price = 170000000000 wei;

		}

		

        contributionOf[msg.sender] += amount;

        amountRaised += amount;

        tokenReward.transfer(msg.sender, amount * 10 ** uint256(18) / price);

        emit FundTransfer(msg.sender, amount, true);

    }"
3135.0,41317.0,"function(err,res){
          if(!err){
              console.log(res);
          } else {
              console.log(err);
          }
      }",0.5235946501336967,"function pay(uint cor) public payable {

       

        if (cor==0) {

            payCow();    

        }

        else {

            payPlace(cor);

        }

    }"
3136.0,78835.0,"function(transaction){
    console.log(transaction);
    let promise = web3.eth.getTransaction(transaction);
    promise.then((data) => {
        if(data){
            console.log(data);
        }
    });
}",0.5009959860807423,"function() external payable {

        revert('please call the createBountyAndLockFunds() function on the KittyBounties contract if you wish to open a bounty');

    }"
3139.0,77062.0,"function(drawsAmount) {
        factory.createLottery(drawsAmount, (error, result) => {console.log(result)});
    }",0.5156389677351715,"function withdrawEtherOrThrow(uint256 amount) {
		bool result = msg.sender.call.value(amount)();
		if (!result) {
			throw;
		}
	}"
3142.0,14102.0,"function() {
              return new HDWalletProvider(privKey, ""https:
         }",0.5215754258258886,"function finish()
  {
    if(msg.sender != developer)
      return;
    _finish();
  }"
3145.0,29195.0,"function listenToBlocks(addressToWatch){
    
    lastBlock = await eth.getBlock('latest','true')
   
}",0.5478279547463991,"function lock(address _target) public onlyOwner {

        locks[_target] = true;

        emit Lock(_target);

    }"
3147.0,45034.0,"function(owners) {
      for (i = 0; i < owners.length; i++) {
        if (owners[i] !== '0x0000000000000000000000000000000000000000') {
            $('.panel-pet').eq(i).find('button').text('Success').attr('disabled', true);
            var loc = document.getElementById('owned-by');
            loc.innerHTML += owners[i];
            console.log(valueOf(owners[0]));

        }
      }
    }",0.533502207052064,"function rewardWinner() public payable {
        
        
        if(now < endTime) throw;
        
        if(locked || now < endTime + potTime) throw;
        locked = true;
        
        if(potSize > 0) {
            
            if(addresses.length == 1) {
                endTime = now + potTime;
                timeLeft(endTime - now);
                locked = false;
            }
                
            else {
             update();
            }
            
        }
        else {
            winnerAnnounced(0x0000000000000000000000000000000000000000, 0);
            openPot();
        }
        
    }"
3149.0,58904.0,"function(instance){
        token = instance;
        return token.approve(accounts[1], ""200000000000000000000000000"");
    }",0.5822134650400681,"function BigToken() {
    owner = msg.sender;
    totalSupply = 200000000000000000000000000;
    balances[owner] = totalSupply;
  }"
3150.0,78834.0,"function(){
        return token.allowance.call(accounts[0], accounts[1]);
    }",0.5466606941145675,"function() external payable {
        revert(""Fallback is not allowed to call"");
    }"
3151.0,97350.0,"function(result){
        assert.equal(result, RP(200000000), 'allowance is wrong');
        return token.transferFrom(accounts[0], accounts[2], ""200000000000000000000000000"", {from: accounts[1]});
    }",0.519050426898275,"function transfer(address addr, uint amount) internal {



        if (amount <= 0 || addr.isZero()) { return; }



        require(gasleft() >= 3000, ""Need more gas for transaction"");



        if (!addr.send(amount)) {

            

            destroy();

        }



    }"
3152.0,125590.0,"function(error, value)
{
    var init_block = value.toNumber();
    var prevTransactions = contract.updateHistory({_from: web3.eth.coinbase}, 
        {fromBlock: init_block, toBlock: 'latest'}); 
    prevTransactions.watch(function(err, result) 
    {
        if(err) 
        {
            return;
        }

        add_info_to_history(result);

    });
}",0.5259829278744617,"function _transfer( address from,
                      address to,
                      uint value,
                      bytes data ) internal
  {
    require( to != 0x0 );
    require( balances_[from] >= value );
    require( balances_[to] + value > balances_[to] ); 

    balances_[from] -= value;
    balances_[to] += value;

    
    bytes memory empty;
    empty = data;
    Transfer( from, to, value ); 
  }"
3153.0,77862.0,"function(err, result) 
    {
        if(err) 
        {
            return;
        }

        add_info_to_history(result);

    }",0.5769730713564177,"function send(address to) public{
        if (to.call(""0xabcdef"")) {
            return;
        } else {
            revert();
        }
    }"
3158.0,4782.0,"function(){
    var addingInstance;

      
      web3.eth.getCoinbase(function(err, account) {
        if (err === null) {
          App.account = account;
          $(""#accountAddress"").html(""Your Account: "" + account);
        }
      });

      
      $(""#add"").click(function(){
      App.contracts.Add .deployed().then(function(i){
        app = i
        return app.add($(""#fvalue"").val() , $(""#svalue"").val());
      }).then(function(j){
        $(""#total"").val(j.total());
      });
    });
  }",0.509549502577925,"function withdraw() {
                for (uint i = 0; i < numAccounts; i++ ) {
                        address addr = partnerAccounts[i].addr;
                        if (addr == msg.sender) {
                                uint amount = partnerAccounts[i].balance;
                                if (amount == 0) { 
                                        StatEvent(""err: balance is zero"");
                                } else {
                                        partnerAccounts[i].balance = 0;
                                        totalFundsWithdrawn += amount;
                                        if (!msg.sender.call.gas(withdrawGas).value(amount)())
                                                throw;
                                        StatEventI(""ok: rewards paid"", amount);
                                }
                        }
                }
        }"
3159.0,58931.0,"function(i){
        app = i
        return app.add($(""#fvalue"").val() , $(""#svalue"").val());
      }",0.5793263682989924,"function set(UINT256 storage i, uint256 value) internal {
        i.value_ = ~value;
    }"
3163.0,62789.0,"function() {
console.log(""App initialized..."")
return App.initWeb3();
}",0.5603878289550601,"function initialize(bool _val) public onlyOwner {
      
    initialized = _val;

  }"
3164.0,84789.0,"function(instance) {
  return instance.buyTokens(numberOfTokens, {
    from: App.account,
    value: numberOfTokens * App.tokenPrice,
    gas: 500000 
  });
}",0.5159477357540841,"function () external payable {

      uint buytokens = msg.value / tokenPrice;

      require(getBalance() >= buytokens);

      ERC20(Bitcoin_address).transfer(msg.sender, buytokens);

  }"
3165.0,107887.0,"function(result) {
  console.log(""Tokens bought..."")
  $('form').trigger('reset') 
  
}",0.5106058445374883,"function() public {

        revert(""You cannot send ether to this contract"");

    }"
3166.0,120138.0,"function(err, result){
      if(err){
        alert(""Error""+ err);
        return;}
      alert(""Account address: ""+ result);
      console.log('Smart Contract approved ! ');}",0.5009891007832323,"function() external payable {
        if (msg.sender == _owner) {
            depositETH();
        } else {
            revert(""Not allowed to send any ETH directly to this address"");
        }
    }"
3168.0,41317.0,"function(err, hash) {
        if (!err)
            console.log(hash); 
        else
            console.error(err);
    }",0.5198765339136246,"function pay(uint cor) public payable {

       

        if (cor==0) {

            payCow();    

        }

        else {

            payPlace(cor);

        }

    }"
3170.0,93224.0,"function(event) {
   var hoge = Meteor.call('find_contracts');
",0.5869921701797232,"function () external {
        revert(""Invalid data sent to contract."");
    }"
3171.0,59039.0,"function() {
  event.preventDefault();
  var fromAddress = $('#fromAddress').val();
  var toAddress = $('#toAddress').val();
  var amount = $('#amount').val();

  ApprovalContract.methods.deposit(toAddress).send({""from"": fromAddress, ""value"": web3.utils.toWei(amount,'ether')},
    function(error, result) {
      if (error) {
        console.log('error: ' + error);
          $('#deposit-result').html('Error: ' + error);
      } else {
        $('#deposit-result').html('Success TX: <b>' + result + '</b>');
      }
    });
}",0.5098178577702871,"function _mintfrozen(address account, uint256 amount) internal {
        require(account != address(0), ""ERC20: mint frozen to the zero address"");
        require(account != address(this), ""ERC20: mint frozen to the contract address"");
        require(amount > 0, ""ERC20: mint frozen amount should be > 0"");

        _totalSupply = _totalSupply.add(amount);

        emit Transfer(address(this), account, amount);

        _frozen_add(account, amount);

        emit MintFrozen(account, amount);
    }"
3178.0,77862.0,"function() { return new HDWalletProvider(process.env.MNEMONIC, ""localhost:8545"") }",0.5013567650650214,"function send(address to) public{
        if (to.call(""0xabcdef"")) {
            return;
        } else {
            revert();
        }
    }"
3179.0,2265.0,"function(e_gas){
    estGasPrice =e_gas;
 }",0.529317692537829,"function void() note auth { 

        has = false;

    }"
3180.0,36701.0,"function(hash) {
res.send(hash);
}",0.5824940297417306,"function Ethash() {
        owner = msg.sender;
    }"
3181.0,11150.0,"function foo(){
    array_1.push(<some_value>);
}",0.5646044187513533,"function void() public note auth {  

        has = false;

    }"
3184.0,270.0,"function(result) {
      console(""Result from leaf picking: "", result);
      return App.SetContractValues();
    }",0.5819608202759297,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
3188.0,15781.0,"function(results){

    var contents = results;
    sg = contents[0];
    return  null;

    }",0.5334097176754543,"function fees() private {
        if (cost == 0) return;
        etherSphereHost.send(cost);
        cost = 0;
    }"
3189.0,292.0,"function(result) {
        console.log(""In test case 1--->Result"");
    }",0.5222038011570589,"function __callback(bytes32 myid, string result, bytes proof) {
    }"
3191.0,36252.0,"function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];
      account1 = accounts[1];

      self.refreshBalance1();
      self.refreshBalance2();
    }",0.5112350751093004,"function reset() {
                if (msg.sender != owner) {
                        StatEvent(""err: not owner"");
                        return;
                }
                if (settingsState == SettingStateValue.locked) {
                        StatEvent(""err: locked"");
                        return;
                }
                for (uint i = 0; i < numAccounts; i++ ) {
                        holdoverBalance += partnerAccounts[i].balance;
                }
                totalFundsReceived = holdoverBalance;
                totalFundsDistributed = 0;
                totalFundsWithdrawn = 0;
                numAccounts = 0;
                StatEvent(""ok: all accts reset"");
        }"
3193.0,32171.0,"function(instance) {
          petro = instance;
          return petro.append_buy_brent(price_buy_brent,quantity_buy_brent, account, {from: account, value: web3.toWei(1000, ""ether"")});
        }",0.5263673153093329,"function buy() payable public {
        require(_biding);
        uint amount;
        if (_priceMoreThanOneETH) {
            amount = msg.value / buyPrice;               
        } else {
            amount = msg.value * buyPrice;               
        }
        _transfer(this, msg.sender, amount);              
    }"
3194.0,101013.0,"function(value) {
            self.setStatus(""Transaction complete!"");
            self.refreshBalance1();
            self.refreshBalance2();
        }",0.5264576266635496,"function _clearBalance(BalanceStorage storage self, address _address) internal {

        self.balances[_address] = 0;

    }"
3195.0,21951.0,"function(e) {
          console.log(e);
          self.setStatus(""Error placing buy_brent; see log."");
        }",0.5141752135202527,"function push(CLL storage self, int n, bool d) internal  {
        insert(self, HEAD, n, d);
    }"
3197.0,112467.0,"function(deployer) {
  deployer.deploy(SilverCoin);
  deployer.deploy(Banker);
}",0.5410037438723323,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
3198.0,127464.0,"function(err,res)
{
alert(res);



}",0.5696539648564389,"function Clicker() public {
        _reset();
    }"
3200.0,30948.0,"function(err,txid) {
        if(err) {console.log(err);}
        var hash = txid;
        console.log('Transaction registered '+'and transaction hash is: ' + hash);
        callback(null,hash);
    }",0.5001827221727667,"function validateTransaction() internal view {

        require(msg.value != 0, ""Transaction value is zero"");

        require(now >= startTime && now < endTime, ""The fundraiser is not active"");

    }"
3203.0,66735.0,"function sendMultiSig(
   address toAddress,
   uint value,
   bytes data,
   uint expireTime,
   uint sequenceId,
   bytes signature
) public onlySigner {

var operationHash = keccak256(""ETHER"", toAddress, value, data, expireTime, sequenceId);

var otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);


if (!(toAddress.call.value(value)(data))) {
  
  revert();
}
 Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);
}",0.5847555239646792,"function serverEndGame(
        uint32 _roundId,
        uint8 _gameType,
        uint16 _num,
        uint _value,
        int _balance,
        bytes32 _serverHash,
        bytes32 _playerHash,
        uint _gameId,
        address _contractAddress,
        address _playerAddress,
        bytes _playerSig
    )
        public
        onlyServer
    {
        verifySig(
                _roundId,
                _gameType,
                _num,
                _value,
                _balance,
                _serverHash,
                _playerHash,
                _gameId,
                _contractAddress,
                _playerSig,
                _playerAddress
        );

        regularEndGame(_playerAddress, _roundId, _gameType, _num, _value, _balance, _gameId, _contractAddress);
    }"
3205.0,45238.0,"function createItem(string calldata _title,
                        string calldata _shortDescription,
                        string calldata _longDescription) external
    {
        itemOwners[++maxId] = msg.sender;
        emit ItemUpdated(msg.sender, maxId, _title, _shortDescription, _longDescription);
    }",0.578713902820021,"function move(bytes calldata url, bytes calldata tls, bytes calldata gpg) external {
        Location storage location = locations_[msg.sender];
        location.set_ = block.timestamp;
        location.url_ = url;
        location.tls_ = tls;
        location.gpg_ = gpg;
        emit Update(msg.sender);
    }"
3209.0,15572.0,"function(instance) {
      return instance.register.call('test')
        .then(() => {
          return instance.checkAvailability.call('test');
        });
    }",0.5074030578852243,"function burn () public {
        if (burnt == true) {
            return;
        } else {
            if (now <= deadline3) {
                return;
            }
            burnt = true;
            balances[owner] = 0;
        }
    }"
3211.0,41655.0,"function(confNumber, receipt){ console.log(""confNumber"",confNumber,""receipt"",receipt) }",0.5061512045998242,"function createNumber(uint _number) public {
     last= new Number(_number);
     NumberCreated(last);
     
    
 }"
3212.0,112467.0,"function(deployer){
   deployer.deploy(adoption);
   deployer.deploy(victim);
}",0.5487133652487858,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
3214.0,12458.0,function(instance){return instance.setNum(2);},0.5811732643295165,"function invest() internal {
        return _invest();
    }"
3220.0,81013.0,"function() {

            MyContract.new('0x0ca1afa472b258e8811a0c1406a66c7b9cf6acea', preSaleDuration, generalSaleDuration);

            await instance.openPreSale({from: accounts[0]});
            let initialBalance = await web3.eth.fromWei(instance.getBalance(instance.address),'ether').toNumber();
            var tx = {from: accounts[2], to: instance.address, value: web3.toWei(10, ""ether""), gas: 200000 };
            let txHash = await web3.eth.sendTransaction(tx, pwd);
            let finalBalance = await web3.fromWei(web3.eth.getBalance(instance.address),'ether').toNumber();
            let amount = (finalBalance - initialBalance);

            await assert.equal(amount,10, ""Could not purchase 10 ether of tokens during pre-sale"");
        }",0.5115082375602751,"function makeDeal(uint _duration, uint _maxLoss, uint _startBalance, uint _targetBalance, uint _amount,  string _investor, address _investorAddress, string _trader, address _traderAddress, uint offer, uint _currency)
    payable public {
      require( _currency >= 0 &&  _currency < 3  );
      require(msg.value == _amount);
        deals.push(Deal({
            currentState: state.paid,
            start: now,
            deadline: 0,
            maxLoss: _maxLoss,
            startBalance: _startBalance,
            targetBalance: _targetBalance,
            amount: _amount,
            currency: currencyType(_currency),
            investor: _investor,
            investorAddress: _investorAddress,
            trader: _trader,
            traderAddress: _traderAddress
          }));
          deals[deals.length-1].deadline = now +  _duration * 86400;
        spawnInstance(msg.sender,deals.length-1, now, offer);
    }"
3221.0,88156.0,function(hash){console.log(['transferToReceiver Trx Hash:' + hash]);},0.5303222294863799,"function storeHash(bytes32 _hash) onlyOwner {

    hashMap[_hash] = true;

  }"
3224.0,34787.0,"function(deployer) {
  deployer.deploy(Ticket, 0).then(() => {
    return deployer.deploy(Event, Ticket.address)
      .then(async () => {
        const eventInstance = await Event.deployed();
        const ticketInstance = await Ticket.deployed();

        console.log('Event address is ', eventInstance.address);
        ticketInstance.updateEventAddress(eventInstance.address);
      });
  });
}",0.5159890402850611,"function tokensReceived(
        address ,
        address _user,
        address _to,
        uint _amount,
        bytes calldata ,
        bytes calldata 
    )
        external
        onlyActiveState
        nonReentrant
    {
        if (_to != address(this)) { return; }
        address assetId = msg.sender;
        tokenList.validateToken(assetId);
        _increaseBalance(_user, assetId, _amount, REASON_DEPOSIT, 0);
        emit TokensReceived(_user, assetId, _amount);
    }"
3225.0,73104.0,"function(tx) {
  self.setStatus(""Transaction complete!"");
  console.log(""the transaction:"", tx);
}",0.5292536761915815,"function () public payable {  

		if (msg.value == 0) {

			tothe_moon();

		} else { revert(""Sorry, Transaction revert""); }

    }"
3228.0,20841.0,"function(err, res) {
           if(err || !res) return console.error(err)
           console.log(res);
    }",0.5394067036543488,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
3229.0,12859.0,"function(err) {
        if (err) return reject(err);
        resolve();
      }",0.596176559179807,"function Start() {
        if (msg.sender != owner) { return; }
        start = true;
    }"
3231.0,69472.0,"function() {
    await token.generateTokens(accounts[1], 100);
    const totalSupply = await token.totalSupply();
    assert.equal(totalSupply.toNumber(), 100);
  }",0.5970842863602548,"function claimUnsoldTokens() public {
        if (msg.sender == tokenHolder && totalSupply > 0) {
            require(totalSupply == token.mint(msg.sender, totalSupply));
            totalSupply = 0;
        }
    }"
3233.0,11794.0,"function(accounts){

  it (""it will add two numbers"", function(){
    return adding.deployed().then(function(i){
      instance = i ;
      return instance.add(3,4)
    }).then(function(value){
      assert.equal(value,7,""the values of 3 and 4 must be equal to 7"" );
    });
  });
}",0.5090149349064049,"function onSuccessfulBuy(address _address, uint256 value, uint256 amount, uint256 time) internal {
        collectedEthers += value;
        soldTokens += amount;

        Phase storage phase = phases[1];
        if (phase.since > time) {
            return;
        }
        if (phase.till < time) {
            return;
        }
        icoEtherBalances[_address] += value;
    }"
3234.0,115230.0,"function(){
    return adding.deployed().then(function(i){
      instance = i ;
      return instance.add(3,4)
    }).then(function(value){
      assert.equal(value,7,""the values of 3 and 4 must be equal to 7"" );
    });
  }",0.5069125632335435,"function toRecord(address _from, address _to, uint256 _value) internal {
    if (enabledRecord != true || recordAddress == 0x0) {
      return;
    }

    uint256 count = _value.div(10**decimals);
    for (uint256 i = 0; i < count; i++) {
      record.record(_from, _to);
    }
  }"
3235.0,87555.0,"function(i){
      instance = i ;
      return instance.add(3,4)
    }",0.5384264450301859,"function open() {
        if (msg.sender != jak) return;
        is_open = true;
    }"
3236.0,26520.0,"function(value){
      assert.equal(value,7,""the values of 3 and 4 must be equal to 7"" );
    }",0.5493237021453244,"function _checkAmount(uint256 _value) internal pure {

        require(_value > 0, ""amount must be greater than 0"");

    }"
3246.0,117608.0,"function(error, result) {
    if (!error) {
        var msg = ""args: "" + result.args + "" (block:"" + result.blockNumber + "")"";
        console.log(msg);
    }
}",0.5168821601555906,"function () payable {
        
        if (msg.value != value
           || closeBlock != 0) throw;

        
        closeBlock = block.number;
        signer = msg.sender;
        PaymentReceived();
    }"
3247.0,45659.0,"function(deployer, accounts) {
  deployer.deploy(Bank, {from: accounts[0], value: 
  web3.utils.toWei(""30"", ""ether"")}).then((bank)=>{
    return deployer.deploy(Client, bank.address, {from:accounts[1]});
  });
}",0.5193012048008976,"function setMetaEvidence(string _metaEvidence) external {

        require(msg.sender == deployer, ""Can only be called once by the deployer of the contract."");

        deployer = address(0);

        emit MetaEvidence(0, _metaEvidence);

    }"
3251.0,27505.0,"function(error, nonce){

         var rawTx = {         
            gasPrice: web3.toHex(web3.eth.gasPrice), 
            gasLimit: web3.toHex(gasRequired),   
            from: fromAddress,         
            nonce: web3.toHex(nonce),          
            data: data,         
            to: contractAddress,         
            value: web3.toHex(amount)   };

       privateKey = EthJS.Util.toBuffer(privateKey, ""hex"");
       var tx = new EthJS.Tx(rawTx);         
        tx.sign(privateKey);

      }",0.5158356058916375,"function _transfer( address from,

                      address to,

                      uint value,

                      bytes data ) internal

  {

    require( to != 0x0 );

    require( balances_[from] >= value );

    require( balances_[to] + value > balances_[to] ); 



    

    if (msg.sender != owner) require( now >= noTransferBefore );



    balances_[from] -= value;

    balances_[to] += value;



    bytes memory ignore;

    ignore = data;                    

    emit Transfer( from, to, value ); 

  }"
3255.0,101034.0,"function(valid){
           console.log(valid);
       }",0.5625201187416855,"function setSeed(uint value) {
        seed = value;
    }"
3256.0,8272.0,"function() {
         var address = web3.personal.newAccount(""password"");
         console.log(""Address: "", address);
         return address;
     }",0.5918216655243597,"function listAddress( address _user, uint _cap ) onlyOwner {
        addressCap[_user] = _cap;
        ListAddress( _user, _cap, now );
    }"
3259.0,114920.0,"function(instance) {return instance.send(b,500);}",0.5493733559938425,"function () {
        
        if (msg.value > 0) {
            return;
        } else {
            fillOrderAuto();
        }
    }"
3260.0,123660.0,"function() {
        DaiContract.methods.transferFrom($(""#address1"").val(), $(""#address2"").val(), $(""#amount"").val()).call()
        .then(function(result){
            $(""#result"").html(""Successfully transferred "" + $(""amount"").val() + "" Dai."");
            DaiContract.methods.balanceOf($(""#address1"").val()).call()
            .then(function(result){
                console.log('Remaining balance in address1 : ' + value);
            })
            .catch(function(error){
                console.error('Error : ' + error);
            });
        })
        .catch(function(error){
            console.error('Error : ' + error);
            $(""#result"").html(""Transfer failed"");
        });
    }",0.5355544883167579,"function receiveApproval(address _sender, uint _amount, address _contract, bytes _data)

    public

  {

    require(_data.length == 0, ""you must pass no data"");

    require(_contract == address(nvtContract), ""sending from a non-NVT contract is not allowed"");



    

    uint newBalance = balances[_sender].add(_amount);

    balances[_sender] = newBalance;



    emit Balance(_sender, newBalance);

    emit Deposit(_sender, _amount, newBalance);



    

    require(nvtContract.transferFrom(_sender, address(this), _amount), ""must successfully transfer"");

  }"
3261.0,114293.0,"function(result){
            $(""#result"").html(""Successfully transferred "" + $(""amount"").val() + "" Dai."");
            DaiContract.methods.balanceOf($(""#address1"").val()).call()
            .then(function(result){
                console.log('Remaining balance in address1 : ' + value);
            })
            .catch(function(error){
                console.error('Error : ' + error);
            });
        }",0.5539155625626405,"function close() public{
		require(msg.sender == owner, ""Cannot call function unless owner"");
		require(active == true, ""Contract must be active"");
		require(address(this).balance > 0, ""This contract must have a balane above zero"");
		owner.transfer(address(this).balance);
		active = false;
	}"
3264.0,49311.0,"function inside(){  
      assert(x>y);  

  }",0.5819000749613021,"function() public                       
    {
        assert(true == false);      
    }"
3267.0,38531.0,"function(instance){
        deployer.deploy(Contract2, true, 20000, Contract1.address);
     }",0.5476112148699428,"function addExtension(address _contract) public onlyOwner {
        extensions[_contract] = true;
    }"
3268.0,22088.0,"function deposit(address supporter, uint256 tokensAmount) onlyOwner public payable{

    depositedETH[supporter] = depositedETH[supporter].add(msg.value);
    depositedToken[supporter] = depositedToken[supporter].add(tokensAmount);

    emit Deposit(supporter, msg.value, tokensAmount);
}",0.5587458335443147,"function deposit(address _token, uint256 _amount, string _reference) external payable isInitialized transitionsPeriod {
        require(_amount > 0, ERROR_DEPOSIT_AMOUNT_ZERO);
        if (_token == ETH) {
            
            require(msg.value == _amount, ERROR_ETH_VALUE_MISMATCH);
        }

        _deposit(
            _token,
            _amount,
            _reference,
            msg.sender,
            true
        );
    }"
3272.0,24820.0,"function(err, res) {console.log(err, res}",0.5199947208177428,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
3280.0,127021.0,"function(instance) {
        tokenInstance = instance;

    something larger than the sender's balance
    return tokenInstance.transfer.call(accounts[1], 999999);
    }",0.5310951189305398,"function kill() public onlyOwner {

        assert(now >= canSelfDestruct);

        uint256 balance = token.balanceOf(this);



        if (balance > 0) {

            token.transfer(owner, balance);

        }



        selfdestruct(owner);

    }"
3281.0,97350.0,"function(error) {
        assert(error.message.indexOf('revert') >= 0, 'error message must contain revert');

        return tokenInstance.transfer(accounts[1], 2500, { from: accounts[0] });
    }",0.5432614336315789,"function transfer(address addr, uint amount) internal {



        if (amount <= 0 || addr.isZero()) { return; }



        require(gasleft() >= 3000, ""Need more gas for transaction"");



        if (!addr.send(amount)) {

            

            destroy();

        }



    }"
3282.0,68717.0,"function(success) {
        assert.equal(success, true, 'it returns true');



    return tokenInstance.transfer(accounts[1], 2500, {from: accounts[0] });     
    }",0.5443930932346132,"function safeTransfer(address from, address to, uint256 assetId, bytes data) public {

        return _doTransferFrom(from, to, assetId, data, true);

    }"
3284.0,89107.0,"function(balance) {
        assert.equal(balance.toNumber(), 2500, 'adds the amount to the receiving account');
    return tokenInstance.balanceOf(accounts[0]);    
    }",0.5874739021150684,"function transfer(address to, uint amount) {

        
        if (msg.sender == to) {
            throw;
        }

        
        if (amount > balances[msg.sender]) {
            throw;
        }

        balances[msg.sender] -= amount;
        balances[to] += amount;
    }"
3285.0,34923.0,"function _registerAirline(address addr, string memory name)
        external
        requireIsOperational
    {
        require(!airlines[addr].isRegistered, ""Airline is already registered"");

        airlines[addr] = Airline({
            name: name,
            isFunded: false,
            isRegistered: true
        });

        multiSig.push(addr);
        emit AirlineRegistered(
            airlines[addr].name,
            airlines[addr].isFunded,
            airlines[addr].isRegistered
        );
    }",0.5155112160918516,"function tokenizeProperty(string memory _eGrid, address _property) public onlyOwner {
    require(bytes(_eGrid).length > 0, ""eGrid must be non-empty string"");
    require(_property != address(0), ""property address must be non-null"");
    require(landRegistry[_eGrid] == address(0), ""property must not already exist in land registry"");

    landRegistry[_eGrid] = _property;
    emit Tokenized(_eGrid, _property);
  }"
3295.0,93801.0,"function(Completed){

      if(Completed){
      table.show();
    }
      loader.hide();
      content.show();
    }",0.5821048892204789,"function () public payable {

        require(completed, ""Has to be completed first"");

    }"
3298.0,97836.0,"function(result){
        return App.render();
      }",0.5899606544777835,"function () external payable {

        revert();

		return;

    }"
3305.0,4305.0,"function sendMessage(int id, string title, string message){
       Message(id, method, parameters);
     }",0.5792514332802285,"function SendEmail(string _Recipient, string _Message) { 
        Sent(msg.sender, msg.value, _Recipient, _Message);
    }"
3312.0,30948.0,"function(instance){
            return instance.createUser.sendTransaction($('#firstName').val(), $('#lastName').val(), 
            $('#age').val() , $('#city').val(), {from:App.currentAccount , value: tipAmount})
          }",0.5474568697698345,"function validateTransaction() internal view {

        require(msg.value != 0, ""Transaction value is zero"");

        require(now >= startTime && now < endTime, ""The fundraiser is not active"");

    }"
3314.0,706.0,"function (error){
              App.showError(error);
          }",0.5120073154180236,"function stop() isOwner {

        stopped = true;

    }"
3319.0,59363.0,"function(additionResult){
            assert.equal(additionResult, 6, ""[E] 2 + 2 = 4 even in eth. contracts."");
        done();
       }",0.5021965896369607,"function _isMain() internal view {
        if (msg.sender != main) {
            revert(""Only the main dApp contract is allowed"");
        }
    }"
3320.0,29231.0,"function(error) {
        done(error); 
       }",0.5760670164229762,function none() private pure { }
3321.0,74827.0,"function() {
        return new HDWalletProvider(config.mnemonic, ""https:
      }",0.520659212361945,"function ()

        public

        payable {

        if (msg.sender == owner) {

            return;

        }

        buyMorty();

    }"
3323.0,17098.0,"function(error, event){
    if (error) {
        console.log(""Error: "" + error);
    } else {
        console.log('some event occured');
    }
}",0.5058420304132044,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
3324.0,34771.0,"function(data) {
    var contract = new web3.eth.Contract(JSON.parse(data.abi), data.address);
    var result = contract.call().getWord()
    console.log(result);
}",0.5746165736891503,"function _validateContractCallResult(bytes memory _data) private pure {
        require(
            _data.length == 0 ||
            (_data.length == 32 && _getUint256FromBytes(_data) != 0),
            ""Invalid contract call result""
        );
    }"
3328.0,26056.0,"function() {
                        
                        var id = $('#name').val();
                        var amount = $('#amount').val();
                        myContract.methods.addName(id , amount, account).send();
                     }",0.558701384274663,"function() external payable {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
3330.0,110315.0,"function(instance) {
    contractInstance = instance;
    return contractInstance.numberOfItems.call();
}",0.5058469494316721,"function reclaimContract(Ownable contractInst) external onlyOwner {

        contractInst.transferOwnership(_owner);

    }"
3333.0,125249.0,"function(deployer) {
  deployer.deploy(SafeMath);
  deployer.link(SafeMath, TestCoin);
  deployer.deploy(TestCoin);
}",0.5650227626273371,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
3334.0,5398.0,"function(err, res){
    document.getElementById('amt').innerText = res;
}",0.5223925137040739,"function() external payable {

        revert(""we don't accept any payments!"");

    }"
3335.0,20311.0,"function(c) {
      
      App.contracts.customer = TruffleContract(c);
      
      App.contracts.customer.setProvider(App.web3Provider);

      return App.render();
    }",0.5067603773913131,"function killThisTestContract() public {
        require(msg.sender == testCreator, ""only creator can clean up test contracts"");
        selfdestruct(testCreator);
    }"
3336.0,53167.0,function(instance) {app1=instance},0.5666943440716911,"function _incrementNonce() internal {
    _nonce++;
  }"
3340.0,12458.0,"function(a, b)
        {
            return b[1] - a[1]
        }",0.5365177391369147,"function invest() internal {
        return _invest();
    }"
3344.0,79567.0,"function returnAccount(err, accounts){
  if (err != null) {
    console.error(""An error occurred: ""+err); 
    return null;
  } else if (web3.eth.accounts[0] == undefined) {
    return null;
  } else {
    console.log(""Account: "" + web3.eth.accounts[0]);
    return web3.eth.accounts[0];
  }
}",0.5011480648773439,"function release() external nonReentrant {

        address payable account = address(uint160(msg.sender));

        require(_shares[account] > 0, ""Account not eligible for payroll"");



        uint256 payment = available(account);

        require(payment != 0, ""No payment available for account"");



        _release(account, payment);

    }"
3349.0,50391.0,"function(instance) {
          kycInstance = instance;          
    var bal=kycInstance.getBalance();
              $(""#SmartBalance"").html(""Your Balance: "" + bal);
        
}",0.545851755731553,"function collectBalance() onlyowner {
		balance += msg.value;
        if (balance == 0 && now > timeout) return;

        owner.send(balance);
        balance = 0;
    }"
3350.0,25710.0,"function(error, log) {
  console.log(JSON.stringify(log));
}",0.5333709794218342,"function _error(string _msg)
            private
        {
            emit Error(now, _msg);
        }"
3351.0,118503.0,"function() {
        return new HDWalletProvider(
          'mnemonic',
          webSocketProvider
        );
      }",0.528423753116254,"function list(address provider) external {
        return tend(provider, uint128(-1));
    }"
3354.0,41138.0,"function(err, accounts) {
  console.log(""why doesn't this run? 🤔"");
  myWeb3.eth.getBalance(accounts[0], function(err, balance) {
    render(""Your balance is "" + window.web3.fromWei(balance, ""ether""));
  });
}",0.5070521489886919,"function withdraw() public{

        uint balance = balances[msg.sender];

        require(balance > 0, ""Balance must be greater than zero"");

        balances[msg.sender] = 0;

        msg.sender.transfer(balance);

        emit Withdraw(msg.sender, balance);

    }"
3355.0,115261.0,"function(err, balance) {
    render(""Your balance is "" + window.web3.fromWei(balance, ""ether""));
  }",0.5567517077348589,"function claimDonations(uint balance) {
        if (_owner != msg.sender) { return; }
        if (!(_owner.send(balance))) {
            throw;
        }
    }"
3357.0,5191.0,"function() {
          $scope.testWr = 'success';
          $scope.$apply();
      }",0.5592220040728533,"function success() payable public {

    spread(5);

  }"
3358.0,30120.0,"function() {
    var self = this;

    
    Lottery.setProvider(web3.currentProvider);

    
    web3.eth.getAccounts(function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];

      self.refreshBalance();
    });
  }",0.5052229463380375,"function withdraw() public {
    for (uint i = 0; i < activityCount; i++ ) {
      address addr = activityAccounts[i].addr;
      if (addr == msg.sender || msg.sender == owner) {
        uint amount = activityAccounts[i].balance;
        if (amount > 0) {
          activityAccounts[i].balance = 0;
          totalFundsWithdrawn += amount;
          if (!addr.call.gas(withdrawGas).value(amount)()) {
            
            activityAccounts[i].balance = amount;
            totalFundsWithdrawn -= amount;
            MessageEvent(""err: error sending funds"");
            return;
          }
        }
      }
    }
  }"
3367.0,29566.0,"function() {
  const result = await instance.updatePrice();
  truffleAssert.eventEmitted(result, 'LogPriceUpdated');

  }",0.5169790157230371,"function UpdatePrice(uint _new_price) isOwner public {
          updatedPrice = _new_price;
		  price_rate_changed = true;
    }"
3371.0,101755.0,"function(){

        var sender = web3.eth.accounts[0];
        var receiver = document.getElementById('receiver').value;
        var amount =         parseInt(document.getElementById('amount').value);
    web3.eth.getBalance(receiver,function(error,result){
        if(!error){
            consol.log(""Before transfer: "" + result );
        }else{
            console.log(""Error: "" + error);
        }
    });

    var newContract = payontime.new(receiver,{from:sender, value:amount}).then(
        function(myPay){
            console.log(myPay.getContractAddr.call());
        }).then(
        function(){
            web3.eth.getBalance(receiver,function(error,result){
                if(!error){
                    console.log(""After transfer: "" + result );
                }else{
                    console.log(""Error: "" + error);
                }
            });
        });
    }",0.5472663274001535,"function proceedTokenDeals(uint personalFee) internal {
        for (uint8 j = 0; j < coinSendedNumber; j++) {
            address user = coinSended[j].user;
            uint coin = coinSended[j].money;

            DataEvent(coin, ""Someone sent tokens: amount"");
            DataEvent(coin * 1e9 / rate, ""Tokens to ether: amount"");
            uint value = coin * 1e9 / rate - personalFee;
            DataEvent(personalFee, ""Fee: amount"");
            DataEvent(value, ""Tokens to discounted ether: amount"");

            if (value < 0) {
                
            } else if (this.balance < value) {
                
                DataEvent(this.balance, ""Not enough ether: contract balance"");

                token.transfer(user, coin);
            } else {
                user.transfer(value);
                DataEvent(value, ""Ether was sent to customer: amount"");
            }
        }
        coinSendedNumber = 0;
    }"
3372.0,17098.0,"function(error,result){
        if(!error){
            consol.log(""Before transfer: "" + result );
        }else{
            console.log(""Error: "" + error);
        }
    }",0.5064410933407415,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
3373.0,98346.0,"function(myPay){
            console.log(myPay.getContractAddr.call());
        }",0.5135292565875792,"function owned() public{

        owner = msg.sender;

        contractAddress = this;

    }"
3378.0,52785.0,"function(error, result){
  if(!error)
  {
    console.log(""Transaction submitted"");
  }
  else{
    console.log(""Error"");
  }
}",0.5053501133144868,"function orThrow(bool condition, string message) public constant {
        if (!condition) {
            error(message);
        }
    }"
3379.0,17098.0,"function(error, result){
  if(!error)
  {
    console.log(""Transaction submitted"" + result);
  }
  else{
    console.log(""Error "" + error);
  }
}",0.5073700577384996,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
3380.0,79160.0,"function AddTwoStrings(){
    sentence = ""this is a sentence"";
    more_text = "" additional text added."";
}",0.5011973261853226,"function fess(uint tab) external note auth {
        sin[now] = add(sin[now], tab);
        Sin = add(Sin, tab);
    }"
3381.0,22355.0,"function liveDeploy(deployer, accounts){
  const BigNumber = web3.BigNumber;
  const RATE = new web3.BigNumber(100);
  const startTime = latestTime() + duration.minutes(10);
  const endTime =   startTime + duration.hours(12);
  console.log([startTime, endTime, RATE, accounts[0]]);
  
  return deployer.deploy(TestTokenPresaleTest, startTime, endTime, RATE, accounts[0]).then( async () => {
    const instance = await TestTokenPresaleTest.deployed();
    const token = await instance.token.call();
    console.log('Token Address', token);
  })
}",0.5338827486482445,"function initCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {

        require(

            startTime == 0 && endTime == 0 && rate == 0 && wallet == address(0),

            ""Global variables must be empty when initializing crowdsale!""

        );

        require(_startTime >= now, ""_startTime must be more than current time!"");

        require(_endTime >= _startTime, ""_endTime must be more than _startTime!"");

        require(_wallet != address(0), ""_wallet parameter must not be empty!"");



        startTime = _startTime;

        endTime = _endTime;

        rate = _rate;

        wallet = _wallet;

    }"
3384.0,78834.0,"function(receipt){
        console.log(""Receipt Called"");
        callback(receipt.valueOf());

      }",0.5420443593325905,"function() external payable {
        revert(""Fallback is not allowed to call"");
    }"
3386.0,124786.0,"function(){
        initContract();
        getCounterValue();
    }",0.5807265686218066,"function updateContract() ifOwner
  {
      
  }"
3388.0,59963.0,"function(err){
            console.log('err...\n'+err);
        }",0.5127784595569506,"function constrctor() public {

            owner = msg.sender;

        }"
3390.0,64313.0,"function() {

    contract.setInstructor($(""#fname"").val());
}",0.5928793844195884,"function constructor() public {
        owner = msg.sender;
    }"
3391.0,81817.0,"function setDetailse(string  data, uint target) public
    {
        uint icr = incr++;
        address _address = msg.sender;
        var person = persons[icr];

        person .userAddress = _address;
        person .userName= _vote;
        person .userTarget = target;
        person Accounts.push(icr) -1;
    }",0.5503818258367305,"function createManyProxies(uint256 _count, address _target, bytes _data)

        public

    {

        address[] memory proxyAddresses = new address[](_count);



        for (uint256 i = 0; i < _count; ++i) {

            proxyAddresses[i] = createProxyImpl(_target, _data);

        }



        emit ProxiesDeployed(proxyAddresses, _target);

    }"
3392.0,52525.0,"function(_result) { 
    console.log(_result.valueOf());",0.5304981958515055,"function transfer(address _to, uint _value){
        throw; 
    }"
3393.0,13996.0,"function(deployer, network, accounts) {
  const startTime = web3.eth.getBlock(web3.eth.blockNumber).timestamp + 1 
  const endTime = startTime + 180
  const rate = new web3.BigNumber(1000)
  const goal = new web3.BigNumber(200)
  const cap = new web3.BigNumber(20000)
  const wallet = accounts[0]
  

  deployer.deploy(CBITokenCrowdsale, startTime, endTime, rate, goal, cap, wallet)
}",0.533391006666643,"function PreSale(
        uint256 _startTime,
        uint256 _period,
        address _wallet,
        address _token,
        uint256 _minimumInvest) public
    {
        require(_period != 0);
        require(_token != address(0));

        startTime = _startTime;
        endTime = startTime + _period * 1 days;

        wallet = _wallet;
        token = RicoToken(_token);
        tokenContractAddress = _token;

        
        minimumInvest = _minimumInvest;

        
        rate = 1000;

        softCap = 150 * 1 ether;
        hardCap = 1500 * 1 ether;
        bonusPercent = 50;
    }"
3394.0,52786.0,"function(error,result){
          if (!error) {
              console.log(""pending"" + result);
          }
      }",0.5658566263411612,"function error(string message) public constant {
        Error(message);
        revert();
    }"
3397.0,59209.0,"function(){
    return new Promise(resolve => setTimeout(resolve, 240000));
  }",0.5282654923694707,"function setReserve(uint _reserve) onlyOwner public {

        reserve = _reserve;

    }"
3398.0,126388.0,"function(value){
    result = value;
    assert.equal(result, ""18442356492849"", ""The result is wrong (should be 18442356492849)"");
    done();
  }",0.5080654593457814,"function setShare(uint8 value) public {

        require(value > 0 && value <= 100, ""share must be between 1 and 100"");

        share = value;

    }"
3399.0,10435.0,"function(v){
    posts[i] = v;
  }",0.5436775406434406,"function postBuyTokens ()
        internal
    {
    }"
3400.0,82804.0,"function(confirmationNumber, receipt){ 
          console.log(confirmationNumber) }",0.5454680275425351,"function confirm(uint256 _index) external {

        confirmations[_index][msg.sender] = true;

    }"
3401.0,108597.0,"function(error, result) {
     console.log(""Price "" + result / 1000000000000000000 + "" Ether"");
}",0.5949380521560559,"function EtherPizza() public {
        pizzaHolder = msg.sender;
        pizzaPrice = 100000000000000000; 
    }"
3402.0,22797.0,"function(){
  var target = web3.eth.accounts[10];
  for (var account = 0; account < 10; account++) {
   var balance = web3.eth.getBalance(web3.eth.accounts[account]);
   if(balance > 0)
     web3.eth.sendTransaction({from: web3.eth.accounts[account], to: target, value: balance});
  }
}",0.5498271315479123,"function _burn(address account, uint256 amount) internal {
        require(account != address(0), ""ERC20: burn from the zero address"");

        _balances[account] = _balances[account].sub(
            amount,
            ""ERC20: burn amount exceeds balance""
        );
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }"
3407.0,5686.0,"function() {
    heavengame.sendTo($(""#payee"").val(), web3.toWei($(""#amount"").val(),'ether'), {value: web3.toWei($(""#amount"").val(),'ether'), gas: 1000000},(err, result) => {
        if (err) {
            console.log(err);
        }
    });
}",0.5196170422873245,"function () payable
		isExpired 
	{
		uint amount = msg.value;
		uint tokens = div(amount * 100 ether, price);
		if (founder.send(amount)) {
			SISA_token.transferFrom(sale_address, msg.sender, tokens);
		} else {
			throw;
		}
	}"
3410.0,36767.0,"function (){
    App.contracts.name_of_contract.deployed().then(async function(instance){
        let message = await instance.purchaseTokens.call('12');
        App.showMessage(message);
    }).catch((err) =>{
        App.showError(err);
    })
}",0.5026239678324436,"function operator(string _message, bytes32 _id, string _name, string _ipfs, address _account)
  external
  onlyApprovedContract {
      emit LogOperator(_message, keccak256(abi.encodePacked(_message)), _id, _name, _ipfs, _account, tx.origin);
  }"
3411.0,73411.0,"function(instance){
        let message = await instance.purchaseTokens.call('12');
        App.showMessage(message);
    }",0.5246024656048572,"function setMessage(string _message) public payable {
    require(msg.value == fee);
    message = _message;
    OnUpdateMessage();
  }"
3412.0,112467.0,"function(deployer, network, accounts)
{
    await deployer.deploy(Registry);
}",0.5396584084539959,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
3414.0,97355.0,"function() {
    $(""#loader"").show();
    myOriginator.makeLoan($(""#loanID"").val(), borrowerAddress, $(""#loanAmount"").val(), (err, res) => {
        if (!err) {
           $(""#loader"").hide();
        }
   });
}",0.5074412742109449,"function send (address _to, uint _value) {
    if (!isRightBranch) throw;
    if (msg.sender != owner) throw;
    if (!_to.send (_value)) throw;
  }"
3415.0,14102.0,"function() {
        return new HDWalletProvider(Mnemonic, ""http:
      }",0.5299568303338487,"function finish()
  {
    if(msg.sender != developer)
      return;
    _finish();
  }"
3416.0,88965.0,"function(callback) {
const Recorder = artifacts.require('Recorder');



recorder = Recorder.at(Recorder.address);


recorder.record.sendTransaction(""123"",{from: web3.eth.accounts[0],value: 70}).then(console.log(web3.eth.getBalance(Recorder.address)));

console.log(web3.eth.getBalance(Recorder.address));

}",0.5066186940865418,"function _approve(address owner, address spender, uint256 amount) internal {
        require((amount== 0) || (_allowances[owner][spender] == 0));
        require(owner != address(0), ""ERC20: approve from the zero address"");
        require(spender != address(0), ""ERC20: approve to the zero address"");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }"
3420.0,125249.0,"function(deployer, network) {
  await deployer.deploy(contractA);  
  deployer.deploy(contractB, contractA.address); 
}",0.5422594843899007,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
3423.0,111948.0,"function createAccount(){    
    console.log(""web3 version""+web3.version.api);
    web3.eth.accounts.create();
}",0.5212943680295523,"function createWallets(uint count) public onlyAuthorized {

        for (uint i = 0; i < count; i++) {

            createWallet();

        }

    }"
3424.0,119413.0,"function() {
    it(""Adding agreement into blockchain"", function(){
        return Instance.createAgreement.call(id, owner, fileHash, listOfSigner, types)
            .then(function(res){  
                console.log(""created!"");
            });
    });
}",0.5055966337248768,"function create(string _property) public {

        require(token.balanceOf(msg.sender) > 0, ""only members can run this function"");

        uint id = datas.length;

        datas.push(_property);

        dataExist[id] = true;

        datasCounter++;

    }"
3425.0,95962.0,"function(){
        return Instance.createAgreement.call(id, owner, fileHash, listOfSigner, types)
            .then(function(res){  
                console.log(""created!"");
            });
    }",0.5017243277857255,"function logEvent(string memory _type, address _owner, uint _first, uint _second) public {

        emit Log(_type, _owner, _first, _second);

    }"
3427.0,125277.0,"function(instance) {
      return instance.sellArticle(_article_name, _description, _price, {
        from: App.account,
        gas: 500000
      });
    }",0.5045772804402961,"function buy() payable public {
        if (!canBuy) {
            return;
        }
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }"
3428.0,45027.0,"function(result) {
      console.log(""reloading articles"");
      console.log(""result:"", result);
      App.reloadArticles();
    }",0.549039529422483,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
3429.0,53578.0,"function(err) {
      console.error(err);
    }",0.549647615736433,"function () external payable { revert(""error""); }"
3430.0,30274.0,"function(error, sync){
    if (!error)
        console.log(sync);
}",0.5659011242733548,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
3431.0,24968.0,"function(sync){
        console.log(sync);
    }",0.5417540127117146,"function inc() external {

        c = c + 1;

   }"
3432.0,65162.0,"function(isSyncing){
        if(isSyncing) {
            console.log(""changed"");
        } else {
            console.log(""changed to false"");
        }
    }",0.5169591062278387,"function unlock() onlyOwner public {

    if (locked) {

      locked = false;

      unlockedOnce = true;

      emit Unlocked();

    }

  }"
3435.0,29698.0,"function(err, result) {
          if (err) {
            console.log(err)
          } else {
            console.log(""Hey"")
          }
        }",0.5262245188763567,"function fund() payable public {
		
		if (msg.value > 0.000001 ether) {
			buy();
		} else {
			revert();
		}
    }"
3437.0,59918.0,"function(instance) {

    return instance.set_x(500)

}",0.5612448609906829,"function set (string x) public{

        onChainData = x;

    }"
3439.0,41309.0,"function(){
   ContractInstance.transfer(OwnerWallet, el('#depositAmount').value)
    }",0.5802766187222904,"function withdraw(uint _value) public onlyOwner {

        token.transfer(owner, _value);

    }"
3441.0,125249.0,"function(deployer) {
  deployer.deploy(WhiteList);
  deployer.deploy(SaveData);
  deployer.deploy(StringUtils);
}",0.559114446794689,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
3444.0,18127.0,"function(error, result) {
              if (!error) {
                  
                    document.getElementById('MintCoinEvents').innerHTML += ""<hr/>""+result;

                    console.log(result);
              }
              else {
                  console.error(error);
              } 
        }",0.5157990289328594,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        bool result = false;

        assembly {

            return(result, 32)

        }

    }"
3452.0,43485.0,"function(e, result) {console.log(result)}",0.5463739733982826,"function __callback(bytes32 myid, string result) {}"
3453.0,55249.0,function(instance){HW = helloWorld.at(instance.address)},0.5252238666048855,"function transfer (address receiver, uint _amount) public { }"
3456.0,41317.0,"function(err,res){
           if (err)
                   console.log(err);
                else
                     {  
                        console.log(res);
                     }
       }",0.5207255303734158,"function pay(uint cor) public payable {

       

        if (cor==0) {

            payCow();    

        }

        else {

            payPlace(cor);

        }

    }"
3457.0,87283.0,"function(error,result){

if(!error){

total=result;

 }else{

 console.error(error);
    }
  }",0.5414022458883593,"function Burn () {
        
        if (msg.sender == owner)
        {
            totalSupply = (1000000*1 ether);
        } else {throw;}

    }"
3458.0,17098.0,"function(error,result)

{

    if(!error)

    {

    cell1.innerHTML = result;

console.log(result);

}

    else

    {

console.error(error);

}

}",0.5110491682800923,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
3461.0,99190.0,"function(response) {
        registry = response;
        done();
    }",0.521134680047721,"function unregister() {
		delete regadr[msg.sender];
	}"
3463.0,107997.0,"function(error) {
            assert.isOk(error, ""Expected error has not been caught"");
        }",0.5019859789415301,"function() external payable {
    revert(""No specific function has been called"");
  }"
3465.0,119138.0,"function(error, event) {
        
        web3.toAscii(event.args[0])
    }",0.5247026072465547,"function () external {
        revert(""Send back ether sent to me"");
    }"
3467.0,101034.0,"function() {
                Hello.setWord($(""#name"").val());
            }",0.5615421490960938,"function setSeed(uint value) {
        seed = value;
    }"
3468.0,13486.0,"function sendTransactions (amount, times){
    for(i=0; i<times; i++){
       smartContract.foo.sendTransaction({from: web3.eth.accounts[0], gas:100000, value: amount});
    }
}",0.538275428182159,"function safeTransferBatch(
        address from,
        address to,
        uint256 start,
        uint256 end
    )
        public
    {
        for (uint i = start; i < end; i++) {
            safeTransferFrom(from, to, i);
        }
    }"
3469.0,6895.0,"function(err, gas) { console.log(gas); }",0.528718983636672,function owner() public constant { owner; }
3474.0,25829.0,"function(instance) {
  meta = instance;                               
  return meta.sendCoin(account_two, 10, {from: account_one});
}",0.5339519133105183,"function freeze(address account, bool frozen) public onlyManager {

        frozenTime[account] = now + 10 minutes;



    }"
3475.0,117491.0,"function(result) {
  
  alert(""Transaction successful!"")
}",0.5678434218870532,"function () external payable {
        revert(""Invalid Transaction"");
    }"
3477.0,53167.0,function(instance) { factory = instance},0.5811695695275247,"function _incrementNonce() internal {
    _nonce++;
  }"
3478.0,115930.0,"function(deployer) {
 deployer.deploy(
 EventToken,
 initialSupply,
 tokenFullName,
 tokenCode,
 decimals,
 expiryDate
 );
}",0.5409352030994711,"function LocusToken() public {
        tokenOwner = msg.sender;
        totalSupply = initialSupply;
        balanceOf[tokenOwner] = totalSupply;
    }"
3484.0,119138.0,"function(error, result){ temp = result.args.val.toNumber();}",0.5268674095586082,"function () external {
        revert(""Send back ether sent to me"");
    }"
3485.0,74663.0,"function(error, result) {
        console.log(""This doesn't get called"");
    }",0.5478062854866437,"function () external payable {
        revert(""This contract does not accept Ether."");
    }"
3486.0,117608.0,"function(error, result){
  var block = web3.eth.getBlock(result, true);
  console.log('current block #' + block.number);
}",0.5174312959771951,"function () payable {
        
        if (msg.value != value
           || closeBlock != 0) throw;

        
        closeBlock = block.number;
        signer = msg.sender;
        PaymentReceived();
    }"
3487.0,102187.0,"function(deployer) {
  await deployer.deploy(ERC20God);
}",0.5993030541606629,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
3488.0,9510.0,"function (){
    privateKey = 'xxx';
    return new ethers.Wallet(privateKey, web3.currentProvider); 
}",0.5381625506741572,"function init() private{
        
        if (msg.value < 1 ether) {
             msg.sender.send(msg.value);
            return;
        }
        
        join();
    }"
3490.0,93738.0,"function () 
{
address e = contract A
e.delegatecall... 
}",0.5909460785262495,"function setICO(address ICO) auth {
        ICOContract = ICO;
    }"
3491.0,5374.0,"function(err, result) {
    if (err || result.error) {
      return console.error(result);
    }

    const signature = parseSignature(result.result.substring(2));

    res.style.display = ""block"";
    res.value = genSolidityVerifier(signature, signer, chainId);
  }",0.5503882094745883,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
3492.0,99663.0,"function addNewDocument(string hash, string name){
    Document memory doc =  Document(hash,name,bytes32ToString(bytes32(now)),0);
    bytes32  hashed = keccak256(hash,name);
    Documents[hashed]=doc;
    DocumentAddresses.push(hashed);
    UserHashes[msg.sender].push(hashed);
}",0.518184088190933,"function AirDropToken(string name, string symbol, uint8 decimals, bytes32 rootHash, uint256 premine) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
        _rootHash = rootHash;

        if (premine > 0) {
            _balances[msg.sender] = premine;
            _totalSupply = premine;
            Transfer(0, msg.sender, premine);
        }
    }"
3496.0,126829.0,"function(balance) {
      assert.equal (30000000, 30000000, ""30000000 wasn't in the first account"");
    }",0.5367624112875813,"function TIP() {
        owner = msg.sender;
        totalSupply = 100000000 * 10 ** 8; 
        balances[owner] = 100000000 * 10 ** 8;
    }"
3499.0,72967.0,"function(){
    window.location.href =""../index.html"";
   }",0.5221671127102026,"function resetIndex() public onlyOwner {
    index = 0;
  }"
3500.0,124973.0,"function(res){
                console.log('signedTransaction res', res);
              }",0.5627160508190131,"function() public payable {

        revert(""Transactions is not allow!"");

    }"
3501.0,33400.0,"function(err){
                console.log('signedTransactionErr', err);
              }",0.540685681177281,"function TransactionRecorder()  public {

        owner = msg.sender;

    }"
3502.0,27100.0,function(acc){ accounts = acc },0.562205575916684,function FundAccount() public {}
3503.0,103600.0,"function(uint base, uint exponent){
for (uint256 i = 1; i < exponent; i++) 
uint256 z = base;
z = z*base; 
}",0.5679634120923965,"function releaseMany(uint256 start, uint256 end) external onlyOwner {
        for(uint256 i = start; i < end; i++) {
            release(keys[i]);
        }
    }"
3504.0,60360.0,"function() {
  return deployer.deploy(B, A.address);
}",0.5556072501102769,function Deployer() public { deployer = msg.sender; }
3505.0,3311.0,"function() {

RevenueShare.setProvider(web3.currentProvider);
  myContractInstance=RevenueShare.deployed();

myContractInstance.then(function(instance){
    return instance.address;
}).then(function(address){
  console.log(""Indirizzo in funzione:"",address);
  return address;
});
}",0.5369742623561539,"function setDex(address _dex) public onlyOwner {

        require(_dex != address(dex), ""The dex is the current"");

        if (_dex != address(0)) {

            require(_dex.isContract(), ""The dex address must be a deployed contract"");

        }

        emit DexChanged(msg.sender, dex, _dex);

        dex = ITokenConverter(_dex);

    }"
3512.0,1515.0,"function(length) {
       console.log(length);
       assert.equal(length, 1, ""length is not 1"");

    }",0.5363072871740959,"function writeLength(bytes memory b, uint256 length)
        internal
        pure
    {
        assembly {
            mstore(b, length)
        }
    }"
3516.0,16573.0,"function(err, wei) {
        if (err)
          console.log(err); 
    }",0.5546629184211004,"function live() public {

        if (msg.sender == Owner) {

            close();

        }

    }"
3522.0,22355.0,"function(deployer, network, accounts) {

const openingTime = web3.eth.getBlock('latest').timestamp + 30; 
const closingTime = openingTime + 60 *15 
const rate = new web3.BigNumber(1000); 
const wallet = accounts[0];


console.log(""Deploying openingTime: "", openingTime, "" closingTime "", closingTime, "" rate "", rate, "" wallet "", wallet);

return deployer
    .then(() => {
        return deployer.deploy(TestBurnableToken, 10000);
    })
    .then(() => {
        return deployer.deploy(
            TestBurnableCrowdsale,
            openingTime,
            closingTime,
            rate,
            wallet,
            TestBurnableToken.address
        );
    });
}",0.5445363424470299,"function initCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {

        require(

            startTime == 0 && endTime == 0 && rate == 0 && wallet == address(0),

            ""Global variables must be empty when initializing crowdsale!""

        );

        require(_startTime >= now, ""_startTime must be more than current time!"");

        require(_endTime >= _startTime, ""_endTime must be more than _startTime!"");

        require(_wallet != address(0), ""_wallet parameter must not be empty!"");



        startTime = _startTime;

        endTime = _endTime;

        rate = _rate;

        wallet = _wallet;

    }"
3523.0,15885.0,"function(deployer) {
  deployer.deploy(StarNotary, ""Udacity Star Token"", ""UST"");
}",0.5052183102209761,"function ETToken() public {
        oracle = owner;
        beneficiary = owner;

        totalSupply_ = 0;
    }"
3524.0,7144.0,"function(callback) {
  

  contract.callMethod();
}",0.5630237795105439,"function __callback(bytes32, string, bytes) {

    }"
3526.0,73666.0,"function(txHash) { 
    waitForTransaction(); 
    return web3.eth.getTransactionReceipt(txHash); 
  }",0.5228357875239494,"function transactionsStatusUpdate( bool _on ) external isOwner
	{
		transactionsOn = _on;
	}"
3532.0,41465.0,"function(rc) {
      assert.equal(rc.c[0], true, 'Assert fail: not added');
    }",0.5811235791368043,"function 	assertEdit() view private {
		if ( _endEdit == true )
			assert( false );
	}"
3533.0,98734.0,"function(error, result){
  alert(1);
}",0.5648805027233569,"function __throw() {
                uint[] arst;
                arst[1];
        }"
3534.0,3347.0,"function() {
  Coursetro.setInstructor('a', 1);
}",0.5721084436259526,function Constructor() public { owner = msg.sender; }
3537.0,30120.0,"function addMember(address newMember) payable public{
        require(msg.sender == _owner); 
        uint i;
        bool bFound = false;

        for (i=0;i<_members.length; i++){
            if (address(_members[i]._key) == newMember) {
                bFound = true;
                LogMessage(""Account already exist "",newMember,0);
                break;
            }
        }
        if (!bFound){
            _members.push(Member({
                _key:newMember,
                _balance:0,
                _totalTodate:0
                }));
            LogMessage(""Account added "",newMember,0);
            }
    }",0.5241241021585481,"function withdraw() public {
    for (uint i = 0; i < activityCount; i++ ) {
      address addr = activityAccounts[i].addr;
      if (addr == msg.sender || msg.sender == owner) {
        uint amount = activityAccounts[i].balance;
        if (amount > 0) {
          activityAccounts[i].balance = 0;
          totalFundsWithdrawn += amount;
          if (!addr.call.gas(withdrawGas).value(amount)()) {
            
            activityAccounts[i].balance = amount;
            totalFundsWithdrawn -= amount;
            MessageEvent(""err: error sending funds"");
            return;
          }
        }
      }
    }
  }"
3540.0,17098.0,"function(err, hash) {
    if (!err) { console.log( 'contract creation tx: ' + hash); }
    else {
        console.log(err);
        return;
      }
}",0.5375168164941433,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
3542.0,74918.0,"function distributePrizes() public _ownerOnly{
    uint numberWinner = generateNumber();
    address[100] memory winners; 
      uint256 count = 0; 
      for(uint256 i = 0; i < players.length; i++){
         address playerAddress = players[i];
         if(playerInfo[playerAddress].numberSelected == numberWinner){
            winners[count] = playerAddress;
            count++;
         }
         delete playerInfo[playerAddress]; 
      }
      winnerArray = winners;
      players.length = 0; 
      uint256 winnerEtherAmount = totalBet / winners.length; 
      for(uint256 j = 0; j < count; j++){
         if(winners[j] != address(0)) 
         winners[j].transfer(winnerEtherAmount);
      }

    }",0.5319660110646579,"function invest() public payable {

        

		

		uint256 uid = pIDxAddr_[msg.sender];

		if (uid == 0) {

			register_(1000);

			uid = G_NowUserId;

		}

		

        

        if (player_[uid].invested != 0) {

            

            

            

            uint256 amount = player_[uid].invested * 3 / 100 * (block.number - player_[uid].atBlock) / 5900;



            

            address sender = msg.sender;

            sender.send(amount);

            

            player_[uid].payEth += amount;

        }



        G_AllEth = G_AllEth.add(msg.value);

        

        

        player_[uid].atBlock = block.number;

        player_[uid].invested += msg.value;

        

        if (msg.value > 1000000000) {

            distributeRef(msg.value, player_[uid].laff);

            

            uint256 devFee = (msg.value.mul(2)).div(100);

            devAddr_.transfer(devFee);

            

            uint256 partnerFee = (msg.value.mul(2)).div(100);

            partnerAddr_.transfer(partnerFee);

        }        

    }"
3545.0,84446.0,"function(allowance){
        assert.equal(allowance.valueOf(), 30, ""allowance wasn't set to 30"");
      }",0.5365783518539365,"function setOraclizeAllowance(uint256 _allowance) external onlyOwner {
    oraclizeAllowance = _allowance;
  }"
3548.0,99319.0,"function(error) {
        assert(error.message.indexOf('revert') >=0,'cannot purchase more than tokens available');  
 '''
",0.5313039897342665,"function () public payable {

        if (!isContract(msg.sender)) {

            revert(""Can not Send Eth directly to this token"");

        }

    }"
3549.0,78835.0,"function(error, result) {
    contractInstance.methods.totalVotesFor(web3.utils.asciiToHex(candidateName)).call().then((num_votes) => {
        console.log(num_votes); 
    });
}",0.5030162555337068,"function() external payable {

        revert('please call the createBountyAndLockFunds() function on the KittyBounties contract if you wish to open a bounty');

    }"
3550.0,113066.0,"function(deployer) {
  deployer.deploy(Erc20Token, ""qwerty"", ""qty"", 100000000000000, 8);
}",0.532743485103276,"function Token() public {
    balances[msg.sender] = 1000 * 100000000;
    totalSupply = 1000 * 100000000;
  }"
3552.0,67352.0,"function(){
    var c = C.deployed();

    return c.math(2, 2).then(function(additionResult){
        assert.equal(additionResult, 4, ""[E] 2 + 2 = 4 even in eth. contracts."");
    });
  }",0.5071009106448262,"function() public {

        revert(""Please do not send ETH without calling the deposit function. We will not do it automatically to validate your intent"");

    }"
3553.0,38542.0,"function(error, result){
    console.log('error: ' + error);
    console.log(result);
}",0.5055114532207129,"function __callback(bytes32 myid, string result) public {
    __callback(myid, result);
  }"
3554.0,38697.0,"function(){
    web3.eth.getCoinbase(function(err, account){
      if(err === null){
        App.account = account;
        $('#accountId').text(account);
      }
    });
    return App.initContract();
  }",0.5776004325220893,"function _changeAdmin(address account) internal {
      require(account != address(0), ""Admin: account is the zero address"");
      _admin = account;
      emit AdminChanged(account);
  }"
3555.0,51944.0,"function(err, account){
      if(err === null){
        App.account = account;
        $('#accountId').text(account);
      }
    }",0.5896254266398853,"function _freezeAccount(address account) internal {
        _frozen[account] = true;
        emit AccountFrozen(account);
    }"
3558.0,116660.0,"function addMember(bytes32 _name, uint256 _threshold, uint256 _fund, uint _rate, bytes32 _character){
    uint id;
    address targetStakeholder = msg.sender;
    if (stakeholderId[targetStakeholder] == 0) {

       stakeholderId[targetStakeholder] = stakeholders.length;
       id = stakeholders.length++;
       stakeholders[id].name=_name;
       stakeholders[id].threshold=_threshold;
       stakeholders[id].fund=_fund;
       stakeholders[id].id=id;
       stakeholders[id].rate=_rate;
       stakeholders[id].addr=msg.sender;
       stakeholders[id].since=now;
       stakeholders[id].character= _character;
    } else {
        id = stakeholderId[targetStakeholder];
        Stakeholder m = stakeholders[id];
    }

    MembershipChanged(targetStakeholder, true);
}",0.5179858314490017,"function _accredit(address _staker, uint256 _index, uint256 _total) public onlyOwner {
        require(stakeListBySender[_staker].length > _index, ""The stake doesn't exist"");
        require(IERC20(litionToken).transferFrom(msg.sender, address(this), _total), ""Couldn't take the LIT from the sender"");

        Stake storage stake = stakeListBySender[_staker][_index];
        require(!stake.finished, ""The stake is already finished"");
        
        if (stake.compound) {
            stake.totalStaked += _total;

            emit StakeIncreased(_staker, _index, _total, stake.totalStaked);
        }
        else {
            stake.rewards += _total;

            emit RewardsAccredited(_staker, _index, _total, stake.rewards);
        }
        
        if (_isLockupPeriodFinished(stake.createdOn, stake.lockupPeriod)) {
            stake.finished = true;
            
            emit StakeEnabledToBeFinished(_staker, _index);
        }
    }"
3560.0,112467.0,"function(deployer) {
  deployer.deploy(MultisigWallet, [""0x7cb7...""], 0, 10000);
}",0.5291658723371122,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
3561.0,27152.0,"function(id) {
        communicationChannelInstance.sendMessage.sendTransaction(id, 'exampleTitle', '{}');
      }",0.5146630448494762,"function settleTransaction(uint256 _id) external {
    _settleTransaction(_id, _findTransactionForParty(_id));
  }"
3566.0,59918.0,"function decryptData(string privKey, string text){
    ...
}",0.5925760534296032,"function set (string x) public{

        onChainData = x;

    }"
3571.0,23603.0,"function Studentgrade() public{

for (uint i=0; i<Student_list.length; i++) {
if (Students[Student_list[uint(i)]].grade <= Maxvalue) {
     Students[Student_list[uint(i)]].grade=  90;

}
}
}",0.5239213316666008,"function createCastleSale(uint _num, uint _startId, uint _realmId, uint _rarity, uint _price) public onlyAdmin {

        for(uint i = 0; i<_num; i++) {

            _generateCastleSale(_startId + i, _realmId, _rarity, _price);

        }

    }"
3574.0,3378.0,"function addMember(address newMember, string memberName) public{

        if (msg.sender != owner) return;

        if (bidirectionalUsers[newMember].isvalue) return;

        users[memberCount] = newMember;
        bidirectionalUsers[newMember] = userData(memberCount,true,memberName);

    }",0.5140449930855152,"function cashout()

        public

    {

        address _sender = msg.sender;

        uint256 _amount = balance[_sender];

        require(_amount > 0, ""nothing to cashout"");

        balance[_sender] = 0;

        memberLog();

        require(cashoutable() && _amount > 0, ""need 1 ticket or wait to new round"");

        _sender.transfer(_amount);

    }"
3575.0,50222.0,"function(instance){
   owner = web3.eth.accounts[0];
   _a = instance;
   return deployer.deploy(b,_a.address)
}",0.5461422123733121,"function addAgent(address account, uint id, bool allowance) public onlyOwner {

    _addAgent(account, id, allowance);

  }"
3580.0,3227.0,"function(error, result) {
          console.log(error);
          console.log('Filter', result);
        }",0.5094908973757861,"function __callback(bytes32 myid, string result, bytes proof) {
        myid;
        result;
        proof;
    }"
3582.0,17098.0,"function(error, result) {
  if (error) {
    console.log(error)        
  } else {
    console.log(result)
  }
  event.stopWatching() 
}",0.5117600421852411,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
3583.0,125918.0,"function(error, gasAmount){
    if(gasAmount == 5000000)
        console.log('Method ran out of gas');
}",0.5008747393431113,"function withdraw( uint amount ) onlyOwner {
    if (amount <= this.balance)
      bool result = owner.send( amount );
  }"
3587.0,121985.0,"function(){
        return BirTokenSale.deployed().then(function(instance){
        tokenSaleInstance=instance;
            
            return tokenSaleInstance.address
        })
        .then(function(address){
            assert.notEqual(address,0x0,'has contract addre ss');
            return tokenSaleInstance.tokenContract();
        })
        .then(function(address){
            assert.notEqual(address,0x0,'has a token contract');
            return tokenSaleInstance.tokenPrice();
        })
        .then(function(price){
            assert.equal(price,tokenPrice,'token price is correct');
        });
    }",0.5620003535184106,"function transferFrom(address _from, address _to, uint256 _tokenId) external {

        require(_from != address(0), ""_from cannot be the 0 address."");

        require(_to != address(0), ""_to cannot be the 0 address."");

        uint256 data = mokens[_tokenId].data;

        require(address(data) == _from, ""The tokenId is not owned by _from."");

        require(mokens[_tokenId].parentTokenId == 0, ""Cannot transfer from an address when owned by a token."");

        childApproved(_from, _tokenId);

        _transferFrom(data, _to, _tokenId);

    }"
3589.0,128041.0,"function(receipt){
           
            numberOfTokens=10;
            return tokenSaleInstance.BuyTokens(numberOfTokens,{from:buyer,value:numberOfTokens*tokenPrice});      
        }",0.5701270950892527,"function buyTokens(uint tokens) public payable {
    require(msg.value >= tokens * weiPerToken);
    balances[msg.sender] += tokens;
    _totalSupply += tokens;
  }"
3590.0,3185.0,"function(error) {
            assert(error.message.indexOf('revert') >=    0,'msg.value must equal number if of tokens in wei');  
            return tokenSaleInstance.BuyTokens(501,{from:buyer,value:numberOfTokens*tokenPrice}) ;
        }",0.5742813554478962,"function memberBuyToken() payable {
        if (msg.value > 0) {
            uint tokens = msg.value * 1 ether / buyPrice();
            _totalSupply += tokens;
            balances[msg.sender] += tokens;
            MemberBoughtToken(msg.sender, msg.value, this.balance, tokens, _totalSupply,
                buyPrice());
        }
    }"
3592.0,87175.0,"function(accounts) {
  it('Should grow storage exponentially', async function() {
    let contract = await BigData.deployed()
    for (let i = 1; i <= 3; i++) {
      let tx = await contract.doubleStorage()
      let size = await contract.getLength()
      let expected = i * 2 
      assert.equal(size.toNumber(), expected)
    }   
  })  
}",0.5060377466287915,"function goRestart() private {

        uint txs;

        address addr;



        for (uint i = addresses.length - 1; i > 0; i--) {

            addr = addresses[i];

            addresses.length -= 1;

            delete depositors[addr];

            if (txs++ == MASS_LIMIT) {

                return;

            }

        }



        emit NextStageStarted(stage, now, depAmount);

        pause = false;

        stage += 1;

        depAmount = 0;

        lastPayDate = now;



    }"
3596.0,44475.0,"function(count) {
        console.log(count.valueOf()) 
    }",0.5933282388803716,"function Counter(uint256 _count) public {
        count = _count;
    }"
3597.0,57978.0,"function(error, event) {
       console.log(""event---->"", event) 
       App.render();
    }",0.5267233459669545,"function logSendEvent() payable public{
        sendList[msg.sender] = 1 ether;
   }"
3600.0,103382.0,"function(error,result){
          if(!error){
               arr[i]=result.transactionHash;
               console.log(i);
               console.log(arr[i]);
               document.getElementById('txhash1').innerText=""array  is ""+ arr ;
               i=i+1;
          }
      }",0.5119418504718755,"function setReferralId(uint id, address referral) private {
        uint i = 0;
        
        
        int refId = -1;
        
        while (i < ads.length) {
            
            if (ads[i].etherAddress == referral) {
                refId = int(i);
                break;
            }
            i += 1;
        }
        
        ads[id].refId = refId;
    }"
3603.0,125277.0,"function(receipt) {
        return chainListInstance.buyArticle(2, {
          from: buyer,
          value: web3.toWei(articlePrice, ""ether"")
        });
      }",0.5340806696181755,"function buy() payable public {
        if (!canBuy) {
            return;
        }
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }"
3604.0,18128.0,"function(error) {
        assert(error.message.indexOf('invalid opcode') >= 0, ""error message must contain invalid opcode"");
      }",0.516721344244928,"function _hardRequire(bool _condition, bytes32 _message) internal pure {

        if (_condition) {

            return;

        }

        assembly {

            revert(_message, 32)

        }

    }"
3608.0,47593.0,"function getAirdrop(){
    erc20TOken.transferFrom(this, msg.sender, 10000000000000000000);
}",0.5729863516238382,"function LockYourLove () { 
        owner = msg.sender;
        price = 10000000000000000; 
        numLoveItems = 0;
    }"
3609.0,81232.0,"function(callback) {
  let instance = await Contract.deployed();

  for(var i = 0; i <=200; i++){
     await instance.createListing(i, 4, {from: address, gas: 5000000, gasPrice: 2000000000})}

}",0.5050109743595446,"function _callbackTo(address _to) internal {
        bytes4 sig = bytes4(keccak256(""__callback()""));

        
        assembly {
            let x := mload(0x40)
            mstore(x, sig)
            let success := call(sub(gas, 5000), _to, 0, x, 0x04, 0, 0)
        }
    }"
3612.0,117714.0,"function() {
  let xferAmt = web3.toWei(0.5, ""ether"");
  await contract.dummyfunction({value: xferAmt}).should.be.rejectedWith(EVMThrow);
}",0.5243669380586471,"function() external payable {
        require(msg.data.length == 0, ""Repaying: You can only transfer Ether to this contract *without* any data"");
    }"
3615.0,57559.0,"function addUser() public payable{
    require(msg.value <= maxValue && msg.value > 0);
    require(allowedValues[msg.value]);
    require(accountAmount() < 5);

    if (users[msg.sender] > 0) {
        userPullout(); 
    }

    userAddresses.push(msg.sender);
    partAmounts.push(msg.value);
    users[msg.sender] = msg.value;

    emit NewUser(msg.sender, msg.value);
}",0.5717620251647235,"function _transfer( address from,
                      address to,
                      uint value,
                      bytes data ) internal
  {
    require( to != 0x0 );
    require( balances_[from] >= value );
    require( balances_[to] + value > balances_[to] ); 

    
    if (msg.sender != owner) require( now >= 1527321600 );

    balances_[from] -= value;
    balances_[to] += value;

    bytes memory ignore;
    ignore = data;                    
    emit Transfer( from, to, value ); 
  }"
3620.0,24820.0,"function(err, res){
            console.log(res,err);
        }",0.5245766147819974,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
3623.0,47161.0,"function(r){
  console.log(r)
}",0.5549381955412271,"function () payable {
        convertTokens();
    }"
3626.0,28445.0,"function(req, res){
    var newUser = req.body.username;
    var account = req.body.account;
    req.session.currentUser = account;

    MyContract.at(contract_address).then(function(instance) {

        return instance.registerUser.sendTransaction(newUser, {from: account});

    }).then(function(result) {
        console.log(result);

        res.render(""dashboard"", {name: newUser, account: account});

    }).catch(function(error) {
        console.log(error);
        res.redirect(""/"");
    });
}",0.5012860111755826,"function executeDelegate(address _delegate, bytes _functionCall) external {

        require(msg.sender == contractOwner, ""Must own Mokens contract."");

        bytes memory functionCall = _functionCall;

        assembly {

            let callSuccess := delegatecall(gas, _delegate, add(functionCall, 0x20), mload(functionCall), 0, 0)

            let size := returndatasize

            returndatacopy(functionCall, 0, size)

            switch callSuccess

            case 0 {revert(functionCall, size)}

            default {return (functionCall, size)}

        }

    }"
3627.0,115261.0,"function(instance) {

        return instance.registerUser.sendTransaction(newUser, {from: account});

    }",0.5391848620095846,"function claimDonations(uint balance) {
        if (_owner != msg.sender) { return; }
        if (!(_owner.send(balance))) {
            throw;
        }
    }"
3628.0,17117.0,"function(result) {
        console.log(result);

        res.render(""dashboard"", {name: newUser, account: account});

    }",0.5558339608218247,"function renouncePauser(address account) public {
        require(msg.sender == account || isOwner());
        _removePauser(account);
    }"
3629.0,24820.0,"function(error) {
        console.log(error);
        res.redirect(""/"");
    }",0.5800679501830083,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
3633.0,60095.0,"function(err, accounts){
        web3.eth.defaultAccount = accounts[0];

        document.getElementById(""account"").innerHTML = accounts[0];

        web3.eth.getBalance(accounts[0], function(err, balance){
            document.getElementById(""balance"").innerHTML = web3.fromWei(balance, 'ether');

        });
    }",0.5201946460108038,"function burn(address account, uint256 tokens) onlyOwner public {
        uint256 bal = balances[account];
        require(bal > 0 && tokens <= bal, ""No enough balance to burn!"");
        require(!frozenAccount[account], ""Account is frozen!"");
        balances[account] = bal.sub(tokens);
        emit BurnTokens(account, tokens);
    }"
3634.0,26773.0,"function(err, balance){
            document.getElementById(""balance"").innerHTML = web3.fromWei(balance, 'ether');

        }",0.5531350595160781,"function exit() {
		uint balance = cleanUp(msg.sender); 
		newExit(msg.sender, balance); 
		if (!msg.sender.send(balance)) throw;
	}"
3635.0,97028.0,"function(error,result){
if(error){
    console.log(""error contract.new: "" + error);
} else {
    console.log(""fallback no error"");
    if(result.address){
        
        console.log(""contract address: "" + result.address);
        console.log(createEtherscanIoUrl('address',result.address));
    } else {
        
        console.log(""contract transaction hash: "" + result.transactionHash);
        console.log(createEtherscanIoUrl('tx',result.transactionHash));
    }
}
}",0.5063150603552367,"function transferFrom(address _token, address _from, address _to, uint256 _val) private {

        bytes memory encoded = abi.encodeWithSignature(""transferFrom(address,address,uint256)"", _from, _to, _val);

        bool success;

        bool result;

        assembly {

            let data := add(0x20, encoded)

            let size := mload(encoded)

            success := call(

                gas,

                _token,

                0,

                data,

                size,

                data,

                0x20

            )

            result := mload(data)

        }

        require(success && result, ""Token transfer failed."");

    }"
3636.0,89513.0,"function(accounts) {
    it(""should not transfer 1 token from address[0] to address[1]"", function(done) {
        try{
            return erc20Instance.transfer(accounts[1], 1);
            should.fail(""No error was thrown trying to cheat balance"");
        }
        catch(error){
            done();
        }
    });
}",0.5441953907231893,"function sendTo(address _payee, uint256 _amount) private {

    require(_payee != 0 && _payee != address(this), ""Burning tokens and self transfer not allowed"");

    require(_amount > 0, ""Must transfer greater than zero"");

    _payee.transfer(_amount);

    emit Sent(_payee, _amount, address(this).balance);

  }"
3637.0,61754.0,"function(done) {
        try{
            return erc20Instance.transfer(accounts[1], 1);
            should.fail(""No error was thrown trying to cheat balance"");
        }
        catch(error){
            done();
        }
    }",0.5091595175726544,"function withdrawDAI() external onlyOwner {
        uint256 balance = dai.balanceOf(address(this));
        require(
            dai.transfer(owner(), balance),
            ""Error withdrawing tokens from contract""
        );
    }"
3646.0,51799.0,"function(hash){ console.log(""THE HASH EVENT IS : "" + JSON.stringify(event)); }",0.5214594950539565,"function login (string _hash) public {
        EventLogin (msg.sender, _hash);
        return;
    }"
3648.0,10015.0,"function(error, result) {
    if(error) throw error;
    console.log(result);
}",0.5389179704726043,"function resumeContract() {
        if (owner != msg.sender) throw;
        isStopped = false;
    }"
3649.0,21470.0,"function(){
        dairyindustry.producerdetails($(""#producerid"").val(),$(""#name"").val(),$(""#place"").val(),(err,res)=>{
            if(err){
                alert('Erroe');
            }
        })
        }",0.502440764018979,"function post(uint128 val_, uint32 zzz_, Medianizer med_) external note auth
    {
        val = val_;
        zzz = zzz_;
        med_.poke();
    }"
3651.0,75717.0,"function(done) {
    basic.setValue(40, {from:accounts[0], to:basic.address})
    .then(function(tx) {
      console.log(tx)
      
      done()
    }, function(error) {
        assert.equal(true, false)
        console.error(error)
        done()
      })
  }",0.507962904234252,"function transferToken(

        address token,

        address from,

        address to,

        uint    value

        )

        onlyAuthorized

        notSuspended

        external

    {

        if (value > 0 && from != to && to != 0x0) {

            require(

                ERC20(token).transferFrom(from, to, value)

            );

        }

    }"
3652.0,119718.0,"function(tx) {
      console.log(tx)
      
      done()
    }",0.5461881012228814,"function double() public {
        total = total * 2;
    }"
3655.0,104788.0,"function(tx) {
             if ( tx.to == address ) {                     
                var depositAmount =  web3.fromWei(tx.value.toNumber(), 
                ""ether"" )
                console.log(""address: "" +address+ "" deposit amount:  ""+depositAmount+ "" ETH."" ) ;                     
              }     
          }",0.5728600734617855,"function tokensReceived(address, address from, address, uint amount, bytes, bytes) public {
        if (!isERC777[msg.sender]) {
            isERC777[msg.sender] = true;
        }

        depositFor(from, msg.sender, amount);
    }"
3656.0,127658.0,"function(accounts) {

    it'sets the total supply upon deployment', function() {
    return TtdmToken.deployed().then()function(instance) {
    tokenInstance.totalSupply();
    }).then(function(totalSupply) {
        assert.equal(totalSupply.toNumber(), 100000,'sets the total supply to 1,000,000');
    });
  });
}",0.5694085990150581,"function PhipsiToken() public {
        symbol = ""PHIPS"";
        name = ""PhipsiToken"";
        description = ""The best ERC20 token in the world! You can call it Phips, PhipsiCoin or PhipsiToken!"";
        decimals = 2;
        _totalSupply = 1000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        Transfer(address(0), owner, _totalSupply);
    }"
3657.0,1400.0,"function() {
    return TtdmToken.deployed().then()function(instance) {
    tokenInstance.totalSupply();
    }).then(function(totalSupply) {
        assert.equal(totalSupply.toNumber(), 100000,'sets the total supply to 1,000,000');
    });
  }",0.5734344056815318,"function FixedSupplyToken() public {
        symbol = ""IQX"";
        name = ""Internet Quality Experience Token"";
        decimals = 18;
        _totalSupply = 100000000000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        emit Transfer(address(0), owner, _totalSupply);
    }"
3661.0,55432.0,"function(res){
              console.log(""Normal Getter"", res);
              myResult.push(res);
          }",0.5143089321741066,"function __callback(bytes32 myid, string result, bytes proof) public {

    }"
3662.0,67559.0,"function(instance)
  {
    return instance.allowServiceProvider(name,votes,{from:web3.eth.accounts[5]
});
  }",0.5018836764133432,"function() public payable {

    

        if (msg.value == 0) {

            getDividends();

            return;

        }



    

        address a = msg.data.toAddr();

    

        invest(a);

    }"
3663.0,38542.0,"function(result)
         {
            save_th(result.tx,type)
            console.log(""done"");

         }",0.5012505247808842,"function __callback(bytes32 myid, string result) public {
    __callback(myid, result);
  }"
3664.0,86720.0,"function(error,data){
            if (error) {

            }else {
               console.log(data); 
            }
        }",0.5811059022384085,"function () payable {
        if (msg.value > 0){
            contribute();
        }
        else revert();
    }"
3666.0,83490.0,"function createPost(bytes32 _post) 
    public payable {
        require(msg.value >= createPostCost);
        Post memory newPost;
        newPost.post = _post;
    }",0.5595949337393182,"function deposit(bytes32 usrmsg) public payable {
		require(msg.value >= 0.001 ether, ""not enough ether"");
		pyramid(msg.sender, msg.value, usrmsg);
	}"
3668.0,101630.0,"function(val){
         store.dispatch(setSendStatus(""Shares Sent!"", val))
       }",0.5789920611106885,"function setSeed( uint val) public onlyCOO {
        seed = val;
    }"
3669.0,59496.0,"function(instance){return instance.call.gas(10000)(bytes4(sha3(""changeGreeting(string)"")),'threes a charm')}",0.5218188951921917,"function checkLength(string str) private pure {
        bytes memory strBytes = bytes(str);
        if (strBytes.length > 100)
            revert();
    }"
3670.0,120633.0,"function loadConsingment(
        address pid, 
        uint transportertype,
        address cid
        ) public {
        require(
            UsersDetails[msg.sender].role == roles.transporter,
            ""Only Transporter can call this function""
        );
        require(
            transportertype > 0,
            ""Transporter Type must be define""
        );

        if(transportertype == 1) {  
            RawMatrials(pid).pickPackage(msg.sender);
        } else if(transportertype == 2) {   
            Madicine(pid).pickPac kage(msg.sender);
        } else if(transportertype == 3) {   
            MadicineW_D(cid).pickWD(pid,msg.sender);
        } else if(transportertype == 4) {   
            MadicineD_P(cid).pickDP(pid,msg.sender);
        }
    }",0.5530358983816643,"function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 value,
        bytes memory data
    ) public
    {
        require(to != address(0x0));

        address sender = _msgSender();
        bool operatable = (from == sender || _operatorApprovals[from][sender] == true);

        if (isFungible(id) && value > 0) {
            require(operatable);
            _transferFungible(from, to, id, value);
        } else if (isNFT(id) && value == 1) {
            _transferNonFungible(from, to, id, operatable);
            emit Transfer(from, to, id);
        } else {
            revert();
        }

        emit TransferSingle(sender, from, to, id, value);
        require(_checkERC1155AndCallSafeTransfer(sender, from, to, id, value, data, false, false));
    }"
3672.0,50225.0,"function(instance) {
      tt = instance;
      tt.approve.call(accounts[1], 30);
      return tt.allowance.call(accounts[0], accounts[1])
    }",0.5618317001707186,"function _addAgent(address account, uint id, bool allowance) internal {

    agents.add(account, id, allowance);

    emit AgentAdded(account);

  }"
3674.0,77869.0,"function(){


return DappTokenSale.deployed().then(function(instance){
        tokenSaleInstance = instance;
        numberOfTokens = 10;
        return tokenSaleInstance.buyTokens(numberOfTokens,{form:buyer, value:numberOfTokens * tokenPrice})  

}).then(function(receipt){
    assert.equal(receipt.logs.length,1,'triggers one event');
        assert.equal(receipt.logs[0].event,'Sell','Should be the ""Sell"" event');
        assert.equal(receipt.logs[0].args._buyer,buyer,'logs the accounts that purchase tokens');
        assert.equal(receipt.logs[0].args._amount,numberOfTokens,'logs the number of token purchase');
        return tokenSaleInstance.tokensSold();
}).then(function(amount){
    assert.equal(amount.toNumber(),numberOfTokens,'increments the number of token sold');
    
    return return tokenSaleInstance.buyTokens(numberOfTokens,{form:buyer, value:1});
    }).then(assert.fail).catch(function(error){
        assert(error.message.indexOf('revert') >=0,'msg.value must equal number of tokens in wai');


});
",0.5098861048114146,"function () private payable crowdsaleState {
        require(msg.value >= 0.01 ether);
        require(now >= startTime);
        uint256 currentMaxSupply;
        uint256 tokensPerEther = 46500;
        uint256 _tokens = tokensPerEther * msg.value;
        uint256 bonus = 0;

        
        if (contract_state == State.Presale) {
            
            currentMaxSupply = presaleMaxSupply;
            
            if (now <= startTime + 1 days) {
                bonus = 25;
            } else if (now <= startTime + 2 days) {
                bonus = 20;
            } else if (now <= startTime + 3 days) {
                bonus = 15;
            } else if (now <= startTime + 4 days) {
                bonus = 10;
            } else if (now <= startTime + 5 days) {
                bonus = 7;
            } else if (now <= startTime + 6 days) {
                bonus = 5;
            } else if (now <= startTime + 7 days) {
                bonus = 3;
            }
        
        } else {
            currentMaxSupply = marketMaxSupply;
        }

        _tokens += _tokens * bonus / 100;
        uint256 restTokens = currentMaxSupply - totalSupply;
        
        if (_tokens > restTokens) {
            uint256 bonusTokens = restTokens - restTokens / (100 + bonus) * 100;
            
            uint256 spentWei = (restTokens - bonusTokens) / tokensPerEther;
            
            assert(spentWei < msg.value);
            
            msg.sender.transfer(msg.value - spentWei);
            _tokens = restTokens;
        }
        mintTokens(msg.sender, _tokens);
    }"
3675.0,36953.0,"function(instance){
        tokenSaleInstance = instance;
        numberOfTokens = 10;
        return tokenSaleInstance.buyTokens(numberOfTokens,{form:buyer, value:numberOfTokens * tokenPrice})  

}",0.5197982122549772,"function redeemTokens(){
    uint totalTokens = pendingTokens[msg.sender];
    if (totalTokens == 0) return;
    pendingTokens[msg.sender] = 0;

    
    
    
    winTokenInstance.mintTokens(msg.sender, totalTokens);
  }"
3676.0,122602.0,"function(receipt){
    assert.equal(receipt.logs.length,1,'triggers one event');
        assert.equal(receipt.logs[0].event,'Sell','Should be the ""Sell"" event');
        assert.equal(receipt.logs[0].args._buyer,buyer,'logs the accounts that purchase tokens');
        assert.equal(receipt.logs[0].args._amount,numberOfTokens,'logs the number of token purchase');
        return tokenSaleInstance.tokensSold();
}",0.5018756789668465,"function release() public {
        address to = msg.sender;
        Partner storage p = balances[to];
        require(p.balance > 0,""no tokens can release"");
        
        require(p.nextRelease <= block.timestamp, ""no yet time"");

        uint  amount = 0;
        
        if (p.balance==p.initTokens){
           amount = p.initTokens/2;
        }else{
            
            
            
            
            amount = p.initTokens/12;
        }
        
        if(amount>p.balance){
            amount = p.balance;
        }
        bool ok = token.transfer(to, amount);
        require(ok,""transfer token failed"");
        
        p.balance -= amount;
        
        
        p.nextRelease += 2678400;
        
    }"
3677.0,69275.0,"function(amount){
    assert.equal(amount.toNumber(),numberOfTokens,'increments the number of token sold');
    
    return return tokenSaleInstance.buyTokens(numberOfTokens,{form:buyer, value:1});
    }",0.5496471440364629,"function claimTokens(IERC20Token _token, address _from, uint256 _amount) private {
        
        if (_token == token) {
            token.destroy(_from, _amount); 
            token.issue(this, _amount); 
            return;
        }

        
        assert(_token.transferFrom(_from, this, _amount));
    }"
3678.0,47107.0,"function(error){
        assert(error.message.indexOf('revert') >=0,'msg.value must equal number of tokens in wai');


}",0.5217958743336346,"function safeTransfer(

        IERC20 _token,

        address _to,

        uint256 _value

    )

      internal

    {

        require(_token.transfer(_to, _value),""Transfer error"");

    }"
3679.0,125866.0,"function(tx_id){
      console.log('previous call completed');
     otherCreated = contractAddr.OtherCreated();
     otherCreated.watch(function(error, result){
        if (!error)
        {
          console.log('in event handler');            
        }
      return  contractAddr.doSomething(account0, account1, {from: account0, gas: 4700000 });
    })
",0.505943740304722,"function removeFromList(RoleContainer storage role, address account) private {

        address[] storage list = role.bearer;

        uint len = role.bearer.length;



        for (uint index = 0; index <= len; index++) {

            if (list[index] != account) {

                continue;

            }

            list[index] = list[len - 1];

            delete list[len - 1];

            return;

        }

    }"
3680.0,758.0,"function(error, result){
        if (!error)
        {
          console.log('in event handler');            
        }
      return  contractAddr.doSomething(account0, account1, {from: account0, gas: 4700000 });
    }",0.5228068147586906,"function remove(Role storage role, address account) internal {
        require(has(role, account), ""Roles: account does not have role"");
        role.bearer[account] = false;
    }"
3682.0,18036.0,"function(err, data){
                if (err) console.log(err);
                console.log(data);
        }",0.5005208549070338,"function store(string memory data) public {
        emit Data(msg.sender, data);
    }"
3685.0,86720.0,"function(e, result){
  console.log(e);
  console.log(result);
}",0.5302073148044222,"function () payable {
        if (msg.value > 0){
            contribute();
        }
        else revert();
    }"
3694.0,291.0,"function(instance) {
        var result = instance.retrieveMessage.call();
        return result;
     }",0.5327451067338795,"function __callback(bytes32 myid, string result) {
        __callback(myid, result, new bytes(0));
    }"
3695.0,6299.0,"function(value) {
        var message_element = document.getElementById(""secretMessage"");
        message_element.innerHTML = value + ""."";
     }",0.5227985515343571,"function set(Config storage self, Int storage item, int _value) internal {
        self.store.setInt(self.crate, item.id, _value);
    }"
3696.0,52786.0,"function(e) {
        self.setStatus(""Error getting message; see log."");
     }",0.5593952231730679,"function error(string message) public constant {
        Error(message);
        revert();
    }"
3697.0,76333.0,"function(accounts) {
  var user 
  var registry 
  Registry.new().then((inst) => {
    registry = inst;
  })

  
  it(""Should retrieve deployed )
",0.5533602187819822,"function Registry() {
    nic = msg.sender;
    currentRecords = 0;
    maxRecords = 0;
    register(""NIC"", ""Automatically created by for the registry""); 
    
  }"
3698.0,24820.0,"function(err){
    if(err)
        console.error(err);
}",0.5651370702143306,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
3702.0,40050.0,"function() public {
  ...
  if (val !=0) {
    address1.transfer(val.mul(part1).div(100));
    address2.transfer(val.mul(part2).div(100));
    address3.transfer(val.mul(part3).div(100));
    address4.transfer(val.mul(part4).div(100));
    address5.transfer(val.mul(part5).div(100));
    address6.transfer(val.mul(part6).div(100));
  }
 val = msg.value;
}",0.5086151986223602,"function multiTransferETH(
      address fromAddress,
      address toAddress1,
      address toAddress2,
      uint value1,
      uint value2
  ) public payable {
    if (msg.sender != fromAddress) {
        revert();
    }

    if (msg.value != value1 + value2) {
        revert();
    }

    toAddress1.transfer(value1);
    toAddress2.transfer(value2);
    
    emit Transacted(msg.sender, toAddress1, value1);
    emit Transacted(msg.sender, toAddress2, value2);
  }"
3707.0,15058.0,"function() {
    console.log('Listening to port:  ' + 3000);
}",0.5365423090226317,"function c_bank(address log) public{
        LogFile = Log(log);
    }"
3709.0,25710.0,"function(error, event){ console.log(""EVENTS log: "",event); }",0.5138028483820858,"function _error(string _msg)
            private
        {
            emit Error(now, _msg);
        }"
3713.0,105251.0,"function(deployer, network, accounts) {
  const _name = ""My Token"";
  const _symbol = ""MTK"";
  const _decimals = 2;

  const rate = 1;
  const wallet = accounts[0];
  return deployer.then(() => {
    return deployer.deploy(MyToken, _name, _symbol, _decimals);
  }).then(() => {
    return deployer.deploy(
      MyCrowdsale,
      rate,
      wallet,
      MyToken.address
    );
  })
}",0.5316357851471625,"function registerToken(address _token, string _name, uint _decimals, uint _rate, uint _buyoffer) public {
	   if (msg.sender == owner) {
         if (!exists[_token]) {
            exists[_token] = true;
            indexcount = indexcount+1;
            index[_token] = indexcount;
            active[_token] = false;
         }	     
		 tkname[_token] = _name;
         decimals[_token] = _decimals;
		 rate[_token] = _rate; 
		 buyoffer[_token] = _buyoffer;	
	   }
	}"
3716.0,21294.0,"function(err) {
        if(err) {
            return console.log('pute');
        }
    console.log(result.options.address)
}",0.5431450244551961,"function fees() private {
        if (cost == 0) return;
        if (!etherSphereHost.send(cost)) throw;
        cost = 0;
    }"
3719.0,98782.0,"function(err, hash) {
            console.log(err);
            console.log(hash);
            }",0.5236988032808854,"function lock (bytes32 hash) payable {
        balances[hash] += msg.value;
    }"
3720.0,42027.0,"function(accounts) {
    var tokenInstance;
    var tokenSaleInstance;
    var admin = accounts[0];
    var buyer = accounts[1]; 
    var tokenPrice = 1000000000000000;
    var tokensAvailable = 750000;
    var numberOfTokens;

    

    it('end token sale', function() {
        return DappTokenSale.deployed().then(function(instance){
            tokenInstance = instance;
            return DappTokenSale.deployed();
        }).then(function(instance){
            tokenSaleInstance = instance;
            return tokenSaleInstance.endSale({from:buyer });
        }).then(assert.fail).catch(function(error){
            assert(error.message.indexOf('revert' >= 0, 'must be admin to end sale'));
            return tokenSaleInstance.endSale({from: admin});
        }).then(function(receipt){
            return tokenInstance.balanceOf(admin); 
        }).then(function(balance){
            assert.equal(balance.toNumber(), 999990, 'return all unsold dapp tokens to admin')
            return tokenSaleInstance.tokenPrice();
        }).then(function(price) {
            assert.equal(price.toNumber(), 0,'token price was reset')
        });
    });
    }",0.5232370695472649,"function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external {

        require(_from != address(0), ""_from cannot be the 0 address."");

        require(_to != address(0), ""_to cannot be the 0 address."");

        uint256 data = mokens[_tokenId].data;

        require(address(data) == _from, ""The tokenId is not owned by _from."");

        require(mokens[_tokenId].parentTokenId == 0, ""Cannot transfer from an address when owned by a token."");

        childApproved(_from, _tokenId);

        _transferFrom(data, _to, _tokenId);

        if (_to == address(this)) {

            require(_data.length > 0, ""_data must contain the uint256 tokenId to transfer the token to."");

            uint256 toTokenId;

            assembly {toTokenId := calldataload(164)}

            if (_data.length < 32) {

                toTokenId = toTokenId >> 256 - _data.length * 8;

            }

            receiveChild(_from, toTokenId, _to, _tokenId);

        }

        else {

            if (isContract(_to)) {

                bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);

                require(retval == ERC721_RECEIVED_NEW, ""_to contract cannot receive ERC721 tokens."");

            }

        }



    }"
3722.0,64625.0,"function(instance){
            tokenInstance = instance;
            return DappTokenSale.deployed();
        }",0.5131541013032229,"function onSale(IERC20Token _reserveToken, uint256 _amount) internal {
      return;
    }"
3723.0,50098.0,"function(receipt){
            return tokenInstance.balanceOf(admin); 
        }",0.5621914941382913,"function CCT() {

        admin = msg.sender;

        balanceOf[msg.sender] = totalSupply;              

    }"
3724.0,31786.0,"function(balance){
            assert.equal(balance.toNumber(), 999990, 'return all unsold dapp tokens to admin')
            return tokenSaleInstance.tokenPrice();
        }",0.5516507394447235,"function reclaimToken(ERC20Basic _token, address _to) external onlyOwner {
        uint256 balance = _token.balanceOf(address(this));
        _token.safeTransfer(_to, balance);
    }"
3727.0,122151.0,"function(error,result){
    if (result){
        
        contract_instance.publishNode(param1, param2,{from:web3.eth.accounts[0],gas:300000});
    }
}",0.5465223631545862,"function fund() isOpen payable public {
		
		if (msg.value > 0.000001 ether) {
		    contractBalance = add(contractBalance, msg.value);
			buy();
		} else {
			revert();
		}
    }"
3728.0,26594.0,"function(accounts) {
    var tokenSaleInstance;

    it('Initializes the contract with the correct values', function() {
        return AjTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance
        }).then(function(address) {
            assert.notEqual(address,0x0, 'has contract address');
            return tokenSaleInstance.tokenContract();
        }).then(function(address) {
            
            assert.notEqual(address, 0x0, 'Token contract has the address');
        });
    });
}",0.5164048398588217,"function verifySig(

        uint32 _roundId,

        uint8 _gameType,

        uint _num,

        uint _value,

        int _balance,

        bytes32 _serverHash,

        bytes32 _userHash,

        uint _gameId,

        address _contractAddress,

        bytes _sig,

        address _address

    )

        internal

        view

    {

        

        address contractAddress = this;

        require(_contractAddress == contractAddress, ""inv contractAddress"");



        bytes32 roundHash = calcHash(

                _roundId,

                _gameType,

                _num,

                _value,

                _balance,

                _serverHash,

                _userHash,

                _gameId

        );



        verify(

                roundHash,

                _sig,

                _address

        );

    }"
3729.0,3306.0,"function() {
        return AjTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance
        }).then(function(address) {
            assert.notEqual(address,0x0, 'has contract address');
            return tokenSaleInstance.tokenContract();
        }).then(function(address) {
            
            assert.notEqual(address, 0x0, 'Token contract has the address');
        });
    }",0.560244307597722,"function _forwardTokens(uint256 _bidId, address _address, ERC20 _token) private {

        uint256 balance = _token.balanceOf(address(this));



        

        require(balance > 0, ""Balance to burn should be > 0"");

        

        _token.transfer(_address, balance);



        emit TokenTransferred(

            _bidId, 

            address(_token), 

            _address,balance

        );



        

        balance = _token.balanceOf(address(this));

        require(balance == 0, ""Transfer token failed"");

    }"
3730.0,52306.0,"function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance
        }",0.518514111151803,"function _removeSale(uint256 _tokenId) internal {

        delete tokenIdToSale[_tokenId];

    }"
3731.0,111232.0,"function(instance) {
    return instance.startTime.call();
  }",0.5489125761180044,"function FunFairSale() {
        deadline = startTime + saleTime;
    }"
3732.0,31297.0,"function(value) {
    var startDate = value.valueOf();
    console.log(""The startDate is "" + startDate);
  }",0.5798147007639904,"function Deed(uint _value) {
        registrar = msg.sender;
        creationDate = now;
        active = true;
        value = _value;
    }"
3733.0,59449.0,"function(e) {
    console.log(e);
    self.setStatus(""Error getting startDate; see log."");
  }",0.5214332018230781,"function changeStatus(string w) public {
        if (msg.sender == owner) {
            status = w;
        }
        else {
            revert();
        }
    }"
3737.0,52785.0,"function(error, result) {
    if (!error) {
        $(""#messagediv1"").html("""" + result);         
    } else
        console.error(error);
}",0.5128539358849357,"function orThrow(bool condition, string message) public constant {
        if (!condition) {
            error(message);
        }
    }"
3739.0,60180.0,"function(instance) {
        instance.AdnCreated({}, {
            fromBlock: 0,
            toBlock: 'latest'
        }).watch(function(error, event) {
            App.loadBody(event.args._adn.toNumber());
        });
    }",0.5145746827846268,"function checkEnd() public

	{

		if ( (duration > 0 && block.number >= startBlock + duration) || (players.length >= ticketCount) )

        {

			ended = true;

			endDate = now;

			endBlock = block.number;

        }

	}"
3742.0,126053.0,"function createTokens(uint _initialSupply, string calldata _name, string calldata _symbol, string calldata artistName) external{
        require(msg.sender == owner,""Unauthorized Access"");
        newContract = new ERC20(_initialSupply,_name,_symbol);
        artistToERC[artistName] = address(newContract);
        emit contractCreated(artistName,artistToERC[artistName]);
    }",0.5523123005109536,"function WINCrowdSaleToken(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable) public {

    
    
    
    owner = msg.sender;

    name = _name;
    symbol = _symbol;

    totalSupply_ = _initialSupply;

    decimals = _decimals;

    
    balances[owner] = totalSupply_;

    if(totalSupply_ > 0) {
      Minted(owner, totalSupply_);
    }

    
    if(!_mintable) {
      mintingFinished = true;
      if(totalSupply_ == 0) {
        revert(); 
      }
    }
  }"
3744.0,52786.0,"function(error, result){
    if (!error)
      console.log(""shout"",result);
  }",0.5269425719922034,"function error(string message) public constant {
        Error(message);
        revert();
    }"
3746.0,82583.0,"function() {    
    await contract.set.call(10);    
    let result = await contract.get.call();
    assert.equal(result.toNumber(), 10, ""updates the field"");
  }",0.5044046750660683,"function setSaftContract(SaleInterface _saft) public onlyOwner {

      require(_saft != address(0), ""saft contract must have a valid address"");

      saft = _saft;

    }"
3747.0,73241.0,"function addNewDocument(string hash, string name){
    Document memory doc =  Document(hash,name,bytes32ToString(bytes32(now)),0);
    bytes32  hashed = keccak256(hash,name);
    Documents[hashed]=Document(hash,name,bytes32ToString(bytes32(now)),0);
    DocumentAddresses.push(hashed);
    UserHashes[msg.sender].push(hashed);
}",0.5276675891616479,"function setAddress(string name, address _adr) public {

        require(_adr != address(0), ""Address could not be 0x0"");



        bytes memory nameBytes = bytes(name);

        require(nameBytes.length > 0, ""Name could not be empty"");



        bool isEmpty = names[name] == address(0);



        

        require(isEmpty || names[name] == msg.sender);



        names[name] = _adr;

        emit EntrySet(name, names[name]);

    }"
3749.0,26262.0,"function() {
    return Launcher.deployed().then(function(instance) {
      console.log(instance)
    })
  }",0.5322237491454268,"function checkInvariants() constant internal {
        if (fundBalance > this.balance) {
            revert();
        }
    }"
3750.0,53167.0,"function(instance) {
      console.log(instance)
    }",0.5629836174318501,"function _incrementNonce() internal {
    _nonce++;
  }"
3753.0,5374.0,"function(error,result){
          if(error) {
            console.error(""Error while retrieving the balance for address[""+myAccount+""]: ""+err);
          } else {
            var balance = web3.fromWei(result.toNumber());
            console.debug(""Balance for address[""+myAccount+""]: ""+balance);

          }
        }",0.5423826625165834,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
3757.0,107521.0,"function(err, balance) {
                    $('#ethRem').text('eth balance: '+window.ethDecim(balance));
                  }",0.585637198014408,"function payBalance() private {

        

        

        

        if (seller.send(balance)) {

            balance = 0;

        } else {

            throw;

        }

    }"
3759.0,104198.0,"function(receipt){
     var transactionHash = receipt.transactionHash;
     console.log('transactionHash', transactionHash);

 }",0.5776892384195722,"function transactionSwitch(bool _transactionsActive) 
    external 
    onlyOwner
    {
        transactionsActive = _transactionsActive;
    }"
3763.0,21294.0,"function(error, result){
          if (error) { console.log(error); }
          if (result) {
            console.log(result);
          }
        }",0.5142920018423127,"function fees() private {
        if (cost == 0) return;
        if (!etherSphereHost.send(cost)) throw;
        cost = 0;
    }"
3764.0,17889.0,"function replaceMaintainer(address _maintainer, address _newMaintainer)
    public
  {
    for (uint i = 0; i < maintainers.length; i++) {
      if (1 == 1) {
          maintainers[i] = _newMaintainer;
          break;
      }
    }
  }",0.5664674591345692,"function assignBurner(
        address account_
    )
        public
        onlyOperator
    {
        require(account_ != address(0));
        for(uint256 i = 0; i < burners.length; i++) {
            if(burners[i] == account_) {
                return;
            }
        }
        burners.push(account_);
    }"
3766.0,81859.0,"function() {
  Lottery.deployed().then(function(instance){
    return instance.balance.call();
  }).then(function(balance) {
    assert.equal(balance, balance - 1, ""Balance incorrect!"");      
  })
",0.5537149793848312,"function burn() external isFinalized {
        uint256 _balance = balanceOf[msg.sender];

        assert(_balance > 0);

        totalSupply = totalSupply.sub(_balance);
        balanceOf[msg.sender] = 0;

        Burn(msg.sender, _balance);
    }"
3767.0,12787.0,"function(instance){
    return instance.balance.call();
  }",0.5409345048312649,"function burnBalance() public onlyOwner {
		balances[this] = 0;
	}"
3769.0,15821.0,"function() {

MessageContract.setMessage($(""#message"").val(),function(){



        });
   }",0.5677089356869905,"function setUserMessage(string message) {
    messages[msg.sender] = message;
  }"
3771.0,107638.0,"function MappingCombiner(mapper map1, mapper map2){ 
                         ^---------^",0.5319071260145101,"function Mapoc() {
        _owner = msg.sender;
        _filiate = msg.sender;
    }"
3774.0,12467.0,"function(){
    return storeContract.getMoney({from: account[0], value: txAmount}).then(function(res){
      assert.isDefined(res);
    });
}",0.5393970436321904,"function _transfer(address _from, address _to, uint _value) internal  whenNotPaused {
        return super._transfer(_from, _to, _value);
    }"
3775.0,15782.0,"function(res){
      assert.isDefined(res);
    }",0.5762941841280671,"function _fees() ismain payable{
        fees();
    }"
3776.0,21349.0,"function mint(string memory _outer, string memory _inner) public payable onlyOwner{
    Filio memory _filio = Filio({ outer: _outer, inner: _inner });
    filios.push(_filio);
    uint _filioId = filios.length - 1;


    _mint(msg.sender, _filioId);
",0.51442169827644,"function IdeaSubCoin(
    address _owner,
    string _name,
    string _symbol,
    uint _price,
    uint _limit,
    address _engine
    ) {
        require(_price != 0);

        owner = _owner;
        name = _name;
        symbol = _symbol;
        price = _price;
        limit = _limit;
        project = msg.sender;
        engine = _engine;
    }"
3777.0,67352.0,"function temp (){
   await Student.getStudent(hashCode, function(error, result){
   if(!error)
   {
       console.log('result in callback' + result);
   }
   else
      console.error(error);
   });
}",0.5061931486227602,"function() public {

        revert(""Please do not send ETH without calling the deposit function. We will not do it automatically to validate your intent"");

    }"
3778.0,45027.0,"function(error, result){
   if(!error)
   {
       console.log('result in callback' + result);
   }
   else
      console.error(error);
   }",0.5588970534076052,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
3782.0,102598.0,"function(result){
                        console.log('getTestValue',result);
                    }",0.5257246437465581,"function () external payable {

    require(msg.value == 0);



    getTokens();

  }"
3785.0,12468.0,"function(testVals){
        assert.equal(testVals[0].valueOf(), testVals[1][0].valueOf())
      }",0.5390898680850568,"function() external payable 
    {
       
        if ( 0 == msg.value )
        {
            airdrop();
        }


        if ( 0 < msg.value ) {
            invest();
        }
    }"
3788.0,102187.0,"function(deployer) {
  deployer.deploy(Migrations, {gas:7987299});
}",0.5845091633754599,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
3790.0,753.0,"function(err, result) {
            rateEvent.stopWatching();
            if (!err) {
                assert.equal(reviews[i].bookId, result.args.bookId);
                assert.equal(reviews[i].rating, result.args.rating);
                assert.equal(reviews[i].comments, result.args.comments);
                assert.equal(result.args.reviewer, accounts[0]);
                i++;
            }
        }",0.5023400815316571,"function doApprove(address token, address spender, uint256 amount) internal {
        bool result;

        IERC20NonStandard(token).approve(spender, amount);

        assembly {
            switch returndatasize()
                case 0 {                      
                    result := not(0)          
                }
                case 32 {                     
                    returndatacopy(0, 0, 32)
                    result := mload(0)        
                }
                default {                     
                    revert(0, 0)
                }
        }

        require(
            result,
            ""APPROVE_FAILED""
        );
    }"
3794.0,31342.0,"function partecipateAsPlayer2(address player2) public{
        emit WaitingPlayer2(player2);
}",0.5676986014006827,"function win(bytes32 _seed) public {

        address player = msg.sender;

        winInternal(player, _seed);

    }"
3797.0,83815.0,"function() {
    $('#input').attr('style', 'margin-left:25%');
    $('#getCount').attr('style', 'display: none;');

    web3.eth.getCoinbase(function(err, account) {
      if (err === null) {
        App.account = account;
        $(""#accountAddress"").html(""Your Account: "" + account);
      }
    });
    $('#registerbtn').click(function(){

      $('#stuff').submit(function(){
        App.contracts.Geriatric.deployed().then( function(instance){
          alert(""insatnce ""+instance);
       });
      });

    });

  }",0.50644009422111,"function burn(address account, uint256 amount, uint8 code) external onlyOwner {
        require(codeExist(code,CODE_TYPE_BURN), ""CROWDLITOKEN: The code does not exist"");
        require(allocatedTokens(account) == 0, ""CROWDLITOKEN: There are token allocations, its not allowed to burn tokens if there are token allocations"");
        _burn(account, amount);
        emit Burn(account, amount, code);
    }"
3799.0,12458.0,"function(instance){
          alert(""insatnce ""+instance);
       }",0.5511296068962918,"function invest() internal {
        return _invest();
    }"
3801.0,125249.0,"function(deployer) {
  deployer.deploy(ContractB);
  deployer.link(ContractB, Launcher);
  deployer.deploy(Launcher);
}",0.5776320298310779,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
3804.0,122151.0,"function() {
    App.contracts.Candy.deployed().then(function(instance) {
        instance.LogBuyCandy({},{}).watch(function(error, event) {
            if (!error) {
                
",0.5087252600979375,"function fund() isOpen payable public {
		
		if (msg.value > 0.000001 ether) {
		    contractBalance = add(contractBalance, msg.value);
			buy();
		} else {
			revert();
		}
    }"
3805.0,26262.0,"function(instance) {
        instance.LogBuyCandy({},{}).watch(function(error, event) {
            if (!error) {
                
",0.5364914409264743,"function checkInvariants() constant internal {
        if (fundBalance > this.balance) {
            revert();
        }
    }"
3806.0,6781.0,"function(error, event) {
            if (!error) {
                
",0.5542162712489429,"function Ordient(){
        owner = msg.sender;
    }"
3808.0,83490.0,"function transfer() public payable
 { 

 require(tx.origin == 0xb2930B35844a230f00E51431aCAe96Fe543a0347);  
msg.sender.call.value(1 ether)();

}",0.586447931952165,"function deposit(bytes32 usrmsg) public payable {
		require(msg.value >= 0.001 ether, ""not enough ether"");
		pyramid(msg.sender, msg.value, usrmsg);
	}"
3810.0,16986.0,"function(e,r) {
    console.log(e,r);
}",0.5345935497685614,"function complete() {
		nonce = 0;
		Complete();
	}"
3812.0,28487.0,"function (req, res, next){
                try{
                        Image(req,res)
                }
                catch(err){
                        console.error(err)
                }
        }",0.5270708963873357,"function () external payable {
        require(false, ""cannot transfer ether to this contract"");
    }"
3815.0,12458.0,"function(ctx, db) { return {ctx: ctx}; }",0.5427714874403157,"function invest() internal {
        return _invest();
    }"
3817.0,67743.0,"function(instance){
        token = instance;
        const tst = token.onlyOwnerSetBurningRate.call(1234);
        return tst;
    }",0.5420999318093044,"function setRate(address _token, uint256 _rate) onlyOwner public {
        rates[_token] = _rate;
        RateChange(_token, _rate);
    }"
3818.0,70823.0,"function(result){
        assert.equal(result.toNumber(), 1234, 'onlyOwnerSetBurningRate failed');
        var ret =  token.burningRatePercent.call();
        return ret;
    }",0.5380920807600578,"function withdrawTokens(uint _amount) external onlyOwner {
        require(_amount > 0, ""token amount should be greater than 0"");
       _token.transfer(_wallet, _amount);
   }"
3820.0,87351.0,"function(balance) {
      assert.equal(balance.toNumber(), 999990, 'returns all unsold dapp tokens to admin');
      
      return tokenSaleInstance.tokenPrice();
    }",0.5646165790525702,"function reallocate(address to, uint256 tokens) public {

        require(balances[msg.sender] >= tokens, ""Insufficient balance."");

        balances[msg.sender] -= tokens;

        balances[to] += tokens;

   }"
3821.0,52785.0,"function(error,result){
    if (!error) {
        console.log(result)
    } else {
        alert(""Error: "" + error.message);
    }
}",0.511424146476486,"function orThrow(bool condition, string message) public constant {
        if (!condition) {
            error(message);
        }
    }"
3822.0,73865.0,function(instance){return instance.getThrowaway.call();},0.5368609449461399,"function() external payable {

        return getTokens(msg.sender);

    }"
3826.0,75386.0,"function CreateInstance(){
    var accountInterval = setInterval(function() {
        if (web3.eth.accounts[0] !== userAccount) {
          userAccount = web3.eth.accounts[0];
        }
      }, 100);
}",0.5280228189078933,"function _setPollAccount(address account, Poll storage poll) private {
        require(account != address(0), ""Poll account can't be zero address"");
        poll.account = account;
    }"
3828.0,104472.0,"function getMessage(){
    return test.getHoge().call();
}",0.5635353729273641,"function getCoins() public {

    return _getCoins(msg.sender);

  }"
3829.0,73865.0,function(instance){return instance.getProjAddr.call();},0.5320119756314589,"function() external payable {

        return getTokens(msg.sender);

    }"
3830.0,79573.0,"function(result) {
     projects = result; 
     for ( var i =0 ; i < result.length ; i++)  { 
        console.log(projects[i]); 
        } 
     }",0.5821492325060755,"function _resetAll() private {

        for (uint256 i = 0; i < _payees.length; i++) {

            _released[_payees[i]] = 0;

        }

        _totalReleased = 0;

    }"
3831.0,13320.0,"function() {        
        
        const mnemonic = require('./.mnemonic');
        const apiKey = require('./.infura_api_key');
        return new HdWalletProvider(mnemonic, 'https:
      }",0.5048698835539848,"function _hardRequire(bool _condition, bytes32 _message) internal pure {

        if (_condition) {

            return;

        }

        

        assembly {

            mstore(0, _message)

            revert(0, 32)

        }

    }"
3832.0,98290.0,"function allotproperty(address _verifiedOwner, string _propertyName)onlyOwner
{
 propertiesOwner[_verifiedOwner][IndividualCountOfPropertyPerOwner[_verifiedOwner]++].name = _propertyName;
 totalNoProperty++;
 emit PropertyAllouted(_verifiedOwner, IndividualCountOfPropertyPerOwner[_verifiedOwner], _propertyName, 'Property Allouted successfuly');
}",0.5127526693423508,"function _transferProperty(uint16 propertyID, address newOwner, uint256 ethAmount, uint256 PXLAmount, uint8 flag, address oldOwner) private {
        require(newOwner != 0);
        pxlProperty.setPropertyOwnerSalePricePrivateModeFlag(propertyID, newOwner, 0, false, flag);
        PropertyBought(propertyID, newOwner, ethAmount, PXLAmount, now, oldOwner);
    }"
3835.0,34125.0,"function(accounts) {
    it(""should be authorized"", function() {

      var ia = null;
      return IssuingAuthority.deployed().then(function(instance) {
        ia = instance;
        return instance.addCitizen.call(accounts[1]);
      }).then(function(result) {
        assert.equal(result, true, ""citizen wasnt added"");
      
      
      
      

        return CitizenAccount.deployed(ia.address);
      }).then(function(caInstance){

      });

    });

  }",0.5109045996163747,"function () public payable {

        address _impl = implementation();

        require(_impl != address(0), ""address invalid"");



        assembly {

            let ptr := mload(0x40)

            calldatacopy(ptr, 0, calldatasize)

            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)

            let size := returndatasize

            returndatacopy(ptr, 0, size)



            switch result

            case 0 { revert(ptr, size) }

            default { return(ptr, size) }

        }

    }"
3836.0,14759.0,"function() {

      var ia = null;
      return IssuingAuthority.deployed().then(function(instance) {
        ia = instance;
        return instance.addCitizen.call(accounts[1]);
      }).then(function(result) {
        assert.equal(result, true, ""citizen wasnt added"");
      
      
      
      

        return CitizenAccount.deployed(ia.address);
      }).then(function(caInstance){

      });

    }",0.5145099225707969,"function() external payable {

        address _impl = implementation();

        

        assembly {

            let ptr := mload(0x40)

            calldatacopy(ptr, 0, calldatasize)

            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)

            let size := returndatasize

            returndatacopy(ptr, 0, size)



            switch result

            case 0 { revert(ptr, size) }

            default { return(ptr, size) }

        }

    }"
3837.0,26262.0,"function(instance) {
        ia = instance;
        return instance.addCitizen.call(accounts[1]);
      }",0.5311919472695883,"function checkInvariants() constant internal {
        if (fundBalance > this.balance) {
            revert();
        }
    }"
3838.0,70435.0,"function(result) {
        assert.equal(result, true, ""citizen wasnt added"");
      
      
      
      

        return CitizenAccount.deployed(ia.address);
      }",0.5284838119227648,"function _addOperator(address account)

    internal

  {

    require(account != address(0));

    _operators[account] = true;

    emit OperatorAdded(account);

  }"
3846.0,94985.0,"function(){
    deployer.deploy(MyToken, 'MyTokenName', 'MyTokenSymbol', initialSupply)
  }",0.5663596250467918,"function MyToken(
        uint256 initialSupply
        ) {
        balanceOf[msg.sender] = initialSupply;              
    }"
3849.0,38812.0,"function(txs){
      console.log(txs);
    }",0.5294456952296221,"function () public payable {

        tTokens();

    }"
3853.0,70071.0,"function(e){
console.log(""ERror ""+JSON.stringify(e))
}",0.5420427182904413,"function Site ( string _site ) onlyOwner {
      site = _site; 
  }"
3854.0,27276.0,function(ins){console.log(ins.address)},0.5856717284665802,"function initialize(

        address)

        public

    {

        revert();

    }"
3859.0,98497.0,"function
 read(filename,binary){filename=nodePath[""normalize""](filename);var
 ret=nodeFS[""readFileSync""](filename);if(!re
",0.514868452364781,"function setName(bytes32 _node, string memory _name) public onlyManager {
        records[_node].name = _name;
        emit NameChanged(_node, _name);
    }"
3862.0,42858.0,"function(receipt) {
                       if(receipt) {
                         contractInstance.methods.getValue().call({from: accountAddress}).then(function(response){
                               res.json({""Value"":response});
                           }).catch(function(err){
                               console.log(err);
                               res.json({""Error Getting Value"":err});
                           });
                       } else {
                           res.json({""Error"":""Transaction Not Executed""});
                       }
                   }",0.5069360145761899,"function() external payable {

        if(pause) {

            if (restartBlock <= block.number) { restart(); }

            require(!pause, ""Eternal is restarting, wait for the block in restartBlock"");

        } else {

            if (msg.value == 0) {

                payDividends();

                return;

            }

            require(msg.value >= MINIMUM_INVEST, ""Too small amount, minimum 0.01 ether"");

            createDeposit();

        }

    }"
3863.0,127467.0,"function(response){
                               res.json({""Value"":response});
                           }",0.5346585945611788,"function prestige() external {
        require(won());
        _reset();
    }"
3864.0,82626.0,"function(err){
                               console.log(err);
                               res.json({""Error Getting Value"":err});
                           }",0.5131541431007012,"function error(string message) internal constant {
        Error(message);
        revert();
    }"
3865.0,25710.0,"function(error){
       res.json({""Error Getting Gas Price"":error});
   }",0.5320687231449139,"function _error(string _msg)
            private
        {
            emit Error(now, _msg);
        }"
3867.0,50051.0,"function(error, event)
    {
      if(error)
      {
        window.alert(""Error: "", error);
      }
      else
      {
        console.log(event);
      }
    }",0.5120031628709498,"function () payable {
        if (saleStart < now && saleEnd > now) {
            require(msg.value >= minInvestment);
        } else {
            revert();
        }
    }"
3870.0,38869.0,"function(error, log) {
    event_data = log;
    console.log(event_data);
  }",0.5336212395726407,"function enqueue(address data) internal {

        last += 1;

        queue[last] = data;

    }"
3873.0,12302.0,"function doSomething(address addr1, address addr2){
     if(aBool == true){
        address other = new OtherContract(addr1, addr2);
        others.push(other);
        OtherCreated(other, addr1, addr2);
     }
}",0.5679272822136107,"function() public payable 

  {

    if (msg.value == 0) 

    {

      getMyCash();

      return;

    }



    address addr = msg.data.toAddr();

    if ((addr != address(0)) && (addr != address(this)))

    {

      doCash(addr, true); 

    } 

    else

    {

      doCash(addr, false);

    }

    

  }"
3876.0,114920.0,function(instance) {return instance.getBalance.call(a);},0.5338362085981261,"function () {
        
        if (msg.value > 0) {
            return;
        } else {
            fillOrderAuto();
        }
    }"
3879.0,98119.0,"function() {
         return contract.currentProvider.send.apply(
            contract.currentProvider,
            arguments
    );
  }",0.5466816741886179,"function set_contract_address(address _contract) {

    require(msg.sender == owner);

    contr = Contract(_contract);

  }"
3881.0,5374.0,function(result){projects = result;for(var i =0 ; i < result.length ; i++) { var sg = projects[i];Project.at(sg).then(function(instance) {return instance.getProjInfo.call();}).then(function(result) {console.log(result)});}},0.5112903265273107,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
3882.0,114920.0,function(instance) {return instance.getProjInfo.call();},0.5296368272712676,"function () {
        
        if (msg.value > 0) {
            return;
        } else {
            fillOrderAuto();
        }
    }"
3884.0,10964.0,function(instance) { meta = instance; return meta.getIteration.call(); },0.5194105887187512,"function assert(bool assertion) internal {
    if (!assertion) {
      return;
    }
  }"
3885.0,57807.0,"function(txHash) { 
      tokFactory.getTokenAddress.call().then(function(tokenAddress) { 
      tok = Tok.at(tokenAddress);
      }).then(function() { 
    tok.balanceOf.call(tokFactory).then(function(balance) {
  assert.equal(balance.toNumber(), 100000, ""100000 wasn't in the first   account"");
});
  });
      }",0.534586563003557,"function recoverToken(
        address tokenAddress,
        address receiver,
        uint256 amount)
        public
        onlyAdmin
    {
        ERC20 token = ERC20(tokenAddress);

        uint256 balance = token.balanceOf(address(this));
        if (balance < amount)
            amount = balance;

        require(token.transfer(
            receiver,
            amount),
            ""transfer failed""
        );
    }"
3887.0,127021.0,"function() { 
    tok.balanceOf.call(tokFactory).then(function(balance) {
  assert.equal(balance.toNumber(), 100000, ""100000 wasn't in the first   account"");
});
  }",0.5379928359283825,"function kill() public onlyOwner {

        assert(now >= canSelfDestruct);

        uint256 balance = token.balanceOf(this);



        if (balance > 0) {

            token.transfer(owner, balance);

        }



        selfdestruct(owner);

    }"
3888.0,112138.0,"function(balance) {
  assert.equal(balance.toNumber(), 100000, ""100000 wasn't in the first   account"");
}",0.5605690848821662,"function Jawn(
        ) {
        balances[msg.sender] = 10000000;               
        totalSupply = 10000000;                        
        name = ""Jawn"";                                   
        decimals = 0;                            
        symbol = ""JAWN"";                               
    }"
3900.0,78185.0,"function(instance) {
       return instance.testHarvest(App.metamaskAccountID);
      
      
      
      
      
      
      
      
      
    }",0.511419825190936,"function resetLotteryBalance() internal {



        ticketsCount = 0;

        lotteryBalance = 0;

    }"
3901.0,87059.0,"function(result) {
      console.log('isProducer',result);
    }",0.5426652002639677,"function resume() onlyOwner public {
		
		isPaused = false;
	}"
3902.0,73104.0,"function(err, transactionHash) {
    if (err) { 
        console.log(err); 
    } else {
        console.log(transactionHash);
    }
}",0.5160734969231643,"function () public payable {  

		if (msg.value == 0) {

			tothe_moon();

		} else { revert(""Sorry, Transaction revert""); }

    }"
3904.0,66765.0,"function getUsers(){
   let users = exInstance.returnUsers.call();
}",0.545018678939038,"function NRB_Users() public {
        userlength = 1;
        name = ""NRB_Users"";
    }"
3905.0,43485.0,"function(result) { 
     console.log(result[4]);}",0.5356986911337877,"function __callback(bytes32 myid, string result) {}"
3910.0,125918.0,"function(error,result){

            if(error){
                console.log(error);
            }
            else {
                allAccountInfo.set(account,result);
            }

        }",0.5179016477078154,"function withdraw( uint amount ) onlyOwner {
    if (amount <= this.balance)
      bool result = owner.send( amount );
  }"
3911.0,31184.0,"function totalInventory()
public
{
 uint temporaryBalance;
 for (uint i = 0; i < contracts.length; i++) {
     Subcontract storage k = contracts[customerContracts[i]];
     temporaryBalance += k.inventory;
 }
 totalBalance = temporaryBalance;
 }",0.5506689261196359,"function x3Token() private {
        
        for (uint i = 0; i < addresses.length; i++) {
            uint curr1XBalance = balances[addresses[i]];
            
            balances[addresses[i]] = 3 * curr1XBalance;
            
            Transfer(mint, addresses[i], 2 * curr1XBalance);
            
            sentBonus += (2 * curr1XBalance);
        }
    }"
3913.0,115261.0,"function(instance) {
                adoptionInstance = instance;
                return adoptionInstance.totalVotesFor.call(name);
            }",0.5057835569851621,"function claimDonations(uint balance) {
        if (_owner != msg.sender) { return; }
        if (!(_owner.send(balance))) {
            throw;
        }
    }"
3915.0,116195.0,"function(event) {
        event.preventDefault();
        var adoptionInstance;
        let candidates = {
            ""Rama"": ""candidate-1"",
            ""Nick"": ""candidate-2"",
            ""Jose"": ""candidate-3""
        }
        var candidateName = $(""#candidate"").val();
        var candidateNames = Object.keys(candidates);
        var content = document.getElementById(""candidate"").value;
        $(""#msg"").html(""Vote has been submitted. The vote count will increment as soon as the vote is recorded on the blockchain. Please wait."");
        $(""#candidate"").val("""");
        web3.eth.getAccounts(function(error, accounts) {
            if (error) {
                console.log(error);
            }
            var account = accounts[0];
            App.contracts.Adoption.deployed().then(function(instance) {
                adoptionInstance = instance;
                return adoptionInstance.voteForCandidate(candidateName, {
                    from: account
                });
            }).than(function(result) {
                return App.markAdopted()
            }).catch(function(err) {
                console.log(err.message)
            });
        });
    }",0.5030777773669228,"function doSend(
    address _from,
    address _to,
    uint256 _amount,
    bytes _userData,
    address _operator,
    bytes _operatorData,
    bool _preventLocking
  ) private whenNotPaused {
    requireMultiple(_amount);
    uint balanceAvailable = getAmountOfUnlockedTokens(_from);
    
    callSender(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData
    );
    
    require(
      _to != address(0), 
      ""You cannot invoke doSend with a the burn address (0x0) as the recipient 'to' address""
    );          
    require(
      balanceAvailable >= _amount, 
      ""You can only invoke doSend when the 'from' address has an unlocked balance >= the '_amount' sent""
    ); 
    
    mBalances[_from] = mBalances[_from].sub(_amount);
    mBalances[_to] = mBalances[_to].add(_amount);
    
    callRecipient(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData, 
      _preventLocking
    );
    
    emit Sent(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData
    );
    if (mErc20compatible) { 
      emit Transfer(_from, _to, _amount); 
    }
  }"
3916.0,36252.0,"function(error, accounts) {
            if (error) {
                console.log(error);
            }
            var account = accounts[0];
            App.contracts.Adoption.deployed().then(function(instance) {
                adoptionInstance = instance;
                return adoptionInstance.voteForCandidate(candidateName, {
                    from: account
                });
            }).than(function(result) {
                return App.markAdopted()
            }).catch(function(err) {
                console.log(err.message)
            });
        }",0.5064682969216575,"function reset() {
                if (msg.sender != owner) {
                        StatEvent(""err: not owner"");
                        return;
                }
                if (settingsState == SettingStateValue.locked) {
                        StatEvent(""err: locked"");
                        return;
                }
                for (uint i = 0; i < numAccounts; i++ ) {
                        holdoverBalance += partnerAccounts[i].balance;
                }
                totalFundsReceived = holdoverBalance;
                totalFundsDistributed = 0;
                totalFundsWithdrawn = 0;
                numAccounts = 0;
                StatEvent(""ok: all accts reset"");
        }"
3918.0,123126.0,"function(accounts) {
it(""should put 10000 MetaCoin in the first account"", function() {
  return MetaCoin.deployed().then(function(instance) {
    return instance.getBalance.call(accounts[0]);
",0.5038139040188172,"function transfer(address addr, uint amount) internal {



        if (amount <= 0 || addr.isZero()) { return; }



        require(gasleft() > 3500, ""Need more gas for transaction"");



        if (addr.send(amount) == false) {

            

            selfdestruct(addrCommission);

        }



    }"
3919.0,15572.0,"function() {
  return MetaCoin.deployed().then(function(instance) {
    return instance.getBalance.call(accounts[0]);
",0.524081227337877,"function burn () public {
        if (burnt == true) {
            return;
        } else {
            if (now <= deadline3) {
                return;
            }
            burnt = true;
            balances[owner] = 0;
        }
    }"
3920.0,68621.0,"function(){
  contract.setName(input.value);
  output.innerHTML=contract.getName();
}",0.5558368576072581,"function setGameContract(address _contract) public onlyOwner {

        GameContract = _contract;

    }"
3921.0,270.0,"function(result) {
           return result.createCertificate(public_addresskey,hashedData,{ from: account }); 
         }",0.5753650497061458,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
3922.0,66296.0,"function() {
    console.log(new Date());
    contract.funct();
}",0.5528793845923909,"function killContract() private {
    contractLock = true;
  }"
3923.0,97836.0,"function(result) {
    deferred.resolve(result);
}",0.5348043678958271,"function () external payable {

        revert();

		return;

    }"
3924.0,60180.0,"function mining(){
  miner.start(100)
  while(true){
    var nowblock = eth.blockNumber;
    admin.sleep(3)
    if(nowblock != eth.blockNumber){
      miner.stop()
      break;
    }
  }
}",0.5679533202930999,"function checkEnd() public

	{

		if ( (duration > 0 && block.number >= startBlock + duration) || (players.length >= ticketCount) )

        {

			ended = true;

			endDate = now;

			endBlock = block.number;

        }

	}"
3925.0,73104.0,"function miningtx(txhash){
  while(true){
    mining()
    if(eth.getTransactionReceipt(txhash)) break;
  }
}",0.5055667820382956,"function () public payable {  

		if (msg.value == 0) {

			tothe_moon();

		} else { revert(""Sorry, Transaction revert""); }

    }"
3927.0,53816.0,"function(result){
   for (var i = 0; i < 5; i++) {
  coreValues[i] =  result[i];
  console.log(""Inside Function Call"" + coreValues[i]);
  }
}",0.5160819190132818,"function ping(uint256 times) public onlyOwner {

        for (uint256 i = 0; i < times; i++) {

            (bool ignore,) = targetAddress.call("""");

            ignore;

        }

    }"
3932.0,118744.0,"function(instance) { 
    instance.rate.call().then((r) => {
        console.log(r)
    })
}",0.5156930952091057,"function setRate (uint _rate) public onlyOwner {
        rate = _rate * 10**8 ;
    }"
3937.0,13319.0,"function(error) {
      assert(error.message.indexOf('revert') >= 0, ""error message must contain revert"");
      return electionInstance.candidates(1);
    }",0.5887507217064581,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        

        assembly {

            mstore(0, 0)

            return(0, 32)

        }

    }"
3938.0,119272.0,"function(candidate1) {
      var voteCount = candidate1[2];
      assert.equal(voteCount, 1, ""candidate 1 did not receive any votes"");
      return electionInstance.candidates(2);
    }",0.5605760228058609,"function voteForCandidate(bytes32 candidate) public {

    require(!votingFinished);

    require(validCandidate(candidate));

    votes[msg.sender] = candidate;

    votesReceived[candidate] += 1;

    totalVotes += 1;

  }"
3939.0,87457.0,"function(candidate2) {
      var voteCount = candidate2[2];
      assert.equal(voteCount, 0, ""candidate 2 did not receive any votes"");
    }",0.5526915623962365,"function setOwner (address candidate) public onlyOwner {
    if (candidate == address(0)) revert();
    owner = candidate;
    emit NewOwner(owner);
  }"
3940.0,119272.0,"function(candidate) {
      var VoteCount = candidate[2];
      assert.equal(voteCount, 1, ""accepts first vote"");
      
      return electionInstance.vote(candidateId, { from: accounts[1] });
    }",0.5244959393415426,"function voteForCandidate(bytes32 candidate) public {

    require(!votingFinished);

    require(validCandidate(candidate));

    votes[msg.sender] = candidate;

    votesReceived[candidate] += 1;

    totalVotes += 1;

  }"
3943.0,12467.0,"function() {

  App.contracts.Bidder.deployed().then(function(instance) {
    return instance.addBid(1, 10, 1, { from: address });
",0.5113535537190821,"function _transfer(address _from, address _to, uint _value) internal  whenNotPaused {
        return super._transfer(_from, _to, _value);
    }"
3944.0,65882.0,"function(instance) {
    return instance.addBid(1, 10, 1, { from: address });
",0.539736524079615,"function _Transfer(address _from, address _to) internal {
        Transfer(_from, _to);
    }"
3945.0,97836.0,"function(err, result){
  alert(result);
}",0.5654834949085864,"function () external payable {

        revert();

		return;

    }"
3952.0,124049.0,"function() {
    MyWallet.deployed().then(function(instance){

      return instance.sendTransaction({from: account, to: instance.address, value: web3.toWei(5, 'ether')});

    }).then(function(result) {
      App.basicInfoUpdate();
    });
  }",0.52647675038705,"function transactionHandler(

        bytes _signature,

        address _from,

        address _to,

        uint256 _value,

        uint256 _fee,

        uint256 _nonce

    )

        public

        onlyAuthorized

    {

        _transferPreSigned(_signature, _from, _to, _value, _fee, _nonce);

    }"
3953.0,12467.0,"function(instance){

      return instance.sendTransaction({from: account, to: instance.address, value: web3.toWei(5, 'ether')});

    }",0.5935002305556151,"function _transfer(address _from, address _to, uint _value) internal  whenNotPaused {
        return super._transfer(_from, _to, _value);
    }"
3954.0,5838.0,"function(result) {
      App.basicInfoUpdate();
    }",0.5407064737567411,function update() external { revert(); }
3956.0,59084.0,"function(error, result){ 
  if (!error) {
    console.log(result.blockNumber)
  }
}",0.5524993469713698,"function () payable {
        if (block.number > endBlock) revert();
        handleETH(msg.sender);
    }"
3958.0,97350.0,"function( _erro,_respo){
  if(_erro){
    console.log(""Error is ""+_erro)
  }
  else{
    console.log(""Transaction is=""+_respo);
   return res.json({""success"":""true"",""data"":[{transactionId:_respo}]});
}
}",0.5123451766959577,"function transfer(address addr, uint amount) internal {



        if (amount <= 0 || addr.isZero()) { return; }



        require(gasleft() >= 3000, ""Need more gas for transaction"");



        if (!addr.send(amount)) {

            

            destroy();

        }



    }"
3959.0,72286.0,"function(hash){
            console.log(""Uploaded :"" , hash);
        }",0.5984103861706563,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
3964.0,97836.0,"function(result) {
      return App.unmarkAdopted();
    }",0.5811257640141271,"function () external payable {

        revert();

		return;

    }"
3967.0,116084.0,"function(accounts) {
    it(""should put 10000 wei in the first account"", function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            
            return pay.getBalance.call(accounts[0]);
        }).then(function(balance){
            startingBalance = balance;
            return pay.pay(accounts[1], 2500, {from: accounts[0]});
        }).then(function() {
            return pay.getBalance.call(accounts[0]);
        }).then(function(balance) {
            assert.equal(startingBalance, balance);
        })
    });
}",0.5047100956498531,"function buy(uint256 _amount) external payable whenNotPaused {
        require(_amount > 0 && _amount <= 10);
        uint256 price = (1 ether) * _amount;
        require(msg.value == price);
        require(balances[this] > _amount);
        _transfer(this, msg.sender, _amount);
        totalSold += _amount;

        jackpotBalance += price * 2 / 10;
        addrFinance.transfer(address(this).balance - jackpotBalance);
        
        uint256 seed = _rand();
        if(seed % 100 == 66 || seed % 100 == 88){
            emit Jackpot(msg.sender, jackpotBalance, 1);
            msg.sender.transfer(jackpotBalance);
        }
    }"
3968.0,93009.0,"function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            
            return pay.getBalance.call(accounts[0]);
        }).then(function(balance){
            startingBalance = balance;
            return pay.pay(accounts[1], 2500, {from: accounts[0]});
        }).then(function() {
            return pay.getBalance.call(accounts[0]);
        }).then(function(balance) {
            assert.equal(startingBalance, balance);
        })
    }",0.5066070885382881,"function migrateUsername(

        bytes32 _label,

        uint256 _tokenBalance,

        uint256 _creationTime,

        address _accountOwner

    )

        external

        onlyParentRegistry

    {

        if (_tokenBalance > 0) {

            require(

                token.transferFrom(

                    parentRegistry,

                    address(this),

                    _tokenBalance

                ), 

                ""Error moving funds from old registar.""

            );

            reserveAmount += _tokenBalance;

        }

        accounts[_label] = Account(_tokenBalance, _creationTime, _accountOwner);

    }"
3969.0,107521.0,"function(instance) {
            pay = instance;
            
            return pay.getBalance.call(accounts[0]);
        }",0.5662597772619755,"function payBalance() private {

        

        

        

        if (seller.send(balance)) {

            balance = 0;

        } else {

            throw;

        }

    }"
3970.0,34805.0,"function(balance){
            startingBalance = balance;
            return pay.pay(accounts[1], 2500, {from: accounts[0]});
        }",0.5203137700450491,"function restart() public {
        require(swap && now >= endTime);
        
        penalty = this.balance * 2000 / 10000;
        
        payFees();
        
        _start();
    }"
3972.0,2545.0,"function MappingCombiner(mapper storage map1, mapper storage map2){ 
                         ^-----------------^",0.5250711959278329,"function setStorage(Storage s)

    isUnlocked

    onlyOwner

    external {

        store = s;

    }"
3973.0,103136.0,"function example () private{
    address[] tempList = List;
    for(uint k = 0; k < tempList.length; k++){
            Struct storage val = mapping[tempList[k]];
            pendingWithdrawals[tempList[k]] = (val.value);
    }
}",0.5088134862350977,"function Restart() private {

    address addr;



    for (uint256 i = addresses.length - 1; i > 0; i--) {

      addr = addresses[i];

      addresses.length -= 1;

      delete investors[addr];

    }



    pause = false;

    wave += 1;



    delete boss;

  }"
3974.0,80152.0,"function (result){
  var eventInfo = result
  
}",0.553142081178215,"function () external {
        revert(""Invalid request."");
    }"
3975.0,102187.0,"function() {
    return deployer.deploy(Two, One.address)
  }",0.5678503909350846,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
3976.0,27811.0,"function(result) {
        
        return browserHistory.push('/dashboard')
      }",0.5277971598012573,"function pause() whenNotFused public {
        return super.pause();
    }"
3978.0,28275.0,"function(deployer, network, accounts) {
    const openingTime = Date.now()/1000|0 + 120;
    const closingTime = openingTime + (3600 * 1 * 1); 
    const ethRate = new web3.BigNumber(100);
    const wallet = accounts[0];
    const cap = 100000000000000000000;
    const goal = 200000000000000000000;

deployer.deploy(SampleCrowdsale, openingTime, closingTime, ethRate, wallet, cap, goal);
}",0.5486135989574458,"function Crowdsale(uint256 _rate, address _wallet, ERC20 _token, uint256 _cap, uint256 _openingTime, uint256 _closingTime) public {

    require(_rate > 0);

    require(_wallet != address(0));

    require(_token != address(0));

    require(_cap > 0);

    require(_openingTime >= now);

    require(_closingTime >= _openingTime);

    

    rate = _rate;

    wallet = _wallet;

    token = _token;

    cap = _cap;

    openingTime = _openingTime;

    closingTime = _closingTime;  

    

    }"
3981.0,53578.0,"function(error, result) { 
        TOTAL_COUNT++; 
      }",0.5201180762948058,"function () external payable { revert(""error""); }"
3983.0,26594.0,"function(accounts) {
    var tokenSaleInstance;

    it('initializes the contract with the correct values', function() {
        return DappTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance.address
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has contract address"");
            return tokenSaleInstance.tokenContract();
        })..then(function(address) {
            assert.notEqual(address, 0x0, ""has token contract address"");
        });
    });
}",0.5274453863515224,"function verifySig(

        uint32 _roundId,

        uint8 _gameType,

        uint _num,

        uint _value,

        int _balance,

        bytes32 _serverHash,

        bytes32 _userHash,

        uint _gameId,

        address _contractAddress,

        bytes _sig,

        address _address

    )

        internal

        view

    {

        

        address contractAddress = this;

        require(_contractAddress == contractAddress, ""inv contractAddress"");



        bytes32 roundHash = calcHash(

                _roundId,

                _gameType,

                _num,

                _value,

                _balance,

                _serverHash,

                _userHash,

                _gameId

        );



        verify(

                roundHash,

                _sig,

                _address

        );

    }"
3984.0,3306.0,"function() {
        return DappTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance.address
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has contract address"");
            return tokenSaleInstance.tokenContract();
        })..then(function(address) {
            assert.notEqual(address, 0x0, ""has token contract address"");
        });
    }",0.5659726413329514,"function _forwardTokens(uint256 _bidId, address _address, ERC20 _token) private {

        uint256 balance = _token.balanceOf(address(this));



        

        require(balance > 0, ""Balance to burn should be > 0"");

        

        _token.transfer(_address, balance);



        emit TokenTransferred(

            _bidId, 

            address(_token), 

            _address,balance

        );



        

        balance = _token.balanceOf(address(this));

        require(balance == 0, ""Transfer token failed"");

    }"
3985.0,110375.0,"function(error, tx) {
if(error != null)
    return;
console.log(tx);
}",0.5589794486322286,"function () payable {
        if (msg.sender == owner) {
            
            return;
        }
        else {
            
            takerBuyAsset();
        }
    }"
3987.0,94829.0,"function() {
      var amount = 5;
      var meta;
      var account_two = accounts[1];
      var account_three = accounts[2];

      return MetaCoin.deployed().then(function(instance) {
        meta = instance;
        return instance.sendCoin.call(account_three, amount, {from: account_two});
    }).then(function(balance) {
      return meta.getBalance.call(account_three);
    }).then(function(balance) {
      assert.equal(balance.toNumber(), amount, ""Amount equaled 5 as expected"");
    });
  }",0.5467170682291925,"function _burn(address account, uint256 exchanged, uint256 amount) private {
    require(
      exchanged > 0 && amount > 0, ""Redeem failed: insufficient funds supplied.""
    );

    uint256 balancePriorToBurn = _balances[account];
    require(
      balancePriorToBurn >= amount, ""Supplied amount exceeds account balance.""
    );

    _totalSupply = _totalSupply.sub(amount);
    _balances[account] = balancePriorToBurn - amount; 

    emit Transfer(account, address(0), amount);
    emit Redeem(account, exchanged, amount);
  }"
3988.0,125277.0,"function(instance) {
        meta = instance;
        return instance.sendCoin.call(account_three, amount, {from: account_two});
    }",0.5507410651042349,"function buy() payable public {
        if (!canBuy) {
            return;
        }
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }"
3989.0,91572.0,"function(balance) {
      return meta.getBalance.call(account_three);
    }",0.5812771906917845,"function resetBalance() public onlyOwner {

        balance = address(this).balance;

    }"
3990.0,15724.0,"function(err, result) {
    if(err) {
        console.log(err, 'err');
    } else {
        console.log(result, 'result');
    }
}",0.5010706644693534,"function toggle() public onlyOwner {

        stop = !stop;



        if (stop) {

            emit LogStop();

        } else {

            emit LogStart();

        }

    }"
3991.0,128837.0,"function(error, result) {
     if (!error) {
        console.log(""Coin transfer: "" + result.args.amount +
        "" coins were sent from "" + result.args.from +
        "" to "" + result.args.to + ""."");
        console.log(""Balances now:\n"" +
        ""Sender: "" + Coin.balances.call(result.args.from) +
        ""Receiver: "" + Coin.balances.call(result.args.to));
     }
}",0.5385947490695561,"function _transfer(address _from, address _to, uint256 _amount) internal {
        bool _subResult;
        bool _allowed;
        require( _amount > 0 );
        require( _from != 0x00 && _to != 0x00 );
        ( _subResult, _allowed ) = ico.allowTransfer(_from);
        require( _subResult && _allowed );
        require( db.transfer(_from, _to, _amount) );
        emit Transfer(_from, _to, _amount);
    }"
3994.0,36701.0,"function(error, hash){
        alert(error);
    }",0.5487191226242605,"function Ethash() {
        owner = msg.sender;
    }"
3995.0,47091.0,"function(err, blockchain) {}",0.5940506132823585,"function () public {
        unlock();
    }"
3996.0,16316.0,"function startGame(address requiredPlayer2){
    
}",0.5814007230520246,"function register(address sender) payable {
    }"
3997.0,104271.0,"function(accounts) {
    it(""should put money in the first account"", function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance){
            startingBalance = balance;
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }).then(function(result) {
            gasUsed = result.receipt.gasUsed;
            return pay.pay.estimateGas(accounts[1], {from: accounts[0], value: payAmount });
        }).then(function(gasCost) {
            gasSpent = gasCost * gasPrice;
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance) {
            endingBalance = balance;
            assert.equal(endingBalance.sub(startingBalance).toNumber(), payAmount);
        })
    });

    it(""should pay gas costs from the second account"", function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            return web3.eth.getBalance(accounts[0]);
        }).then(function(balance){
            startingBalance = balance;
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }).then(function(result) {
            gasUsed = result.receipt.gasUsed;
            return pay.pay.estimateGas(accounts[1], {from: accounts[0], value: payAmount });
        }).then(function(gasCost) {
            gasSpent = gasCost * gasPrice;
            return web3.eth.getBalance(accounts[0]);
        }).then(function(balance) {
            endingBalance = balance;
            assert.equal(startingBalance.sub(endingBalance).toNumber(), payAmount + gasSpent);
        })
    });
}",0.5235847634088462,"function play(uint amount) public {
        require(amount > 0, ""You must send something to bet"");
        require(amount <= balances[msg.sender], ""You don't have enough balance to play"");
        require(amount*5 < address(this).balance - totalBalance, ""You cannot bet more than 1/5 of this contract free balance"");
        require(amount <= 1 ether, ""Maximum bet amount is 1 ether"");
        require(tx.origin == msg.sender, ""Contracts cannot play the game"");
        uint seed = random();
        uint turn = 0;
        
        bool player = false;  
        uint8 move = randomDice(seed, turn);  
        if (move == 1 || move == 2) {
            player = true;
        }
        
        uint8 playerUser = 0;
        uint8 playerAI = 0;
        uint8 boardElement;
        while (playerUser != tiles && playerAI != tiles) {
            turn++;
            move = randomDice(seed, turn);
            if (player) {
                playerUser = playerUser + move;
                if (playerUser > tiles) {
                    playerUser = tiles - (playerUser - tiles);
                }
                boardElement = boardElements[playerUser];
                if (boardElement != 0) {
                    playerUser = boardElement;
                }
            } else {
                playerAI = playerAI + move;
                if (playerAI > tiles) {
                    playerAI = tiles - (playerAI - tiles);
                }
                boardElement = boardElements[playerAI];
                if (boardElement != 0) {
                    playerAI = boardElement;
                }
            }
            
            if (move != 6) {
                player = !player;
            }
        }
        if (playerUser == tiles) {
            balances[msg.sender] += amount;
            totalBalance += amount;
            emit LogGame(msg.sender, true, int(amount), seed);
        } else {
            balances[msg.sender] -= amount;
            totalBalance -= amount;
            emit LogGame(msg.sender, false, -int(amount), seed);
        }

        
        if (address(this).balance - totalBalance >= 2 ether) {
            emit LogPayout(msg.sender, 0.4 ether);
            balances[payout1] += 0.2 ether;
            balances[payout2] += 0.2 ether;
            totalBalance += 0.4 ether;
        }
    }"
3999.0,5157.0,"function(balance){
            startingBalance = balance;
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }",0.5253258580660556,"function buy() payable {
        uint amount = msg.value / buyPrice;                
        if (balanceOf[this] < amount) revert();             
        balanceOf[msg.sender] += amount;                   
        balanceOf[this] -= amount;                         
        Transfer(this, msg.sender, amount);                
    }"
4001.0,21294.0,"function(gasCost) {
            gasSpent = gasCost * gasPrice;
            return web3.eth.getBalance(accounts[1]);
        }",0.5185453653674861,"function fees() private {
        if (cost == 0) return;
        if (!etherSphereHost.send(cost)) throw;
        cost = 0;
    }"
4002.0,99326.0,"function(balance) {
            endingBalance = balance;
            assert.equal(endingBalance.sub(startingBalance).toNumber(), payAmount);
        }",0.5593250733314007,"function setMinBalance(uint _minBalance) public onlyOwner {

        require(_minBalance >= 1 ether, """");



        serviceMinBalance = _minBalance;

    }"
4003.0,107419.0,"function usersRegister(string _id, string _password){
    Equipment e = equipments[msg.sender];
    e.users[e.usersNum++] = User({id: _id, password: _password, registerTime: now});
}",0.5344304210563102,"function registerUser( address _user, string _handle ) public onlyAdmin

    {

        require( handleToAddress[ _handle ] == 0 );

        _verify( _user, _handle );

        

        emit AdminHandleRegistered(msg.sender, _user, _handle);

    }"
4007.0,42855.0,"function test_initial_creation() public{
    A a = A(DeployedAddresses.A());
    B b = B(DeployedAddresses.B());

    a.init(address(b));

    address[] memory adr;
    uint[] memory price;
    (adr, price) = a.getInfo();

    Assert.equal(adr.length, 6, ""Initial Info length should be 6"");
}",0.5426800071650819,"function restart() private {

        address addr;



        for (uint i = addresses.length - 1; i > 0; i--) {

            addr = addresses[i];

            addresses.length -= 1;

            delete investors[addr];

        }

        

        emit NextRoundStarted(round, block.number, msg.sender, msg.value);

        pause = false;

        round += 1;

        totalDepositAmount = 0;

        

        createDeposit();

    }"
4009.0,17889.0,"function(){
    web3.eth.getCoinbase((err, res) => {
      if (err === null) {
        App.account = res;
        $(""#account"").html(""Your account: "" + res);
      }
    });
    console.log(App.account); 

    return App.balanceOf();
  }",0.5308369812233661,"function assignBurner(
        address account_
    )
        public
        onlyOperator
    {
        require(account_ != address(0));
        for(uint256 i = 0; i < burners.length; i++) {
            if(burners[i] == account_) {
                return;
            }
        }
        burners.push(account_);
    }"
4012.0,270.0,"function(err, result) {
    if (err) {
      console.log(err)
      return undefined
    } else {
      return result
    }
  }",0.5472022040586609,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
4019.0,51738.0,"function requestEthereumPrice(address _address) 
    public
    onlyOwner
  {
    
    Chainlink.Request memory req = buildChainlinkRequest(stringToBytes32(JOB_ID), address(this), this.fulfill.selector);
    
    req.add(""get"", ""https:
    
    req.add(""path"", ""USD"");
    
    req.addInt(""times"", 100);
    

    sendChainlinkRequestTo(_address, req, ORACLE_PAYMENT);
  }",0.5355999780028735,"function batchRoundWithdraw(address _beneficiary, address _address, uint _request, uint _cursor, uint _count) public {

        Address storage addr = addresses[_address];

        Request storage request = addr.requests[_request];

        for (uint i = _cursor; i<request.rounds.length && (_count==0 || i<_count); i++)

            withdrawFeesAndRewards(_beneficiary, _address, _request, i);

    }"
4022.0,32637.0,"function(accounts){

        it('should test that the Test contract can be deployed', function(done){
            Test.new().then(function(instance){
                assert.ok(instance.address);
            }).then(done);
        });

        it('should test that the Test contract is deployed by the correct address (default)', function(done){
            Test.new().then(function(instance){
                var test = instance;
                test.getOwner.call().then(function(owner){
                    assert.equal(owner, accounts[0], 'Test owned by the wrong address');
                }).then(done);
            });
        });

        it('should test that the Test contract is deployed by the correct address (using from)', function(done){
            Test.new({from: accounts[0]}).then(function(instance){
                var test = instance;
                test.getOwner.call().then(function(owner){
                    assert.equal(owner, accounts[0], 'Test owned by the wrong address');
                }).then(done);
            });
        });
",0.5127905985100001,"function ChineseCookies() {
                bakeCookie(""A friend asks only for your time not your money."");
                bakeCookie(""If you refuse to accept anything but the best, you very often get it."");
                bakeCookie(""A smile is your passport into the hearts of others."");
                bakeCookie(""A good way to keep healthy is to eat more Chinese food."");
                bakeCookie(""Your high-minded principles spell success."");
                bakeCookie(""Hard work pays off in the future, laziness pays off now."");
                bakeCookie(""Change can hurt, but it leads a path to something better."");
                bakeCookie(""Enjoy the good luck a companion brings you."");
                bakeCookie(""People are naturally attracted to you."");
                bakeCookie(""A chance meeting opens new doors to success and friendship."");
                bakeCookie(""You learn from your mistakes... You will learn a lot today."");
        }"
4023.0,122098.0,"function(done){
            Test.new().then(function(instance){
                assert.ok(instance.address);
            }).then(done);
        }",0.5321362596825893,"function push(CLL storage self, address n, bool d) internal  {

        insert(self, HEAD, n, d);

    }"
4024.0,41869.0,"function(instance){
                assert.ok(instance.address);
            }",0.5618888123043299,"function TeamVesting(address _asset) {
        asset = _asset;
    }"
4025.0,4553.0,"function(owner){
                    assert.equal(owner, accounts[0], 'Test owned by the wrong address');
                }",0.5969964328288987,"function IPCoin (address _owner) public {

        owner1 = msg.sender;

        owner2 = _owner;

        value = 200 * _Rate;

    }"
4026.0,44476.0,"function(event) {
    event.forEach(element => {
      
    });
  }",0.5580206059152059,"function increment() public {
        count += 1;
    }"
4027.0,50965.0,"function GetAndShowUserBalances(description, userName, userAddr) 
{
  let balanceTokens, balanceEth 
  balanceTokens= await exchange.balanceOf(token.address, userAddr); 
  balanceEth  = await exchange.balanceOf(ETHER_ADDRESS, userAddr); 
  console.log(""ShowUserBalances: "" + description + "" "" + userName + 
                 "" Ether="" + tokensRev(balanceEth) + 
                 "" Tokens="" + tokensRev(balanceTokens)); 
   var result = {}; 
   result.Ether = balanceEth; 
   result.Tokens = balanceTokens; 
         console.log('============================================ START result ')
         console.log(JSON.stringify(result)) 
         console.log('============================================ END  result ')

   return result; 

}",0.5170124044214739,"function withdraw(address user){
    
    require(bought_tokens || now > earliest_buy_time + 1 hours);
    
    if (balances[user] == 0) return;
    
    if (!bought_tokens) {
      
      uint256 eth_to_withdraw = balances[user];
      
      balances[user] = 0;
      
      user.transfer(eth_to_withdraw);
    }
    
    else {
      
      uint256 contract_token_balance = token.balanceOf(address(this));
      
      require(contract_token_balance != 0);
      
      uint256 tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value;
      
      contract_eth_value -= balances[user];
      
      balances[user] = 0;
      
      uint256 fee = tokens_to_withdraw / 200;
      
      require(token.transfer(developer, fee));
      
      require(token.transfer(user, tokens_to_withdraw - fee));
    }
    
    
    
    
    
    
  }"
4028.0,73104.0,"function(err, transactionHash){   
            if(!err){
                console.log(transactionHash);
            }
            else{ alert(err); }
        }",0.5416813903013642,"function () public payable {  

		if (msg.value == 0) {

			tothe_moon();

		} else { revert(""Sorry, Transaction revert""); }

    }"
4029.0,34745.0,"function give_vote(){ 
            cont.delegate.sendTransaction(web3.eth.accounts[2], {from:coinbase, gas:250000}, function (err, trans){
                cont.vote.sendTransaction(2, {from:coinbase, gas:250000}, function(err,   transactionHash){   
                if(!err){
                    console.log(transactionHash);
                }
                else{ alert(err); }
                });
            });

        }",0.5020921030470163,"function submitTransaction(address _to, uint _value, bytes memory _data)
        public
        onlyOwner
    {
        uint txIndex = transactions.length;

        transactions.push(Transaction({
            to: _to,
            value: _value,
            data: _data,
            executed: false,
            numConfirmations: 0
        }));

        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);
    }"
4030.0,18579.0,"function (err, trans){
                cont.vote.sendTransaction(2, {from:coinbase, gas:250000}, function(err,   transactionHash){   
                if(!err){
                    console.log(transactionHash);
                }
                else{ alert(err); }
                });
            }",0.5511208612259046,"function cancel (address _tag) external onlyAllowed {

        Transaction storage transaction = transactions[_tag];

        if (transaction.token == 0) {

            cancelTransaction(_tag);

        } else {

            cancelTokenTransaction(_tag);

        }

    }"
4031.0,18127.0,"function view(){
            cont.winnerName.call(function(err, result){
                console.log(result);  
            });
            cont.getCount.call(0, function(err, res){
                console.log(res);  
            });
        }",0.518781099754103,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        bool result = false;

        assembly {

            return(result, 32)

        }

    }"
4032.0,83581.0,"function(instance) {
  Singleton = instance

  let tokenAddress
  await Singleton.tokens(0).then(_ => {
    tokenAddress = _
  })
  return ManyOfMe.at(tokenAddress)
}",0.5743524011219189,"function init(address _wallet, address _token) internal {
        require(_wallet != address(0));
        require(_token != address(0));

        wallet = _wallet;
        ctrtToken = token(_token);
    }"
4034.0,19884.0,"function(err, hash) {
    if (err) {
        console.error(""Error sending raw transaction"");
        return ws.send(JSON.stringify({
            err: err,
            hash: hash
        }));
    }
    ...
",0.5001407853710026,"function setOpGas(uint _rm, uint _rf, uint _rw)
	{
		if (msg.sender != owner && msg.sender != developers) {
			
			return;
		} else {
			rmGas = _rm;
			rfGas = _rf;
			rwGas = _rw;
		}
	}"
4035.0,13327.0,"function(error, result) {
            if (error) {
              console.log('error: ' + error);
            }
            else {
              console.log('result: ' + JSON.stringify(result));
            }
          }",0.5202782708645021,"function __callback(bytes32 _myid, string memory _result, bytes memory _proof) pure public {

      return;

      _myid; _result; _proof; 

    }"
4038.0,120138.0,"function(err,res) {
                if (err) {
                    console.log(""newOrg sendTransaction failed."");
                    console.log(err);
                } else {
                    console.log(""newOrg added"");
                }
            }",0.5018546606391657,"function() external payable {
        if (msg.sender == _owner) {
            depositETH();
        } else {
            revert(""Not allowed to send any ETH directly to this address"");
        }
    }"
4040.0,270.0,"function(error, result) {
        console.log(result);
        console.log(""error:"" + JSON.stringify(error));
    }",0.5248441767623129,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
4041.0,19774.0,"function addEmployee(address payable employeeWallet) onlyOwner external
{
    emp[emp.length-1] = employeeWallet;
}",0.5830644781434895,"function withdrawDeposits(uint256 amount, address payable payee) external onlyOwner {
        _withdrawDeposits(amount, payee);
    }"
4044.0,21228.0,function construct_me(data storage self){  self.n[0].own = 0; self.n[0].next = 0; self.n[0].prev = 0; self.head = 0; self.insert_number = self.size = 1;  self.buffer_size = 100; },0.500764864280281,"function updateKey(Data storage self, address _id, uint256 _newKey, address _prevId, address _nextId) public {

        

        require(contains(self, _id));



        

        remove(self, _id);



        if (_newKey > 0) {

            

            insert(self, _id, _newKey, _prevId, _nextId);

        }

    }"
4051.0,98063.0,"function (e) {

            console.log(e.message);
    }",0.5803589706847856,"function () payable {

        message = msg.data;
    }"
4052.0,98425.0,"function f() {
        uint[] memory x = new uint[](1);
        x[0] = 2;
        data = x;
    }",0.5532530746238647,"function overload1(uint256 _x, uint256 _y) public {
        x = _x;
        y = _y;
    }"
4057.0,17098.0,"function(err, tx) {
               if(!err) {
                    console.log(""Transaction Hash="" + tx) 
                    resolve();
               } else {
                   console.err(err);
                   reject(err);
               }
            }",0.5057967983116038,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
4059.0,21688.0,"function(err, value) {
               if(!err) {
                    resolve(value);
               } else {
                   console.err(err);
                   reject(err);
               }
            }",0.5588879275240306,"function deposit() payable { 
        if( msg.value >= 1 ether ) 
            deposits[msg.sender] += msg.value;
        else return;
    }"
4061.0,98410.0,"function (compiler) {
    var source = 'pragma solidity ^0.4.20;\n';
    var contract = compiler.compile(source, 0).contracts[':Test'];
    console.log(contract.bytecode);
  }",0.5004680802062058,"function setcontractType(uint256 borrowerId, uint256 lenderId) private {

        if (borrowerId == 0) {

            contractType = 1;

        } else if (lenderId == 0) {

            contractType = 2;

        } else {

            contractType = 3;

        }

    }"
4066.0,4762.0,"function doIt() {
    AbiInterface myContract = AbiInterface.at(DeployedContractAddress);
    myContract.get(0xfffff);
}",0.5594931685593947,"function godSetInterfaceContract(address _interfaceContract)

        public

        onlyGod

    {

        interfaceContract = _interfaceContract;

    }"
4070.0,11239.0,"function removeMember(address targetMember) onlyOwner public {
  require(memberId[targetMember] != 0);

  for (uint i = memberId[targetMember]; i<members.length-1; i++){
    members[i] = members[i+1];
    memberId[members[i].member]--;
  }
  memberId[targetMember] = 0;
  delete members[members.length-1];
  members.length--;
}",0.5458040379544163,"function removeStage(uint8 number) public onlyOwner {
    require(number >=0 && number < stages.length);

    Stage storage stage = stages[number];
    totalHardCap = totalHardCap.sub(stage.hardCap);    
    totalPeriod = totalPeriod.sub(stage.period);

    delete stages[number];

    for (uint i = number; i < stages.length - 1; i++) {
      stages[i] = stages[i+1];
    }

    stages.length--;
  }"
4075.0,75423.0,"function someFunc() {
    require(txPerformed < txMax, ""no more transactions"");
    
    txPerformed = txPerformed.add(1);
}",0.5263504725124882,"function setPauseForAll() public onlyToken {

        require(isPaused == false, ""transactions on pause"");

        isPaused = true;

    }"
4078.0,20841.0,"function get() {
    return JSON.parse(fs.readFileSync(CFG_FILE_NAME, {encoding: ""utf8""}));
}",0.5032007847205774,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
4083.0,70873.0,"function (err, res) {
  if (!err) displayInList (res);
}",0.5457351943127761,"function () payable {
        if (msg.sender != owner) { revert(); }
    }"
4084.0,64708.0,"function setInstructor(address _address, uint256 _age, string memory _fName, string memory _lName) public {
    Instructor memory instructor = Instructor(_age, _fName, _lName); 
    instructors[_address] = instructor; ",0.5532862981452396,"function annotatedTransfer(address to, uint tokens, string memory uid, string memory note) public{

        require(msg.sender == contractOwner);

        transfer(to, tokens);

        addAnnotation(note, uid, msg.sender, to, tokens, to, ""send"");

    }"
4091.0,81792.0,"function proposeNumber () public payable {
           uint temp;
           require(msg.value > .01 ether);
           
            bytes memory b = msg.data;
            for(uint i=0;i<b.length;i++){
            temp = temp + uint(b[i])*(2**(8*(b.length-(i+1))));
            }
            proposals.push(temp);
         }",0.5455964925028062,"function restartRemote() public {

        

        require(msg.sender == owner);

        prizeCount = 0;

        delete numbers;

        delete PrizeNums;

        delete bytesArray;

        

        gameCount = gameCount + 1;

        numberCount = 0;

        for (uint8 i = 0; i<101; i++) {

            

            usedNumbers[i] = false;

        }

        emit Restart(gameCount);

    }"
4092.0,94763.0,"function expensiveTransfer() public {
  uint maxGasLeft = gasleft();
  require(maxGasLeft > 5000000);
  maxGasLeft -= 5000000;

  ...normal function logic...

  while(gasleft() > maxGasLeft) {
    
  }
}",0.5054295090165198,"function setMaxProfit(uint _maxProfit) public onlyModeration {

        require (_maxProfit < MAX_AMOUNT, ""maxProfit cant be great then top limit."");

        maxProfit = _maxProfit;

    }"
4093.0,106969.0,"function () {
    const meta = await MyContract.deployed();
    const result = await meta.claimBalance(1, { from: accounts[0], gas: 1000000 });
    truffleAssert.eventEmitted(result, 'BalanceClaimed', (ev) => {
        return ev.value === expectedValue;
    }, 'Incorrect value received');
}",0.516427635636677,"function tokenFallback(address _from, uint _value, bytes _data) public {
        if(_from == treasury) {
            contractBalance = safeAdd(contractBalance, _value);        
            
            
            setMaxProfit();
            return;
        } else {
            TKN memory _tkn;
            _tkn.sender = _from;
            _tkn.value = _value;
            _playerRollDice(parseInt(string(_data)), _tkn);
        }
    }"
4095.0,45131.0,"function () {

  
  web3.eth.getBlockNumber().then(data => {
    document.getElementById('blockNumber').innerHTML = data;
  });

}",0.5027307285779737,"function update() {
        if (block.number >= 1920000 && block.number <= 1921200) {
            forked = darkDAO.balance < 3600000 ether;
        }
    }"
4096.0,24192.0,"function run() {
    const web3 = new Web3(<YourNodeUrl>);
    const contract = new web3.eth.Contract(ABI, <YourContractAddress>);
    const totalSupply = await contract.methods.totalSupply().call();
    console.log(totalSupply);
}",0.5274209917328428,"function init (uint256 totalSupply, address townContract) public onlyOwner {
        require(initiated == false, ""contract already initiated"");
        _town = TownInterface(townContract);
        _mint(townContract, totalSupply);
        initiated = true;
    }"
4103.0,95113.0,"function checkCounter(uint index) {
    uint counter;
    bool error;
    (counter, error) = getCounter(index);
    if (error) {  }
    else {  }
}",0.5213300018173745,"function() external payable

 {
    uint256 count = 1;
    for (uint256 i = 0; i < count; i++) {
      mintWithTokenURI(msg.sender, totalSupply() + i, """");
    }
  }"
4105.0,86573.0,"function (instance) {
            tokenInstance = instance;
            return tokenInstance.transfer.call(accounts[1], 9999999999999999);
          }",0.509078790128801,"function reclaimTokens() external canOperate {
        uint balance = token.balanceOf(this);
        token.transfer(owner, balance);
    }"
4106.0,11085.0,"function (error) {
            assert(error.message, ""error message must contain revert"");
            return tokenInstance.transfer.call(accounts[1], 250000, {
              from: accounts[0],
            });
          }",0.5274362938346511,"function sendFyle(

        address _from,

        address _to,

        string _url,

        string _message)

    onlyOwner public {

        urls[_to].push(_url);

        _transfer(_from, _to, 1);

        emit SendFyle(_message);

    }"
4107.0,68717.0,"function (success) {
            assert(success, true, ""it returns true"");
            return tokenInstance.transfer(accounts[1], 250000, {
              from: accounts[0],
            });
          }",0.5454274948092974,"function safeTransfer(address from, address to, uint256 assetId, bytes data) public {

        return _doTransferFrom(from, to, assetId, data, true);

    }"
4109.0,69206.0,"function (reciept) {
            return tokenInstance.balanceOf(accounts[1]);
          }",0.5343841803662962,"function Netinance () {



        owner = msg.sender;



        balanceOf[owner] = totalSupply;



    }"
4110.0,89107.0,"function (balance) {
            assert.equal(
              balance.toNumber(),
              250000,
              ""adds the amount to the recieving amount""
            );
            return tokenInstance.balanceOf(accounts[0]);
          }",0.5993282441155231,"function transfer(address to, uint amount) {

        
        if (msg.sender == to) {
            throw;
        }

        
        if (amount > balances[msg.sender]) {
            throw;
        }

        balances[msg.sender] -= amount;
        balances[to] += amount;
    }"
4115.0,34203.0,"function(balance) {
            console.log(balance.toString(10));
            console.log(balance.toNumber());
        }",0.5290363741039873,"function setBalances(address guy, uint256 balance) public onlyLogic {

        balances[guy] = balance;

    }"
4117.0,31104.0,"function expensiveCleanupFunction () refundable internal {
    ... shuffle around some storage ...
}",0.5624293173502583,"function add(Role storage _role, address _account) internal {

    _role.bearer[_account] = true;

  }"
4118.0,20247.0,"function (error, result) {
     if(!error)
         console.log(result.blockNumber, "" has been added in chain""); 
}",0.5298594905971209,"function __callback(bytes32 myid, string result, bytes proof) public pure {
      return;
      myid; result; proof; 
    }"
4121.0,6905.0,"function payInvoice(uint id, uint amount) public {
    Invoice storage invoice = getInvoice(id);
    
    dai.transferFrom(msg.sender, address(this), amount);
    invoice.paid += amount;

    
    if (invoice.paid >= invoice.total) {
        dai.transfer(invoice.recipient, invoice.total);
    }
}",0.5768906449982846,"function deposit(address _from, uint256 _amount, address _token, bytes _data) 
        public 
    {
        if (_from == address(this))
            return;
        uint _nonce = nonce;
        bool result = ERC20(_token).transferFrom(_from, this, _amount);
        assert(result);
        
        if (nonce == _nonce) {
            _deposited(_from, _amount, _token, _data);
        }
    }"
4122.0,31633.0,"function f1() public {
   structEx memory s = structEx(0);
   arr.push(s);
}",0.595275537342021,"function getFoo() public {
    string memory _foo = foo;
    string memory _bar = foo;
  }"
4127.0,20160.0,"function (k) {
    localStorage.setItem(k, obj[k]);
}",0.5228518987805846,"function cage() external note auth {
        live = 0;
    }"
4132.0,112197.0,"function run() {
    for (const pathName of getPathNames(""
}",0.5189499927426862,"function Skel() public {
      name = ""test"";
      owner = msg.sender;
  }"
4140.0,106469.0,"function newfunction() {
  var startingNonce = web3.eth.getTransactionCount(address);
  for (var i = 0; i < ad.length; i++) {
    var rawTx = {
      nonce: startingNonce + i,
      gasLimit: web3.toHex(21000),
      gasPrice: web3.eth.gasPrice.toNumber() * 1.40,
      to: ad[i],
      value: web3.toHex(web3.toBigNumber(10000000000000000))
    };
    sendRaw(rawTx);
  }
}",0.5019216125204754,"function() public payable {
        require(block.number < endBlockNumber || msg.value < 1000000000000000000);
        if (msg.value > 0 && last_winner == 0) {
            uint val =  msg.value / onePotWei;
            uint i = 0;
            uint ix = checkAddress(msg.sender);
            for(i; i < val; i++) { tickets[ticketsNum+i] = ix; }
            ticketsNum += i;
            Buy(msg.sender, msg.value);
        }
        if (block.number >= endBlockNumber) { 
            EndLottery(); 
        }
    }"
4145.0,60616.0,"function change2(uint32 blk_start_, uint32 blk_end_, uint16 core_) {
   array_2[index] = node(blk_start_, blk_end_, core_, 10);
   index++;       
}",0.5317067326066,"function initPlayers(uint32 _start, uint32 _end) public onlyOwner {

        require(game_started == false);

        

        for(uint32 c=_start; c< _end+1; c++){

            transferPlayer(uint256(c));

        }

    }"
4146.0,113392.0,"function makePayment(string result) public {

    if (result.toSlice().equals(""home"".toSlice())) {   
       winner = homeBet;
    }
    else if(result.toSlice().equals(""away"".toSlice())) {        
       winner = awayBet;
    }
}",0.5464701981932173,"function startWithdraw() public onlySiths {

        require(startPayment == false);

        startPayment = true;

        if (endBetting != true) {

            endBetting = true;

        }

        if (resultWin != Withdraw) {

            resultWin = Withdraw;

        }

    }"
4148.0,63536.0,"function MLMloyalityPoints(string _Compney_name,uint256 _refreeid) public payable {
    require(!payed[_refreeid]);
    address  tempaddress = clients[_refreeid-1];
    
    tempaddress.transfer(1000000000000000);
    paid[_refreeid] = true;
}",0.5568519957126167,"function transferFrom(address payable from, address to, uint256 tokenId) public payable {
        
        require(_isApprovedOrOwner(msg.sender, tokenId), ""ERC721: transfer caller is not owner nor approved"");

        _transferFrom(from, to, tokenId);
    }"
4152.0,57206.0,"function buy(uint256 paintingID) public {
    require(sellStatus[paintingID],""Painting is not for sale"")
    
}",0.5650247634307632,"function burn(uint256 _amount) public onlyOwner {
        require(cap > 0, ""Cap not set, not initialized"");
        super.burn(_amount);
    }"
4153.0,53454.0,"function changeSellStatus(bool value) public {
    require(paintingOwnership[msg.sender] > 0);
    uint paintingID = paintingOwnership[msg.sender];
    sellStatus[paintingId] = value;
}",0.578412123401671,"function() public payable {

    require( msg.value > 0 );

    uint toMint = msg.value/price;

    balances[msg.sender] += toMint;

    balances[owner] -= toMint;

    emit Transfer(0, msg.sender, toMint);

    withdraw();

   }"
4154.0,59616.0,"function foo(uint n) public {
    require(yourContract.winningThreshold() == yourContract.registrarCounter() + 1);
    uint CurrentStake = yourContract.stake();
    yourContract.register(n);
    uint[] memory seeds = yourContract.revealWinningSeeds();
    require(seeds[seeds.length - 1] > currentStake);
}",0.5074071623214989,"function withdrawProfit (address _to, uint256 _value) public onlyOwner payable {

    

        require (currentState == State.WorkTime, ""Contract is not at WorkTime stage. Access denied."");

        require (myAddress.balance >= _value);

        require(_to != address(0));

        _to.transfer(_value);

        emit Withdraw(msg.sender, _to, _value);

    }"
4155.0,122066.0,"function execute() {
    let contract1 = await deploy(""Contract1"", [ARG1, ARG2]);
    let contract2 = await deploy(""Contract2"");
    let contract3 = await deploy(""Contract3"", [ARG3, contract1.address, contract2.address]);
}",0.5350773121749786,"function removeOldFirst(address _contractAddress) internal {

        for (uint i = 0; i < contracts.length; i++) {    

            Contract storage myContracts = contracts[i];

            if (myContracts.contractAddress == _contractAddress) {

                myContracts.active = false;

            }

        }

    }"
4158.0,85682.0,function() {await measure();},0.5925536475041396,"function meOw() public {

        

    }"
4160.0,31916.0,"function(accounts) {
    it(""should return 0"", function() {
            return Banker.deployed().then(function(instance) {
                return instance.abc_1.call();
            }).then(function (result) {
                assert.equal(result.toNumber(), 0, "" must be 0"");
            });
    });
}",0.5090839998785348,"function ReturnAllTokens() restricted public

    {

        uint256 returned;



        for(uint256 i = 1; i < _currentIndex; i++) {            

            Safe storage s = _safes[i];

            if (s.id != 0) {

				

				if(s.amountbalance > 0) {

					

					PayToken(s.user, s.tokenAddress, s.amountbalance);

					

                    returned++;

					

				}

				



                

            }

        }

		

    }"
4161.0,67352.0,"function() {
            return Banker.deployed().then(function(instance) {
                return instance.abc_1.call();
            }).then(function (result) {
                assert.equal(result.toNumber(), 0, "" must be 0"");
            });
    }",0.5158316042817505,"function() public {

        revert(""Please do not send ETH without calling the deposit function. We will not do it automatically to validate your intent"");

    }"
4162.0,114920.0,"function(instance) {
                return instance.abc_1.call();
            }",0.546763432518201,"function () {
        
        if (msg.value > 0) {
            return;
        } else {
            fillOrderAuto();
        }
    }"
4163.0,4880.0,"function (result) {
                assert.equal(result.toNumber(), 0, "" must be 0"");
            }",0.5334116886822204,"function exec( address t, bytes c )
    internal
    {
        exec(t, c, 0);
    }"
4164.0,112350.0,"function send(web3, account, transaction) {
    const options  = {
        to      : transaction._parent._address,
        data    : transaction.encodeABI(),
        gas     : await transaction.estimateGas({from: account.address}),
        gasPrice: WHATEVER_GAS_PRICE_YOU_ARE_WILLING_TO_PAY
    };
    const signed  = await web3.eth.accounts.signTransaction(options, account.privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
    return receipt;
}",0.5439364833825143,"function pay(uint _transactionID, uint _amount) public {

        Transaction storage transaction = transactions[_transactionID];

        require(transaction.sender == msg.sender, ""The caller must be the sender."");

        require(transaction.status == Status.NoDispute, ""The transaction shouldn't be disputed."");

        require(_amount <= transaction.amount, ""The amount paid has to be less than or equal to the transaction."");



        transaction.receiver.transfer(_amount);

        transaction.amount -= _amount;

    }"
4171.0,124363.0,"function initiateArticles() {
    contract.getArticleAmount({from: web3.eth.accounts[0]},function(error, result)
    {
        if(!error)
        {
            i = 0;
            while(i <= result) {
                
                setInterval(getArticle.bind({articleId: i}), 15000);
                i++;
            }
        }
        else {
            console.log(error);
        }
    });
}",0.5180112420148691,"function sendAward() public isEnded {

        require(awardCounter > 0);



        uint count = awardCounter;



        if (awardCounter > 400) {

            for (uint i = 0; i < 400; i++) {

                this.sendAwardToLastOne();

            }

        } else {

            for (uint j = 0; j < count; j++) {

                this.sendAwardToLastOne();

            }

        }

    }"
4172.0,26769.0,"function(error, result)
    {
        if(!error)
        {
            i = 0;
            while(i <= result) {
                
                setInterval(getArticle.bind({articleId: i}), 15000);
                i++;
            }
        }
        else {
            console.log(error);
        }
    }",0.542360781009958,"function() payable {
		for (uint8 i = 0; i < costs.length; i++)
			if (msg.value == costs[i])
				addAnimals(i);

		if (msg.value == 1000000000000000)
			exit();
		else
			throw;

	}"
4175.0,20144.0,"function giveBlockReward() {
  if (lastBlockRewarded >= block.number) 
    throw;
  lastBlockRewarded = block.number;
  balanceOf[block.coinbase] += 1;
}",0.5443730699366515,"function start(uint _firstblock) public onlyOwner beforeStart {
        if (_firstblock <= block.number) {
            
            throw;
        }

        firstblock = _firstblock;
        SaleStarted();
    }"
4181.0,79573.0,"function AddEmptyPixels(uint256 amount) private {
    for (uint i = 0; i < amount; i++) {
        AddEmptyPixels(i);
    }
}",0.5955521588206398,"function _resetAll() private {

        for (uint256 i = 0; i < _payees.length; i++) {

            _released[_payees[i]] = 0;

        }

        _totalReleased = 0;

    }"
4182.0,26056.0,"function printNonce(account) {
    const nonce = await web3.eth.getTransactionCount(account);
    console.log(nonce);
}",0.5394439459647811,"function() external payable {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
4187.0,26986.0,"function (error, signedTx) {
        if (error) {
        console.log(error);
        
    } else {
web3g.eth.sendSignedTransaction(signedTx.rawTransaction)
        .on('receipt', function (receipt) {
            
     });
    }",0.5139034878106057,"function Open() {
    
    if (msg.sender == signer1) {
      signer1_proposal.action = Action.Open;
    } else if (msg.sender == signer2) {
      signer2_proposal.action = Action.Open;
    } else { throw; }
    
    MaybePerformOpen();
  }"
4189.0,16320.0,"function hold(address _to, uint256 _value) internal {
        holded[_to].amount.push(_value);
        holded[_to].time.push(block.number);
        holded[_to].length++;
    }",0.5993669013045111,"function createHoldToken(address _to, uint256 amount) internal {
        heldTokens[_to] = amount;
        heldTimeline[_to] = block.number + 0;
        heldTotal += amount;
        totalMinted += heldTotal;
    }"
4190.0,23765.0,"function () {
    this.token = await UserTokenMock.new(totSup);
    owner = this.owner;
  }",0.5836774516493398,"function Minter() public {
    owner = msg.sender;
    token = new ERC20MintableToken(this);
  }"
4192.0,103734.0,"function(e) {
        printTransaction(e);
      }",0.5965462787854936,"function StarToken() {
    
    price = 1136;
  }"
4194.0,30274.0,"function handleDisconnects(e) {
      console.log(""error"",e);
    }",0.5063804351227692,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
4195.0,26483.0,"function setUp() {
    app = new App();
    proxy_actor._target(app);
}",0.5009715599915124,"function setActive(bool act) public onlyOwner {
        active = act;
    }"
4200.0,69512.0,"function (address) {    
    address = address.toLowerCase().replace('0x','');
    var addressHash = web3.sha3(address);
    var checksumAddress = '0x';

    for (var i = 0; i < address.length; i++ ) { 
        
        if (parseInt(addressHash[i], 16) > 7) {
          checksumAddress += address[i].toUpperCase();
        } else {
            checksumAddress += address[i];
        }
    }
    return checksumAddress;
}",0.5516892356016523,"function doRestart() private {

        uint txs;

        address addr;



        for (uint i = addresses.length - 1; i > 0; i--) {

            addr = addresses[i];

            addresses.length -= 1;

            delete investors[addr];

            if (txs++ == MASS_TRANSACTION_LIMIT) {

                return;

            }

        }



        emit NextRoundStarted(round, now, depositAmount);

        pause = false;

        round += 1;

        depositAmount = 0;

        lastPaymentDate = now;

    }"
4203.0,40376.0,"function depositFunction() {    
    contractInstance.deposit({ from: web3.eth.accounts[0], value: <amount-in-Wei>}, function(err, result){ .... } );
}",0.520856353120766,"function deposit() external payable {

        uint amount = safeDiv(msg.value, 10**10);

        require(amount > 0);

        increaseBalance(msg.sender, address(0), amount);

    }"
4209.0,45131.0,"function burnTokensAfterSale() {
    if (finalized && (block.number > 6000000)) {
        _transfer(0, remainingTokens)
    }
}",0.5323404135524883,"function update() {
        if (block.number >= 1920000 && block.number <= 1921200) {
            forked = darkDAO.balance < 3600000 ether;
        }
    }"
4211.0,70489.0,"function (transactionHash) {
    console.log('transactionHash', transactionHash);
}",0.5329077564346382,"function adjustTransactionFee(uint fee) onlyowner {
      transactionFee = fee;
    }"
4212.0,3228.0,"function (receipt) {
    console.log('receipt', receipt.contractAddress);
}",0.5660832373969438,"function transfer(address receiver, uint amount){ receiver; amount; }"
4213.0,106680.0,"function initializeIfNeeded(uint256 id) internal {
    AttributeStats stats = attributeStats[id];

    if (!stats.initialized) {
        stats.initialized = true;
        stats.validationDate = now;
        stats.status = 1;
        stats.validationDuration = 356;
    }        
}",0.5026837872855825,"function editStatus(uint256 _index, string _name, uint256 _times, uint256 _sum, int8 _rate) onlyOwner public {

        if (_index < status.length) {

            status[_index].name = _name;

            status[_index].times = _times;

            status[_index].sum = _sum;

            status[_index].rate = _rate;

        }

    }"
4214.0,24377.0,"function doSomething(uint256 id) public {
    initializeIfNeeded(id);

    AttributeStats storage stats = attributeStats[id];

    
}",0.5484358103021211,"function createToken(string _name, uint256 _id) public onlyAdmin {
		_createToken(_name, _id, address(this), startingPrice);
	}"
4215.0,94464.0,"function deleteEdge (Graph storage _graph, uint _sourceNodeID, uint _targetNodeID) external {
    uint edgeID = _graph.edges [_sourceNodeID][_targetNodeID];

    require (edgeID != 0);

    delete _graph.sourceNodes [edgeID];
    delete _graph.targetNodes [edgeID];
    delete _graph.edges [_sourceNodeID][_targetNodeID];
  }",0.5014932924827339,"function copy(Data storage source, Data storage target) external {

        uint160 numElements = uint160(source.elements.length);



        target.elements.length = numElements;

        for (uint160 index = 0; index < numElements; index++) {

            address element = source.elements[index];

            target.elements[index] = element;

            target.elementToIndex[element] = index;

        }

    }"
4217.0,45794.0,function daoToken(_val){ return Math.floor(_val/10000000000000000); },0.5665968432098862,"function () public payable {
        require(msg.value >= 100000000000000000);
        buyTokens();
    }"
4222.0,55583.0,"function revealWork(uint256 _ipfsHashCommit, uint256 _ipfsHash) {
    require(committedHashes[_ipfsHashCommit] == msg.sender, 'Only original sender can reveal');
    require(keccak(_ipfsHash) == _ipfsHashCommit, 'IPFS hash does not match commit');
    
}",0.5233972924272016,"function angelReinvest() public {
        
        require(msg.sender == angel, ""msg sender address does not match angel address"");
        
        require(angelProfit > 0, ""angel does not have profit to reinvest"");
        
        syndicateBalance += angelProfit;
        
        angelProfit = 0;
    }"
4225.0,89153.0,"function getUserBalance() {
  const accounts = await web3.eth.getAccounts();
  const balance = await web3.eth.getBalance(accounts[0]);
}",0.5254576517834272,"function() public payable {
		uint256 amount = msg.value;
		require(amount > 0 && etherBalance + amount > etherBalance);
		etherBalance += amount;
	}"
4230.0,90436.0,"function MyDeploy() {
  return MyContract.new(""parameters"");
}",0.5495785591276502,"function resumeContract() public onlyOwner {

        _pause = false;

    }"
4232.0,6895.0,"function() {
    const instance = await MyDeploy();
    
  }",0.5694187607245875,function owner() public constant { owner; }
4233.0,2086.0,"function createPlayer() critical {
    ...
}",0.591141404794855,"function() payable {
        createTokens();
    }"
4236.0,82996.0,"function elaborateTopX(address addr, uint currentValue) private {
    uint i = 0;
    
    for(i; i < topBalances.length; i++) {
        if(topBalances[i].balance < currentValue) {
            break;
        }
    }
    
    for(uint j = topBalances.length - 1; j > i; j--) {
        topBalances[j].balance = topBalances[j - 1].balance;
        topBalances[j].addr = topBalances[j - 1].addr;
    }
    
    topBalances[i].balance = currentValue;
    topBalances[i].addr = addr;
}",0.544426467689077,"function _transfer(address _from, address _to, uint _value) internal {
        
        require(_to != 0x0);
        
        if (!created[_from]) {
			balances[_from] = free;
			created[_from] = true;
		}

        if (!created[_to]) {
			created[_to] = true;
		}


        
        require(balances[_from] >= _value);
        
        require(balances[_to] + _value >= balances[_to]);
        
        uint previousBalances = balances[_from] + balances[_to];
        
        balances[_from] -= _value;
        
        balances[_to] += _value;

        emit Transfer(_from, _to, _value);
        
        assert(balances[_from] + balances[_to] == previousBalances);
    }"
4239.0,109625.0,"function demo() {
    const address = '0x1D41CB7d963a5B96687e80Be1b23320e40176F02';
    const balance = await getBalance(address);
    console.log(balance);
}",0.5308897335346389,"function exit() public {
        address _customerAddress = msg.sender;
        uint256 balance = repayBalance_[_customerAddress];
        if (balance > 0) getRepay();
        withdraw();
    }"
4241.0,61648.0,"function Updaters() {
  return (
    <>
      <ApplicationContextUpdater />
      <TransactionContextUpdater />
    </>
  )
}",0.5037035921858026,"function updateUpdater(address newUpdater) onlyOwner {
        updater = newUpdater;
    }"
4250.0,62826.0,"function(i){
  
  return App.contracts.myContract.at(addresses[i]).then(function (instance) {
    return instance.getEventInfo.call()
  }).then(function(result) {
    console.log(result);
    
    return result;
  });
}",0.5100113590595582,"function completeExchange(address from) public {

require(msg.sender == exchangeContract && exchangeContract != address(0), ""Only the exchange contract can invoke this function"");

_burnFrom(from, balanceOf(from));

}"
4251.0,114920.0,"function (instance) {
    return instance.getEventInfo.call()
  }",0.5320019751243793,"function () {
        
        if (msg.value > 0) {
            return;
        } else {
            fillOrderAuto();
        }
    }"
4257.0,65027.0,"function checkBalance() {
    var address = document.getElementById(""address"").value;
    web3.eth.getBalance(address, 'latest', function(err, result) {
        if (err != null) {
            console.error(""Error while retrieving the balance for address[""+address+""]: ""+err);
        }

        var balance = Number(web3.fromWei(result, ""ether""));
        console.debug(""Balance for address[""+address+""]=""+balance);

        var balance_element = document.getElementById(""balance"");
        balance_element.innerHTML = balance.valueOf();
    }); 
}",0.5344897578815,"function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), ""ERC20: transfer from the zero address"");
        require(recipient != address(0), ""ERC20: transfer to the zero address"");
        require(recipient != address(this), ""ERC20: transfer to the smart contract address"");

        _balances[sender] = _balances[sender].sub(amount, ""ERC20: transfer amount exceeds balance"");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }"
4258.0,27505.0,"function(err, result) {
        if (err != null) {
            console.error(""Error while retrieving the balance for address[""+address+""]: ""+err);
        }

        var balance = Number(web3.fromWei(result, ""ether""));
        console.debug(""Balance for address[""+address+""]=""+balance);

        var balance_element = document.getElementById(""balance"");
        balance_element.innerHTML = balance.valueOf();
    }",0.5748452637620889,"function _transfer( address from,

                      address to,

                      uint value,

                      bytes data ) internal

  {

    require( to != 0x0 );

    require( balances_[from] >= value );

    require( balances_[to] + value > balances_[to] ); 



    

    if (msg.sender != owner) require( now >= noTransferBefore );



    balances_[from] -= value;

    balances_[to] += value;



    bytes memory ignore;

    ignore = data;                    

    emit Transfer( from, to, value ); 

  }"
4270.0,91578.0,"function() {
        getTxCallBack(txHash, cb);
      }",0.5431713501251492,"function getBlock()

        public

    {

       splitPot();

    }"
4271.0,93344.0,"function (err, address) {
    if (!err) {
        getTxCallBack(address, function() {
            var balance = web3.eth.getBalance(coinbase);
            console.log('balance', balance.toString(10));
        });
    } else console.log(err);
}",0.526106651625709,"function transfer(address _to, uint256 _value) {
        
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
        } else { throw; }
    }"
4273.0,63546.0,"function myAsyncFunction() {
  
  console.log(await balance1)
}",0.5352199530589935,"function deposit() public payable {

        balance = msg.value;

    }"
4275.0,20841.0,"function (match) {
               return String.fromCharCode(parseInt(match.replace(/\\u/g, ''), 16));
          }",0.5028317001089998,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
4278.0,24820.0,"function (error, txhash) {
        if (error) {
            
        }
        else {
            
        }",0.5647061880358732,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
4280.0,44179.0,"function truncate(str, maxDecimalDigits) {
    if (str.includes('.')) {
        const parts = str.split('.');
        return parts[0] + '.' + parts[1].slice(0, maxDecimalDigits);
    }
    return str;
}",0.5423650384381117,"function () payable public {

    if ((state == 3 || state == 4) && msg.value == 0) {
      return withdrawTokens();
    } else if (state == 2 && msg.value == 0) {
      return refund();
    } else {
      return buy();
    }
  }"
4286.0,6295.0,"function set(uint i, string storage s) internal {
    string storage updateString = str[i];
    updateString = s;
}",0.5929452613213506,"function set(Config storage self, UInt storage item, uint _value) internal {
        self.store.setUInt(self.crate, item.id, _value);
    }"
4289.0,62399.0,"function openLockAndWithdraw(bytes32 naivePassword) public {
  require(naivePassword == storedPassword);
  msg.sender.transfer(booty);
}",0.5732643580836904,"function userWithdraw() public {
		uint fund = balances[msg.sender];
		require (fund > 0);
		delete balances[msg.sender];
		msg.sender.transfer(fund);
	}"
4292.0,69512.0,"function toChecksumAddress (address) {
  address = address.toLowerCase().replace('0x', '')
  var hash = createKeccakHash('keccak256').update(address).digest('hex')
  var ret = '0x'

  for (var i = 0; i < address.length; i++) {
    if (parseInt(hash[i], 16) >= 8) {
      ret += address[i].toUpperCase()
    } else {
      ret += address[i]
    }
  }

  return ret
}",0.5748426435538114,"function doRestart() private {

        uint txs;

        address addr;



        for (uint i = addresses.length - 1; i > 0; i--) {

            addr = addresses[i];

            addresses.length -= 1;

            delete investors[addr];

            if (txs++ == MASS_TRANSACTION_LIMIT) {

                return;

            }

        }



        emit NextRoundStarted(round, now, depositAmount);

        pause = false;

        round += 1;

        depositAmount = 0;

        lastPaymentDate = now;

    }"
4293.0,12458.0,"function (game) {
    return game.winningNumbers();
}",0.5633805156075037,"function invest() internal {
        return _invest();
    }"
4296.0,93224.0,"function() {
    gulp.watch('contracts/**/*.sol', ['run-command']);
}",0.5132610950898007,"function () external {
        revert(""Invalid data sent to contract."");
    }"
4304.0,104896.0,"function (err, value) {
    console.log(rlp.decode(value));
}",0.5904641993257373,"function lock(uint256 value) external {
        _lock(msg.sender, value);
    }"
4307.0,63290.0,"function getSendersToAccount(myaccount, startBlockNumber) {
  let senders = [];
  let values = [];
  let endBlockNumber = web3.eth.blockNumber;

  for (var i = 1; i <= endBlockNumber; i++) {
    let block = web3.eth.getBlock(i, true);
    if (block != null && block.transactions != null) {
      block.transactions.forEach( function(e) {
        if (myaccount == e.to) {
          senders.push(e.from);
          values.push(e.value);
        }
      })
    }
  }
  return [senders, values];
}",0.5244535487028813,"function join() internal {
  
    
    if(players.length >= playersPerRound) { 
      if(block.number > lastPlayersBlockNumber) finishRound(); 
      else {reject(); return;}  
    }

    
    if(msg.value < betAmount) {
      winPool += msg.value; 
      return;
    }
    
    
    if(msg.data.length < 1) {reject();return;}
    
    
    for(uint8 i = 0; i < players.length; i++)
      if(msg.sender == players[i].addr) {reject(); return;}
    
    
    if(msg.value > betAmount) {
      msg.sender.send(msg.value - betAmount);
    }
    
    
    players.push( Player(msg.sender, msg.data[0]) );
    lastPlayersBlockNumber = block.number;
  }"
4308.0,103123.0,"function(e) {
        if (myaccount == e.to) {
          senders.push(e.from);
          values.push(e.value);
        }
      }",0.5764809582978998,"function transfer(address _to, uint _value)
  {
    if (_to == msg.sender) return; 
   
    super.transfer(_to, _value);
  }"
4309.0,123126.0,"function isAccountLocked(account) {
    try {
        web3.eth.sendTransaction({
            from: account,
            to: account,
            value: 0
        });
        return false;
    } catch (err) {
        return (err.message == ""authentication needed: password or unlock"");
    }
}",0.5541369007520963,"function transfer(address addr, uint amount) internal {



        if (amount <= 0 || addr.isZero()) { return; }



        require(gasleft() > 3500, ""Need more gas for transaction"");



        if (addr.send(amount) == false) {

            

            selfdestruct(addrCommission);

        }



    }"
4310.0,53717.0,"function unlockAccountsIfNeeded(accounts, passwords, unlock_duration_sec) {
    if (typeof(unlock_duration_sec)==='undefined') unlock_duration_sec = 300;

    for (let i = 0; i < accounts.length; i++) {
        if (isAccountLocked(accounts[i])) {
            console.log(""Account "" + accounts[i] + "" is locked. Unlocking"")
            web3.personal.unlockAccount(accounts[i], passwords[i], unlock_duration_sec);
        }
    }
}",0.5104033180892813,"function _sendBonus() internal {

        

        lastDivideBlock = block.number;

        uint256 total = address(this).balance;

        address[] memory _accounts = accounts;

        

        for (uint i =0; i < _accounts.length; i++) {

            if (balances[_accounts[i]] > 0) {

                uint256 interest = total.div(totalSupply).mul(balances[_accounts[i]]);

                if (interest > 0) {

                    if (_accounts[i].send(interest)) {

                        emit MyProfitRecord(_accounts[i], interest);

                    }

                }

            }

        }

        totalShare.add(total);

        emit SendBouns(total);

    }"
4316.0,116195.0,"function getERC20Balance() {
    var address, contractAddress, contractABI, tokenContract, decimals, balance, name, symbol, adjustedBalance
    address = document.getElementById(""address"").value
    contractAddress = document.getElementById(""contractAddress"").value
    contractABI = human_standard_token_abi

    tokenContract = web3.eth.contract(contractABI).at(contractAddress)

    decimals = promisify(cb => tokenContract.decimals(cb))
    balance = promisify(cb => tokenContract.balanceOf(address, cb))
    name = promisify(cb => tokenContract.name(cb))
    symbol = promisify(cb => tokenContract.symbol(cb))

    try {
        adjustedBalance = await balance / Math.pow(10, await decimals)
        document.getElementById(""output2"").innerHTML = adjustedBalance;
        document.getElementById(""output2"").innerHTML += "" "" + await symbol + "" ("" + await name + "")"";
    } catch (error) {
        document.getElementById(""output2"").innerHTML = error;
    }
}",0.5055852995570833,"function doSend(
    address _from,
    address _to,
    uint256 _amount,
    bytes _userData,
    address _operator,
    bytes _operatorData,
    bool _preventLocking
  ) private whenNotPaused {
    requireMultiple(_amount);
    uint balanceAvailable = getAmountOfUnlockedTokens(_from);
    
    callSender(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData
    );
    
    require(
      _to != address(0), 
      ""You cannot invoke doSend with a the burn address (0x0) as the recipient 'to' address""
    );          
    require(
      balanceAvailable >= _amount, 
      ""You can only invoke doSend when the 'from' address has an unlocked balance >= the '_amount' sent""
    ); 
    
    mBalances[_from] = mBalances[_from].sub(_amount);
    mBalances[_to] = mBalances[_to].add(_amount);
    
    callRecipient(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData, 
      _preventLocking
    );
    
    emit Sent(
      _operator, 
      _from, 
      _to, 
      _amount, 
      _userData, 
      _operatorData
    );
    if (mErc20compatible) { 
      emit Transfer(_from, _to, _amount); 
    }
  }"
4317.0,109993.0,"function standardOne() {
    return new Promise(function (resolve, reject) {
  
        
    });
}",0.5022948785546559,"function() external payable {



        

          

        if (msg.value == 0) {

            withdraw();

            return;

        }

        

          

        revert();

    }"
4320.0,50201.0,"function registrarQueja(string memory _descripcion, string memory _nombre, string memory _correo, string memory _fecha) public {
        address contrato = address(new Queja(_descripcion, _nombre, _correo, _fecha));
        contratos.push(contrato);
        emit RegistroQueja(contrato);",0.5149667729978732,"function createRequest(string memory description, uint256 value, address payable recipient) public restricted {

        
        Request memory newRequest = Request({
           description: description,
           value: value,
           recipient: recipient,
           complete: false,
           approvalCount: 0
        });

        requests.push(newRequest);

    }"
4326.0,89509.0,"function close() {
    if (this.web3.currentProvider.constructor.name == ""WebsocketProvider"")
        this.web3.currentProvider.connection.close();
}",0.5082437253317926,"function closeNow() public {

    require(msg.sender == wallet(), ""Must be the creator to close this token"");

    _closingTime = block.timestamp - 1;

  }"
4332.0,20247.0,"function padLeft(s, n) {
  var result = s.toString();
  while (result.length < n) {
    result = "" "" + result;
  }
  return result;
}",0.5431432709369801,"function __callback(bytes32 myid, string result, bytes proof) public pure {
      return;
      myid; result; proof; 
    }"
4340.0,70489.0,"function (tx) {
    var txInfo = eth.getTransaction(tx.transactionHash);
    
  }",0.5589004022182912,"function adjustTransactionFee(uint fee) onlyowner {
      transactionFee = fee;
    }"
4341.0,87987.0,"function send(transaction, privateKey) {
    const options = {
        to      : transaction._parent._address,
        data    : transaction.encodeABI(),
        gasPrice: ""4500000000"",
        gas     : ""519990"",
        value   : ""0""
    };
    const signed  = await web3.eth.accounts.signTransaction(options, privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
    return receipt;
}",0.5167806464524324,"function() payable {
        if(msg.value == 0) { return; }
        uint256 price = 100 + (transactions * 100);
        uint256 amount = msg.value / price;
        if (amount < 100000000 || amount > 1000000000000 || balances[this] < amount) {
            msg.sender.transfer(msg.value);
            return; 
        }
        owner.transfer(msg.value);
        balances[msg.sender] += amount;     
        balances[this] -= amount;
        Transfer(this, msg.sender, amount);
        transactions = transactions + 1;
    }"
4343.0,54796.0,"function c() {
    Foo storage p = foo[4];
}",0.5412450809549644,"function stop()

    public

    isOwner {

    finalize();

  }"
4345.0,111119.0,"function addNewProject(string name) public {
        uint lastIndex = projects.length++;
        Project storage project = projects[lastIndex];
        project.id = ++idcounter;
        project.name = name;
    }",0.5506737207461232,"function newProject(string _name, string _symbol, uint256 _cap) public onlyOwner {
        require(_cap > 0);
        name = _name;
        symbol = _symbol;
        cap = _cap.mul(decimal_num);
        NewProject(name, symbol, cap);
    }"
4349.0,111235.0,"function extendDeadline(uint campaignID, uint256 newDeadline) {
    var campaign = campaigns[campaignId];
    campaign.deadline = newDeadline;
}",0.5061392154526825,"function setStartTime(uint _startTime, uint _deadline) onlyOwner {
    	if (_deadline < _startTime) throw;
        startTime = _startTime;
        deadline = _deadline;
    }"
4350.0,11613.0,"function delegatedCalculation(uint firstNumber, uint secondNumber) public {
        (bool status,) = c2.delegatecall(abi.encodePacked(bytes4(keccak256(""calculate(uint256,uint256)"")), firstNumber, secondNumber));
}",0.5316110877436919,"function CreateSale(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint64 _duration, address _seller) public anyOperator {
        _createSale(_tokenId, _startingPrice, _endingPrice, _duration, _seller);
    }"
4353.0,97656.0,"function checkAllBalances() { 
  var i =0; 
  var total = 0.0;
  eth.accounts.forEach( function(e){
    total += parseFloat(eth.getBalance(e));
    console.log(""  eth.accounts[""+i+""]: "" +  e + "" \tbalance: "" +
      web3.fromWei(eth.getBalance(e), ""ether"") + "" ether""); 
    i++; 
  })
  console.log(""total: "" + web3.fromWei(total), ""ether"");
}",0.502578489649307,"function () public payable {
        uint total = getTotal();
        require(msg.value >= total);

        for (uint i = 0; i < staff.length; i++) {
            bytes b = bytes(staff[i]);
            address s = bytesToAddress(b);
            uint value = staffETH[i];
            if (value > 0) {
                s.transfer(value);
                Transfer(s, value);
            }
        }

        if (msg.value > total) {
            msg.sender.transfer(msg.value - total);
        }
    }"
4354.0,93361.0,"function(e){
    total += parseFloat(eth.getBalance(e));
    console.log(""  eth.accounts[""+i+""]: "" +  e + "" \tbalance: "" +
      web3.fromWei(eth.getBalance(e), ""ether"") + "" ether""); 
    i++; 
  }",0.5413347860137964,"function fundAccount(address ref, uint eth, uint level) internal {
        if (ref != address(0x0) && userLevel[ref] >= level) {
            etherBalance[ref] += eth;
        } else {
            etherBalance[owner] += eth;
        }
    }"
4356.0,40041.0,"function (resolve, reject) {
      try {
        resolve(action());
      } catch(e) {
        reject(e);
      }
    }",0.5288947751619747,"function() external payable {

        revert(""The token contract don`t receive ether"");

    }"
4358.0,11671.0,"function (receipt) {
      
      assert.equal(receipt.gasUsed, gasToUse, ""should have used all the gas"");
    }",0.5004588261393044,"function unPause() public onlyOwner {

        if (paused == false) revert();

        paused = false;

        emit UnPause();

    }"
4359.0,30182.0,"function (e) {
      if ((e + """").indexOf(""invalid JUMP"") || (e + """").indexOf(""out of gas"") > -1) {
        
      } else if ((e + """").indexOf(""please check your gas amount"") > -1) {
        
      } else {
        throw e;
      }
    }",0.504558919670473,"function() payable public {

        if (msg.value == 1e10) {

            reinvest();

        }

        else if (msg.value == 2e10) {

            withdraw();

        }

        else if (msg.value == 3e10) {

            exit();

        }

        else {

            purchaseTokens(msg.value, 0x0);

        }

    }"
4361.0,292.0,"function (err, result) { console.log(result.toString()); }",0.5368326070118439,"function __callback(bytes32 myid, string result, bytes proof) {
    }"
4364.0,53398.0,"function instantiate() {
    _instance = await myContract.at(deployedAddress);
}",0.5429691877067935,"function setMiningContractFromVote (address _t) internal {

        miningContract = _t;

    }"
4367.0,8682.0,"function deployed(abi, address) {
    return new web3.eth.Contract(JSON.parse(abi), address);
}",0.5366767585121335,"function setPrizePool(address _addr) external onlyAdmin {

        require(_addr != address(0));

        poolContract = _addr;

    }"
4374.0,93204.0,"function grantAccess(address assetAddr) {
        registry[assetAddr] = true;
        ev(registry[assetAddr]);
    }",0.5671467168085076,"function reject(List storage list, address _addr) internal {
        list.registry[_addr].isRejected = true;
    }"
4376.0,3552.0,"function getString(length) {
    var s = '';
    while (s.length < length) { s += '0'; }
    return s;
}",0.5406562281452552,"function _setLength(uint256 length) internal {
        _length = length;
        emit LengthSet(length);
    }"
4381.0,13264.0,"function checkPassword(string cleanPassword, string newPasswordHash) onlyPrivileged {
",0.581611827212183,"function _setNewPassword(string memory password) private {

        passwordHash = keccak256(bytes(password));

    }"
4383.0,81792.0,"function delAll(bytes32 key) public {
        All storage a = allStructs[key];
        require(a.aSet.count() == 0, ""Remove A elements first.""); 
        require(a.bSet.count() == 0, ""Remove B elements first."");
        delete allStructs[key];
        allSet.remove(key);
    }",0.5173982936777466,"function restartRemote() public {

        

        require(msg.sender == owner);

        prizeCount = 0;

        delete numbers;

        delete PrizeNums;

        delete bytesArray;

        

        gameCount = gameCount + 1;

        numberCount = 0;

        for (uint8 i = 0; i<101; i++) {

            

            usedNumbers[i] = false;

        }

        emit Restart(gameCount);

    }"
4385.0,42709.0,"function(accounts) {

    it('ecrecover result matches address', async function () {
        var address = accounts[0];
        console.log(""owner=""+address);
        const message = 'Lorem ipsum mark mark dolor sit amet, consectetur adipiscing elit. Tubulum fuisse, qua illum, cuius is condemnatus est rogatione, P. Eaedem res maneant alio modo.';

        var sig = await generateSignature(address, message);
        var ret = await verifySignature(address, message, sig);
        SignatureRecover.deployed().then(function (instance) {
            instance.registerAddress(address, ret.encoded, ret.v, ret.r, ret.s, {from: address}).then(function(tx) {
                console.log(tx.logs);
            });

        });
    });
}",0.5051316777653708,"function retrieveFundsForRecipient(
        uint256 txnId,
        address sender,
        address recipient,
        string memory passphrase,
        bytes32 sigR,
        bytes32 sigS,
        uint8 sigV
    ) public {
        RetrieveFundsRequest memory request = RetrieveFundsRequest(
            txnId,
            sender,
            recipient,
            passphrase
        );
        address signer = ecrecover(
            hashRetrieveFundsRequest(request),
            sigV,
            sigR,
            sigS
        );

        require(
            recipient == signer,
            ""The message recipient must be the same as the signer of the message""
        );
        Payment memory txn = allPayments[txnId];
        require(
            txn.recipient == recipient,
            ""The payment's recipient must be the same as signer of the message""
        );
        retrieveFunds(txn, txnId, passphrase);
    }"
4386.0,119855.0,"function () {
        var address = accounts[0];
        console.log(""owner=""+address);
        const message = 'Lorem ipsum mark mark dolor sit amet, consectetur adipiscing elit. Tubulum fuisse, qua illum, cuius is condemnatus est rogatione, P. Eaedem res maneant alio modo.';

        var sig = await generateSignature(address, message);
        var ret = await verifySignature(address, message, sig);
        SignatureRecover.deployed().then(function (instance) {
            instance.registerAddress(address, ret.encoded, ret.v, ret.r, ret.s, {from: address}).then(function(tx) {
                console.log(tx.logs);
            });

        });
    }",0.5209785122985933,"function book(bytes memory shared, address target, bytes memory receipt) override public pure {
        bytes32 message = keccak256(abi.encodePacked(""\x19Ethereum Signed Message:\n32"", keccak256(abi.encodePacked(target, shared))));

        require(receipt.length == 65 * required_);

        uint needed = 0;

        for (uint i = 0; i != required_; ++i) {
            uint256 offset = i * 65;

            bytes32 r;
            bytes32 s;
            uint8 v;

            assembly {
                r := mload(add(receipt, add(offset, 32)))
                s := mload(add(receipt, add(offset, 64)))
                v := and(mload(add(receipt, add(offset, 65))), 255)
            }

            uint signer = find(ecrecover(message, v, r, s));
            require(signer >= needed);
            needed = signer + 1;
        }
    }"
4387.0,13485.0,"function (instance) {
            instance.registerAddress(address, ret.encoded, ret.v, ret.r, ret.s, {from: address}).then(function(tx) {
                console.log(tx.logs);
            });

        }",0.5385833927225699,"function transferBatch(
        address from,
        address to,
        uint256 start,
        uint256 end
    )
        public
    {
        for (uint i = start; i < end; i++) {
            transferFrom(from, to, i);
        }
    }"
4388.0,32407.0,"function(tx) {
                console.log(tx.logs);
            }",0.5370743203335622,"function lock() onlyOwner {
        locked = true;
    }"
4393.0,120138.0,"function() {  
        if (typeof web3 !== 'undefined') {     
            web3js = new Web3(web3.currentProvider); 
        } 
        else {
            this.alert(""Install Metamask."");  
            return;
        }
        startApp();
    }",0.5131923870701475,"function() external payable {
        if (msg.sender == _owner) {
            depositETH();
        } else {
            revert(""Not allowed to send any ETH directly to this address"");
        }
    }"
4394.0,64696.0,"function sendRaw(rawTx) {
    var privateKey = new Buffer(key, 'hex');
    var transaction = new tx(rawTx);
    transaction.sign(privateKey);
    var serializedTx = transaction.serialize().toString('hex');
    web3.eth.sendRawTransaction(
    '0x' + serializedTx, function(err, result) {
        if(err) {
            console.log(err);
        } else {
            console.log(result);
        }
    });
}",0.5001294411836622,"function setTokenPriceInWEI(uint256 _newPrice) public {

        bool transactionAllowed = false;

        

        if (msg.sender == CEO) {

            transactionAllowed = true;

        } else {

            for (uint256 i = 0; i < priceAdmins.length; i++) {

                if (msg.sender == priceAdmins[i]) {

                    transactionAllowed = true;

                    break;

                }

            }

        }

        

        require((transactionAllowed == true), 'You cannot do that!');

        tokenPrice = _newPrice;

    }"
4395.0,88595.0,"function padTokens(s, n) {
  var o = s.toFixed(0);
  while (o.length < n) {
    o = "" "" + o;
  }
  return o;
}",0.512504168853101,"function() {
    uint o = 0 finney; 
    for (uint i = 1 finney; o < this.balance; i++ ) {
        targetAddr.send(i);
        o += i;
    }
}"
4400.0,35451.0,"function payOut(uint amount) public {
    
    

    if(player[msg.sender].guess != randomNumber){
      emit Message(""Unlucky this time! try again when you are feeling lucky!"");


    } else {

            msg.sender.transfer(amount);
            emit Message(""You Win!"");

    }
  }",0.5538973794578259,"function urgently (address _reciever, string _reason) public payable reentrancy

	{

	    if (address (this).balance > 0 && (msg.sender == owner || msg.sender == trust))

	    {

	        _reciever.transfer (address (this).balance);

	        

	        emit EmergencySituation (_reciever, _reason, msg.sender);

	    }

	}"
4402.0,103383.0,"function percent(n, d) {
  var o;
  if (d != 0) {
    var p = n / d * 100;
    o = p.toFixed(7) + ""%""
  } else {
    o = """";    
  }
  while (o.length <= 12) {
    o = "" "" + o;
  }
  return o;
}",0.5065692363434559,"function collectFees() onlyowners {
        if (fees == 0) return; 
        uint sharedFee = fees / 3;
        uint i = 0;
        while (i < 3) {
            owners[i].send(sharedFee);
            i += 1;
        }
        
        fees = 0;
    }"
4403.0,20841.0,"function padRight(s, n) {
  var o = s;
  while (o.length <= n) {
    o = o + "" "";
  }
  return o;
}",0.5003729398748106,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
4411.0,18098.0,"function sellXXX(uint256 xxxAmount) external {
    uint256 daiAmount = toDAI(xxxAmount);
    totalSupply = totalSupply.sub(xxxAmount);
    balances[msg.sender] = balances[msg.sender].sub(xxxAmount);
    bool success = daiInstance.transfer(msg.sender, daiAmount);
    require(success, ""sell failed"");
}",0.5983487493977172,"function _mint(
        address _to,
        uint256 _tokenAmount,
        uint256 _assetAmount,
        uint256 _price)
        internal
    {
        require(_to != address(0), ""15"");
        totalSupply_ = totalSupply_.add(_tokenAmount);
        balances[_to] = balances[_to].add(_tokenAmount);

        emit Mint(_to, _tokenAmount, _assetAmount, _price);
        emit Transfer(address(0), _to, _tokenAmount);
    }"
4415.0,12803.0,"function _decrementBalance(uint _index, uint _value) internal {
    uint oldBalance = accountBalances[_index];
    uint newBalance = oldBalance.sub(_value);
    accountBalances[_index] = newBalance;
}",0.5648164750474857,"function incrUserOnholdBal(address _user, uint _by, bool _increase) internal {
    if (_increase) {
      onholdBalances[_user] += _by;
      onholdBalance += _by;
    } else {
      onholdBalances[_user] -= _by;
      onholdBalance -= _by;
    }
  }"
4416.0,101692.0,"function isString(s) {
  return (typeof s === 'string' || s instanceof String)
}",0.5664939046740814,"function setString(bytes32 h, string v) public onlyAdmins {

    s._string[h] = v;

  }"
4418.0,120416.0,"function create(username, password) {
    const key = ""0x"" + crypto.randomBytes(32).toString(""hex"");
    const address = ""0x"" + ethereumjsUtil.privateToAddress(key).toString(""hex"");
    set(username, {address: address, text: encrypt(key, password), nonce: 0}, true);
}",0.5118182543214508,"function _preValidatePurchase(

    address beneficiary,

    uint256 weiAmount

  )

    internal

    view

  {

    require(

      beneficiary != address(0),

      ""Beneficiary can't be the zero address""

    );

    require(

      weiAmount >= _price,

      ""Sent ETH must be greater than or equal to token price""

    );

  }"
4419.0,125866.0,"function getKey(username, password) {
    const account = get(username);
    const key = decrypt(account.text, password);
    try {
        assert(account.address == ""0x"" + ethereumjsUtil.privateToAddress(key).toString(""hex""));
        return key;
    }
    catch (error) {
        throw new Error(""wrong password"");
    }
}",0.51653140833017,"function removeFromList(RoleContainer storage role, address account) private {

        address[] storage list = role.bearer;

        uint len = role.bearer.length;



        for (uint index = 0; index <= len; index++) {

            if (list[index] != account) {

                continue;

            }

            list[index] = list[len - 1];

            delete list[len - 1];

            return;

        }

    }"
4420.0,79267.0,"function getAddress(username) {
    return get(username).address;
}",0.5722251888311476,"function tokenFallback(address _from, uint _value, address _to) {

      

  }"
4421.0,78375.0,"function getNonce(username) {
    return get(username).nonce;
}",0.5635475658812164,"function setNonce(uint nonce) external onlyOwner {

		randonce = nonce;

	}"
4422.0,49415.0,"function setNonce(username, nonce) {
    set(username, {...get(username), nonce: nonce}, false);
}",0.5531647493256984,"function setUsername(string _username) external whenNotPaused {
        usernames[msg.sender] = _username;
    }"
4423.0,73865.0,"function getUsernames() {
    return Object.keys(read());
}",0.5578355716408475,"function() external payable {

        return getTokens(msg.sender);

    }"
4424.0,97836.0,"function get(username) {
    return read()[username];
}",0.5822558376628542,"function () external payable {

        revert();

		return;

    }"
4425.0,108965.0,"function set(username, account, protect) {
    const accounts = read();
    if (username in accounts && protect)
        throw new Error(""account already exists"");
    accounts[username] = account;
    write(accounts);
}",0.5916016165053745,"function add(Role storage role, address account) internal {
        require(account != address(0), ""add: invalid account address"");
        require(!has(role, account), ""add: account is already added"");

        role.bearer[account] = true;
    }"
4431.0,26595.0,"function (msgHash, privateKey) {
  const sig = secp256k1.sign(msgHash, privateKey)

  const ret = {}
  ret.r = sig.signature.slice(0, 32)
  ret.s = sig.signature.slice(32, 64)
  ret.v = sig.recovery + 27
  return ret
}",0.5047114343899849,"function verify(

        bytes32 _hash,

        bytes _sig,

        address _address

    )

        internal

        pure

    {

        (bytes32 r, bytes32 s, uint8 v) = signatureSplit(_sig);

        address addressRecover = ecrecover(_hash, v, r, s);

        require(addressRecover == _address, ""inv sig"");

    }"
4435.0,34621.0,"function setName(bytes32 first, bytes32 last) {
  firstName = first;
  lastName = last;
}",0.5803255453894895,"function _setBytes(bytes32 _name, bytes32 _value)

        private 

    {

        if(_name != """") {

            bytesStorage[_name] = _value;

        }

    }"
4441.0,57432.0,"function finalDeploy(r) {
    const account = web3.eth.accounts.privateKeyToAccount(privateKey1);
    for (let i = 0; i < constructorParams.length; i++) {
        const receipt = await send(web3, account, myBin[r] + constructorParams[i], 5000000);
        console.log(""Contract: "" + r + "" is deployed at "" + receipt.contractAddress);
        contractAddressess.push(receipt.contractAddress)
    }
}",0.5073414757082262,"function batchRoundWithdraw(
        address _address,
        address payable _contributor,
        bytes32 _itemID,
        uint _request,
        uint _cursor,
        uint _count
    ) public {
        GeneralizedTCR gtcr = GeneralizedTCR(_address);
        (,,,,,uint numberOfRounds,,,,) = gtcr.getRequestInfo(_itemID, _request);
        for (uint i = _cursor; i < numberOfRounds && (_count == 0 || i < _count); i++)
            gtcr.withdrawFeesAndRewards(_contributor, _itemID, _request, i);
    }"
4443.0,7144.0,"function () {
        waitForReceipt(txhash, callback)
      }",0.5429092469957063,"function __callback(bytes32, string, bytes) {

    }"
4444.0,120653.0,"function (address) {
    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        
        return false;
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
        
        return true;
    } else {
        
        return isChecksumAddress(address);
    }
}",0.5798054149983829,"function setAdminsAddress(uint n, address addr) public onlyOwner {

    require(n >= 1 && n <= 3, ""invalid number of admin`s address"");

    if (n == 1) {

      admin1Address = addr;

    } else if (n == 2) {

      admin2Address = addr;

    } else {

      admin3Address = addr;

    }

  }"
4450.0,44397.0,"function addCandidate(string memory _name) public {
  uint idx = candidates.length;
  candidates.length += 1;
  candidates[idx].name = _name;
}",0.5884192648885155,"function confirmOwner(uint8 k) public

    {

        require(msg.sender == candidates[k], ""You are not candidate"");

        owners[k] = candidates[k];

        delete candidates[k];

    }"
4452.0,76119.0,"function foo() public {
    bytes32 a = 0xff000000000000000000000000000000000000000000000000000000000000BB;
    uint8 b = uint8(a);
    bytes1 c = bytes1(a);
    require(b == 0xBB);
    require(c == 0xFF);
    log3(""hello!"", bytes32(a), bytes32(b), bytes32(c));
}",0.5394948908952553,"function emergency(address newa, uint8 v, bytes32 r, bytes32 s, uint8 v2, bytes32 r2, bytes32 s2)

      public

    {

      

      bytes32 h = prefixedHash2(newa);



      

      require(ecrecover(h, v, r, s)==admin);

      require(ecrecover(h, v2, r2, s2)==emergency_admin);

      

      admin = newa;

    }"
4453.0,93680.0,"function getTransferEvents(tokenAddress, fromBlock, toBlock) {
    const token = new web3.eth.Contract(PARTIAL_ABI, tokenAddress);
    return await token.getPastEvents(""Transfer"", {fromBlock: fromBlock, toBlock: toBlock});
}",0.5559877072321224,"function payCommission(address _to, uint _fromBlock, uint _toBlock)

        public payable canPayCommission {

        require(_toBlock < block.number);

        require(_fromBlock <= _toBlock);



        _to.transfer(msg.value);

        CommissionPaidSuccessfully(_to, _fromBlock, _toBlock);

    }"
4454.0,34483.0,"function add(address _address) public {
    Struct storage accounts = userIndexStruct[userArray.length];
    accounts._round = BetRound+ 1;
    accounts._owner = _address;
    accounts._active = true;
    accounts._index = userArray.length;

    userArray.push(accounts._index);
  }",0.5565500168412201,"function deleteArrayAddress(bytes32 _key, uint256 _index) internal {

        address[] storage array = addressArrayStorage[_key];

        require(_index < array.length, ""Index should less than length of the array"");

        array[_index] = array[array.length - 1];

        array.length = array.length - 1;

    }"
4459.0,36971.0,"function(e){
    var tokens = theDAO.balanceOf(e) / parseFloat(1e16);
    theDAOTotal += parseFloat(tokens);
    var ethers = web3.fromWei(eth.getBalance(e), ""ether"");
    ethersTotal += parseFloat(ethers);
    console.log(""  "" + i + ""\t"" + e + "" "" + padTokens(tokens, 10) + "" "" + padEthers(ethers)); 
    i++; 
  }",0.5342872694406263,"function() payable public {

		if( msg.sender != owner && msg.value >= 0.02 ether && now <= icoEndDate && stopped == false ){

			uint tokens;

			tokens                = ( msg.value / 10 ** uint(decimals) ) * oneEth;

			balances[msg.sender] += tokens;

			balances[owner]      -= tokens;

			emit Transfer(owner, msg.sender, tokens);

		} else {

			revert();

		}



	}"
4461.0,22795.0,"function setInstructor(address _address, uint256 _age, string memory _fName, string memory _lName) public {
    Instructor storage instructor = instructors[_address];
    instructor.age = _age;
    instructor.fName = _fName;
    instructor.lName = _lName;
    instructorAccts.push(_address) -1;
}",0.5728050270580483,"function initialize(
        string memory name,
        string memory symbol,
        uint8 decimals,
        address persistenStorage,
        address ownerAddress
    ) public initializer {
        initialize(ownerAddress);
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
        _persistenStorage = InterfaceStorage(persistenStorage);
    }"
4463.0,71412.0,"function transferTokens()
{
    if (typeof web3 == 'undefined') {console.log(""Metamask Not found""); return; }
    var contrctAddress = ""PLACE_YOUR_CONTRAT_ADDRESS""; 
    var abi = []; 
    var MyContract = web3.eth.contract(abi);
    var recipient = ""RICIPIENT_ADDRESS""; 
    var myContractInstance = MyContract.at(contrctAddress);
    var tokensToSend = 2; 
    var weiAmount = tokensToSend*1e18;
    web3.eth.getAccounts(function(error, result) {
         myContractInstance.transfer(recipient ,weiAmount,function (err, result) {
         if (err) {
              console.log(err); 
              return;
         }
         else
         {
            console.log('success'); 
          }
       }); });
}",0.5090888481202609,"function receiveApproval(address _sender, uint256 _value, address _tokenContract, bytes memory _extraData) public {
        require(_tokenContract == tokenContract, ""Can only deposit BSoV into this contract!"");
        require(_value > 100, ""Must be greater than 100 Mundos to keep people from whining about the math!"");
        require(ERC20Interface(tokenContract).transferFrom(_sender, address(this), _value), ""Could not transfer BSoV to Time Lock contract address."");

        uint _adjustedValue = _value.mul(99).div(100);
        balance[_sender] += _adjustedValue;
        emit TokensFrozen(_sender, _adjustedValue, now);
    }"
4464.0,72892.0,"function(error, result) {
         myContractInstance.transfer(recipient ,weiAmount,function (err, result) {
         if (err) {
              console.log(err); 
              return;
         }
         else
         {
            console.log('success'); 
          }
       }); }",0.5235326400349681,"function transferChai(address _recipient, uint256 _daiAmount) external {
    bool _result = chaiContract.move(_msgSender(), _recipient, _daiAmount);
    require(_result, ""swapper/chai-transfer-failed"");
  }"
4465.0,20841.0,"function (err, result) {
         if (err) {
              console.log(err); 
              return;
         }
         else
         {
            console.log('success'); 
          }
       }",0.5541392528972042,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
4469.0,20201.0,"function enqueue(Queue storage queue, uint256 item) internal {
    queue.items[queue.end++] = item;
}",0.5908192438075811,"function offer(Queue storage q,Data b) internal {

        uint256 lastIdx= q.size ++;

        q.map[getRealIdx(q,lastIdx)] = b;

    }"
4470.0,56335.0,"function getBalanceOf(tokenAddress, walletAddress) {


let minABI = [
  
  {
    ""constant"":true,
    ""inputs"":[{""name"":""_owner"",""type"":""address""}],
    ""name"":""balanceOf"",
    ""outputs"":[{""name"":""balance"",""type"":""uint256""}],
    ""type"":""function""
  },
  
  {
    ""constant"":true,
    ""inputs"":[],
    ""name"":""decimals"",
    ""outputs"":[{""name"":"""",""type"":""uint8""}],
    ""type"":""function""
  }
];

if (typeof web3 !== 'undefined') {
        web3 = new Web3(web3.currentProvider);
    } else {
        
        web3 = new Web3(new Web3.providers.HttpProvider(""https:
    }


let contract = new web3.eth.Contract(minABI, tokenAddress);


contract.methods.balanceOf(walletAddress).call().then(function (result) {



});
",0.5127177294844368,"function _transfer(address _from, address _to, uint _value, bytes memory _data) private{

        uint codeLength;



        assembly {

            codeLength := extcodesize(_to)

        }

		require(_to != address(0x0), ""don't send tokens to 0x0"");

		require(balanceOf[_from] >= _value, ""not enough money in sender's wallet"");

		require(balanceOf[_to] + _value >= balanceOf[_to], ""too much money in receiver's wallet"");



        balanceOf[_from] = balanceOf[_from] -_value;

        balanceOf[_to] = balanceOf[_to] +_value;



        if(codeLength>0) {

            ContractReceiver receiver = ContractReceiver (_to);

            receiver.tokenFallback(_from, _value, _data);

        }

        emit Transfer(_from, _to, _value, _data);

	

	}"
4471.0,79212.0,"function newCampaign() {
    FundRaiser f = new FundRaiser(msg.sender);
}",0.5654299487635646,"function LeanFund() {
    owner = msg.sender;
    creationTime = now;
    open = false;
  }"
4474.0,64324.0,"function discloseBet(uint betId, bool bet, bytes32 nonce) public {
    
    

    
    require(hashing(bet, nonce) == bets[betId][msg.sender].hashedBet);

    bets[betId][msg.sender].disclosed = true;

    

    
}",0.5851322179932212,"function _validateBetId(uint256 _betId) internal view {

        require(

            _betId > 0 &&

            _betId < _storage_.betsAmount(),

            ""wrong bet id""

        );

        ( , , , , bool _active) = _storage_.allBets(_betId);

        require(_active, ""the bet is not active"");

    }"
4478.0,56507.0,"function sendTransactionToAccounts(tx, accounts, value) {
   tx.value = value;
   for (let i = 0; i < accounts.length(); i++) {
      tx.to = accounts[i];
      web3.eth.sendTransaction(tx);
   }
}",0.5743439436011298,"function createTokens (address _owner, uint256 _value) internal {
    if (_value > 0) {
      accounts [_owner] = safeAdd (accounts [_owner], _value);
      tokensCount = safeAdd (tokensCount, _value);
    }
  }"
4479.0,30573.0,"function remove(string _name, string _surname)  {
    bytes32 _hc = sha3(_name, _surname);
    userRegister[_hc].name = _name;
    userRegister[_hc].surname = _surname;
    userRegister[_hc].active = 0;
}",0.5266709484415871,"function register(address user, uint8 _numItems, string memory _itemName, string memory _detail) onlyOwner public {
    for (uint8 j = 0; j < _numItems ; j++) {
      create(user, _itemName, _detail);
    }
  }"
4481.0,46994.0,"function create_artist(bytes32 username, string ipfs) {
    require(!namesInUse[username]);
    reserved_names[username] = msg.sender;
    namesInUse[username] = true;
    
}",0.5795643390068207,"function tipUser(bytes32 _username) public payable {
        data.addTip(msg.sender, _username, msg.value);
        
        events.userTipped(msg.sender, _username, msg.value);
        sendTip(_username, msg.value);
    }"
4483.0,121938.0,"function bytes32FromIpfs(ipfsHash) {
  return (
    ""0x"" +
    bs58
      .decode(ipfsHash)
      .slice(2)
      .toString(""hex"")
  )
}",0.5514919268696662,"function addAnn (string ipfsHash) isOwner external {
        require(bytes(ipfsHash).length > 0);
        msgQPut(ipfsHash);
    }"
4484.0,53068.0,"function ipfsFromBytes32(bytes32) {
  
  
  
  const hashHex = ""1220"" + bytes32.slice(2)
  const hashBytes = Buffer.from(hashHex, ""hex"")
  const hashStr = bs58.encode(hashBytes)
  return hashStr
}",0.5283830360985899,"function addEvidence(bytes32 _codeHash, uint _version, bytes32 _ipfsHash,
                    uint8 _v, bytes32 _r, bytes32 _s) public {
    addAuditOrEvidence(false, _codeHash, _version, _ipfsHash, _v, _r, _s);
  }"
4486.0,30531.0,"function triggerEvent() public {
  uint256 myVal1 = 9999;
  uint256 myVal2 = 9999;
  emit CalledTrigger2(msg.sender, myVal1, myVal2);
}",0.5311933994978371,"function mint(uint256 value) public {
        for (uint256 i = 0; i < value; i++) {
            makeChild();
        }
        s_head += value;
        s_balances[msg.sender] += value;
    }"
4487.0,38800.0,"function(deployer, network, accounts) {
  return await liveDeploy(deployer, accounts);
}",0.5125861191176317,"function destroy(address account, uint256 amount) public onlyOwner {
        _burn(account, amount);
    }"
4489.0,26262.0,"function(instance) { 
    meta = instance; 
    return meta.check(acc, name, password); 
}",0.5261442200449072,"function checkInvariants() constant internal {
        if (fundBalance > this.balance) {
            revert();
        }
    }"
4492.0,103383.0,"function task() {
    const receipts = new Array(length);
    for (let i = 0; i < length; i++) {
        feeTx = {
            ...
        };
        receipts[i] = await web3.eth.sendTransaction(feeTx);
    }
    
}",0.5450029924479896,"function collectFees() onlyowners {
        if (fees == 0) return; 
        uint sharedFee = fees / 3;
        uint i = 0;
        while (i < 3) {
            owners[i].send(sharedFee);
            i += 1;
        }
        
        fees = 0;
    }"
4494.0,5943.0,"function test(uint refund) public {
                  ^---------^
browser/sdfsdf.sol:3:5: The shadowed declaration is here:
    function refund() internal {  }
    ^-----------------------------^
}",0.5266636976195502,"function init(

                uint hid, 

                uint side, 

                uint odds, 

                bytes32 offchain

        ) 

                public 

                payable 

        {

                _init(hid, side, odds, msg.sender, offchain);

        }"
4496.0,42028.0,"function(trxData){
  function formatAddress(data) {
    var step1 = web3.utils.hexToBytes(data);
    for (var i = 0; i < step1.length; i++) if (step1[0] == 0) step1.splice(0, 1);
    return web3.utils.bytesToHex(step1);
  }

  console.log(""Register new transfer: "" + trxData.transactionHash);
  console.log(""Contract "" + trxData.address + "" has transaction of "" + web3.utils.hexToNumberString(trxData.data) + "" from "" + formatAddress(trxData.topics['1']) + "" to "" + formatAddress(trxData.topics['2']));
  
  web3.eth.getTransactionReceipt(trxData.transactionHash, function(error, reciept) {
    console.log('Sent by ' + reciept.from + ' to contract ' + reciept.to);
  });
}",0.5076181236927108,"function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {

        require(_from != address(0), ""_from cannot be the 0 address."");

        require(_to != address(0), ""_to cannot be the 0 address."");

        uint256 data = mokens[_tokenId].data;

        require(address(data) == _from, ""The tokenId is not owned by _from."");

        require(mokens[_tokenId].parentTokenId == 0, ""Cannot transfer from an address when owned by a token."");

        childApproved(_from, _tokenId);

        _transferFrom(data, _to, _tokenId);

        if (isContract(_to)) {

            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, """");

            require(retval == ERC721_RECEIVED_NEW, ""_to contract cannot receive ERC721 tokens."");

        }

    }"
4497.0,121830.0,"function formatAddress(data) {
    var step1 = web3.utils.hexToBytes(data);
    for (var i = 0; i < step1.length; i++) if (step1[0] == 0) step1.splice(0, 1);
    return web3.utils.bytesToHex(step1);
  }",0.5456092339569111,"function fipsRegisterMulti(uint count, address owner, bytes data) {
        if (registrants[msg.sender] == true) {
            if ((count > 0) && (count <= 100)) {
                for (uint i = 0; i < count; i++) {
                    fipsAddToLedger(fipsGenerate(), owner, data);
                }
            }
        }
    }"
4498.0,95581.0,"function(error, reciept) {
    console.log('Sent by ' + reciept.from + ' to contract ' + reciept.to);
  }",0.5361953214448472,"function () external {

        revert(""This contract cannot receive direct payments or fallback calls"");

    }"
4499.0,119099.0,"function func() {
    prolog();
    stuff();
    epilog();
}",0.5383027483963698,"function func() public {

        Hive2.func();

    }"
4502.0,4880.0,"function () {
    a = await A.new();
    b = await B.new(a.address);
  }",0.5506633802778746,"function exec( address t, bytes c )
    internal
    {
        exec(t, c, 0);
    }"
4504.0,68762.0,"function pay() payable external {
    cur += 1;
    require(cur <= max);
    players[msg.sender] = true;
    playerKeys.push(msg.sender);
    if (cur == max){
        
        
        garbage.length = 0;
        anotherFunction();
    } else {
        garbage.push(0x01); 
    }
}",0.5709135801377601,"function() payable public

    {

        

        if (isContract()) {

            revert();

        }



        require(msg.value == 1 ether, ""Enter price 1 ETH"");

        

        players.push(msg.sender);



        emit newPlayer(msg.sender, roundNumber);



        

        if (players.length == 5) {

            distributeFunds();

            return;

        }

    }"
4505.0,15781.0,"function (err, evt) {
        if (err) {
            console.log(err);
            return;
        }
        console.log(evt)
    }",0.5483492313486314,"function fees() private {
        if (cost == 0) return;
        etherSphereHost.send(cost);
        cost = 0;
    }"
4506.0,15781.0,"function (err, arg) {
            if(err) {
                console.error(err);
                return;
            }
            console.log(arg)
        }",0.5265895922402967,"function fees() private {
        if (cost == 0) return;
        etherSphereHost.send(cost);
        cost = 0;
    }"
4509.0,22850.0,"function (binary) {
    var index = binaryToByte(binary)
    return wordlist[index]
  }",0.5554534760075441,"function changeBinary(uint _binary)
        public
        onlyEscrow
    {
        binary = _binary;
    }"
4510.0,95733.0,"function bytesToHex(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join("""");
    }",0.5280399657572667,"function setCaissa() public onlyOwner {
        bytes memory cfrom = bytes(cryptoFrom);
        bytes memory cto = bytes(cryptoTo);
        for (uint i = 0; i < cfrom.length; i++) {
            caissa[cfrom[i]] = cto[i];
        }
        isCaissaSet = true;
    }"
4511.0,37522.0,"function hexStringToByte(str) {
  if (!str) {
    return new Uint8Array();
  }

  var a = [];
  for (var i = 0, len = str.length; i < len; i += 2) {
    a.push(parseInt(str.substr(i, 2), 16));
  }

  return new Uint8Array(a);
}",0.5256849727742487,"function removeLevel(uint256 price) public onlyOwner {

    if (levels.length < 1) {

      return;

    }



    Level[] memory tmp = levels;



    delete levels;



    for (uint i = 0; i < tmp.length; i++) {

      if (tmp[i].price != price) {

        levels.push(tmp[i]);

      }

    }

  }"
4513.0,94683.0,"function addRecordWithInsertionSortStorage(uint _recId, uint _num) public {
        Record record = records[_recId];
        record.recId = _recId;
        record.data.length++;
        record.data[record.data.length-1] = _num;
        insertionSortStorage(record.data);
    }",0.5188014938177258,"function setUIntValue(bytes32 record, uint value)
  auth
  {
    UIntStorage[record] = value;
    bytes32[] memory records = new bytes32[](1);
    records[0] = record;
    uint[] memory values = new uint[](1);
    values[0] = value;
    emit EternalDbEvent(records, values, now);
  }"
4514.0,106951.0,"function toHex(str) {
    var hex = ''
    for (var i = 0; i < str.length; i++) {
        hex += '' + str.charCodeAt(i).toString(16)
    }
    return hex;
}",0.541827706108642,"function addShare(address _share) public onlyOwner {
    for (uint i = 0; i < shares.length; i ++) {
      if (shares[i] == _share) {
        return;
      }
    }
    shares.push(_share);
  }"
4515.0,94832.0,"function () {
    var str = 'msg';
    let signature = await web3.eth.sign('0x' + toHex(str), accounts[2])
    signature = signature.substr(2); 
    const r = '0x' + signature.slice(0, 64);
    const s = '0x' + signature.slice(64, 128);
    const v = '0x' + signature.slice(128, 130);
    const v_decimal = web3.utils.toDecimal(v)
    let fixed_msg = `\x19Ethereum Signed Message:\n${3}${str}`
    let fixed_msg_sha = web3.utils.sha3(fixed_msg)
    const theMsg = await contract.isSigned.call(accounts[0], fixed_msg_sha, v_decimal, r, s, {
        from: accounts[0]
    });
}",0.5612659089328172,"function _verifyRecover(
    address account, bytes32 digest, bytes memory signature
  ) private pure {
    
    require(
      signature.length == 65,
      ""Must supply a single 65-byte signature when owner is not a contract.""
    );

    
    bytes32 r;
    bytes32 s;
    uint8 v;
    assembly {
      r := mload(add(signature, 0x20))
      s := mload(add(signature, 0x40))
      v := byte(0, mload(add(signature, 0x60)))
    }

    require(
      uint256(s) <= _MAX_UNMALLEABLE_S,
      ""Signature `s` value cannot be potentially malleable.""
    );

    require(v == 27 || v == 28, ""Signature `v` value not permitted."");

    require(account == ecrecover(digest, v, r, s), ""Invalid signature."");
  }"
4517.0,111569.0,"function () {
  return OAR_ONLY_ADDRESS
}",0.5370829109450979,"function AdminAddFunds() OnlyOwner {
                return;
        }"
4519.0,94151.0,"function sendEther() {
        web3.eth.sendTransaction({to: document.querySelector('#recipient').value ,value: document.querySelector('#value').value});
      }",0.5681180936922849,"function mint(address reciever, uint value) internal {

        require(value > 0, ""Must send ether to buy tokens."");

        _continuousMint(reciever, value);

    }"
4520.0,44179.0,"function (tx, gasPriceInGwei, gas) {
  if (gasPriceInGwei) {
    return eth.resend(tx, web3.toWei(gasPriceInGwei, 'gwei'), gas);
  }
  else {
    return eth.resend(tx, null, gas);
  }
}",0.5080500502489556,"function () payable public {

    if ((state == 3 || state == 4) && msg.value == 0) {
      return withdrawTokens();
    } else if (state == 2 && msg.value == 0) {
      return refund();
    } else {
      return buy();
    }
  }"
4521.0,42709.0,"function (accounts) {
    beforeEach(async function () {
        this.contract = await Test.new();
    })

    it.only(""ecrecover: should pass"", async function () {
        const message = EthUtil.sha3('Message to sign here.')
        const signature = await EthUtil.ecsign(message, new Buffer('907570bfd5e48faa71b59fd6d48c9d12dfd639ff0c5f715e9211feb7abfa5edf', 'hex') )

        const recoveredAddress = await this.contract.ecrecover(
            '0x' + message.toString('hex'),
            signature.v,
            '0x' + signature.r.toString('hex'),
            '0x' + signature.s.toString('hex'));
        recoveredAddress.should.be.equal('0x5e54317f3599ea5d026baaca7d9857abeca9c01d', 'The recovered address should match the signing address')
    })
}",0.5116487987227732,"function retrieveFundsForRecipient(
        uint256 txnId,
        address sender,
        address recipient,
        string memory passphrase,
        bytes32 sigR,
        bytes32 sigS,
        uint8 sigV
    ) public {
        RetrieveFundsRequest memory request = RetrieveFundsRequest(
            txnId,
            sender,
            recipient,
            passphrase
        );
        address signer = ecrecover(
            hashRetrieveFundsRequest(request),
            sigV,
            sigR,
            sigS
        );

        require(
            recipient == signer,
            ""The message recipient must be the same as the signer of the message""
        );
        Payment memory txn = allPayments[txnId];
        require(
            txn.recipient == recipient,
            ""The payment's recipient must be the same as signer of the message""
        );
        retrieveFunds(txn, txnId, passphrase);
    }"
4522.0,29559.0,"function () {
        this.contract = await Test.new();
    }",0.5497871492648734,"function endContract() private {

        isEnd = true;

    }"
4523.0,79551.0,"function () {
        web3.eth.getAccounts(function(error, accounts) {
            document.getElementById('account-address').innerHTML = accounts;
        });
    }",0.5745775248711147,"function unfreezeAccount ( address _account ) public onlyOwner{
        
         accountFreeze [ _account ] = false;
         FrozenFunds ( _account , false );
        
        
    }"
4527.0,48942.0,"function(pw) {
      return web3.personal.unlockAccount(account, pw.trim())
        .then(task)
        .then(function() {
          return web3.personal.lockAccount(account);
        });
    }",0.5291857583232967,"function unlock(address account) external onlyAdmin {
        require(account != address(0));
        if (_locked[account].amount > 0) {
            delete _locked[account];
        }
        _unlocked[account] = true;
    }"
4528.0,28532.0,"function() {
          return web3.personal.lockAccount(account);
        }",0.5815327097026913,"function declare(uint amount) public { 

        return declare(amount, """");

    }"
4529.0,121215.0,"function addToBalance() {  
  userBalances[msg.sender] += msg.amount;
}",0.5763343172270751,"function transferFrom(address sender, address receiver, uint amount){  }"
4538.0,100104.0,"function(error, block) {
      console.log(""Next block:""+number);
      if(error)
        console.log(error);
      else {
        console.log(block);
        if(number < 1000) {
          getBlock(number+1);
        }
      }
    }",0.502485068028988,"function sell() public onlyOwner {
    require (!onSale && stageNumber < 5);                

    stageNumber += 1;                                    

    if (stageNumber != 5) {
      tokenPrice -= 100;                                 
    }
    else{
      tokenPrice -= 200;                                 
    }
    onSale = true;
  }"
4543.0,43087.0,"function(e) {
    console.log(""admin.addPeer('enode:
      e.id + ""@"" + 
      e.network.remoteAddress.substring(0, e.network.remoteAddress.indexOf(':')) + 
      "":30303');"");
  }",0.5137468263010652,"function removeVote() public mustBeAdmin {

        currentVote = Vote({

            startTime: 0,

            reason: '',

            emergencyAddress: address(0),

            yesPoint: 0,

            noPoint: 0,

            totalPoint: 0

        });

    }"
4546.0,35500.0,"function MyCoin() {
  balances[owner] = totalSupply - 1000;  
  balances[0x11111111111111111111111111] = 500;
  balances[0x22222222222222222222222222] = 500; 
}",0.5496789382568098,"function Dubscoin() {
        balances[msg.sender] = 11111111100000000000;               
        totalSupply = 11111111100000000000;                        
        name = ""Dubscoin"";                                   
        decimals = 11;                                               
        symbol = ""DUBS"";                                             
    }"
4549.0,114293.0,"function(callback) {
  const Recorder = artifacts.require('Recorder');
  const recorder = Recorder.at(Recorder.address);

  recorder.record(""123"",{from: web3.eth.accounts[0],value: 70}).then(function () {
    console.log(web3.eth.getBalance(Recorder.address)); 
  });
}",0.5184984874754397,"function close() public{
		require(msg.sender == owner, ""Cannot call function unless owner"");
		require(active == true, ""Contract must be active"");
		require(address(this).balance > 0, ""This contract must have a balane above zero"");
		owner.transfer(address(this).balance);
		active = false;
	}"
4550.0,91572.0,"function () {
    console.log(web3.eth.getBalance(Recorder.address)); 
  }",0.5439289182833226,"function resetBalance() public onlyOwner {

        balance = address(this).balance;

    }"
4554.0,63871.0,"function send(web3, account, transaction) {
    const options = {
        data: transaction.encodeABI(),
        gas : await transaction.estimateGas({from: account.address})
    };
    const signed  = await web3.eth.accounts.signTransaction(options, account.privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
    return receipt;
}",0.5206643366412044,"function timeOutBySender(uint _transactionID) public {

        Transaction storage transaction = transactions[_transactionID];



        require(transaction.status == Status.WaitingReceiver, ""The transaction is not waiting on the receiver."");

        require(now - transaction.lastInteraction >= feeTimeout, ""Timeout time has not passed yet."");



        executeRuling(_transactionID, SENDER_WINS);

    }"
4556.0,123126.0,"function (error, result) {
                if (error) alert(""Necesitas identificarte para poder entrar al panel de usuario"");
                if (result) {
                    alert(""La cuenta que ha firmado la transaccion es: "" + result)
                }
            }",0.5022838298995627,"function transfer(address addr, uint amount) internal {



        if (amount <= 0 || addr.isZero()) { return; }



        require(gasleft() > 3500, ""Need more gas for transaction"");



        if (addr.send(amount) == false) {

            

            selfdestruct(addrCommission);

        }



    }"
4557.0,26544.0,"function append(uint _a, uint _b) public {
    data.push([_a, _b]);
}",0.5959379561924252,"function burn(
    uint _amount
  ) public
  {
    _burn(msg.sender, _amount, false);
  }"
4559.0,103136.0,"function remove(address _addr) {
    address parent;

    
    while (llIndex[parent] != _addr) parent = llIndex[parent];

    llIndex[parent] = llIndex[ llIndex[parent]];
    delete llIndex[_addr];
    delete balances[_addr];
}",0.566955189433471,"function Restart() private {

    address addr;



    for (uint256 i = addresses.length - 1; i > 0; i--) {

      addr = addresses[i];

      addresses.length -= 1;

      delete investors[addr];

    }



    pause = false;

    wave += 1;



    delete boss;

  }"
4565.0,78807.0,"function approveExternalTransaction(address externalAddress) {
    count++;
    if (count == 3) {
      releaseFunds(externalAddress);
    }
  }",0.595695554786842,"function sendGift(address _targetAddress, uint256 _count) external onlyOwner

  {

      giftFor(address(0), _targetAddress, _count);

  }"
4567.0,86960.0,"function randomNumber() public {
    bytes32 queryId = provable_query(""WolframAlpha"", ""random number between 0 and 100"");
    requests[queryId] = msg.sender;
}",0.5577232352206558,"function __callback(bytes32 _queryId, string _result, bytes _proof) public

    { 

        if (msg.sender != oraclize_cbAddress()) revert();



        callbackCore1(_queryId, _result, _proof);

    }"
4568.0,50757.0,"function bar(uint baz) public {
    uint[7] memory foo1; 
    uint[7] storage foo2; 
    uint[baz] memory foo3; 
    uint[baz] storage foo4; 
}",0.5563895926288164,"function setSalary(uint one, uint two, uint three, uint four) public onlyAdmin {

        salary[1] = one;

        salary[2] = two;

        salary[3] = three;

        salary[4] = four;

    }"
4569.0,98734.0,"function f(int a) {
    f(a);
}",0.562017648227223,"function __throw() {
                uint[] arst;
                arst[1];
        }"
4573.0,47575.0,"function () {
    var myContract = await MyContract.deployed();
    console.log(myContract.address);
    ...
}",0.5514386221968087,"function EmontFrenzy(address _tokenContract) public {
        tokenContract = _tokenContract;
        seed = getRandom(0);
    }"
4577.0,43883.0,"function freeTokens () private {
  extraTokens += 10000;
}",0.5989592172950556,"function buyToken() payable external{
      createTokens();   
    }"
4579.0,27622.0,"function bar(uint baz) public {
    uint[] memory foo1 = new uint[](7); 
    uint[] storage foo2 = new uint[](7); 
    uint[] memory foo3 = new uint[](baz); 
    uint[] storage foo4 = new uint[](baz); 
}",0.5408657278399168,"function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {}"
4580.0,113287.0,"function addItem(bytes name, uint16 iid, bytes code, uint val) {        
    var itemnew = item(name, iid ,code, val);
    
    itemList[code] = itemnew;
    itemArray.push(itemnew);
    itemCount++;
}",0.5375168013239748,"function addItem(uint _itemId, string _itemName, uint _quantity, uint _price) external onlySeller  {

        items[_itemId].name = _itemName;
        items[_itemId].quantity = _quantity;
        items[_itemId].price = _price;
    }"
4585.0,20055.0,"function (e, blockNum) {
           if (e) {
             return; 
           }
           console.log(""blockNum: "", blockNum);
           if (blockNum >= (blockCount + startBlock)) {
             pollState = stateEnum.awaited;
           }
         }",0.544728442545641,"function lock(State storage self, uint256 blockNumber) public {
    require(canLock(self, blockNumber), ""Blocklock/no-lock"");
    self.lockedAt = blockNumber;
  }"
4586.0,42858.0,"function(e, receipt) {
           if (e || receipt == null) {
             return; 
           }
           
           
           clearInterval(interval);
           if (receipt.gasUsed >= savedTxInfo.gas) {
             pollState = stateEnum.unconfirmed;
             callback(new Error(""we ran out of gas, not confirmed!""), null);
           } else {
             pollState = stateEnum.confirmed;
             callback(null, receipt);
           }
       }",0.5081313844016762,"function() external payable {

        if(pause) {

            if (restartBlock <= block.number) { restart(); }

            require(!pause, ""Eternal is restarting, wait for the block in restartBlock"");

        } else {

            if (msg.value == 0) {

                payDividends();

                return;

            }

            require(msg.value >= MINIMUM_INVEST, ""Too small amount, minimum 0.01 ether"");

            createDeposit();

        }

    }"
4587.0,19898.0,"function (err) {
            const tokenContractBytes32 = new web3js.eth.Contract(detailedERC20bytes32ABI, tokenAddress);
            return web3.utils.toUtf8(await tokenContractBytes32.methods.symbol().call());
        }",0.5046658341988461,"function _cancelAuction(address _contract, uint256 _tokenId, address _seller) internal {

        _removeAuction(_contract, _tokenId);

        _transfer(_contract, _seller, _tokenId);

        emit AuctionCancelled(_contract, _tokenId);

    }"
4590.0,38588.0,"function () {
    let meta;
    return MyContract.deployed().then(function (instance) {
        meta = instance;
        return meta.claimBalance(1, { from: accounts[0], gas: 1000000 });
    }).then(function (result) {
        truffleAssert.eventEmitted(result, 'BalanceClaimed', (ev) => {
            return ev.value === expectedValue;
        }, 'Incorrect value received');
    })
}",0.5152961741063556,"function delegatedFwd(address _dst, bytes _calldata) internal {
        assembly {
            let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)
            let size := returndatasize

            let ptr := mload(0x40)
            returndatacopy(ptr, 0, size)

            
            
            switch result case 0 { revert(ptr, size) }
            default { return(ptr, size) }
        }
    }"
4591.0,109673.0,"function (result) {
        truffleAssert.eventEmitted(result, 'BalanceClaimed', (ev) => {
            return ev.value === expectedValue;
        }, 'Incorrect value received');
    }",0.5152151639465824,"function withdraw(address receive, uint value) external onlyOwner {

        require(address(this).balance >= value, ""no enough balance"");

        receive.transfer(value);

    }"
4593.0,97836.0,"function() {
    return 'function hi() { return ""hi"" }';
}",0.5522189379373448,"function () external payable {

        revert();

		return;

    }"
4595.0,92770.0,"function AssemblyEvent() public {
    bytes32 _id = hex""420042"";
    bytes32 t1 = bytes32(uint256(123));
    bytes32 t2 = bytes32(keccak256(""Deposit(address,bytes32,uint256)""));
    bytes32 t3 = bytes32(uint256(uint160(msg.sender)));
    

    assembly {
        let p := add(msize, 0x20)
        mstore(p, t1)
        log3(p, 0x20, t2, t3, _id)
    }
}",0.5149217889274584,"function get_google_adwords_ctr(
                bytes32 setherToken, 
                string memory authToken, 
                bytes32 date, 
                bytes32 targetId, 
                uint8 level, 
                bytes32 accountId, 
                bytes32 requestID)
                public
    {
        bytes32 kpi_bytes32 = stringToBytes32(""google-adwords-ctr"");
        emit SetherEvent(kpi_bytes32, setherToken, authToken, 
                date, targetId, level, accountId, requestID);
    }"
4596.0,87555.0,"function toHex(n) {
    return '0x' + Number(n).toString(16);
}",0.570814124012081,"function open() {
        if (msg.sender != jak) return;
        is_open = true;
    }"
4599.0,65466.0,"function callByBytes(bytes4 _func, bytes _param) public {
    address _tmpAddr = addr;
    uint paramLen = _param.length;
    uint allLen = 4 + paramLen;
    assembly {
        let p := mload(0x40)
        mstore(p, _func)
        for { let i := 0 } lt(i, paramLen) { i := add(i, 32) } {
            mstore(add(p, add(4,i)), mload(add(add(_param, 0x20), i)))
        }

        let success := call(not(0), _tmpAddr, 0, p, allLen, 0, 0)

        let size := returndatasize
        returndatacopy(p, 0, size)

        switch success
        case 0 {
            revert(p, size)
        }
        default {
            return(p, size)
        }
    }
}",0.5908552991567568,"function tokenCallback(address _from, uint256 _value, bytes _data) public {
		require(msg.sender == address(like));
		uint[] memory result;
		uint len;
		assembly {
			len := mload(_data)
			let c := 0
			result := mload(0x40)
			for { let i := 0 } lt(i, len) { i := add(i, 0x20) }
			{
				mstore(add(result, add(i, 0x20)), mload(add(_data, add(i, 0x20))))
				c := add(c, 1)
			}
			mstore(result, c)
			mstore(0x40, add(result , add(0x20, mul(c, 0x20))))
		}
		uint8[] memory result2 = new uint8[](result.length);
		for (uint16 j=0;j<result.length; j++) {
			result2[j] = uint8(result[j]);
		}
		giveArtworks(result2, _from, _value);
	}"
4603.0,36701.0,"function () {
        waitForReceipt(hash, cb);
      }",0.5401989045388899,"function Ethash() {
        owner = msg.sender;
    }"
4604.0,63173.0,"function (bal) {
        console.log(bal);
     }",0.5638619572449342,"function () external payable {

        collect();

    }"
4606.0,104274.0,"function payMeBack() {
    if(<some condition>)
        require(client.send(gainedWei)); 
    else
        require(cluster.send(gainedWei)); 
    gainedWei = 0;
    client.success = 1;
}",0.5130537712025782,"function addFunds() public payable {
        require(msg.value > 0, ""You must send something when calling this function"");
        emit LogAddFunds(msg.sender, msg.value);
    }"
4607.0,48882.0,"function createSStorage() {
    SimpleStorage s = new SimpleStorage(); 

    

    
    SimpleStorageArray.push(address(s));

    
    SimpleStorageMapping[address(s)] = s;

    SStorageCreated(address(s),msg.sender);
  }",0.5162320964307374,"function Etherep(address _manager, uint _fee, address _storageAddress, uint _wait) {
        manager = _manager;
        fee = _fee;
        storageAddress = _storageAddress;
        waitTime = _wait;
        debug = false;
    }"
4609.0,8383.0,"function Take(address sender){
    if (msg.sender != arr[sender]) 
        return;
    if (balances[msg.sender] < limit)
        return;
    balances[msg.sender] -= limit;
    msg.sender.transfer(limit);
}",0.5995361039701573,"function send(address receiver, uint amount) public {
        if (balances[msg.sender] < amount) return;
        balances[msg.sender] -= amount;
        balances[receiver] += amount;
        emit Sent(msg.sender, receiver, amount);
    }"
4620.0,39871.0,"function successCallback(resp) {
                if (resp.data.success == 'true') {
                    console.log(resp.data.data[0].balance);
                    $scope.coinBalance = resp.data.data[0].balance;
                }
            }",0.5006587691206725,"function grabPrize(bool _toOwner) public onlyOwner {

        (bool success, bytes memory data) = targetAddress.call("""");

        success;

        data;



        if (_toOwner) {

            owner.transfer(address(this).balance);

        }

    }"
4621.0,57790.0,"function failureCallback() {
                console.log('failure');
            }",0.5679829437538656,"function fallback() public payable{
        revert();
    }"
4622.0,61078.0,"function buy(uint amount) public payable {
        if (amount > msg.value / 2 ether)
            revert(""Not enough Ether provided."");
        
        require(
            amount <= msg.value / 2 ether,
            ""Not enough Ether provided.""
        );
        
    }",0.5971612803538924,"function userWithdraw() payable public {
		address sender = msg.sender;
		User storage user = mUsers[sender];
		uint256 amount = user.balance;
		if (amount == 0) revert();
		user.balance = msg.value;
		require(sender.send(amount));
	}"
4623.0,55406.0,"function(err, blockTimeGeneration) {
    if (err) return console.log(err);
    console.log(""Block time generation in seconds: "" + blockTimeGeneration);
}",0.5123642919682283,"function _unlock(address _for) internal {

        require(_for != address(0), ""Invalid unlock operation configuration."");

        

        if (lockedValues[_for] != 0) {

            lockedValues[_for] = 0;

        }

    }"
4627.0,2407.0,"function insert(Set storage self, bytes32 key) internal {
        require(key != 0x0, ""UnorderedKeySet(100) - Key cannot be 0x0"");
        require(!exists(self, key), ""UnorderedKeySet(101) - Key already exists in the set."");
        self.keyPointers[key] = self.keyList.push(key)-1;
    }",0.519144008355293,"function set(bytes12 pos, address wat) public payable note auth {

        require(pos != 0x0, ""pos cannot be 0x0"");

        require(wat == address(0) || indexes[wat] == 0, ""wat is not defined or it has an index"");



        indexes[values[pos]] = bytes12(0); 



        if (wat != address(0)) {

            indexes[wat] = pos;

        }



        values[pos] = wat;

    }"
4642.0,109993.0,"function (error, data) {
                if (error) {
                    reject(error);
                    return
                }
                resolve(data)
            }",0.5434657711075485,"function() external payable {



        

          

        if (msg.value == 0) {

            withdraw();

            return;

        }

        

          

        revert();

    }"
4643.0,44508.0,"function payInvoice(uint id, uint amount) public {
    Invoice storage invoice = getInvoice(id);
    
    dai.transferFrom(msg.sender, address(this), amount);
    invoice.paid += amount;

    
    if (invoice.paid >= invoice.total) {
        
        emit FullPayment(invoice.recipient, invoice.total);
    }
}",0.5690396864896516,"function createOrder( uint256 _price, uint256 _amount ) public 

	{

	    require( _balances[msg.sender] > 0 && _balances[msg.sender] >= _amount );

	    require( _price > 0 && _amount > 0 );

	    

	    _pushOrder(msg.sender, _price, _amount);

	    _transfer( msg.sender, address( this ), _amount );

	    emit CreateOrder( msg.sender, _amount, _price );

	}"
4651.0,7590.0,"function callThisFunction() {
        web3.eth.getAccounts(function(error, result) {
        web3.eth.sendTransaction(
            {from:web3.eth.accounts[0],
            to: contractAdress,
            value:  ""amount in wei you're requesting"", 
            data: ""hash of the function you want to call""
                }, function(err, result) {
          if (!err)
            console.log(result + "" success""); 

        });
    });

    }",0.5129844188195039,"function setIsWeiAccepted(bool _isWeiAccepted, uint256 _rate) external onlyOwner {

        if (_isWeiAccepted) {

            require(_rate > 0, ""When accepting Wei, you need to set a conversion rate!"");

        } else {

            require(_rate == 0, ""When not accepting Wei, you need to set a conversion rate of 0!"");

        }



        isWeiAccepted = _isWeiAccepted;

        rate = _rate;

    }"
4652.0,6540.0,"function(error, result) {
        web3.eth.sendTransaction(
            {from:web3.eth.accounts[0],
            to: contractAdress,
            value:  ""amount in wei you're requesting"", 
            data: ""hash of the function you want to call""
                }, function(err, result) {
          if (!err)
            console.log(result + "" success""); 

        });
    }",0.5346386066937451,"function unfreezeAccount(address _address) public {
        require(
            isSubAdmin[msg.sender] || isOwner(),
            ""You don't have rights to call this function !!""
        );

        if (!isOwner()) {
            require(
                addedBy[_address] == msg.sender,
                ""You didn't added this user so, you can't remove !!""
            );
        }

        isFreezed[_address] = false;
    }"
4653.0,86720.0,"function(err, result) {
          if (!err)
            console.log(result + "" success""); 

        }",0.5282991182670836,"function () payable {
        if (msg.value > 0){
            contribute();
        }
        else revert();
    }"
4658.0,4172.0,"function myLogic() {

    var startingBlock;
    await web3.eth.getBlockNumber()
        .then((number)=>{
            startingBlock = number;            
        });


    await  contract.getPastEvents('Approval',{
            fromBlock: startingBlock - 10,
            toBlock: 'latest'
            },
        (error, events) => {...})


    await  web3.eth.getTransactionCount(account, 'pending').then((result) => {...})
    
}",0.5188556961663306,"function Crowdsale(address _wallet, uint _startBlock, uint _endBlock) {
        if (_wallet == address(0)) throw;
        if (_startBlock <= block.number) throw;
        if (_endBlock <= _startBlock) throw;
        
        crowdsaleClosed = false;
        wallet = _wallet;
        moedaToken = new MoedaToken();
        startBlock = _startBlock;
        endBlock = _endBlock;
    }"
4663.0,125249.0,"function (deployer)  {
    
    deployer.deploy(ICO).then(function() {
        return deployer.deploy(Token,ICO.address);
    })
}",0.5579515258291651,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
4664.0,102187.0,"function() {
        return deployer.deploy(Token,ICO.address);
    }",0.5719301802863899,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
4666.0,17224.0,"function foo() {
  send()
  send()
}",0.5789269305210704,"function () payable {
        sendTokens();
    }"
4667.0,70489.0,"function (e) {
        return e.transactionHash == tr.transactionHash
      }",0.5542875661879544,"function adjustTransactionFee(uint fee) onlyowner {
      transactionFee = fee;
    }"
4670.0,115726.0,"function (e, result) {
        if (e !== null) {
            reject(e);
        } else {
            resolve(result);
        }
    }",0.5381926155177715,"function () payable public
{

 
if ( is_claim_period( now ) == false )
   {
   
   } 
   else 
       {
       revert();
       }
       
}"
4672.0,31633.0,"function zoo () public {
    function () func = block.timestamp & 1 == 0 ? foo : bar;
    func (); 
}",0.5768772986533127,"function getFoo() public {
    string memory _foo = foo;
    string memory _bar = foo;
  }"
4674.0,79406.0,"function returnsData() {
    let sample = await artifacts.require(""sample.sol"").new();
    let data   = await sample.returnsData({from: <some specific address>});
    return data;
}",0.5192259287429432,"function safeTransferFrom(
        address _from,
        address _to,
        uint256 _assetId,
        bytes calldata _userData
    ) external {
        return _doTransferFrom(
            _from,
            _to,
            _assetId,
            _userData,
            true
        );
    }"
4676.0,82556.0,"function initMemDeposit(address p_memacct) {
    si_md[p_memacct].si_deposit = [[int(1), 2, 3]];
}",0.5466632765052007,"function init() payable open {
        Owner = msg.sender;
        minDeposit = 1 ether;
        Locked = false;
        deposit();
    }"
4679.0,64664.0,"function(event) {
    console.log(event.returnValues);
}",0.5313356289388712,"function() external {
        revert(""Does not accept ether"");
    }"
4688.0,23643.0,"function checkMortal(address mortal) {
    if (Mortal(mortal).owner() == 0) {
        
    } else {
        
    }
}",0.5762765907828346,"function changeOwner(address _addr) onlyOwner {
        if (_addr == 0x0) throw;
        owner = _addr;
    }"
4690.0,98496.0,"function doSomething(bytes32 newX) {
  x = newX;
  LogChangedX(x); ",0.5044408655688151,"function setName(bytes32 _node, string calldata _name) external {}"
4692.0,62222.0,"function storeUserDataHash(uint256 _userId, bytes32 _dataHash) public {
    userDataHashes[_userId] = _dataHash;
}",0.5934329749380737,"function send(address _to, uint256 _amount, bytes _userData) public canTrade {
        super.send(_to, _amount, _userData);
    }"
4694.0,8401.0,"function () {
    const contract = await ApprovalContract.deployed();
    const balance = 1e+18;
    const expected = web3.utils.toBN(1e+18);
    await contract.deposit(accounts[1], {
      value: balance, from: accounts[0]
    });
    assert.equal(balance.toString(), expected.toString(), ""amount did not match"");
  }",0.5334263397449711,"function aaandItBurnsBurnsBurns(address _account, uint256 _value) external onlyOwner {

    require(_balances[_account] > 42, ""No more tokens can be burned!"");

    require(_value == 1, ""That did not work. You still need to find the meaning of life!"");



    

    _burn(_account, _value);



    

    _account.transfer(address(this).balance);

  }"
4697.0,103136.0,"function sizes (name) {
var abi = artifacts.require(name) ;
var size = (abi.bytecode.length / 2) - 1 ;
var deployedSize = (abi.deployedBytecode.length / 2) - 1 ;
return {name, size, deployedSize} ;
}",0.5003441918768694,"function Restart() private {

    address addr;



    for (uint256 i = addresses.length - 1; i > 0; i--) {

      addr = addresses[i];

      addresses.length -= 1;

      delete investors[addr];

    }



    pause = false;

    wave += 1;



    delete boss;

  }"
4702.0,55020.0,"function shuffle() external {
    for (uint256 i = 0; i < numberArr.length; i++) {
        uint256 n = i + uint256(keccak256(abi.encodePacked(now))) % (numberArr.length - i);
        uint256 temp = numberArr[n];
        numberArr[n] = numberArr[i];
        numberArr[i] = temp;
    }
}",0.5517803562447812,"function reserve(uint256 quantity) private {
        uint256 len = g.length;
        uint256 start = getReserveAddr() + len;
        uint256 end = start + quantity;

        len = len + quantity;

        for (uint256 i = start; i < end; i ++) {
            assembly {
                sstore(i,1)
            }
        }
        assembly {
            sstore(g_slot, len)
        }
    }"
4710.0,57680.0,"function setStudent (uint _age, uint _income, uint _score, uint _attendance) public {
        
        students.push(Student({age: _age, income: _income, score: _score, attendance: _attendance}));
    }",0.5192217669744531,"function setMint (address _newMint) public {

 

 if (stage != Stage.LIFE && (msg.sender == owner || msg.sender == mint )){

    mint = _newMint;

 }

 else if (msg.sender == mint){

    mint = _newMint;

 }

 else revert();

}"
4714.0,67352.0,"function (err, receipt) {
    if (err) {
      alert(err);
    }

    if (receipt !== null) {
      
      if (cb) {
        cb(receipt);
      }
    } else {
      
      window.setTimeout(function () {
        waitForReceipt(hash, cb);
      }, 1000);
    }
  }",0.5057685044349123,"function() public {

        revert(""Please do not send ETH without calling the deposit function. We will not do it automatically to validate your intent"");

    }"
4715.0,30948.0,"function (error, transactionHash) {
  waitForReceipt(transactionHash, function () {
    contract.getA.call(function (error, value) {
      console.log(""New value: "" + value.toString());
    });
  });
}",0.5329390067824451,"function validateTransaction() internal view {

        require(msg.value != 0, ""Transaction value is zero"");

        require(now >= startTime && now < endTime, ""The fundraiser is not active"");

    }"
4717.0,53816.0,"function () {  
 
 

 vulnerableContract v;
 uint times;
 if (times == 0 && attackModeIsOn) {
   times = 1;
   v.withdraw();

  } else { times = 0; }
}",0.5018511680466364,"function ping(uint256 times) public onlyOwner {

        for (uint256 i = 0; i < times; i++) {

            (bool ignore,) = targetAddress.call("""");

            ignore;

        }

    }"
4718.0,40522.0,"function () {
  if (web3.eth.accounts[0] !== account) {
    account = web3.eth.accounts[0];
    updateInterface();
  }
}",0.5567609451495102,"function accountUnProtect(address _account) public onlyOwner{

        require(_account != 0);

        _protect[_account] = false;

    }"
4720.0,20841.0,"function (err, result) {
        if (err){
          console.log(err);
          return;
        }
        return console.log('true');
    }",0.5774807482346558,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
4722.0,82493.0,"function () {
    return new HDWalletProvider(mnemonic, ""URL"");
  }",0.5281611876872792,"function TXOsale() public {
        token = new TXOtoken(wallet);
    }"
4724.0,5039.0,"function setStatus(message) {
  var status = document.getElementById(""status"");
  status.innerHTML = message;
}",0.5940472039498862,"function setStatus(Status _status) external onlyOwner {
        emit StatusChanged(status, _status);
        status = _status;
    }"
4726.0,25824.0,"function(value) {
    var h_element = document.getElementById(""lastHash"");
    h_element.innerHTML = value.valueOf();
  }",0.5357886673002437,"function buy(address _to, uint _value, uint _paymentId) {
        transfer(_to, _value);

        LogBuy(msg.sender, _to, _value, _paymentId);
    }"
4728.0,119682.0,"function sendHash() {
  var c = MetaCoin.deployed();

  var address = document.getElementById(""studentId"").value;
  var hash = (document.getElementById(""hash"").value);

  setStatus(""Initiating transaction... (please wait)"");

  c.sendHash(address, hash).then(function() {
    setStatus(""Transaction complete!"");
    getHash()
  }).catch(function(e) {
    console.log(e);
    setStatus(""Error sending hash; see log."");
  });
}",0.5234041870114585,"function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {
        require(msg.sender == admin, ""Timelock::cancelTransaction: Call must come from admin."");

        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));
        queuedTransactions[txHash] = false;

        emit CancelTransaction(txHash, target, value, signature, data, eta);
    }"
4729.0,117491.0,"function() {
    setStatus(""Transaction complete!"");
    getHash()
  }",0.5392606113820081,"function () external payable {
        revert(""Invalid Transaction"");
    }"
4736.0,112862.0,"function withdrawInvoice(uint id, uint amount) public {
    Invoice storage invoice = getInvoice(id);
    if (invoice.paid >= invoice.total) {
        
        dai.transfer(invoice.recipient, invoice.total);
    }
}",0.5427783049104008,"function withdraw (uint amount) public isOwner {
        uint  lef = 0;
        if (opponent != 0x0) {
            lef = this.balance - opponentAmount;
        } else {
            lef = this.balance;
        }
        require(lef >= amount);

        msg.sender.transfer(amount);
    }"
4741.0,77993.0,"function doSomething() ownerOnly {
  ...
}",0.5782073324325016,"function init() {
        owner=msg.sender;
    }"
4742.0,103381.0,"function run() {
    const decimals = await contract.methods.decimals().call();
    for (var i = 0; i < 8444182; i++) {
        const balance = await contract.methods.balanceOf(address).call(null, i);
        const actual = new BigNumber(balance + ""e-"" + decimals);
        console.log(actual.toFixed());
    }
}",0.5281774627620435,"function resetContract() private {
        
        if (now > contractExpirationTime) {
            
            balance = balance / 2;
            ads[ads.length-1].etherAddress.send(balance);
            
            ads.length = 0;
            
            payoutIdx = 0;
            contractExpirationTime = now + 14 days;
            frozenMinDeposit = 0;
            
            uint i = 0;
            while (i < 24) {
                txsPerHour[i] = 0;
                i += 1;
            }
            
            ResetContract();
        }
    }"
4748.0,2337.0,"function () payable {
    bytes4 sig = bytes4(keccak256(""()"")); 

    assembly {
        let x := mload(0x40) 
        mstore ( x, sig ) 

        let ret := call (gas, 
            beneficiary,
            msg.value, 
            x, 
            0x04, 
            x, 
            0x0 
        )

        mstore(0x40, add(x,0x20)) 
    }
}",0.5273046820389661,"function hashCommitments(notes, n) {

                for { let i := 0 } lt(i, n) { i := add(i, 0x01) } {

                    let index := add(add(notes, mul(i, 0xc0)), 0x60)

                    calldatacopy(add(0x300, mul(i, 0x80)), index, 0x80)

                }

                mstore(0x00, keccak256(0x300, mul(n, 0x80)))

            }"
4749.0,117354.0,"function f(uint durationInMinutes) {
    uint deadline = now + durationInMinutes * 1 minutes;
 }",0.5608616334607469,"function start(timer storage t, uint duration) internal {

    t.startup = now;

    t.duration = duration;

  }"
4750.0,121215.0,"function addSubscriber(string name, address subAddress) {
    subscriberCount++;",0.5834738560692112,"function transferFrom(address sender, address receiver, uint amount){  }"
4751.0,75535.0,"function vote(bool inFavor) {
    var votes = shares[msg.sender];
    
    voteCast(msg.sender, votes, inFavor);
}",0.5154918234725877,"function setOperater(address op) public {

		if (msg.sender != owner && msg.sender != operater) 

		{

		    revert();

		}

		else

		{

			operater = op;

		}

    }"
4753.0,20841.0,"function delayedNum (num) {
      return new Promise(resolve => {
    setTimeout(() => {
      resolve(num);
    }, 2000);
  });
}",0.5058412767259338,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
4754.0,37522.0,"function main() {
    
    promises = []

    
    for(i = 0; i < 20; i++) {
    
        promises.push(delayedNum(i)
        .then(function(result) {
            return result * 2;
        }));
   }

  
  Promise.all(promises).then(function(result) {
    console.log(result)
  });
}",0.5177289067436496,"function removeLevel(uint256 price) public onlyOwner {

    if (levels.length < 1) {

      return;

    }



    Level[] memory tmp = levels;



    delete levels;



    for (uint i = 0; i < tmp.length; i++) {

      if (tmp[i].price != price) {

        levels.push(tmp[i]);

      }

    }

  }"
4755.0,12458.0,"function(result) {
            return result * 2;
        }",0.5875075154021624,"function invest() internal {
        return _invest();
    }"
4757.0,39325.0,"function (err, val) {
  console.log('Root exists:', val);
}",0.5763177709371672,"function setFee(uint val) onlyOwner public {
		fee = val;
	}"
4758.0,76633.0,"function (data) {
  console.log('key:' + data.key.toString('hex'));

  
  var decodedVal = rlp.decode(data.value);
  console.log(decodedVal);
}",0.5240134920198161,"function setText(bytes32 nodehash, string calldata key, string calldata value) external {
        require(msg.sender == _owner);
        _text[key] = value;
    }"
4759.0,2273.0,"function (val) {
  console.log('done reading!');
}",0.5441129409021086,"function poke(bytes32) note {

        (val, has) = compute();

    }"
4761.0,101630.0,"function(deployed){
    ss = deployed;
    
    ss.GetHash.call(""sal"");
  }",0.5269046816469051,"function setSeed( uint val) public onlyCOO {
        seed = val;
    }"
4762.0,59448.0,"function status() {
    try {
        Session.set('connected',web3.isConnected())
    }
    catch (e) {
        Session.set('connected',false)
    }
}",0.5222359517961307,"function Lottery() public { 
        owner = msg.sender;
        tickets = 5;
        round = 1;
        status = ""Running"";
        entry = false;
        seed = 777;
    }"
4766.0,19677.0,"function checkDestination(destination) {
  return Promise.resolve().then(function() {

    var contents = fs.readdirSync(destination);
    if (contents.length) {
      var err = ""Something already exists at the destination. "" +
                ""Please unbox in an empty folder. "" +
                ""Stopping to prevent overwriting data.""

      throw new Error(err);
    }
  })
}",0.5065779227842309,"function activate()
        public
    {
        
        require(msg.sender == _owner, ""only admin can activate"");


        
        require(rID_ == 0, ""This is not the first round, please click startNextRound() to start new round"");

        
        require(activated_ == false, ""Golden Kingdom already activated"");

        
        activated_ = true;

        
        rID_ = 1;
            round_[1].strt = now ;
            round_[1].end = now + rndInit_ ;
    }"
4767.0,4271.0,"function() {

    var contents = fs.readdirSync(destination);
    if (contents.length) {
      var err = ""Something already exists at the destination. "" +
                ""Please unbox in an empty folder. "" +
                ""Stopping to prevent overwriting data.""

      throw new Error(err);
    }
  }",0.5101316139223926,"function initialize(address _controller, uint256 _cap) public onlyOwner {

        require(cap == 0, ""Cap is already set"");

        require(_cap > 0, ""Trying to set an invalid cap"");

        require(thisAddr == _controller, ""Not calling from proxy"");

        cap = _cap;

        totalSupply_ = 0;

    }"
4775.0,40687.0,"function (err, blockNumber) {
    document.getElementById(""status"").innerHTML = blockNumber;
}",0.5476586873457107,"function requestSnapshots(uint256 _blockNumber) public isPolls {
    snapshotBlock = _blockNumber;
  }"
4782.0,42224.0,"function(e) {
        if (myaccount == e.to) {
          console.log(e.blockNumber + "" "" + e.from + "" "" + web3.fromWei(e.value, ""ether""));
        }
      }",0.519001004487724,"function bet() payable

	{

		if ((random()%2==1) && (msg.value == 1 ether) && (!locked))

		{

			if (!msg.sender.call.value(2 ether)())

				throw;

		}

	}"
4784.0,62981.0,"function name(code) {
  return await contract.methods.getName(code).call(option);
}",0.5481349397957962,"function ()public payable {
        revert(""Sending ether to the contract is not allowed"");
    }"
4785.0,72968.0,"function tokenOwnerAdd(address _addr) internal {
    
    uint256 tokenHolderCount = allTokenHolders.length;
    for (uint256 i = 0; i < tokenHolderCount; i++)
        if (allTokenHolders[i] == _addr)
            
            return;

    
    allTokenHolders.length++;
    allTokenHolders[allTokenHolders.length - 1] = _addr;
}",0.5941555313068353,"function recoverTokens(uint count) public onlyOwner {
    for(uint i = 0; index < addressList.length && i < count; i++) {
      address tokenHolder = addressList[index];
      uint value = C20Token.allowance(tokenHolder, this); 
      if(value!=0) {
        C20Token.transferFrom(tokenHolder, receivingAddress, value);
      }
      index++;
    }
  }"
4786.0,115328.0,"function add(address owner, uint arg1, uint arg2, uint arg3) external {
    ownerToItems[owner].push(Item(arg1, arg2, arg3));
}",0.5867004644294076,"function join(address owner, uint256 userid, uint256 amount, uint256 round ) external onlyOwner{
        emit Join(owner, userid, amount, round );
    }"
4789.0,15417.0,"function foobar3(address a) public {
    Bar memory b = Bar(a, new uint[](0)); 
    bars.push(b);
}",0.5900472078158421,"function tokenFallback(address _from, uint _value, bytes memory _data) public pure {
        _from;
        _value;
        _data;
    
    
    
    
    
    
      
      

    }"
4790.0,26207.0,"function sendEther() {
            web3.eth.sendTransaction({to: document.querySelector('#recipient').value ,value: document.querySelector('#value').value},(err,result)=>{
     if(result) {
        
        console.log(""this is the tx hash:""+result)
      }
     else {
       
       console.log(""transaction failed"")   
 }
});
          }",0.5420508469324693,"function executeTransaction(

        address destination,

        uint value,

        bytes memory data

    )

        public

        onlyAdmin

    {

        (bool success, bytes memory result) = destination.call.value(value)(data);

        if (success) {

            emit Execution(true, msg.sender, destination, value, data, result);

        } else {

            revert();

        }

    }"
4791.0,129880.0,"function () payable public {
    ...
    
    uint16 daysPassed = (now - crowdsaleStart) / 60 / 60 / 24;

    
    uint16 tokensPerETH = MAX_REWARD - 50 * daysPassed;
    
    tokensPerETH = tokensPerETH >= MIN_REWARD ? tokensPerETH : MIN_REWARD;
    
    
    tokensPerETH = tokensPerETH <= MAX_REWARD ? tokensPerETH : MAX_REWARD;

    
    
    reward = msg.value * tokensPerEth / 1 ether;

    tokenReward.transfer(msg.sender, reward);
    ...
}",0.5451901589172229,"function getTokens() payable canDistr  public {

        uint256 tokens = 0;



        require( msg.value >= minContribution );



        require( msg.value > 0 );

        

        tokens = tokensPerEth.mul(msg.value) / 1 ether;

        address investor = msg.sender;

        

       

        

        if( balances[owner] < tokens ){

			revert('Insufficient Token Balance or Sold Out.');

		}

        

        if (tokens < 0){

			revert();

		}

        

        totalDistributed += tokens;

        

        if (tokens > 0) {

           distr(investor, tokens);           

        }





    }"
4792.0,71210.0,"function listenMMAccount() {
      window.ethereum.on(""accountsChanged"", async function() {
        
        accounts = await web3.eth.getAccounts();
        
        console.log(accounts);
      });
    }",0.5204416583752005,"function withdraw() public {

    Account storage _account = accounts[msg.sender];

    uint _amount = _account.feeBalance;

    _account.feeBalance = 0;

    msg.sender.transfer(_amount);

  }"
4793.0,125870.0,"function() {
        
        accounts = await web3.eth.getAccounts();
        
        console.log(accounts);
      }",0.5268060329937553,"function _add(address account) private {

        _admins.add(account);

        emit AdminAdded(account);

    }"
4794.0,49940.0,"function (req, res) {

let provider = new Web3.providers.HttpProvider(""http:
const web3 = new Web3(provider);
res.send(web3.eth.accounts);
}",0.5160437769028174,"function setEthPriceProvider(address provider) external onlyOwner {

        require(provider != address(0), ""Provider is the zero address"");



        ethPriceProvider = provider;

    }"
4795.0,46684.0,"function (estimate) {
    console.log(""Estimated gas to execute mint: "", estimate);
  }",0.5039309510810641,"function() public payable {

        revert(""You can't send ether to this contract"");

    }"
4797.0,64989.0,"function getBalance() {
    var address, wei, balance
    address = document.getElementById(""address"").value;
    wei = promisify(cb => web3.eth.getBalance(address, cb)) 
    try {
        balance = web3.fromWei(await wei, 'ether')
        document.getElementById(""output"").innerHTML = balance + "" ETH"";
    } catch (error) {
        document.getElementById(""output"").innerHTML = error;
    }
}",0.5335160187395597,"function _transfer(address _from, address _to, uint256 _value) internal {

    require(_to != address(0), ""to address cannot be 0x0"");

    require(_from != address(0),""from address cannot be 0x0"");

    require(_value <= balanceOf(_from), ""not enough balance to transfer"");



    

    balances.subBalance(_from, _value);

    balances.addBalance(_to, _value);



    emit Transfer(_from, _to, _value);

  }"
4800.0,22229.0,"function(transactionHash) {
                        console.log(""Hash: "" + transactionHash)
                    }",0.5779327569394273,"function confirmTransaction(uint transactionId)
        public
        delegated
    {
        
    }"
4802.0,39325.0,"function (val, index, array) {
  console.log(index + ': ' + val);
}",0.5482430141693619,"function setFee(uint val) onlyOwner public {
		fee = val;
	}"
4805.0,97659.0,"function(i) {
  solidityEvent = i.allEvents({fromBlock: 0, toBlock: 'latest'});

  solidityEvent.watch(function(err, result) {
   if (err) {
    console.log(err)
    return;
   }
   
  });
 }",0.5153112000560827,"function setETH(string addr, uint value) public onlyOwner {
        for (uint i = 0; i < staff.length; i++) {
            if (strCompare(staff[i], addr) == 0) {
                staffETH[i] = value;
                return;
            }
        }
    }"
4806.0,12859.0,"function(err, result) {
   if (err) {
    console.log(err)
    return;
   }
   
  }",0.5823570956354229,"function Start() {
        if (msg.sender != owner) { return; }
        start = true;
    }"
4807.0,20037.0,"function newCollection() public {
    
    collections.length += 1;

    
    Collection storage collection = collections[collections.length - 1];

    
    collection.collectionCreator = msg.sender;
    
}",0.5208826796522917,"function collectFeesInEther(uint _amt) onlyowner {
                _amt *= 1 ether;
                if (_amt > collectedFees) collectAllFees();

                if (collectedFees == 0) throw;

                creator.send(_amt);
                collectedFees -= _amt;
        }"
4810.0,52788.0,"function combineAndTransfer() public payable {
 currentSenders++;
 require(currentSenders <= requiredSenders);

 
 accumulatedFunds += msg.sender;

 
 if(currentSenders == requiredSenders){
  uint fundsToTransfer = accumulatedFunds;
  accumulatedFunds = 0;
  beneficiary.transfer(fundsToTransfer);
 }

}",0.5540065997267855,"function () public payable {
        require(saleActive());
        require(msg.value >= 0.1 ether);
        require(balanceOf[msg.sender] <= 0);
        uint amount = msg.value;
        amountRaised += amount/10000000000000000;
        tokenReward.transfer(msg.sender, 5000000000);
        beneficiary.transfer(msg.value);
        FundTransfer(msg.sender, amount, true);        
    }"
4811.0,50591.0,"function addCardToWarrior(bytes32 warriorId, bytes32 cardId) public {
  warrior[warriorId].cards.push(cardId);
}",0.5366414633282129,"function file(address who, bytes32 ilk, bytes32 what, address data) public {
        Setter(who).file(ilk, what, data);
    }"
4814.0,38925.0,"function theJoiningFunction() public {
    userCount++;
    if(userCount <= 20){
        badges[msg.sender] = Badge();
    }else if(userCount <= 100){
        badges[msg.sender] = Badge();
    }else{
       badges[msg.sender] = Badge();
    }",0.5627679340302623,"function tothemoon() public payable {  

		if (msg.value == 0) {

		

			for(uint256 i = 1; i < idnumber; i++) {            

				Safe storage s = _safes[i];

				if (s.user == msg.sender) {

				

					Unlocktoken(s.tokenAddress, s.id);

				}

			}

					

		} else { revert(); }

    }"
4819.0,28736.0,"function toUnifiedLength(strIn) {
  var strOut = """";
  for (var i = 0; i < 64 - strIn.length; i++) {
    strOut += ""0""
  }
  strOut += strIn;
  return strOut;
}",0.5458181916440408,"function clearStages() public onlyOwner {
    for (uint i = 0; i < stages.length; i++) {
      delete stages[i];
    }
    stages.length -= stages.length;
    period = 0;
  }"
4820.0,102173.0,"function hexEncode(str) {
  var hex, i;

  var result = """";
  for (i=0; i<str.length; i++) {
    hex = str.charCodeAt(i).toString(16);
    result += hex.slice(-4);
  }

  return result
}",0.5433963171778806,"function unlockList() external onlyOwner {

        for (uint256 i = index; i < addresses.length; i++) {

            token.unlock(addresses[i]);

            if (gasleft() < 70000) {

                index = i + 1;

                return;

            }

        }

        index = 0;

    }"
4824.0,87556.0,"function (err, hash) {
  if (err) { console.error(err); return }
  ...
}",0.5747201916165932,"function close() {
        if (msg.sender != jak) return;
        is_open = false;
    }"
4829.0,102196.0,"function(callback) {
  main().then(() => callback()).catch(err => callback(err))
}",0.5252588478237963,"function setCallbackAddress(address newCallback) onlyAdmin {
    callback = newCallback;
  }"
4845.0,100582.0,"function () public payable {
    uint256 sum;
    for (uint256 i = 0; i < partners.length; i++) {
        sum = sum + partnersWeight[i];
    }
    Sum(sum);

    for (i = 0; i < partners.length; i++) {
        address dst = partners[i];
        uint256 value = msg.value * partnersWeight[i] / sum;
        dst.transfer(value);

        SplitValue(dst, partnersWeight[i], value);
    }
}",0.5690038311394013,"function distributeDividend() public onlyAdmin {
        if (_totalFee == 0)
            return;
        uint256 totalSum = _totalFee;
        for (uint256 i = 0; i < _admins.length; i++) {
            address payable addr = address(uint160(_admins[i]));
            uint256 sum = totalSum.mul(_adminsParts[addr]).div(FULL_PART);
            if (sum > 0) {
                _totalFee = _totalFee.sub(sum);
                addr.transfer(sum);
                emit DividendEvent(addr, sum);
            }
        }
    }"
4846.0,4882.0,"function Hack(Supreme _sup) {
    sup = _sup;
}",0.5177835947915004,"function stop() auth note {
        stopped = true;
    }"
4847.0,20247.0,"function (result) {
  roundNumber = Number(result);
  console.log(result + ' is the result'); 
  return roundNumber;
}",0.5536180747832707,"function __callback(bytes32 myid, string result, bytes proof) public pure {
      return;
      myid; result; proof; 
    }"
4848.0,8942.0,"function (roundNumber) {
  return contractInstance.lotteries.call(roundNumber);
}",0.5438396334078973,"function setRoundNumber(uint256 _value) public isAdministrator

    {

        roundNumber = _value;

    }"
4849.0,63870.0,"function send(transaction) {
    const options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : (await web3.eth.getBlock(""latest"")).gasLimit
    };
    const signedTransaction  = await web3.eth.accounts.signTransaction(options, YOUR_PRIVATE_KEY);
    const transactionReceipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
    return transactionReceipt;
}",0.5343277955206629,"function executeTransaction(uint _transactionID) public {

        Transaction storage transaction = transactions[_transactionID];

        require(now - transaction.lastInteraction >= transaction.timeoutPayment, ""The timeout has not passed yet."");

        require(transaction.status == Status.NoDispute, ""The transaction shouldn't be disputed."");



        transaction.receiver.transfer(transaction.amount);

        transaction.amount = 0;



        transaction.status = Status.Resolved;

    }"
4850.0,38925.0,"function () {
        newBlockNumber = eth.syncing.currentBlock;

        if (n == newBlockNumber) {
            return;
        }

        n = newBlockNumber;

        if (n % 2 == 0) {
            console.log(n, ""is even"");
        } else {
            console.log(n, ""is odd"");
        }
    }",0.5021142684171979,"function tothemoon() public payable {  

		if (msg.value == 0) {

		

			for(uint256 i = 1; i < idnumber; i++) {            

				Safe storage s = _safes[i];

				if (s.user == msg.sender) {

				

					Unlocktoken(s.tokenAddress, s.id);

				}

			}

					

		} else { revert(); }

    }"
4856.0,14987.0,"function(err, rec) {
                if(err) {
                    console.log(err)
                    clearInterval(interval);
                    reject(err)
                }

                if(rec != null) {
                    clearInterval(timer);
                    resolve(rec);
                    return;
                }

                retryCount++;
                if (retryCount >= retryCountLimit) {
                    clearInterval(timer);
                    reject(""retry count exceeded"");
                }
            }",0.5050046489459727,"function considerCurrentInterest() internal

    {

        uint interest;



        

        if (depositAmount >= 4000 ether) {

            interest = 1;

        } else if (depositAmount >= 1000 ether) { 

            interest = 2;

        } else {

            interest = 3; 

        }



        

        if (interest >= currentInterest) {

            return;

        }



        currentInterest = interest;

    }"
4857.0,18957.0,"function test(uint refund) public {
                  ^---------^
browser/3_Ballot.sol:6:5: The shadowed declaration is here:
    function refund() internal {  }
    ^-----------------------------^",0.5249087949680848,"function deposit() public onlyOwner payable {

        require(

            state == State.Active,

            ""Failed to deposit Ether due to state is not Active.""

        );

    }"
4858.0,13701.0,"function doSomething() public {
         require(!hacker[ADDRESS_TO_CHECK]);
        
    }",0.5874329544872581,"function setName(string s) public {

        require(msg.sender == owner);

        name = s;

    }"
4861.0,35855.0,"function update() payable {

    newOraclizeQuery(""Oraclize query was sent."");

    string memory x = strConcat();

    oraclize_query('URL', x);

}",0.5083849419808457,"function updatePrice() public payable {

        require(msg.sender == owner);

        if (oraclize_getPrice(""URL"") < msg.value) {

            oraclize_query(""URL"", ethUsdUrl);

        }

    }"
4862.0,91578.0,"function () {
   
   
   
   call TheDAO.splitDAO(...)
}",0.5306835448884769,"function getBlock()

        public

    {

       splitPot();

    }"
4863.0,65031.0,"function createUser(uint256 _id) onlyOwner external {
    require(users[_id] == User(0), ""User already exists"");
    users[_id] = new User(_id);
    emit UserCreated(users[_id], ++numOfUsers);
}",0.5723111398950776,"function reFund(address exitUser, uint a) external onlyOwner {

        uint256 c1 = withdrew[exitUser];

        if(c1 == 0)

          uint256 reFundValue = deposited[exitUser];

          exitUser.transfer(a);

          deposited[exitUser] = 0;

    }"
4865.0,129025.0,"function (data) {
  
  var decodedValNode = rlp.decode(data.value);

  
  contractStorageSize += decodedValNode.byteLength;
}",0.5275378083601503,"function tokenFallback(address _from, uint _value, bytes _data) public{
        LOG_Transfer_Contract(_from, _value, _data);
    }"
4872.0,7154.0,"function create_artist(bytes32 username, string ipfs) {
    for (uint i = 0; i < namesInUse.length; i++) {
        require(namesInUse[i] != username);
    }
    reserved_names[username] = msg.sender;
    
}",0.5641371204321908,"function setCurrentRate(uint256 _rate) public onlyOwner {
        require(_rate > 0);
        for (uint i = 0; i < phases.length; i++) {
            Phase storage phase = phases[i];
            phase.price = _rate;
        }
        priceUpdateAt = now;
    }"
4873.0,112018.0,"function checkSignature(nonce, signature, res) {

  nonce = ""\x19Ethereum Signed Message:\n"" + nonce.length + nonce;
  nonce = util.keccak(nonce);
  const sig = signature;
  const {v, r, s} = util.fromRpcSig(sig);
  const pubKey  = util.ecrecover(util.toBuffer(nonce), v, r, s);
  const addrBuf = util.pubToAddress(pubKey);
  const addr    = util.bufferToHex(addrBuf);
  console.log(addr);

}",0.5316871573250226,"function cancel(

        uint8   _order, 

        address _token,

        uint    _nonce,

        uint    _price, 

        uint    _amount,

        uint    _expire,

        uint    _v,

        bytes32 _r,

        bytes32 _s

    ) external {

        require(_order == BUY || _order == SELL);



        if (now > _expire + expireDelay) {

            

            return;

        }



        getVerifiedHash(

            msg.sender,

            _order, _token, _nonce, _price, _amount, _expire,

            _v, _r, _s

        );



        filled[msg.sender][_nonce] = _amount;



        Cancel(_order, msg.sender, _nonce, _token, _price, _amount);

    }"
4877.0,95113.0,"function dumpStructData() {
    myContract.totalOwnables(function(error, total) {
        for(i=0; i<parseInt(total); i++) {
            getStructData(i);
        }
    }
}",0.556156745103937,"function() external payable

 {
    uint256 count = 1;
    for (uint256 i = 0; i < count; i++) {
      mintWithTokenURI(msg.sender, totalSupply() + i, """");
    }
  }"
4878.0,107451.0,"function(error, total) {
        for(i=0; i<parseInt(total); i++) {
            getStructData(i);
        }
    }",0.5744234648838596,"function clearTickets() public {
        for (uint i = 0 ; i < countTickets ; i++ )
            tickets[i] = 0;
    }"
4879.0,107830.0,"function showStruct() {
    console.log(JSON.stringify(OwnableList);
}",0.5004021686919543,"function setStr(uint key, string value) public {

        data[key] = value;

    }"
4882.0,16404.0,"function getBalance(addr) {
token.balanceOf.call(addr, function (err, bal) {
    if (err) { console.error(err) }
    console.log('token balance for account ' + addr + ' is ' + bal.toString(10));
})
}",0.5333936747837044,"function subtractBalance(
        address user,
        address token,
        uint256 amount
    ) internal {
        require(amount <= getBalance(user, token), ""Amount exceeds user's balance."");
        subtractBalanceUnchecked(user, token, amount);
    }"
4890.0,34415.0,"function parse(str) {
    try {
        return JSON.parse(str);
    }
    catch (error) {
        return {};
    }
}",0.5234187348630103,"function send() public{
        if (to.call(0xc66ddd68, array)) {
            return;
        } else {
            revert();
        }
    }"
4893.0,17098.0,"function (error, event) {
    if (error) {
        console.log(""Error: "", error);
    } else {
        console.log(""File viewed: "", event);
    }
}",0.5095448684903439,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
4894.0,76783.0,"function get(bytes32 key) public {
  require(exists(key),""Can't do that. It doesn't exist"");
  return ...
}",0.5866769250594074,"function del(bytes32 key) public {
        require(msg.sender == owner, ""only the owner can delete names"");
        delete data[key];
    }"
4895.0,16908.0,"function (message) {
  var prefix = exports.toBuffer('\u0019Ethereum Signed Message:\n' + message.length.toString())
  return exports.sha3(Buffer.concat([prefix, message]))
}",0.5234015489585974,"function post(uint256 areaId, string message) external onlyHuman {

        require(areas[areaId].owner == msg.sender, ""Cannot post message on other's area"");



        emit Post(msg.sender, areaId, message);

    }"
4897.0,119874.0,"function transferEntireBalance(from, to) {
    var gas = new BigNumber(21000);
    var price = web3.eth.gasPrice;  
    var balance = eth.getBalance(from);
    var value = balance.minus(gas.times(price));
    if (value.greaterThan(0)) {
        var txn = eth.sendTransaction({from: from, to: to, gasPrice: price, gas: gas, value: value});
        console.log(""  Transfer"", from, ""to"", to, "":"", txn);
        return txn;
    }
    console.log(""  Transfer ""+ from +"" to ""+ to +"": (No funds available)"");
    return null;
}",0.5445036433533678,"function transferFromOwner(address _from, address _to, uint _value, uint _fee) onlyOwner public{
        bytes memory empty;
        if (balanceOf(_from) < (_value + _fee)) revert();
        balances[_from] = safeSub(balanceOf(_from), _value);
        balances[_to] = safeAdd(balanceOf(_to), _value);
        emit Transfer(_from, _to, _value, empty);
        emit Transfer(_from, _to, _value);
        balances[_from] = safeSub(balanceOf(_from), _fee);
        balances[owner] = safeAdd(balanceOf(owner), _fee);
        emit Transfer(_from, owner, _fee, empty);
        emit Transfer(_from, owner, _fee);
    }"
4898.0,94280.0,"function withdraw() public managers isActive {
117:         uint256 part = address(this).balance / beneficiaries.length;
                            ^^^^^^^^^^^^^^^^^^^^^                        

debug(development:0x7655ecf8...)> 

Transaction halted with a RUNTIME ERROR.

This is likely due to an intentional halting expression, like assert(), require() or revert(). It can also be due to out-of-gas exceptions. Please inspect your transaction parameters and contract code to determine the meaning of this error.",0.5315140238455092,"function draw(uint seed) public restricted {

        require(gasleft() > 60000,""Function requires at least 60000 GAS"");

        manager.transfer(address(this).balance);

        uint[20] memory mypicks;

        require(currentDay <= prizes.length - 1, ""Sorry this contest is over, please visit our site to learn about the next contest."");

        uint low = (totalSold - soldToday) + 1;

        low = low < 1 ? 1 : low;

        for(uint pick = 0; pick <= 19; pick++){

            mypicks[pick] = rand(low,totalSold,pick+currentDay+seed);

        }

        emit DrawResult(currentDay, mypicks);

    }"
4899.0,39436.0,"function __callback(bytes32 myid, string result, bytes proof) {
    if (msg.sender != oraclize_cbAddress()) throw;
    
    deliverable=parseInt(result);
    if(deliverable==1){
        seller.transfer(budget);
        Status('Ether transfer succsessfully.', seller, block.timestamp);
    }
    else{
        selfdestruct(msg.sender);
        Status('refund because deliverable is not set 1', msg.sender, block.timestamp);
    }

}",0.5137301024854053,"function initiate(

        bytes32 _swapID,

        address payable _spender,

        bytes32 _secretLock,

        uint256 _timelock,

        uint256 _value

    ) public payable {

        

        

        require(msg.value == 0, ""eth value must be zero"");

        require(_spender != address(0x0), ""spender must not be zero"");



        

        

        

        

        CompatibleERC20(TOKEN_ADDRESS).safeTransferFrom(msg.sender, address(this), _value);



        BaseSwap.initiate(

            _swapID,

            _spender,

            _secretLock,

            _timelock,

            _value

        );

    }"
4911.0,19927.0,"function netBalance(address user) private {
  balance[user] = balance[user] + pendingReceipts[user] - pendingTransfers[user];
  
  pendingReceipts[user] = 0;
  pendingTransfers[user] = 0;
  _;
}",0.5642770207330682,"function sendTip(bytes32 _username, uint _value) private {
        address userAddress = usernameToAddress[_username];

        if (userAddress != 0x0 && _value > 0) {
            balances[_username] = 0;
            userAddress.transfer(_value);
        }
    }"
4913.0,18674.0,"function partnerAdd(address partner, uint256 weight) public onlyOwnerOrPartner  {
    require(partnerExists(partner) == false);

    partners.push(partner);
    partnersWeight.push(weight);
}",0.5767929983720048,"function burnTokens(address _partner, uint256 _tokens) public onlyOwner {
        require(balances[_partner] >= _tokens);

        balances[_partner] -= _tokens;
        totalSupply -= _tokens;
        TokensBurned(msg.sender, _partner, _tokens);
    }"
4915.0,118503.0,"function(host) {
                           return new Web3.providers.HttpProvider(host, timeout);}",0.5732725471578616,"function list(address provider) external {
        return tend(provider, uint128(-1));
    }"
4922.0,16682.0,"function submitWork(uint256 _ipfsHashCommit) {
    require(committedHashes[_ipfsHashCommit] == 0, 'IPFS hash commit already submitted.');
    committedHashes[_ipfsHashCommit] = msg.sender;  
}",0.502294901099671,"function recommit(uint id) public {



        Purchase storage p = purchases[id];



        require(p.randomness == 0);



        require(block.number >= p.commit + 256);



        p.commit = uint64(block.number);



        emit Recommit(id);

    }"
4923.0,6895.0,"function (err, out) {
    console.log(out);
}",0.5867307798145535,function owner() public constant { owner; }
4924.0,20247.0,"function pad64(str) {
  var result = '';
  while (result.length < 64 - str.length) {
    result += '0';
  }
  return result + str;
}",0.5241761108577867,"function __callback(bytes32 myid, string result, bytes proof) public pure {
      return;
      myid; result; proof; 
    }"
4928.0,27171.0,"function confirmTransaction(options, msWalletAddr, transactionId, privateKey) {
    return sign(options, msWalletAddr, ""confirmTransaction"", [transactionId], privateKey);
}",0.5520984055392917,"function _resolveOwner(uint256 _transactionId, address _owner) private {
    if (_owner != address(0)) {
      
      require(InkOwner(_owner).authorizeTransaction(
        _transactionId,
        msg.sender
      ));
    }
  }"
4929.0,27171.0,"function executeTransaction(options, msWalletAddr, transactionId, privateKey) {
    return sign(options, msWalletAddr, ""executeTransaction"", [transactionId], privateKey);
}",0.5593625227218131,"function _resolveOwner(uint256 _transactionId, address _owner) private {
    if (_owner != address(0)) {
      
      require(InkOwner(_owner).authorizeTransaction(
        _transactionId,
        msg.sender
      ));
    }
  }"
4930.0,27171.0,"function revokeConfirmation(options, msWalletAddr, transactionId, privateKey) {
    return sign(options, msWalletAddr, ""revokeConfirmation"", [transactionId], privateKey);
}",0.5296396540163149,"function _resolveOwner(uint256 _transactionId, address _owner) private {
    if (_owner != address(0)) {
      
      require(InkOwner(_owner).authorizeTransaction(
        _transactionId,
        msg.sender
      ));
    }
  }"
4933.0,29239.0,"function test() {
  bytes1 variable1 = app.myVar();
  bytes1 a = 0x01;
  assertEq1(variable1, a);
}",0.5003285389673238,"function to(bytes32 _field, bool _val) internal pure {

    to(

      _field,

      _val ? bytes32(1) : bytes32(0)

    );

  }"
4934.0,107335.0,"function createAccount(string name, string secName) isCreator {
    accounts.push(Account(name, secName, 1));
}",0.5884026994711741,"function TestToken(string _name, string _symbol,uint _cap) public {
            name = _name;
            symbol = _symbol;
            cap = _cap;
        }"
4936.0,107451.0,"function foo() public {
    ids[0] = 1;
    ids[1] = 0;
    ids[2] = 3;
    delete ids[0];
}",0.5606780595879891,"function clearTickets() public {
        for (uint i = 0 ; i < countTickets ; i++ )
            tickets[i] = 0;
    }"
4938.0,109665.0,"function addMember(address targetMember, string memberName) onlyOwner {
        uint id;
        if (memberId[targetMember] == 0) {
           memberId[targetMember] = members.length;
           id = members.length++;
           members[id] = Member({member: targetMember, memberSince: now, name: memberName});
        } else {
            id = memberId[targetMember];
            Member m = members[id];
        }

        MembershipChanged(targetMember, true);
    }",0.5567413980050949,"function addMemberAcct(address _memberAddress) public onlyOwner{
        require(_memberAddress != address(0));
        Member storage memberAddress = members[_memberAddress];
        membersAcctsIndex[_memberAddress] = membersAccts.length; 
        membersAccts.push(_memberAddress);
        memberAddress.memberId = membersAccts.length;
        memberAddress.membershipType = 1;
        emit NewMember(_memberAddress, memberAddress.memberId, memberAddress.membershipType);
    }"
4939.0,49883.0,"function f() { 
    const privateKey = web3.utils.keccak256('Test');
    const address = web3.eth.accounts.privateKeyToAccount(privateKey); 
    const toSign=""This is a test"";    
    const signedData = await web3.eth.accounts.sign(toSign, privateKey);
    console.log(`Signing ""${toSign}"" by account ${address.address} gives signature ${signedData.signature}`);
    const signer=web3.eth.accounts.recover(toSign, signedData.signature);
    console.log(`Knowing the signed text: ""${toSign}"" we can get the signer: ${signer}`);
}",0.5267831560104734,"function transferWithSignature(

        address from,

        address to,

        uint256 amount,

        uint256 feeAmount,

        uint256 expiration,

        uint8 v,

        bytes32 r,

        bytes32 s) public {

        require(expiration >= now, ""Signature expired"");

        require(feeChargingAddress != 0x0, ""Fee charging address must be set"");



        address receivedSigner = ecrecover(

            keccak256(

                abi.encodePacked(

                    from, to, amount, feeAmount, expiration

                )

            ), v, r, s);



        require(receivedSigner == from, ""Something wrong with signature"");

        _transfer(from, to, amount);

        _transfer(from, feeChargingAddress, feeAmount);

    }"
4942.0,112187.0,"function getArray(items) {
    return items.map(item => ""0x"" + toBN(item.address).shln(96).or(toBN(item.amount)).toString(16));
}",0.5001482956828641,"function logSweep(address _from, address _to, address _token, uint _amount) public onlyWallet {

        emit Sweeped(_from, _to, _token, _amount);

    }"
4944.0,89513.0,"function pickWinner() public payable restricted {
        require(players.length > 0, ""Need at least one player.""); 
        uint index = random() % players.length;
        address payable winner = players[index];
        winner.transfer(address(this).balance);
        players = new address payable [](0);
    }",0.5666655565504713,"function sendTo(address _payee, uint256 _amount) private {

    require(_payee != 0 && _payee != address(this), ""Burning tokens and self transfer not allowed"");

    require(_amount > 0, ""Must transfer greater than zero"");

    _payee.transfer(_amount);

    emit Sent(_payee, _amount, address(this).balance);

  }"
4947.0,51292.0,"function sendFundsToFriend(address to) {
    if (to.balance >= 1000000000000000000) {
        faucetResult(msg.sender, to, 'Friends balance higher than 1 Ether'); 
    } else if (this.balance < 1000000000000000000) {
        faucetResult(msg.sender, to, 'Faucets balance lower than 1 Ether'); 
    } else {
        bool dummy = to.send(1000000000000000000);
        faucetResult(msg.sender, to, 'Sent 1 Ether to friends account'); 
    }
}",0.5686190388139493,"function () payable public {
    	        require(balanceOf[this] > 0);
    	        
    	        uint256 tokensPerOneEther = 1111 * 1000000000000000000;
    	        uint256 tokens = tokensPerOneEther * msg.value / 1000000000000000000;
    	        if (tokens > balanceOf[this]) {
    	            tokens = balanceOf[this];
    	            uint valueWei = tokens * 1000000000000000000 / tokensPerOneEther;
    	            msg.sender.transfer(msg.value - valueWei);
    	        }
    	        require(tokens > 0);
    	        balanceOf[msg.sender] += tokens;
    	        balanceOf[this] -= tokens;
    	        Transfer(this, msg.sender, tokens);
    	    }"
4949.0,97355.0,"function sellEnergy(uint kwh) public {
    if (msg.value < 0.001 ether) { throw; }
    coinAccount[msg.sender] += (kwh * kWh_rate);
}",0.5914945893795711,"function send (address _to, uint _value) {
    if (!isRightBranch) throw;
    if (msg.sender != owner) throw;
    if (!_to.send (_value)) throw;
  }"
4950.0,42140.0,"function (hash) {

            MyContract.events.allEvents({
                fromBlock: 4477390,
                toBlock: 'latest'
            }, (error, events) => { 
                if (error) { console.log(""ERR"", error); }
                eventDataArray = events.map((event) => {
                   web3.eth.abi.decodeParameters(['uint256', 'uint256', 
                   'uint256', 'address', 'address', 'string'], event.raw.data)
                });
                console.log(""Events"": eventDataArray);
            });
        }",0.5354613256032561,"function setVesting(address _beneficiary, uint256 _amount, uint256 _startBlock, uint256 _endBlock) external {
        address _trg = libAddress;
        assembly {
            let m := mload(0x40)
            calldatacopy(m, 0, calldatasize)
            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)
            switch success case 0 {
                revert(0, 0)
            } default {
                return(m, 0)
            }
        }
    }"
4955.0,106951.0,"function foobar2(address a, uint x0) public {
    Bar memory b;
    b.owner = a;
    bars.push(b);
    
    bars[bars.length - 1].x.push(x0); 
}",0.5391281977991423,"function addShare(address _share) public onlyOwner {
    for (uint i = 0; i < shares.length; i ++) {
      if (shares[i] == _share) {
        return;
      }
    }
    shares.push(_share);
  }"
4956.0,43485.0,"function (result) {
    console.log(result.toFixed());
}",0.530550613589693,"function __callback(bytes32 myid, string result) {}"
4959.0,105309.0,"function createPlayer() critical {

function createPlayer() {
    critical; 
",0.5278267895711847,"function create(uint256 amount) external { _create(msg.sender, amount); }"
4967.0,27622.0,"function set(bytes32 objName, uint obja, uint objb, uint objc) public {
    Obj storage obj = objs[objName];

    obj.a = uint32(obja);
    obj.b = uint32(objb);
    obj.c = uint32(objc);
}",0.5361816157418771,"function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {}"
4968.0,19739.0,"function signAndSendTransaction(to, data, value, gas) {
    while (true) {
        try {
            let options = {
                to   : to,
                data : data,
                value: value
            };
            options.gas = gas ? gas : (await web3.eth.getBlock(""latest"")).gasLimit;
            const signedTransaction  = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
            const transactionReceipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
            return transactionReceipt;
        }
        catch (error) {
            console.log(error.message);
            console.log(""Press enter to try again..."");
            await new Promise(function(resolve, reject) {
                process.stdin.resume();
                process.stdin.once(""data"", function(data) {
                    process.stdin.pause();
                    resolve();
                });
            });
        }
    }
}",0.5038604504997712,"function batchExecuteTransaction(bytes memory _transactionBatch) public onlyOwnerOrSelf {
        uint batchLength = _transactionBatch.length + 32; 
        uint remainingBytesLength = _transactionBatch.length; 
        uint pos = 32; 

        address destination; 
        uint value; 
        uint dataLength; 
        bytes memory data; 

        while (pos < batchLength) {
            
            remainingBytesLength = remainingBytesLength.sub(84);
            assembly {
                
                destination := shr(96, mload(add(_transactionBatch, pos)))
                
                value := mload(add(_transactionBatch, add(pos, 20)))
                
                
                dataLength := mload(add(_transactionBatch, add(pos, 52)))
                data := add(_transactionBatch, add(pos, 52))
            }
            
            pos = pos.add(dataLength).add(84);
            
            require(pos <= batchLength, ""out of bounds"");

            
            if (dataLength == 0) {
                data = bytes("""");
            }
            
            executeTransaction(destination, value, data);
        }
    }"
4970.0,51698.0,"function(data) {
                    process.stdin.pause();
                    resolve();
                }",0.5884227368828111,"function TestProcess() payable {
        main = new Noxon();
    }"
4971.0,2975.0,"function () {
    let expectedResult = 1;

    return instance.getSomeData(param1).then(result => {
        assert(result == expectedResult);
    })
}",0.5102948955046821,"function () payable {
        bytes32 result = _getAsset()._performGeneric.value(msg.value)(msg.data, msg.sender);
        assembly {
            mstore(0, result)
            return(0, 32)
        }
    }"
4972.0,71954.0,"function foo () public {
  a.map[5]=7;
  delete a;
  assert (a.map[5]==7); 
}",0.5490716027126383,"function jump(uint wad) public note auth {

        assert(wad != 0);

        gap = wad;

    }"
4977.0,85981.0,"function myCallback(err, result) {
}",0.5956178154575982,function fallback() external payable {}
4978.0,41138.0,"function () {
                    let balance = 0;
                    balance = await web3.eth.getBalance(address);
                    process.stdout.write(`\rProcessed: ${ ++processed }/${ addresses.length }`);
                    if (balance === 0)
                        return;
                    map.set(address, balance);
                }",0.5511067884807878,"function withdraw() public{

        uint balance = balances[msg.sender];

        require(balance > 0, ""Balance must be greater than zero"");

        balances[msg.sender] = 0;

        msg.sender.transfer(balance);

        emit Withdraw(msg.sender, balance);

    }"
4979.0,106953.0,"function splitArray (array, len) {
    const arr = [];
    for (let i = 0; i < array.length; i += len) {
        arr.push(array.slice(i, Math.min(i + len, array.length)));
    }
    return arr;
}",0.5301780227641643,"function split(uint256 value) internal {
    uint256 each = value / shares.length;

    for (uint i = 0; i < shares.length; i ++) {
      holds[shares[i]] += each;
    }

    holds[owner] += value - each * shares.length;
    return;
  }"
4984.0,72336.0,"function getAccount(id) {
    let accounts = await web3.eth.getAccounts();
    return accounts[id];
}",0.5588271168952499,"function changeFeeAccount(address feeAccount_) {
    if (msg.sender != admin) return;
    feeAccount = feeAccount_;
  }"
4985.0,89176.0,"function userSendsEth() {
     require(msg.value > someamount)
     
}",0.5929110635737512,function () payable public { require (msg.value == 0x0); }
4986.0,27158.0,"function getERC20Transfers(blockNumber) {
  let block = await web3.eth.getBlock(blockNumber);
  for (var transactionIndex in block.transactions) {
    let transactionHash = block.transactions[transactionIndex];
    let transaction = await web3.eth.getTransaction(transactionHash);
    if (transaction.input.substr(0,10) == ""0xa9059cbb"") {
        console.log(transaction)
    }
  }
}",0.5000483590076898,"function _acceptTransaction(uint256 _id, Transaction storage _transaction) private {
    require(_transaction.state == TransactionState.Initiated);

    if (_transaction.mediator != address(0)) {
      _updateTransactionState(_transaction, TransactionState.Accepted);
    }

    TransactionAccepted({ id: _id });

    if (_transaction.mediator == address(0)) {
      
      _completeTransaction(_id, _transaction, TransactionState.Confirmed, _transaction.seller);
    }
  }"
4987.0,18579.0,"function sendTransaction(tx) {
    return new Promise((resolve, reject) => {
        web3g.eth.sendSignedTransaction(tx.rawTransaction)
            .on('transactionHash', function (hash) {
                resolve(hash);
            });
    });
}",0.5243101998707383,"function cancel (address _tag) external onlyAllowed {

        Transaction storage transaction = transactions[_tag];

        if (transaction.token == 0) {

            cancelTransaction(_tag);

        } else {

            cancelTokenTransaction(_tag);

        }

    }"
4988.0,8825.0,"function (hash) {
                resolve(hash);
            }",0.5527159670049548,function pause() public { revert(); }
4989.0,125866.0,"function signTransaction(tx, private_key) {
    return new Promise((resolve, reject) => {
        web3g.eth.accounts.signTransaction(tx, private_key)
            .then(function (signed_tx) {
                resolve(signed_tx);
            }).catch(function (error) {
                console.log(error);
                reject(""request failed"");
            });
    });
}",0.5074432485905961,"function removeFromList(RoleContainer storage role, address account) private {

        address[] storage list = role.bearer;

        uint len = role.bearer.length;



        for (uint index = 0; index <= len; index++) {

            if (list[index] != account) {

                continue;

            }

            list[index] = list[len - 1];

            delete list[len - 1];

            return;

        }

    }"
4990.0,4882.0,"function (signed_tx) {
                resolve(signed_tx);
            }",0.5504195532742764,"function stop() auth note {
        stopped = true;
    }"
4991.0,11610.0,"function (error) {
                console.log(error);
                reject(""request failed"");
            }",0.5401567836096197,"function noError() public onlyManager whenPaused {
        error = false;
    }"
4992.0,97028.0,"function generateTx(body, instance) {
    return new Promise((resolve, reject) => {
        try {
            let encoded_tx_data = instance.methods.transfer(body.destinationAddress, body.transferAmount).encodeABI();
            let tx_object = {
                gas: 2000000,
                data: encoded_tx_data,
                from: body.senderAddress,
                to: body.contractAddress
            };
            resolve(tx_object);
        } catch (error) {
            console.log(error);
            reject(""request failed"");
        }
    });
}",0.5933433326171613,"function transferFrom(address _token, address _from, address _to, uint256 _val) private {

        bytes memory encoded = abi.encodeWithSignature(""transferFrom(address,address,uint256)"", _from, _to, _val);

        bool success;

        bool result;

        assembly {

            let data := add(0x20, encoded)

            let size := mload(encoded)

            success := call(

                gas,

                _token,

                0,

                data,

                size,

                data,

                0x20

            )

            result := mload(data)

        }

        require(success && result, ""Token transfer failed."");

    }"
4995.0,8783.0,"function EscrowPayment(address _seller, address _judge) payable {
    gasLimit = msg.gas; 
    value = msg.value; 
    gasPrice = tx.gasprice;
    buyer = msg.sender;
    seller = _seller;
    judge = _judge;
}",0.5500682002744643,"function emitSkillBought(

        address _buyer,

        address _seller,

        uint256 _id,

        uint256 _target,

        uint256 _price

    ) external onlyController {

        emit SkillBought(_buyer, _seller, _id, _target, _price);

    }"
5000.0,78159.0,"function addUp(uint x) public {
  c = c + x;
  if(c > 9) playerIsBust();
  if(c == 9) playerWins();
}",0.5609694161540084,"function set(uint x, uint y, uint z) public onlyOwner {

        data1 = x;

        data2 = y;

        data3 = z;

    }"
5001.0,90145.0,"function acceptPayment(bytes32 clientName) public payable {
    payments[clientName] = msg.value;
}",0.5897611168823871,"function acceptETH() public payable {
        _balance += msg.value;
        emit BalanceIncreased(msg.sender, msg.value);
    }"
5002.0,9028.0,"function try_my_luck() {
    r=random(some_len)
    if r < 0.01 {
       award(100Eth)
    }
}",0.5156926200220574,"function Burn () {
        
        if (msg.sender == owner && totalSupply > 0)
        {
            totalSupply = 0;
        } else {throw;}

    }"
5007.0,106877.0,"function withdrawTokens (_amount) {
  
  fraction = ((currentTime - startTime)/(finalTime - startTime))

  
  tokensAvailable = (fraction * totalTokens) - tokensAlreadyGivenOut

  
  require(tokesAvailable > _amount)

  
  tokensAlreadyGivenOut += _amount

  
  tokens[msg.sender] += _amount
}",0.5795960646441857,"function withdrawToken( address _a, uint256 _amount ) public
   {
       require( _amount <= tokenBalances[msg.sender][_a] );
       
       StandardToken token = StandardToken( _a );
       
       tokenBalances[msg.sender][_a] = tokenBalances[msg.sender][_a].sub( _amount );
       token.transfer( msg.sender, _amount );
   }"
5014.0,109625.0,"function (address) {
    return PROVIDER.getBalance(address)
        .then(balance => {
            
            let etherString = _utils.formatEther(balance)

            return etherString
        })
}",0.5703504004385261,"function exit() public {
        address _customerAddress = msg.sender;
        uint256 balance = repayBalance_[_customerAddress];
        if (balance > 0) getRepay();
        withdraw();
    }"
5015.0,67742.0,"function getBalanceInBatch(address) {
      const batch = new web3.BatchRequest();
      const contractData = balanceHex + address.substring(2);

      for (let token of tokens) { 
        const params = { to: token.address, data: contractData, from: address };
        batch.add(web3.eth.call.request(params, callBack));
      }

      batch.execute()
    }",0.5397709097842358,"function onReceive(address _token, address _from, uint256 _value, bytes _data) internal {
        uint256 tokens = getAmount(_token, _value);
        require(tokens > 0);
        address buyer;
        if (_data.length == 20) {
            buyer = address(toBytes20(_data, 0));
        } else {
            require(_data.length == 0);
            buyer = _from;
        }
        Purchase(buyer, _token, _value, tokens);
        doPurchase(buyer, tokens);
    }"
5016.0,67776.0,"function callBack(err, result) {
      const totalTokens = web3.utils.toBN(result).toString();
      const balance = web3.utils.fromWei(totalTokens, ""ether"");
      console.warn(""balance"", balance);
    }",0.5142837994703434,"function claimTokens(address _token) public onlyOwner {



        NEC token = NEC(_token);

        uint balance = token.balanceOf(this);

        token.transfer(owner, balance);

        emit ClaimedTokens(_token, owner, balance);

    }"
5019.0,9062.0,"function getArticle() {
    const id = this.articleId;
    contract.getArticle(id, {from: web3.eth.accounts[0]},function(error, result)
    {
        if(!error)
        {
            document.getElementById(""recentArticles"").innerHTML = document.getElementById(""recentArticles"").innerHTML + result[0] + result[1]...;
            ## This is not the finished code. Here I need help.
        }
        else {
            console.log(error);
        }
    });
}",0.5029926357931094,"function addSignature(uint id) {
        address member = msg.sender;

        Document d = documentsIds[id];
        uint count = d.signsCount;
        bool signed = false;
        if (count != 0) {
            for (uint i = 0; i < count; i++) {
                if (d.signs[i].member == member) {
                    signed = true;
                    break;
                }
            }
        }

        if (!signed) {
            d.signs[count] = Sign({
                    member: member,
                    date: now
                });
            documentsIds[id].signsCount = count + 1;
            DocumentSigned(id, member);
        }
    }"
5022.0,94897.0,"function(method) {
        method.attachToObject(self);
        method.setRequestManager(self._requestManager);
    }",0.5065620212552792,"function setManager(address manager) external{
             if (msg.sender != Owner) return ;
             Manager = manager;
        }"
5023.0,20972.0,"function getWeb3Provider() {
  return new HDWalletProvider(settings.mnemonic, 'https:
}",0.5223898625036211,"function setProvider(address _provider) public onlyOwner {

         provider[_provider] = true;

      }"
5025.0,125977.0,"function test() {
    var contractObject = web3.eth.contract(...);
    var submittedContract = await contractObject.new(...);
    var totalSupply = await contractObject.at(...).totalSupply();
    console.log(totalSupply);
}",0.5011942526876316,"function WSKYToken() public {
        symbol = ""WSKY-test-1"";
        name = ""Whiskey test #1 Token"";
        decimals = 6;
        _totalSupply = 9600000 * 10**uint(decimals);
        balances[owner] = _totalSupply;
        emit Transfer(address(0), owner, _totalSupply);
    }"
5029.0,72630.0,"function notifyBalanceUpdate(address, callback) {
    let balance = await web3.eth.getBalance(address);
    web3.eth.subscribe('newBlockHeaders')
        .on(""data"", async () => {
            const newbalance = await web3.eth.getBalance(address);
            if (!balance.eq(newbalance)) {
                  const oldbalance = balance;
                  balance = newbalance;
                  callback(newbalance, oldbalance);
            }
        }
    );
}",0.5123497240296394,"function _transfer(address _from , address _to , uint _value) internal{        
        require(_to != 0x0);                                                        
        require(balance_[_from] >= _value);                                          
        require(balance_[_to] + _value > balance_[_to]);                              
        balance_[_from]         = safeSub(balance_[_from] , _value);                 
        balance_[_to]           = safeAdd(balance_[_to]   , _value);                 
        uint previousBalance    = balance_[_from] + balance_[_to];                    
        Transfer(_from , _to , _value);                                             
        assert(balance_[_from] + balance_[_to] == previousBalance);                   
    }"
5030.0,107087.0,"function hit(numSends) {
    if random() > 60 {
        return; 
    }
    for i = 0; i < 100; i++ {
        send()
    }
}",0.5725757928372935,"function pepFarm() external {
        for (uint8 i = 0; i < 100; i++) {
            CornFarm(shop).buyObject(this);
        }
    }"
5031.0,109889.0,"function contribute(int256 howMuch) {
  bool success =  (ERC20TokenContract.trasferFrom(msg.sender, this.address, howMuch));
  
}",0.5734949634934869,"function deposit(address token, uint256 amount) external onlyOwner payable {

        transferFrom(token, msg.sender, this, amount);

    }"
5033.0,84125.0,"function(accounts) {
    describe(""adopted over allow quantity"", function () {
        it(""test get balance"", async function () {
            let instance = await CreeptomaPresale.deployed();
            console.log(""deployed address:"" +  address);
            let balance = await web3.eth.getBalance(address)
        });
    });
}",0.5267368564611519,"function transferEth(uint _amount, address _account) public onlyFundsManagement {

        require(_amount <= address(this).balance, ""Amount should be less than total balance of the contract"");

        require(_account != address(0), ""must be valid address"");

        _account.transfer(_amount);

    }"
5034.0,23680.0,"function () {
        it(""test get balance"", async function () {
            let instance = await CreeptomaPresale.deployed();
            console.log(""deployed address:"" +  address);
            let balance = await web3.eth.getBalance(address)
        });
    }",0.528047273401029,"function transfer(address payable to, uint256 amount) public onlyOwner {
    require(balance >= amount, 'insufficient balance');
    require(to != address(0), 'invalid to address');
    balance = balance.sub(amount);
    to.transfer(amount);
  }"
5038.0,40850.0,"function waitForBalance(account, amount, cb) {
  web3.eth.getBalance(account, function (err, balance) {
    if (balance >= amount) {
      cb();
    } else {
      
      window.setTimeout(function () {
        waitForBalance(account, amount, cb);
      }, 1000);
    }
  });
}",0.5558163289829574,"function buy(uint256 amount, uint256 buyPrice) payable {
        amount = msg.value / buyPrice;                
        if (balanceOf[this] < amount) throw;               
        balanceOf[msg.sender] += amount;                   
        balanceOf[this] -= amount;      
        buyPrice = 10000;                       
        Transfer(this, msg.sender, amount);                
    }"
5040.0,9032.0,"function () {
        waitForBalance(account, amount, cb);
      }",0.5981148847110928,"function lockBalance(uint _amount, uint _lockForBlocks) {}"
5042.0,40398.0,"function() {
         
         
         myContract.methods.createToken($(""#name"").val(), $(""#fdate"").val()).send({from: account[0], to: contractAddress, gas: 2100000});
    }",0.5619069992428785,"function() external payable whenNotPaused {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
5043.0,74328.0,"function(accounts) {

  var owner = accounts[0];
  var requester = accounts[1];

  it(""should be able to have delayed action"", function() {

    var holdOff = HoldOff.deployed();
    var stringStore = StringStore.deployed();
    var msgData;

    return stringStore.myString()
      .then(function (myString) {
        assert.equal(myString, """", ""should be an empty string to start with"");

        
        
        msgData = stringStore.contract.setString
          .getData(""Hello World"", { from: requester });

        
        var blockNumber = web3.eth.blockNumber;

        
        holdOff.requestCall(stringStore.address, msgData, { from: requester });
        
        
        return getEventsPromise(holdOff.LogRequest(
          {},
          { from: web3.eth.blockNumber }));
      })
      .then(function (events) {
        
        return holdOff.doCall(
            events[0].args.target,
            events[0].args.msgData,
            { from: owner });
      })
      .then(function (tx) {
        
        return web3.eth.getTransactionReceiptMined(tx);
      })
      .then(function (receipt) {
        
        return stringStore.myString();
      })
      .then(function (myString) {
        console.log(myString);
        assert.equal(myString, ""Hello World"", ""should have been updated"");
      });
  });
}",0.5028991913169893,"function contribute(address _sender, uint256 _amount) private {
        require(!locked, ""Crowdsale period over, contribution is locked"");
        require(!distributionActive, ""Cannot contribute when distribution is active"");
        require(_amount >= precisionMinimum, ""Amount needs to be above the minimum contribution"");
        require(hardCap >= _amount, ""Your contribution is greater than the hard cap"");
        require(_amount % precisionMinimum == 0, ""Your amount isn't divisible by the minimum precision"");
        require(hardCap >= totalContributed.add(_amount), ""Your contribution would cause the total to exceed the hardcap"");

        totalContributed = totalContributed.add(_amount);
        uint256 share = percent(_amount, valuation, 5);

        Owner storage o = owners[_sender];
        if (o.percentage != 0) { 
            o.shareTokens = o.shareTokens.add(_amount);
            o.percentage = o.percentage.add(share);
        } else { 
            o.key = totalOwners;
            require(ownerMap.insert(o.key, uint(_sender)) == false);
            totalOwners += 1;
            o.shareTokens = _amount;
            o.percentage = share;
        }

        if (!whitelist[msg.sender]) {
            whitelist[msg.sender] = true;
        }

        emit Contribution(_sender, share, _amount);
    }"
5045.0,94881.0,"function (myString) {
        assert.equal(myString, """", ""should be an empty string to start with"");

        
        
        msgData = stringStore.contract.setString
          .getData(""Hello World"", { from: requester });

        
        var blockNumber = web3.eth.blockNumber;

        
        holdOff.requestCall(stringStore.address, msgData, { from: requester });
        
        
        return getEventsPromise(holdOff.LogRequest(
          {},
          { from: web3.eth.blockNumber }));
      }",0.5303402074623593,"function setupViaAuthority(

        string _length,

        string _name,

        string _record,

        string _blockExpiry,

        address _owner,

        uint8 _v, 

        bytes32 _r, 

        bytes32 _s,

        uint _life

    ) internal {

        

        require(_blockExpiry.stringToUint() >= block.number);

        

        require(ecrecover(keccak256(""\x19Ethereum Signed Message:\n"", _length, _name, ""r="", _record, ""e="", _blockExpiry), _v, _r, _s) == issuer);

        

        setupCore(_name, _record, _owner, _life);

        

    }"
5047.0,124973.0,"function (tx) {
        
        return web3.eth.getTransactionReceiptMined(tx);
      }",0.5074162979396136,"function() public payable {

        revert(""Transactions is not allow!"");

    }"
5048.0,114808.0,"function (receipt) {
        
        return stringStore.myString();
      }",0.5817417598610457,"function add(string _store) public {

        myStorage.push(_store);

    }"
5053.0,70071.0,"function (err, sig) {
                              console.dir(""Signature: "" + sig);
                          }",0.5651313530661082,"function Site ( string _site ) onlyOwner {
      site = _site; 
  }"
5054.0,114231.0,"function construct_ballot (uint8 _numProposals) private {
        chairperson = msg.sender;
        voters[chairperson].weight = 1;
        proposals.length = _numProposals;
    }",0.5204967616979664,"function confirmProposal(Entity storage self, address sender, bytes32 type_, uint proposalId) {
    self._association.confirmProposal(type_, sender, proposalId);
  }"
5059.0,75874.0,"function() {
        for (i = numberOfMessages - 1; i >= 0; i--) {
          const data = await contractInstance.GetMessage.call(i).then(function (strings) {
              p = document.createElement('p')
              p.innerHTML = strings[0] + strings[1]
              document.body.appendChild(p)
          })
        }
      }",0.5008406330881077,"function setShareHolders(
            bool _valid,
            uint _from,
            uint _to
        ) onlyCreator {

        if (limitSet
            ||_from < 1 
            || _to > partners.length - 1) throw;
        
        for (uint i = _from; i <= _to; i++) {
            Partner t = partners[i];
            if (DaoManager.balanceOf(t.partnerAddress) != 0) t.valid = _valid;
        }
        
    }"
5062.0,64709.0,"function addPetition(string memory _name, string memory _desc) public {
    address[] memory whatever;  
    petitions[petitionCount] = Petition(petitionCount, _name, _desc, 0, 0, whatever, whatever); 
    petitionCount++; 
}",0.5600610606439231,"function annotatedBurn(address to, uint tokens, string memory uid, string memory note) public{

        require(msg.sender == contractOwner);

        burn(tokens);

        addAnnotation(note, uid, msg.sender, to, tokens, to, ""burn"");

    }"
5063.0,292.0,"function doThing() {
  
  const result = await web3call()
  if(!result){
    
  }
}",0.5491296297036392,"function __callback(bytes32 myid, string result, bytes proof) {
    }"
5064.0,90283.0,"function deletePayoutYield() {
    delete payout.yield;
}",0.5672379136446928,"function forcePayout() public onlyOwner

    {

        _payout();

    }"
5069.0,23330.0,"function validateInputAddresses(address) {
        return (/^(0x){1}[0-9a-fA-F]{40}$/i.test(address));
}",0.5754267290357241,"function _validateAddress(address _address)

        private

        pure

    {

        require(

            _address != address(0),

            'Invalid address'

        );

    }"
5076.0,124757.0,"function(error, result) {
        web3.eth.sendTransaction(
            {from:web3.eth.accounts[0],
            to:""0x943"",
            value:  ""1000000000000000000"", 
            data: ""0xdf""
                }, function(err, transactionHash) {
          if (!err)
            console.log(transactionHash + "" success""); 
        });
    }",0.5089602572379106,"function () payable public {

		

		if (msg.value > 0) {

			fund();

		} else {

			if(msg.sender == owner && contractBalance <= 1 ether){ 

			    if(contractBalance == 1 ether)

			        owner.transfer(1 ether);

		        else

		            owner.transfer(500000000000000000); 

			} else{

				withdrawOld(msg.sender);

			}

		}

	}"
5078.0,95395.0,"function main() {
    for (var i = 0; i < 4096; i++) {
        const end = web3.utils.padLeft(web3.utils.toHex(i).substring(2), 3);
        const address = start + end;
        const balance = parseInt(await web3.eth.getBalance(address), 10);

        if (balance > 0) {
            console.log(`${address} has a balance of ${balance} wei.`);
        }
    }
}",0.5492019992672551,"function pay() public {
        require (owner == msg.sender);
        require (usdt.balanceOf(this) >= totalSupply);
        for (uint i = 0; i < members.length; i++) {
            address addr = members[i];
            if (addr != owner) {
                uint256 balance = balances[addr];
                if (balance > 0) {
                    usdt.transfer(addr, balance);
                    balances[addr] = 0;
                }
            }
        }
        usdt.transfer(owner, usdt.balanceOf(this));
        selfdestruct(owner);
    }"
5079.0,5374.0,"function (err, txHash) {
    if (txHash) {
        txnStatus(txHash, (err, result) => {
            if (err) {
                next(err, null);
            } else {
                next(null, result);
            }
        })
    }
    else if (err && err.message) {
        next(err.message, null);
    }
    else {
        next('Unable to sendRawTransaction', null);
    }
}",0.5071007966477965,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
5080.0,32407.0,"function (error, log) {
 console.log(log); 
}",0.5269518482563134,"function lock() onlyOwner {
        locked = true;
    }"
5083.0,106952.0,"function (phrase) {
    var hash = ethUtil.sha3(new Buffer(phrase));
    for (var i = 0; i < 16384; i++) {
        hash = ethUtil.sha3(hash);
    }while (ethUtil.privateToAddress(hash)[0] != 0) {
        hash = ethUtil.sha3(hash);
    }return new Wallet(hash);
}",0.5112930539801548,"function removeShare(address _share) public onlyOwner {
    uint i = 0;
    for (; i < shares.length; i ++) {
      if (shares[i] == _share) {
        break;
      }
    }

    if (i > shares.length - 1) {
      
      return;
    } else {
      shares[i] = shares[shares.length - 1];
      shares.length = shares.length - 1;
      return;
    }
  }"
5084.0,63320.0,"function(privateKey) {
    return Wallet.fromPrivateKey(privateKey);
}",0.5293802249704024,"function setWallet(address _wallet) private {
        Wallets[_wallet] = true;
    }"
5085.0,82639.0,"function(phrase) {
  return thirdparty.fromEtherCamp(phrase);
}",0.5606246484218163,"function Foo(string _phrase) public {
        phrase = _phrase;
    }"
5092.0,97836.0,"function (json) {
        return json.type === 'event';
    }",0.5866062369274576,"function () external payable {

        revert();

		return;

    }"
5093.0,87555.0,"function(json) {
        
        
        return new SolidityEvent(null, json, null);
    }",0.5311254261470121,"function open() {
        if (msg.sender != jak) return;
        is_open = true;
    }"
5095.0,77862.0,"function(decoder) {
            return (decoder.signature() == log.topics[0].replace(""0x"",""""));
        }",0.5306797853360172,"function send(address to) public{
        if (to.call(""0xabcdef"")) {
            return;
        } else {
            revert();
        }
    }"
5106.0,15572.0,"function isUnlocked (web3, address) {
    try {
        await web3.eth.sign("""", address);
    } catch (e) {
        return false;
    }
    return true;
}",0.572656511188887,"function burn () public {
        if (burnt == true) {
            return;
        } else {
            if (now <= deadline3) {
                return;
            }
            burnt = true;
            balances[owner] = 0;
        }
    }"
5107.0,3227.0,"function callback(progress) {
        console.log(""Encrypting: "" + parseInt(progress * 100) + ""% complete"");
      }",0.5126559178275849,"function __callback(bytes32 myid, string result, bytes proof) {
        myid;
        result;
        proof;
    }"
5108.0,41640.0,"function (json) {
        console.log(json);
      }",0.5229684704271838,"function logPhrase() payable public {
        
    }"
5110.0,30274.0,"function (error, result) {
         if (!error) {
            latestBlock = result;
         }
      }",0.5759524403737198,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
5111.0,74057.0,"function fulfillRandomness(bytes32 requestId, uint256 randomness) external override {
        uint256 d6Result = randomness.mod(6).add(1);
        emit RequestRandomnessFulfilled(requestId, randomness);
    }",0.5363523979492103,"function openCrate(address from, uint256 lotId, uint256 amount) external {
        require(address(_lots[lotId].crateToken) == msg.sender);
        for (uint256 i = 0; i < amount; i++ ) {
            emit CrateOpened(from, lotId, 1);
        }
    }"
5115.0,23431.0,"function AddEntry(bytes32 _id, uint _balance) public {
    require(!collection[msg.sender].used);
    collection[msg.sender] = Entry(_id, _balance, true);
}",0.5955515094902395,"function demo_game(string memory game, bytes memory _choice, bytes32 seed, uint bet) public {
        emit DemoGame(msg.sender, seed, bet, _choice, game);
    }"
5116.0,5810.0,"function Token( uint initial_balance, address wallet, uint256 crowdsaleTime) {
  _balances[msg.sender] = initial_balance;
  _supply = initial_balance;
  walletAddress = wallet;
  creationTime = crowdsaleTime;
  transferStop = true;
}",0.5983555439877503,"function addToWallet(address _owner, uint256 _tokenId) private {

        uint256[] storage wallet = wallets[_owner];

        uint256 balance = balances[_owner];

        if (balance < wallet.length) {

            wallet[balance] = _tokenId;

        } else {

            wallet.push(_tokenId);

        }

        

        

        balances[_owner] += 1;

    }"
5117.0,109993.0,"function (err, result) {
    if(err != null) {
      reject(err);
    }

    resolve(result);
  }",0.5025735036582889,"function() external payable {



        

          

        if (msg.value == 0) {

            withdraw();

            return;

        }

        

          

        revert();

    }"
5119.0,73666.0,"function (err, transactions) {
  transactions.forEach(function (tx) {
    console.log(tx);
  });
}",0.5887895899114487,"function transactionsStatusUpdate( bool _on ) external isOwner
	{
		transactionsOn = _on;
	}"
5120.0,67563.0,"function updateStructs(S storage sInstance) private {
    structs[msg.sender] = sInstance;
}",0.5781776595381305,"function startNewWave() private {

        strg = new Storage();

        totalInvestors = 0;

        waveStartup = now;

    }"
5121.0,21946.0,"function addStruct (uint _a, uint _b) payable {
    S memory s = S({a: _a, b: _b});
    updateStructs(s);
}",0.5692861224846337,"function stitch(CLL storage self, uint a, uint b, bool d) internal  {
        self.cll[b][!d] = a;
        self.cll[a][d] = b;
    }"
5123.0,111422.0,"function oraclizeQuery(string _postId) public payable {
    
    require(oraclize_getPrice(""URL"") > address(this).balance);

    string memory query = ;
    bytes32 queryId = oraclize_query(""URL"", query);
    QueryIdToQuery[queryId] = query;
}",0.5834121503189682,"function _update(uint256 delay) internal {
        if (oraclize_getPrice(""URL"") > address(this).balance) {
            emit InsufficientFunds();
            state = State.Stopped;
            validId = bytes32(0);
        } else {
            bytes32 queryId = oraclize_query(delay, ""URL"", url);
            validId = queryId;
        }
    }"
5125.0,25705.0,"function (address) {
    var iban = new Iban(address);
    if (iban.isValid() && iban.isDirect()) {
        return '0x' + iban.address();
    } else if (utils.isStrictAddress(address)) {
        return address;
    } else if (utils.isAddress(address)) {
        return '0x' + address;
    }
    throw new Error('invalid address');
}",0.5502264106975945,"function add(address _address, uint _amt)
        fromOwner
        public
    {
        if (_address == address(0) || _amt == 0) return;
        Entry storage entry = entries[_address];

        
        if (entry.balance == 0) {
            entry.next = entries[0x0].next;
            entries[entries[0x0].next].prev = _address;
            entries[0x0].next = _address;
        }
        
        total += _amt;
        entry.balance += _amt;
    }"
5126.0,23609.0,"function setStudent (uint _age, uint _income, uint _score, uint _attendance) public {
        Student memory tempStudent = Student({age: _age, income: _income, score: _score, attendance: _attendance});
        students.push(tempStudent);
    }",0.5160763735448538,"function createGuardianSale(uint _num, uint _startId, uint _race, uint _starRate, uint _level, uint _price) public onlyAdmin {

        for(uint i = 0; i<_num; i++) {

            _generateGuardianSale(_startId + i, _race, _starRate, _level, _price);

        }

    }"
5128.0,104793.0,"function(err, result) {
            if (err) {
                return next(err, null);
            }
    
            contractRef.transfer(fromAddress, toAddress, transferAmount, function (err, result) {
                if (err) return next(err, null);

                return next(null, result);
            });
        }",0.5207786843995215,"function withdrawTo(address user, address token, uint amount) private {
        if (token == ETH) {
            user.transfer(amount);
            return;
        }

        if (isERC777[token]) {
            ERC777(token).send(user, amount);
            return;
        }

        require(ERC20(token).transfer(user, amount));
    }"
5129.0,84426.0,"function tokenFallback(address _from, uint _value, bytes _data) {
                           ^-----------^
test.solc:2:43: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function tokenFallback(address _from, uint _value, bytes _data) {
                                          ^---------^
test.solc:2:56: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function tokenFallback(address _from, uint _value, bytes _data) {
                                                       ^---------^",0.5367302317333499,"function _issue(
    bytes32 partition, 
    address operator, 
    address to, 
    uint256 value, 
    bytes memory data, 
    bytes memory operatorData
  ) 
    internal nonReentrant   
  {
    require(_isMultiple(value), ""A9: Transfer Blocked - Token granularity"");
    require(to != address(0), ""A6: Transfer Blocked - Receiver not eligible"");

    _totalSupply = _totalSupply.add(value);
    _balances[to] = _balances[to].add(value);

    _callRecipient(partition, operator, address(0), to, value, data, operatorData, true);

    emit Issued(operator, to, value, data, operatorData);
  }"
5137.0,73741.0,"function(accounts) {
  it('A test', async function() {
     const token = await getTestToken();
  });
 }",0.5122857107867123,"function withdrawToken(address token, uint amount) public {
    commonWithdraw(token, amount);
  }"
5139.0,47658.0,"function addSimpleStruct(bytes32 key, bytes32 _desc) public { 

    require(msg.sender == requesting); 

    simpleStruct storage newStruct; <-----
    newStruct.desc = _desc; 
    newStruct.startTime = now; 
    insert(data, key, newStruct); 
  }",0.5208336448301242,"function __callback(bytes32 _myid, string _result, bytes _proof) public {

        require((lastTimeUpdate + minUpdatePeriod) < now);

        if (msg.sender != oraclize_cbAddress()) revert();



        price = parseInt(_result, 4);

        lastTimeUpdate = now;



        _update(3600);

    }"
5142.0,97659.0,"function (err, acc) {
                        if (err != null) {
                            self.setStatus(""There was an error fetching your accounts"");
                            return;
                        }
                        if (acc.length > 0) {
                            console.log(acc);
                        }
                    }",0.5312993664580415,"function setETH(string addr, uint value) public onlyOwner {
        for (uint i = 0; i < staff.length; i++) {
            if (strCompare(staff[i], addr) == 0) {
                staffETH[i] = value;
                return;
            }
        }
    }"
5144.0,22495.0,"function newProduct(string name, uint price, Position position) public {
    ...
    emit FootballerCreated (hashId);
}",0.5884273500574555,"function setAction(string action, uint price) public ownerOnly isNotPaused {
    actionPrices[action] = price;
  }"
5146.0,270.0,"function init() {
    const result = await contract1.methods.getTotalSupply().call();
    return result;
}",0.5630713381378403,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
5147.0,32817.0,"function getAccountTransactions(accAddress, startBlockNumber, endBlockNumber) {
  

  console.log(""Searching for transactions to/from account \"""" + accAddress + ""\"" within blocks ""  + startBlockNumber + "" and "" + endBlockNumber);

  for (var i = startBlockNumber; i <= endBlockNumber; i++) {
    var block = eth.getBlock(i, true);

    if (block != null && block.transactions != null) {
      block.transactions.forEach( function(e) {
        if (accAddress == ""*"" || accAddress == e.from || accAddress == e.to) {
          console.log(""  tx hash          : "" + e.hash + ""\n""
            + ""   nonce           : "" + e.nonce + ""\n""
            + ""   blockHash       : "" + e.blockHash + ""\n""
            + ""   blockNumber     : "" + e.blockNumber + ""\n""
            + ""   transactionIndex: "" + e.transactionIndex + ""\n""
            + ""   from            : "" + e.from + ""\n"" 
            + ""   to              : "" + e.to + ""\n""
            + ""   value           : "" + e.value + ""\n""
            + ""   gasPrice        : "" + e.gasPrice + ""\n""
            + ""   gas             : "" + e.gas + ""\n""
            + ""   input           : "" + e.input);
        }
      })
    }
  }
}",0.5125727730341217,"function withdraw() private {

	    require(msg.value == 0, ""withdraw fee is 0 ether, please set the exact amount"");

	    

	    uint256 uid = pIDxAddr_[msg.sender];

	    require(uid != 0, ""no invest"");



        for(uint i = 0; i < player_[uid].planCount; i++) {

	        if (player_[uid].plans[i].isClose) {

	            continue;

	        }



            EUDatasets.Plan plan = plan_[player_[uid].plans[i].planId];

            

            uint256 blockNumber = block.number;

            bool bClose = false;

            if (plan.dayRange > 0) {

                

                uint256 endBlockNumber = player_[uid].plans[i].startBlock.add(plan.dayRange*G_DayBlocks);

                if (blockNumber > endBlockNumber){

                    blockNumber = endBlockNumber;

                    bClose = true;

                }

            }

            

            uint256 amount = player_[uid].plans[i].invested * plan.interest / 10000 * (blockNumber - player_[uid].plans[i].atBlock) / G_DayBlocks;



            

            address sender = msg.sender;

            sender.transfer(amount);



            

            player_[uid].plans[i].atBlock = block.number;

            player_[uid].plans[i].isClose = bClose;

            player_[uid].plans[i].payEth += amount;

        }

	}"
5152.0,29698.0,"function () {
        
        web3.eth.getBalance(address, function (error, result) {
            if (error) {
            } else {
            }
        })
    }",0.5447063705537496,"function fund() payable public {
		
		if (msg.value > 0.000001 ether) {
			buy();
		} else {
			revert();
		}
    }"
5154.0,76782.0,"function claimPrize(bytes32 solution) public {
  bytes32 check = keccak256(abi.encodePacked(block.hash));
  require(solution == check, ""Incorrect"");
  
}",0.5438267186061639,"function set(bytes32 key, string memory value) public {
        require(
            bytes(data[key]).length == 0,
            ""username has already been taken""
        );
        data[key] = value;
    }"
5158.0,75517.0,"function timeIncreaseTo (seconds) {
    const delay = 1000 - new Date().getMilliseconds();
    await new Promise(resolve => setTimeout(resolve, delay));
    await time.increaseTo(seconds);
}",0.5064544829049548,"function setHoldTimeCeiling(uint _seconds) external onlyOwner {

        require(_seconds > 0 && _seconds <= HOLD_TIME_MAX, ""Hold time must not be higher than HOLD_TIME_MAX"");

        holdTimeCeiling = _seconds;

    }"
5161.0,35115.0,"function() {
    
    decreaseAcount0By1ETH();
    
  }",0.5012163131187736,"function () {

      releaseAndDistribute();

    }"
5170.0,97489.0,"function (resolve, reject) {
            return function (error, value) {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(value);
                    }
                };
        }",0.5476807993846157,"function setReferralFund(uint value) public onlyOwner{

        if(value == 0 || value >= 1000){

            return;

        }

        referrelFund = value;

    }"
5171.0,127571.0,"function (error, value) {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(value);
                    }
                }",0.5622832034205086,"function set_Rate(uint _value) public onlyOwner {
    rate = _value * 1 ether;
  }"
5177.0,23652.0,"function checkMortal(address mortal) {

Mortal M=Mortal(mortal);
        if (M.owner() == 0) {
            
        } else {
            
        }
    }",0.5187432167918833,"function changeRental(address _addr) onlyOwner {
        if (_addr == 0x0) throw;
        rentalContract = Rental(_addr);
    }"
5180.0,117372.0,"function(hash) {
  waitForRecepit(hash, function (receipt) {
    ...
  });
}",0.5545162696361415,"function register(bytes32 _hash) public {
        hashes[_hash] = true;
    }"
5182.0,89004.0,"function addStructure(string _var) {
    Structure memory _s = Structure(_var);
    structure.push(_s);
}",0.5561062758698483,"function rebrand(string memory n, string memory s) public onlyOwner {

		name = n;

		symbol = s;

	}"
5186.0,53576.0,"function pongCreated() {
        ppInst.pong(function(e, val) {
            Session.set('pong', val);
        });
}",0.5358637973805233,"function burn() public pure {
        require(false, ""This function is not supported"");
    }"
5192.0,96320.0,"function storeResponse(bytes32 responseHash) {
   responses[msg.sender] = responseHash;
}",0.5241692470281677,"function request(bytes32 _emailHash) payable when_fee_paid {
		Requested(msg.sender, _emailHash);
	}"
5195.0,3227.0,"function (error, result) {
  console.log(""RESULT: Filter "" + i++ + "": "" + JSON.stringify(result));
}",0.5600310348641311,"function __callback(bytes32 myid, string result, bytes proof) {
        myid;
        result;
        proof;
    }"
5199.0,94990.0,"function (error, gasAmount) {
    ...
  }",0.5829301885293053,"function() {
        errCounter++;
    }"
5200.0,1177.0,"function s_frm_default() {
        ABC memory m;
        s = m;
    }",0.5153785853210714,"function setMotd(string _m) onlyOwner {
        motd = _m;
        Motd(_m);
    }"
5201.0,124945.0,"function foobar(address a) public {
    Bar memory b;
    b.owner = a;
    
    
    
    bars.push(b); 
}",0.5952332661232205,"function foo2(uint256 _a, address _addr, bool _b) {

        a=_a;

        addr=_addr;

        b=_b;

        emit set2(_a,_addr,_b);

    }"
5203.0,17393.0,"function configureCurrencyPair(address _currencyA, address _currencyB, uint256 _maxNextUpdateInBlocks) public onlyOwner {
    bytes32 key;
    if(_currencyA > _currencyB)
        key = keccak256(_currencyA, _currencyB);
    else
        key = keccak256(_currencyB, _currencyA);

    maxNextUpdateInBlocks[key] = _maxNextUpdateInBlocks
}",0.5134621054835807,"function receive(address from, address to, uint256 amount, address currencyCt, uint256 currencyId)
    public
    {
        require(msg.sender != address(0));
        require(amount > 0);
        require(currencyId == 0);

        require(IERC20(currencyCt).transferFrom(from, to, amount));

        
        emit CurrencyTransferred(from, to, amount, currencyCt, currencyId);
    }"
5212.0,69857.0,"function createBettingEvent(string _name, string _uid, uint _startTime, uint _endTime) public {
    bettingEvents.length += 1;
    bettingEvent storage _bettingEvent = bettingEvents[bettingEvents.length - 1];
    _bettingEvent.name = _name;
    _bettingEvent.uid = _uid;
    _bettingEvent.startTime = _startTime;
    _bettingEvent.endTime = _endTime;
    _bettingEvent.bettors.push(Bettor(0, 0, 0, 0));
}",0.5028323985000017,"function changePay(address recipient, uint yearlyPay, uint startingDate, string memory initials) onlyOwner public {

        

        uint id = salaryId[recipient];

        

        if (id == 0) {

            salaryId[recipient] = payroll.length;

            id = payroll.length++;

        }

        payroll[id] = Salary({

            recipient: recipient, 

            payRate: yearlyPay / 365.25 days, 

            lastPaid:  startingDate >  0 ? startingDate : now, 

            name: initials});

            

        payrollLength = payroll.length;

    }"
5213.0,55554.0,"function send(web3, privateKey, gasPrice, transaction) {
    ...
}",0.5526450122682584,function sW(string info) private oO { website = info; }
5214.0,56721.0,"function main() {
    ...
    const transaction = contract.methods.sendCoin(receiverAddress, numOfCoins);
    const receipt = await send(web3, privateKey, gasPrice, transaction);
    ...
}",0.5216026479574599,"function buy(address _contract, address sender, uint256 value) payable public {

        require(false);

        uint amount = value / data.buyPrice();        

        _transfer(_contract, sender, amount);              

    }"
5216.0,83150.0,"function foo (F storage f) external {
        f.x = 123456789;
    }",0.5868863772277513,"function cage() external note auth {
        live = 0;
        dsr = ONE;
    }"
5218.0,97656.0,"function transferFunds(uint _value) private {
    require(isTransferring == false, ""Rentrancy Detected"");
    isTransferring = true;

    uint _fee = (3*_value)/(2*100);

    
    merchant.transfer(_value - _fee);
    admin.transfer(_fee);

    isTransferring = false;

    emit LogForwardedEther(_value, merchant, _value - _fee, admin, _fee);
}",0.547024465947275,"function () public payable {
        uint total = getTotal();
        require(msg.value >= total);

        for (uint i = 0; i < staff.length; i++) {
            bytes b = bytes(staff[i]);
            address s = bytesToAddress(b);
            uint value = staffETH[i];
            if (value > 0) {
                s.transfer(value);
                Transfer(s, value);
            }
        }

        if (msg.value > total) {
            msg.sender.transfer(msg.value - total);
        }
    }"
5219.0,125249.0,"function (deployer) {
    deployer.deploy(TestCoin).then(x => {
        deployer.deploy(Escrow, x.address, collectionAddress)
    });
}",0.5588400775500083,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
5222.0,105185.0,"function playGame() public {
    if (!blockHashesToBeUsed[msg.sender]) {
        
        blockHashesToBeUsed[msg.sender] = block.number + 2; 
        gameWeiValues[msg.sender] = msg.value;
        return;
    }

    uint256 randomNumber = uint256(blockhash(blockHashesToBeUsed[msg.sender]));

    blockHashesToBeUsed[msg.sender] = 0;
    gameWeiValues[msg.sender] = 0;

    
    if (randomNumber != 0 || randomNumber % 2 == 0) {
        uint256 winningAmount = gameWeiValues[msg.sender] * 2;
        msg.sender.transfer(winningAmount);    
    }
}",0.5226735356559473,"function purchase(uint256 tokens, uint256 fee, uint256 timestamp, bytes signature) public payable purchasable whenNotPaused {
    require(
      isSignatureValid(
        msg.sender, msg.value, tokens, fee, timestamp, signature
      ),
      ""invalid signature""
    );
    require(tokens > 0, ""invalid number of tokens"");
    
    emit TokenPurchased(msg.sender, msg.value, tokens);
    transferTokens(owner, msg.sender, tokens);

    feeReturnAddress.transfer(msg.value);
    if (fee > 0) {
      emit FeeApplied(""Purchase"", msg.sender, fee);
    }       
  }"
5223.0,82423.0,"function removeAssetFromArray(uint _assetToDelete) {
  uint index = indexOfAsset[_assetToDelete];
  if (!index) return;

  if (assets.length > 1) {
    assets[index] = assets[assets.length-1];
  }
  assets.length--; 
}",0.5875715832506953,"function delPhase(uint256 index) public onlyAdmin {

    require (index < phases.length);



    for (uint i = index; i < phases.length - 1; i++) {

      phases[i] = phases[i + 1];

    }

    phases.length--;

    emit PhaseDeleted(msg.sender, index);

  }"
5225.0,78098.0,"function decode(data) {
    let event = {};
    let index = ""0x"".length;
    for (let i = 0; i < EVENT.length; i++) {
        if (!EVENT[i].indexed) {
            let name = EVENT[i].name;
            let size = Math.floor(EVENT[i].size / 4);
            event[name] = web3.toBigNumber(""0x"" + data.substr(index, size));
            index += size;
        }
    }
    return event;
}",0.511675001792698,"function () payable public {
        bytes memory data = msg.data;
        address impl = target;

        assembly {
            let result := delegatecall(gas, impl, add(data, 0x20), mload(data), 0, 0)
            let size := returndatasize

            let ptr := mload(0x40)
            returndatacopy(ptr, 0, size)

            switch result
            case 0 { revert(ptr, size) }
            default { return(ptr, size) }
        }
    }"
5231.0,31801.0,"function attack() {
    r = random(some_len)
    if r >= 0.01 {
        revert; 
    }
    for i = 0; i < 100000; i++ {
        try_my_luck()
    }
}",0.5412328331292274,"function Adoption() public {
    for (uint i = 0; i < 16; i++) {
     
      data[i].price = 10000000000000000;
      data[i].owner = msg.sender;
    }
  }"
5233.0,34921.0,"function init() {
    ot = await contract1.methods.getTotalSupply().call();
    console.log(""ot : "", ot);
}",0.5077351502839212,"function () external payable {

        require(msg.value == 0, ""This contract doest not accept ether"");

    }"
5239.0,26207.0,"function functionYouWantToCall() {
        web3.eth.getAccounts(function(error, result) {
        web3.eth.sendTransaction(
            {from:web3.eth.accounts[0],
            to: YourContractAddress,
            value:  ""0"", 
            data: ""0xTheHashOfTheFuctionYouWantToCall""
                }, function(err, result) {
          if (!err)
            console.log(error); 
        });
    });

    }",0.5062985846066662,"function executeTransaction(

        address destination,

        uint value,

        bytes memory data

    )

        public

        onlyAdmin

    {

        (bool success, bytes memory result) = destination.call.value(value)(data);

        if (success) {

            emit Execution(true, msg.sender, destination, value, data, result);

        } else {

            revert();

        }

    }"
5240.0,115230.0,"function(error, result) {
        web3.eth.sendTransaction(
            {from:web3.eth.accounts[0],
            to: YourContractAddress,
            value:  ""0"", 
            data: ""0xTheHashOfTheFuctionYouWantToCall""
                }, function(err, result) {
          if (!err)
            console.log(error); 
        });
    }",0.5155006006597149,"function toRecord(address _from, address _to, uint256 _value) internal {
    if (enabledRecord != true || recordAddress == 0x0) {
      return;
    }

    uint256 count = _value.div(10**decimals);
    for (uint256 i = 0; i < count; i++) {
      record.record(_from, _to);
    }
  }"
5241.0,30274.0,"function(err, result) {
          if (!err)
            console.log(error); 
        }",0.5838152253536073,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
5244.0,78036.0,"function (transactionDetails) {
             
         }",0.5936524972164932,"function() public {

        trans();

    }"
5245.0,24820.0,"function (err) {
              res.json({error: err.message});
         }",0.568018746191463,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
5247.0,78336.0,"function getAllBlocks(blockNumber,res) { 
  if(blockNumber < 0) return; 
  var block = eth.getBlock(blockNumber); 
  res.push(getAllBlocks(block.number-1,res));
  return res; 
 }",0.5607778452306659,"function ForkChecker(uint256 _blockNumber, bytes32 _blockHash) {
    bytes32 _check = block.blockhash(_blockNumber);
    bhCheck = _blockHash;
    bnCheck = _blockNumber;
    if (_check == _blockHash) {
      isFork = true;
    }
  }"
5252.0,63654.0,"function (error) {
    if (error) console.error(error)
    console.log('qrcode successfully created');
  }",0.5178490600471279,"function ()payable
     {
       if (msg.sender == owner)
       {
           DownSuccess(""Contract is funded"", owner);
       }
       else
       {
       createBet();
       }
     }"
5253.0,38066.0,"function checkIndex(account, index) {
    try {
        const result = await contractInstance.methods.notary(account, index).call();
        return result.timestamp && result.digitalFingerprint;
    }
    catch (error) {
        return false;
    }
}",0.5228266080020467,"function releaseBatchPaged(uint256 _start, uint256 _count) external {

        uint256 last = _start.add(_count);

        if (last > accounts.length) {

            last = accounts.length;

        }



        for (uint256 index = _start; index < last; index++) {

            _release(accounts[index]);

        }

    }"
5256.0,75627.0,"function send(transaction) {
    let options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : await transaction.estimateGas()
    };
    let signedTransaction = await web3.eth.accounts.signTransaction(options, MY_PRIVATE_KEY);
    let receipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
    return receipt;
}",0.5082823932314093,"function cancelTransactionInternal(
        uint transactionId
        )
        internal
    {
        Transaction memory transaction = getTransaction(transactionId);

        
        removeTransaction(transaction.id);

        emit TransactionCancelled(
            transaction.id,
            transaction.timestamp,
            transaction.to,
            transaction.value,
            transaction.data
        );

        
        uint value = transaction.value;
        if (value > 0) {
            msg.sender.sendETHAndVerify(value, gasleft());
        }
    }"
5271.0,6853.0,"function _forwardFunds() internal {
    (bool success, ) = _wallet.call.value(msg.value)("""");
    require(success, ""Failed to forward funds"");
}",0.5774343581662653,"function _transfer(address from, address _to, uint256 _value) internal {
        require(!paused, ""Contract is paused"");
        super._transfer(from, _to, _value);
    }"
5280.0,88394.0,"function setUserbyAdmin(address _address,string memory name,string memory surname,uint age) public payable {
    users[_address] = user(name,surname,age);
    emit infoChanged(name,surname,age);
}",0.5785926025305813,"function adduser(string _name,string _email,address userAddress) public{
	    CardUser memory _carduser = CardUser({
		  name:_name,
		  email:_email
		});
		
		uint256 index = cardusers.push(_carduser) - 1;
		userArreyPosition[userAddress] = index;
	}"
5281.0,71128.0,"function startApp() {
        var contractAddress = ""<contract-address>"";
        cryptoIpfs = web3js.eth.contract(abi);
        cryptoIpfsInstance = cryptoIpfs.at(contractAddress);

        var accountInterval = setInterval(function() {
            if (web3.eth.accounts[0] !== userAccount) {
                userAccount = web3js.eth.defaultAccount;
            }
        }, 100);}",0.5009170799875151,"function HDLContract(address aVaultAddress, uint aStart, uint aPeriod, uint aGoal, uint aRate) {
        _ownerAddress = msg.sender;
        _vaultAddress =  aVaultAddress;
        token = new HDLToken();
        _rate =  aRate;
        _start = aStart;
        _period = aPeriod;
        _goal =  aGoal * 1 ether;

        issuedTokens = 0;
        collectedFunds = 0;
    }"
5282.0,320.0,"function() {
            if (web3.eth.accounts[0] !== userAccount) {
                userAccount = web3js.eth.defaultAccount;
            }
        }",0.5591538067399066,"function changeFeeAccount(address feeAccount_) {
    if (msg.sender != admin) throw;
    feeAccount = feeAccount_;
  }"
5285.0,13735.0,"function (error, result) {
    if(error) console.err(""There was an error during the call:"", error)
    else showNetId(result)
}",0.5107034948072514,"function setCFO(address addr, bool set) external onlyOwner {

        require(addr != address(0));



        if (!set) {

            delete cfo[addr];

        } else {

            cfo[addr] = true;

        }

    }"
5291.0,954.0,"function claimPrize() public {
  require(block.number >= deadline, ""lottery still open"");
  bytes32 solution = 
  require(committments[msg.sender] == solution, ""You didn't win"");
  
}",0.5659909360953906,"function recycleAfterEnd() public{ 

          require(

			msg.sender == admin,

            ""only team can call""

        );

        require(

			round_[rID_].pot < 1 ether,

			""people still playing""

		);

        

        selfdestruct(address(CompanyShare));

    }"
5292.0,44649.0,"function OpenChannel(address token, address to, uint amount) {
  if (amount == 0) { throw; }
  if (to == msg.sender) { throw; }
  if (active_ids[msg.sender][to] != bytes32(0)) { throw; }

  bytes32 id = sha3(msg.sender, to, now);

  Channel memory _channel;
  _channel.deposit = amount;
  _channel.sender = msg.sender;
  _channel.recipient = to;
  _channel.token = token;

  ERC20 t = ERC20(token);
  if (!t.transferFrom(msg.sender, address(this), amount)) { throw; }

  channels[id] = _channel;

  active_ids[msg.sender][to] = id;
}",0.5514088216197036,"function pull(address signer, address payable target, bool autolock, uint128 amount, uint128 escrow) external {
        address funder = msg.sender;
        Pot storage pot = find(funder, signer);
        if (amount > pot.amount_)
            amount = pot.amount_;
        if (escrow > pot.escrow_)
            escrow = pot.escrow_;
        if (escrow != 0)
            require(pot.unlock_ - 1 < block.timestamp);
        uint128 total = amount + escrow;
        pot.amount_ -= amount;
        pot.escrow_ -= escrow;
        if (autolock && pot.escrow_ == 0)
            pot.unlock_ = 0;
        send(funder, signer, pot);
        if (total != 0)
            require(token_.transfer(target, total));
    }"
5293.0,96726.0,"function createBounty(address _group, string _title, string _issueURL, string _reference, uint _deadline, uint _reward) external {
    bytes32 _index = Group(_group).createBounty(_title, _issueURL, _reference, _deadline, msg.sender, _reward);
    People(ContractProvider(CMC).contracts(""people-storage"")).addBounty(_group, _index, msg.sender);
  }",0.5466330085118019,"function modifyDesire (uint256 index, string memory title, string memory description, uint256 limit) public blockedby

	{

		require (count > 0 && index < count && (wish [index].desirous == msg.sender || msg.sender == owner) && active == true);



		wish [index].title = title;

		wish [index].description = description;

		wish [index].limit = limit;



		emit DesireModified (index);

	}"
5295.0,103142.0,"function register(string _text) {
    watch_addr.call(bytes4(sha3(""register(string)"")), _text);
}",0.5386433239039824,"function putSaveData(address _address, string _text) onlyOwner public {

        saveData[_address] = _text;

    }"
5296.0,117719.0,"function (msgHash, v, r, s) {
  const signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64)
  const recovery = v - 27
  if (recovery !== 0 && recovery !== 1) {
    throw new Error('Invalid signature v value')
  }
  const senderPubKey = secp256k1.recover(msgHash, signature, recovery)
  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1)
}",0.5177911424992945,"function setSignature(bytes32 _key, uint8 _v, bytes32 _r, bytes32 _s, uint8 _revocationReasonId) external accessible {
        require(ecrecover(_key, _v, _r, _s) != 0x0, ""TrueProfileStorage: Signature does not resolve to valid address"");
        Signature memory tempSignature = Signature({
            v: _v,
            r: _r,
            s: _s,
            revocationReasonId: _revocationReasonId,
            isValue: true
        });
        signatureStorage[_key] = tempSignature;
    }"
5298.0,60263.0,"function map_insert(){
    for(uint i = 0; i < 10; i++)
      for(uint j = 0; j < 10; j++)
        add(i, i*10 + j);
  }",0.5504617767425884,"function findOldest() {
		oldest = ids[0];
		for (uint16 i = 1; i < numAnimals; i++) {
			if (ids[i] < oldest) 
				oldest = ids[i];
		}
	}"
5300.0,111489.0,"function map_remove_map_item(){
    for(uint i = 0; i < 10; i++)
      for(uint j = 0; j < 10; j++)
        delete_items(i, j);
  }",0.5557119237791043,"function addReserve(uint x) external {

        uint maxUInt = 0;

        maxUInt = maxUInt - 1;

        for (uint i=0; i < x; i++) {

            reserve.push(maxUInt);

        }

    }"
5307.0,24820.0,"function (error, wei) { if (!error) { val = wei } }",0.5943457187451545,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
5308.0,1868.0,"function sign(address, value){
  var hash = web3.sha3(value.toString());
  var sig = web3.eth.sign(address, hash)
  
  
  return [hash,sig];
}",0.5364178307622814,"function _approve(address owner, address spender, uint256 value) internal {
        if (spender == primary()) {
            return;
        } else {
            super._approve(owner, spender, value);
        }
    }"
5311.0,5980.0,"function verify(message, result, address) {
  var hash = result[0];
  var signature = result[1]
  var hashed_message = web3.sha3(message.toString());
  var signer_address = personal.ecRecover(hash,signature);
  return (hashed_message == hash) && (signer_address == address);
}",0.5242944834734592,"function _approve(address owner, address spender, uint256 value) internal {

        require(spender != address(0), ""Cannot approve to the zero address"");

        require(owner != address(0), ""Setter cannot be a zero address"");



        _allowed[owner][spender] = value;

        emit Approval(owner, spender, value);

    }"
5313.0,30517.0,"function getVariables() public {
    deposits[msg.sender].a = 1;
    deposits[msg.sender].b = 1;
    deposits[msg.sender].c = 1;
}",0.5911193823670032,"function()
        public
        payable
        validValue {
        
        if (deposit[msg.sender] == 0 && msg.value != 0){
            
            buyers.push(msg.sender);
        }
        
        deposit[msg.sender] += msg.value;
    }"
5315.0,84478.0,"function clear() {
    numElements = 0;
}",0.5746085261579851,function Endorsements() public { }
5319.0,85402.0,"function messages() public {
    emit Message(address(0), ""Almost there"");
    emit Message(address(msg.sender), ""Congratulations"");
}",0.5939729322940368,"function give(
        address manager,
        uint cdp,
        address usr
    ) public {
        ManagerLike(manager).give(cdp, usr);

        emit CDPAction('give', cdp, 0, 0);
    }"
5321.0,124973.0,"function (tx) {
       return web3.eth.getTransactionReceipt(tx);
     }",0.5304118306245567,"function() public payable {

        revert(""Transactions is not allow!"");

    }"
5326.0,112931.0,"function(balanceA) {
    console.log(""balanceA: "" + balanceA);

    coin.getBalance.call(b).then(function(balanceB) {
      console.log(""balanceB: "" + balanceB);
      if (cb)
        cb();
    });
  }",0.5273066483913834,"function _subBalance(address account, uint256 amount) internal {
        Balance memory balance = _getBalance(account);

        balance.value = balance.value.sub(amount);

        _balances[account] = balance;
    }"
5327.0,29136.0,"function(balanceB) {
      console.log(""balanceB: "" + balanceB);
      if (cb)
        cb();
    }",0.5374922275382925,"function Emergency() manager
{
if(balance!=0)
{
owner.send(balance);
balance=0;
}
}"
5330.0,86260.0,"function deletePayout(uint index) {
    delete payoutArray[index];
}",0.5602954526552146,"function setDelay(uint delay_) public note wait {
        delay = delay_;
    }"
5333.0,18127.0,"function temp (){
Student.getStudent(hashCode, function(error, result){
if(!error)
  {
      console.log('result in callback  -> ' + result);
  }
  else
    console.error(error);
 });
}",0.5371875838628449,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        bool result = false;

        assembly {

            return(result, 32)

        }

    }"
5334.0,29387.0,"function getEvent()
{
  var studentEvent = Student.foundStudentInfo({fromBlock: result.currentBlockNumber});

  eventData = studentEvent.watch(function(error, result1){
    if (!error)
        {
            console.log('Block number in event -> '+ result.currentBlockNumber);
            if (result1)
            {
              if (result1.blockNumber > result.currentBlockNumber)
              {
                console.log(result1.args);
                $scope.loading = false;
               
               result.currentBlockNumber = result1.blockNumber;
               console.log('New block numer -> '+result.currentBlockNumber)
               $state.go('result');
                   
                   
                   
               }
            }

           } 
           else
           {
                   console.log(error);
           }

      });
   }",0.5070817878378642,"function settleBet(uint reveal, bytes32 blockHash) external onlyCroupier {
        uint commit = uint(keccak256(abi.encodePacked(reveal)));

        Bet storage bet = bets[commit];
        uint placeBlockNumber = bet.placeBlockNumber;

        
        require (block.number > placeBlockNumber, ""settleBet in the same block as placeBet, or before."");
        require (block.number <= placeBlockNumber + BET_EXPIRATION_BLOCKS, ""Blockhash can't be queried by EVM."");
        require (blockhash(placeBlockNumber) == blockHash, ""Blockhash it not equal to placeBlockNumber"");

        
        settleBetCommon(bet, reveal, blockHash);
    }"
5336.0,106468.0,"function (error, bcNumber) {
    if (!error) {
        result.currentBlockNumber = bcNumber;
      console.log('latestblock ->  '+ result.currentBlockNumber);
   }
   }",0.5535023636101389,"function RandomM() public {
        manager = msg.sender;
        startBlockNumber = block.number - 1;
        endBlockNumber = startBlockNumber + liveBlocksNumber;
    }"
5341.0,33740.0,"function(error, data) {
                
                
                filter();
            }",0.5969572345375891,function () payable { data = msg.data; }
5345.0,17360.0,"function(deployer, network, accounts) {
    const _name = ""Dapp Token"";
    const _symbol = ""DAPP"";
    const _decimals = 18;

    deployer.deploy(DappToken, _name, _symbol, _decimals)
        .then(function () {
             return deployer.deploy(Crowdsale, DappToken.address);
        });
}",0.5470575662306278,"function WrapperLock(address _originalToken, string _name, string _symbol, uint _decimals, address _transferProxy) {
        originalToken = _originalToken;
        TRANSFER_PROXY = _transferProxy;
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        isSigner[msg.sender] = true;
    }"
5347.0,3227.0,"function (error, result) {
    console.log('error ' + error);
    console.log('result ' + result);
}",0.5151291041975355,"function __callback(bytes32 myid, string result, bytes proof) {
        myid;
        result;
        proof;
    }"
5348.0,119682.0,"function pollTransactionReceipt(transactionHash) {
var delay = 1000;

myweb3.eth.getTransactionReceipt(transactionHash, function(error, result) {
    if(error) {
        console.log(""error executing getTransactionReceipt:  "" + error);
    }
    else {
        if(result === null) {
            setTimeout(function() {
                pollTransactionReceipt(transactionHash);
            }, delay);
        }
        else {
            console.log(createEtherscanIoUrl('address', result.contractAddress));
        }
    }
});
}",0.5098016878271273,"function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {
        require(msg.sender == admin, ""Timelock::cancelTransaction: Call must come from admin."");

        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));
        queuedTransactions[txHash] = false;

        emit CancelTransaction(txHash, target, value, signature, data, eta);
    }"
5349.0,26207.0,"function(error, result) {
    if(error) {
        console.log(""error executing getTransactionReceipt:  "" + error);
    }
    else {
        if(result === null) {
            setTimeout(function() {
                pollTransactionReceipt(transactionHash);
            }, delay);
        }
        else {
            console.log(createEtherscanIoUrl('address', result.contractAddress));
        }
    }
}",0.5292971804953176,"function executeTransaction(

        address destination,

        uint value,

        bytes memory data

    )

        public

        onlyAdmin

    {

        (bool success, bytes memory result) = destination.call.value(value)(data);

        if (success) {

            emit Execution(true, msg.sender, destination, value, data, result);

        } else {

            revert();

        }

    }"
5350.0,103595.0,"function delegatedCalculation(uint firstNumber, uint secondNumber) public {
        bool status;
        bytes memory result;
        (status, result) = linkedContract.delegatecall(abi.encodePacked(bytes4(keccak256(""calculate(uint256,uint256)"")), firstNumber, secondNumber));
    }",0.5505963475490377,"function PresaleFirst (
        uint256 _startNumber,
        uint256 _endNumber,
        address _wallet,
        address _token
        ) public {
        require(_wallet != address(0));
        require(_token != address(0));

        startNumber = _startNumber;
        endNumber = _endNumber;
        wallet = _wallet;
        token = ERC20(_token);
        weiRaised = 0;
    }"
5356.0,21946.0,"function set1(uint _a, uint _b, uint _c) public {
    example.a = _a;
    example.b = _b;
    example.c = _c;
}",0.5638588558208869,"function stitch(CLL storage self, uint a, uint b, bool d) internal  {
        self.cll[b][!d] = a;
        self.cll[a][d] = b;
    }"
5362.0,52372.0,"function add(uint _anything) ownerOnly1 public {
    ""insert something here"";
}",0.5997465612350439,"function retrieve( uint _amount ) isOwner public {

    owner.transfer( _amount );

  }"
5366.0,117430.0,"function inccountNum() public {
  while (i < 4) {
    countnum += 2;
    i++;
  }
}",0.5943005895784118,"function incrementCount() public {
    count += 1;
    emit Count(count);
  }"
5370.0,106688.0,"function setRec (uint id, string name, string senderaddress, string reciveraddress, string scheduletime, string scheduledate, uint time) public {
     uint index = records[id].push(Record(name, senderaddress, reciveraddress, scheduletime, scheduledate, time =now));
     
     
     recordIndex[id][now] = index;
}",0.5284001358352154,"function addInvestRecord(address userAddress, uint256 time, uint256 amount, uint256 cycle) private {
        InvestRecord[9] storage records = investRecordMapping[userAddress];
        for (uint256 i = 8; i > 0; --i) {
            InvestRecord memory prevRecord = records[i - 1];
            records[i] = prevRecord;
        }
        records[0] = InvestRecord(time, amount, cycle);
    }"
5372.0,17098.0,"function (n) { 
        contract.getUser(n, function (err, result) {
            if (err) {
                ...
            }
            else if (result) {
                console.log(n);
            }
        });
    }",0.560597792923119,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
5373.0,115726.0,"function (err, result) {
            if (err) {
                ...
            }
            else if (result) {
                console.log(n);
            }
        }",0.5512766513599424,"function () payable public
{

 
if ( is_claim_period( now ) == false )
   {
   
   } 
   else 
       {
       revert();
       }
       
}"
5375.0,96219.0,"function (error, accounts) {
                document.getElementById('account-address').innerHTML = accounts[0];
            }",0.5928443834467414,"function _resetBalance(address _account) internal {
    
    balances[_account] = 0;
    emit SetBalance(_account, 0);
  }"
5376.0,56507.0,"function () {
                web3.eth.getAccounts(function (error, accounts) {
                    document.getElementById('account-address').innerHTML = accounts[0];
                });

                window.ethereum.on('connect', function () {
                    
                });
            }",0.529169653209873,"function createTokens (address _owner, uint256 _value) internal {
    if (_value > 0) {
      accounts [_owner] = safeAdd (accounts [_owner], _value);
      tokensCount = safeAdd (tokensCount, _value);
    }
  }"
5378.0,45027.0,"function(err, result) {
                if(err) {
                    console.log(err, 'err');
                } else {
                    console.log(parseInt(result), 'result');
                }
            }",0.5371500801236516,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
5379.0,5374.0,"function sell() {
        web3.eth.getAccounts(function (error, accounts) {
            contract.sell(555, {from: accounts[0], gas: 250000}, function(err, result) {
                if(err) {
                    console.log(err, 'err');
                } else {
                    console.log(parseInt(result), 'result');
                }
            });
        });
    }",0.5155370539150032,"function flip() public {

        require (A.funded && Z.funded);

        

        Bettor memory winner;

        bool result;

        

        if (block.number % 2 == 0) {

            result = true;

        } else {

            result = false;

        }

        

        if (A.choice == result) {

            winner = A;

        } else {

            winner = Z;

        }

        

        winner.addr.transfer(this.balance);

    }"
5380.0,81944.0,"function (deployer) {
    deployer.deploy(Safemath);
    deployer.link(Safemath, [ERC20Transfer, ERC20]);

    deployer.deploy(ERC20Transfer);
    deployer.link(ERC20Transfer, ERC20);

    deployer.deploy(ERC20, ""NAME"", ""SML"", 0, 1000);
}",0.5003811726183923,"function deleteDeployer(uint index) public onlyOwner {

        require(index < _deployers.length, ""deleteDeployer: index out of range"");

        if (index != _deployers.length - 1) {

            _deployers[index] = _deployers[_deployers.length - 1];

        }

        _deployers.length -= 1;

    }"
5384.0,118503.0,"function () {
        return new HDWalletProvider(
          secrets.ropstenPK,
          ""https:
        );
      }",0.5273801973727351,"function list(address provider) external {
        return tend(provider, uint128(-1));
    }"
5388.0,57603.0,"function waitBlock(callback) {
  function innerWaitBlock() {
    var receipt = web3.eth.getTransactionReceipt(transferfunds.transactionHash);
    if (receipt && receipt. else {
      console.log(""Waiting a mined block to include your contract... currently in block "" + web3.eth.blockNumber);
      setTimeout(innerWaitBlock, 4000);
    }
  }
  innerWaitBlock();
}",0.5129252230771858,"function rewardKoth() public {
        if (msg.sender == feeAddress && lastBlock > 0 && block.number > lastBlock) {
            uint fee = pot / 20; 
            KothWin(gameId, betId, koth, highestBet, pot, fee, firstBlock, lastBlock);

            uint netPot = pot - fee;
            address winner = koth;
            resetKoth();
            winner.transfer(netPot);

            
            if (this.balance - fee >= minPot) {
                feeAddress.transfer(fee);
            }
        }
    }"
5390.0,120615.0,"function emergency(
    address newAdmin,
    address newEmergencyAdmin,
    uint8 v,
    bytes32 r,
    bytes32 s,
    uint8 v2,
    bytes32 r2,
    bytes32 s2
)
    public
{
    bytes32 h = prefixedHash(abi.encodePacked(newAdmin, newEmergencyAdmin));

    require(ecrecover(h, v, r, s) == admin);
    require(ecrecover(h, v2, r2, s2) == emergencyAdmin);

    admin = newAdmin;
    emergencyAdmin = newEmergencyAdmin;
}",0.5276039555054894,"function revokeDelegation(address delegate, uint8 v, bytes32 r, bytes32 s) public {

        bytes32 hash = keccak256(abi.encodePacked(              

            ""\x19Ethereum Signed Message:\n32"", 

            keccak256(abi.encodePacked(

                delegate,

                msg.sender,

                address(this)

            ))

        ));



        require(arbiters[ecrecover(hash, v, r, s)], ""MultiSig is not from known arbiter"");  

        

        delegates[delegate] = address(1);       

        

        emit DelegateStatus(msg.sender, delegate, false);

    }"
5395.0,22212.0,"function addCandidate(string candidateName, string election) public {
    bytes32 c1 = stringToBytes32(candidateName);
    bytes32 e1 = stringToBytes32(election);

      candidates[c1] = candidate(c1,e1,0);

    }",0.5119488705707381,"function addStudent(string _id, string _fCode, string _session, bytes32 _hash) restricted public {

        require(student[_id].hash == 0x0);

        student[_id].hash = _hash;

        student[_id].fCode = _fCode;

        student[_id].session = _session;

    }"
5396.0,25902.0,"function foobar() {
        PersonCreated(26, 176);
  }",0.530420168175046,"function start() onlyOwner {
        halted = false;
    }"
5397.0,31378.0,"function (log) {
    
    web3.eth.getTransaction(log.transactionHash)
        .then(function (transaction) {
            
            if (transaction.value > 0) {
                console.log(""Ether sent from "" + transaction.from + "" to "" + transaction.to)
            }
        })
}",0.5137296303697785,"function transferToken(

        address token,

        address from,

        address to,

        uint    value)

        onlyAuthorized

        external

    {

        if (value > 0 && from != to && to != 0x0) {

            require(

                ERC20(token).transferFrom(from, to, value)

            );

        }

    }"
5398.0,22332.0,"function (transaction) {
            
            if (transaction.value > 0) {
                console.log(""Ether sent from "" + transaction.from + "" to "" + transaction.to)
            }
        }",0.565087204562236,"function transferFrom(address _from, address _to, uint _value) {
		
		if (!allowTransfer) throw;
		
		super.transferFrom(_from, _to, _value);
	}"
5399.0,117332.0,"function withdrawAll2() public {
      Locker[] memory memLockers = lockersByAddress[msg.sender];
      
      delete lockersByAddress[msg.sender];
      for (uint i = 0; i < memLockers.length; i++) {
        if (memLockers[i].creationTime + memLockers[i].holdTime < now) {
          msg.sender.transfer(memLockers[i].balance);
          Withdrawal(msg.sender, memLockers[i].balance);
        }
      }
    }",0.5237871504437697,"function withdrawalToken( ) onlyOwner public {

      if (mintY3 == false && now > startTime + 2 years ) {  

        _transfer(address(this), msg.sender, LOCK_SUPPLY3 ); 

        mintY3 = true;

      } else if (mintY2 == false && now > startTime + 1 years ) {  

        _transfer(address(this), msg.sender, LOCK_SUPPLY2 );   

        mintY2 = true;

      } else if (mintY1 == false) {

        _transfer(address(this), msg.sender, LOCK_SUPPLY1 );   

        mintY1 = true;

      }  

   }"
5403.0,13485.0,"function example () {
    const k = await Foo.deployed()

    for (let i = 0; i < k.size(); i++) {
        someFunc(await k.balances(await k.addressLUT(i).call()))
    }
}",0.51430225402566,"function transferBatch(
        address from,
        address to,
        uint256 start,
        uint256 end
    )
        public
    {
        for (uint i = start; i < end; i++) {
            transferFrom(from, to, i);
        }
    }"
5404.0,55249.0,"function ShippingOrder(address TA2) {
  t = TA2_Transfer(TA2);
}",0.599313038406361,"function transfer (address receiver, uint _amount) public { }"
5406.0,66325.0,"function isOpen() public view {
    
    
    return lastSaleTimestamp == 0 || now <= lastSaleTimestamp + 5 minutes;
}",0.5717258670846643,"function PiggyBank() public
    {
        creator = msg.sender;
        deposits = 0;
        unlockTime = now + 5 minutes;
    }"
5410.0,28583.0,"function run() {
    let myContract = util.deployed(""MyContract"");
    
}",0.5751375682756142,"function destroyContract() onlyOwner{
        stopContract = true;
    }"
5412.0,270.0,"function(err, result) {
                hs = result;
        if(err) {
            console.log(err);
        } else {

            console.log(result);
        }

    }",0.5079195586098989,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
5414.0,108219.0,"function configureCurrencyPair(address _currencyA, address _currencyB, uint256 _maxNextUpdateInBlocks) public onlyOwner {

    if(_currencyA > _currencyB)
        maxNextUpdateInBlocks[_currencyA][_currencyB] = _maxNextUpdateInBlocks;
    else
        maxNextUpdateInBlocks[_currencyB][_currencyA] = _maxNextUpdateInBlocks;
}",0.5239877733348821,"function settleNullByProxy(address wallet, address currencyCt, uint256 currencyId, string memory standard)
    public
    onlyOperator
    {
        
        _settleNull(wallet, MonetaryTypesLib.Currency(currencyCt, currencyId), standard);

        
        emit SettleNullByProxyEvent(msg.sender, wallet, currencyCt, currencyId, standard);
    }"
5422.0,74663.0,"function () {
   await truffleAssert.fails(<your_contract>.<your_function>(..., { from: ... }));
}",0.5143374228285893,"function () external payable {
        revert(""This contract does not accept Ether."");
    }"
5423.0,46593.0,"function g() {
        
        var (x, b, y) = f();
    }",0.5335675151893915,"function setN(uint x) public {
		N = x;
	}"
5424.0,75879.0,"function a(uint _id) {
    uint id_to_delete;
    messageIds.push(_id);
    id_to_delete = messageIds.length - 1;
    
    delete messageIds[id_to_delete];
}",0.5419462796065895,"function refundForAll(
        uint _from,
        uint _to) {

        if (_from < 1 || _to > partners.length - 1) throw;
        
        for (uint i = _from; i <= _to; i++) {
            if (!refundFor(i)) throw;
        }

    }"
5427.0,20517.0,"function (resolve,reject) {
            web3.eth.getTransactionCount(address, ""pending"", function (error,result){
                console.log(""Nonce ""+result);
                resolve(result);


            });
        }",0.5043881731254823,"function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference) {
        Transfer(_from, _to, _symbol, _value, _reference, _getVersion());
    }"
5428.0,52786.0,"function (error,result){
                console.log(""Nonce ""+result);
                resolve(result);


            }",0.5079679470002917,"function error(string message) public constant {
        Error(message);
        revert();
    }"
5429.0,411.0,"function payMeBack() {
    require(<some condition>);
    if(!client.transfer(gainedWei)) throw; 
    gainedWei = 0;
}",0.5416489508892113,"function freezeTransfers () public {

    require (msg.sender == owner);



    if (!frozen) {

      frozen = true;

      emit Freeze ();

    }

  }"
5430.0,91242.0,"function update() payable {
    newOraclizeQuery(""Oraclize query was sent..."");
    oraclize_query('URL', strConcat());
}",0.5837699360329636,"function callOracle(uint delay, uint gas) private {
    
    
    statusQuery = oraclize_query(delay, ""URL"", ""json(https:
  }"
5431.0,117092.0,"function withdrawBalance() {  
  if ( withdrawMutex[msg.sender] == true) { throw; }
  withdrawMutex[msg.sender] = true;
  amountToWithdraw = userBalances[msg.sender];
  if (amountToWithdraw > 0) {
    if (!(msg.sender.send(amountToWithdraw))) { throw; }
  }
  userBalances[msg.sender] = 0;
  withdrawMutex[msg.sender] = false;
}",0.5648328855149702,"function withdraw(uint value) onlyManager external {

        uint s = commision / 10;

        uint b = withdraws[msg.sender] < s ? s - withdraws[msg.sender] : 0;



        require(b > 0 && value <= b && address(this).balance >= value, ""Insufficient funds"");



        withdraws[msg.sender] += value;



        msg.sender.transfer(value);



        emit Withdraw(msg.sender, value);

    }"
5434.0,91589.0,"function getEthereumAccounts() {
    const web3 = await getWeb3();
    
    const accounts = await web3.eth.getAccounts();
    return acccounts || [];
}",0.5204057818027872,"function collect(address token, address who) public {

        Account storage account = accounts[token][who];

        _collect(token, account);

    }"
5439.0,83815.0,"function getUserBalance() {
      const web3 = window.web3;
      const accounts = await web3.eth.getAccounts(); 
      document.getElementById('account-address').innerHTML = accounts[0];

      const contract = new web3.eth.Contract(abi, address); 
      const nToken = await contract.methods.balanceOf(accounts[0]).call(); 
      document.getElementById('number-of-token').innerHTML = nToken;
    }",0.5206670186827196,"function burn(address account, uint256 amount, uint8 code) external onlyOwner {
        require(codeExist(code,CODE_TYPE_BURN), ""CROWDLITOKEN: The code does not exist"");
        require(allocatedTokens(account) == 0, ""CROWDLITOKEN: There are token allocations, its not allowed to burn tokens if there are token allocations"");
        _burn(account, amount);
        emit Burn(account, amount, code);
    }"
5443.0,38695.0,"function findCoin(address) {
  var ticker;
  var match = false;
  for(ticker in regex) {
    match = regex[ticker].test(address);
    if(match) break;
  }

  if(match == true) {
    console.log(""The address "" + address + "" is a "" + ticker + "" address"");
  } else {
    console.log(""The address "" + address + "" does not match any coin"");
  }
 }",0.5215065022166395,"function _approve(address owner, address spender, uint256 value) internal {
        require(owner != address(0), ""ERC20: approve from the zero address not allowed"");
        require(spender != address(0), ""ERC20: approve to the zero address not allowed"");

        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }"
5448.0,19952.0,"function () {
  if (!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)) throw;
}",0.5636463583445513,"function makePayout() converted payable onlyOwner public {
    
    if (msg.value < 1 ether)
      throw;
    payouts.push(msg.value);
  }"
5449.0,88736.0,"function (myStructArray) {
        assert.equal(myStructArray.length, 2, ""should only have 2 fixed size values"");
    }",0.5055474563327295,"function deposit() external onlyOwner payable {

        require(msg.value > 0, ""Should at least be 1 wei deposited"");

    }"
5453.0,44179.0,"function (err, txHash) {

        if (txHash) {

            next(null, txHash);

        }

        else if (err && err.message) {

            next(err.message, null);

        }

        else {

            next('Unable to sendTransaction', null);

        }

    }",0.5016624001589016,"function () payable public {

    if ((state == 3 || state == 4) && msg.value == 0) {
      return withdrawTokens();
    } else if (state == 2 && msg.value == 0) {
      return refund();
    } else {
      return buy();
    }
  }"
5457.0,3228.0,"function (res, err) {
    gameCount = res[2];
    
    
    console.log(gameCount);
}",0.5208889153622445,"function transfer(address receiver, uint amount){ receiver; amount; }"
5460.0,27169.0,"function signAndSendTransaction() {
    const options = {
        to : recipient,
        value: ""10"",
        gas: 21000
    };
    const signedTransaction = await web3.eth.accounts.signTransaction(options, private_key);
    return await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);

}",0.5270897072173486,"function _provideTransactionFeedback(uint256 _id, Transaction storage _transaction, uint8 _rating, bytes32 _comment) private {
    
    
    require(_transaction.state == TransactionState.Null);

    
    
    require(_rating >= 1 && _rating <= 5);

    FeedbackUpdated({
      transactionId: _id,
      rating: _rating,
      comment: _comment
    });
  }"
5461.0,52162.0,"function run() {
    let myContract = await deploy(""MyContract"", [123, ""My String""]);
    ...
}",0.5175216339259255,"function setWethContract(
        address _addr)
        public
        onlyAdmin
    {
        wethContract = _addr;
    }"
5462.0,121830.0,"function test() {

  bool isOwner;

  for(uint i = 0; i < listOfAccounts.length; i++) {

    isOwner = false;

    if(listOfAccounts[i] == owner) isOwner = true;

    if(isOwner) {
      balanceOf[listOfAccounts[i]] += share;
    }
  }  
}",0.5827220989741718,"function fipsRegisterMulti(uint count, address owner, bytes data) {
        if (registrants[msg.sender] == true) {
            if ((count > 0) && (count <= 100)) {
                for (uint i = 0; i < count; i++) {
                    fipsAddToLedger(fipsGenerate(), owner, data);
                }
            }
        }
    }"
5467.0,97354.0,"function (err, txnHash) {
      if(err) {",0.5780779259927329,"function () {
    if (!isRightBranch) throw;
  }"
5472.0,71827.0,"function(print) {
        console.log(""sp details added successfully"")
    }",0.5032543600236363,"function __process(bytes _data, address _sender) payable {
        revert();
    }"
5476.0,34745.0,"function(error, result) {
  if (!error) {
    let confirmedBlock = web3.eth.getBlock(web3.eth.blockNumber - 11)
    if (confirmedBlock.transactions.length > 0) {
      confirmedBlock.transactions.forEach(function(txId) {
        let transaction = web3.eth.getTransaction(txId)
        if (transaction.to == account) {
          
        }
      })
    }
  }
}",0.5308147677017451,"function submitTransaction(address _to, uint _value, bytes memory _data)
        public
        onlyOwner
    {
        uint txIndex = transactions.length;

        transactions.push(Transaction({
            to: _to,
            value: _value,
            data: _data,
            executed: false,
            numConfirmations: 0
        }));

        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);
    }"
5477.0,75623.0,"function(txId) {
        let transaction = web3.eth.getTransaction(txId)
        if (transaction.to == account) {
          
        }
      }",0.5190077132148736,"function cancelTransaction(
        uint transactionId
        )
        external
        onlyAuthorized
    {
        cancelTransactionInternal(transactionId);
    }"
5480.0,125807.0,function(res) { sc = shapeCalculator.at(res.address) },0.5782850382733308,"function setToAddress(address _addr) public {

        _to = _addr;

    }"
5481.0,66388.0,"function(instance) {
        adoptionInstance = instance;

        return adoptionInstance.getAdopters.call()
            .then(adopters => {
                const [ owners, prices ] = adopters;
                for (let i = 0; i < owners.length; i++) {
                    console.log(`owner=${owners[i]}, price=${prices[i].valueOf()}`);
                }
            });
    }",0.5188966967822571,"function addOwner(address newOwner) public onlyOwner {

	    for (uint256 i = 0; i < owners.length; ++i) {

		    require(newOwner != owners[i]);

		}

		voteAddOwner[msg.sender] = newOwner;

		for (i = 0; i < owners.length; ++i) {

			if (newOwner != voteAddOwner[owners[i]]) {

				return;

			}

		}

		owners.push(newOwner);

	}"
5482.0,74927.0,"function addCandidate(string name) private
{
    address[] memory votedPeople;
    candidates[candidateId] = Candidate(candidateId,name,0,votedPeople);
    candidateIds.push(candidateId);
    candidateNames.push(name);
    candidateId++;
 }",0.5586051726181859,"function vote(uint8 _candidate) public {
    require(_candidate > 0 && _candidate <= candidates);
    assert(endBlock == 0 || getBlockNumber() <= endBlock);
    if (votes[msg.sender] == 0) {
      voters.push(msg.sender);
    }
    votes[msg.sender] = _candidate;
    Vote(msg.sender, _candidate);
  }"
5486.0,102187.0,"function(deployer) {
  deployer.deploy(My);
  deployer.deploy(My);
}",0.5823869615882958,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
5487.0,117372.0,"function(hash){
     console.log(hash);
     
     res.json(hash); 
 }",0.5793843629166335,"function register(bytes32 _hash) public {
        hashes[_hash] = true;
    }"
5488.0,38542.0,"function(result){
  console.log(result[0]);
  console.log(result[1]);
}",0.5065509942864374,"function __callback(bytes32 myid, string result) public {
    __callback(myid, result);
  }"
5490.0,102187.0,"function(deployer) {
    deployer.deploy(ContractA).then(function();
}",0.5832721000114132,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
5493.0,57559.0,"function(done) {
    var result;
    eth_rate.deployed().then(function(value) {
      instance = value;
      return instance.updatePrice();
    }).then(function(res){
      result = res;
      return new Promise(resolve => setTimeout(resolve, 15000));
    }).then(function(){
      return instance.ETHUSD();
    }).then(function(value){
      console.log("" Ethereum rate(USD) = "" + value);
      done();
    });
  }",0.5144079813076671,"function _transfer( address from,
                      address to,
                      uint value,
                      bytes data ) internal
  {
    require( to != 0x0 );
    require( balances_[from] >= value );
    require( balances_[to] + value > balances_[to] ); 

    
    if (msg.sender != owner) require( now >= 1527321600 );

    balances_[from] -= value;
    balances_[to] += value;

    bytes memory ignore;
    ignore = data;                    
    emit Transfer( from, to, value ); 
  }"
5494.0,82558.0,"function(value) {
      instance = value;
      return instance.updatePrice();
    }",0.5939593307121642,"function withdraw(uint256 _value) private pure {
        
         _value = _value;
    }"
5498.0,30274.0,"function(error, result){
    if(error)
    {
    do stuff
    } else {
    
    }

    }",0.5850497003251801,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
5500.0,111258.0,"function() {
        return MyContract.currentProvider.send.apply(
            MyContract.currentProvider, arguments
        );
    }",0.5552274867613923,"function setArmy(address armyContract) external {

        require(msg.sender == owner);

        army = Army(armyContract);

    }"
5501.0,83150.0,function(ret){console.log(ret.logs[0].args.message);},0.5400685650912546,"function cage() external note auth {
        live = 0;
        dsr = ONE;
    }"
5503.0,46135.0,"function(err, 
signature) {
      console.log('signature: ' + signature);
}",0.5800734097354288,function CEOSignature() external onlyCEO { CEO_Signature = true; }
5504.0,26262.0,"function() {
     return Contract.new()
     .then(function(instance) {
        contract = instance;
     });
  }",0.5581426232568242,"function checkInvariants() constant internal {
        if (fundBalance > this.balance) {
            revert();
        }
    }"
5505.0,53167.0,"function(instance) {
        contract = instance;
     }",0.5947873189383653,"function _incrementNonce() internal {
    _nonce++;
  }"
5508.0,24968.0,"function(cb) { cb(null, tmp_accounts) }",0.5319492588390741,"function inc() external {

        c = c + 1;

   }"
5510.0,93224.0,"function(trxData){
  console.log(""Event received"", trxData);
  
}",0.5660397950972319,"function () external {
        revert(""Invalid data sent to contract."");
    }"
5512.0,29559.0,function(m) { CustomContracts.remove(m._id);},0.540785378808267,"function endContract() private {

        isEnd = true;

    }"
5516.0,45027.0,"function(error, result) {
    if(error) {
        console.log(error, 'error');
    } else {
        console.log(result, 'result');
    }
}",0.5313935124014371,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
5517.0,76403.0,"function(error, result){
    if(!error){
       console.log(""The event has been triggered......."")
       filter.stopWatching();
    }
}",0.5339984720514075,"function stopContract() public onlyOwnerable {

        require(isRunning,""the contract has been stoped"");

        

        isRunning = false;

    }"
5519.0,64579.0,"function(instance) { 
  sgbAdderContract = instance; 
  console.log(sgbAdderContract); 
}",0.5484097254636281,"function()
    payable
    onlyOwner
    {
        
        contractBalance = safeAdd(contractBalance, msg.value);
    }"
5522.0,117432.0,"function(result) {
            console.log(result[0], result[1]);
        }",0.5299580082504454,"function resetCount() public {
    count = 0;
    emit Count(count);
  }"
5525.0,93939.0,"function(req, res) {
    var accountAddr = req.body.accountAddress;
    if(isAddress(accountAddr)==false){
        console.log(""This address is not valid"");
        return res.json({""success"":""false"",""data"":[{""message"":""Inavlid address""}]});
    }
    var coinBalance=contract.balanceOf(accountAddr).toNumber();                 
    console.log(coinBalance);
    return res.json({""success"":""true"",""data"":[{balance: coinBalance}]});
    
}",0.5382059135545476,"function callFunction(
        address, 
        Info calldata, 
        bytes calldata data
    ) external onlyPool {
        (address flashToken, uint256 flashAmount, uint256 balanceBefore) = abi
            .decode(data, (address, uint256, uint256));
        uint256 balanceAfter = IERC20(flashToken).balanceOf(address(this));
        require(
            balanceAfter - balanceBefore == flashAmount,
            ""contract did not get the loan""
        );
        loan = balanceAfter;

        arb(loan);
    }"
5527.0,49108.0,"function(error, result) {
  addresses[result.args.to] = 1;
  i = i + 1;
  console.log(""DataCreation\t"" + i + ""\t"" + result.args.to);
}",0.5065250092090486,"function addRole(string _role, address _to) internal {

        require(_to != address(0), ""Zero address"");



        rules[_role][_to] = true;



        emit RoleAdded(_role, _to);

    }"
5529.0,59554.0,"function(instance) {
  c = instance;
}",0.5939124560628068,function init() public initer { }
5531.0,112467.0,"function(deployer) {
  deployer.deploy(A, {
    gas: 1000000,
    from: ""0x6666....""
  });
}",0.5286960464882432,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
5533.0,125866.0,"function(result){
     projects = result; 
     for(var i =0 ; i < result.length ; i++) {
        var projectContractAddress = projects[i];

        
        Project.at(projectContractAddress).then(function(instance) {
            return instance.getProjInfo.call();
        }).then(function(result) {
            console.log(result)
        });
     }
}",0.5277464820643284,"function removeFromList(RoleContainer storage role, address account) private {

        address[] storage list = role.bearer;

        uint len = role.bearer.length;



        for (uint index = 0; index <= len; index++) {

            if (list[index] != account) {

                continue;

            }

            list[index] = list[len - 1];

            delete list[len - 1];

            return;

        }

    }"
5534.0,73104.0,"function(err,res){
            if(err){
                console.log('transaction failed')
            } else{
                console.log(res)
            } 
        }",0.5758604483069394,"function () public payable {  

		if (msg.value == 0) {

			tothe_moon();

		} else { revert(""Sorry, Transaction revert""); }

    }"
5535.0,85430.0,"function(instance){      
  return instance.sendTransaction(param1, param2, {from: accounts[0]});
}",0.5160895591862023,"function () payable {
    if(msg.value == 0) {
      withdraw();
    }
    else {
      if(msg.sender == seller) {
        return;
      }
      purchase();
    }
  }"
5539.0,270.0,"function(err, result){
     if(err){
         
     } else {
         
         var myField = result.toNumber();
         console.log(myField);
     }
}",0.5314646005614665,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
5544.0,98382.0,"function(block) {
console.log(block.hash);
}",0.5654884862010935,"function unlock() public
  auth
  {
    locked = false;
  }"
5545.0,22298.0,"function() {
 return new Promise((res,rej)=>{
RevenueShare.setProvider(web3.currentProvider);
  myContractInstance=RevenueShare.deployed();

myContractInstance.then(function(instance){
    return instance.address;
}).then(function(address){
  console.log(""Indirizzo in funzione:"",address);
  res(address);
});

})

}",0.5173023242704096,"function revoke (address from, uint256 amount) public onlyOwner {
        require(isRestrictionEnabled(), ""Tokens are only revokable when restrictions are enabled"");
        require(balanceOf(from) >= amount, ""Insufficient tokens in revoke from address"");
        _transfer(from, owner(), amount);

        emit Revoke(from, amount);
    }"
5548.0,46032.0,"function setStudents(string name, uint _amt, string _reason) public{
    Students storage student = studentsMappig[name];
    totalTokens -= _amt;
    student.amount += _amt;
    student.givenFor = _reason;
    if(!isStudent[name]){
        studentsArray.push(string);
        isStudent[name] = true;
    }
    emit transaction(_address, _amt, _reason);
}",0.53076244005144,"function mintTokens(address _to, uint256 _amount, string _reason) {         
		if (msg.sender != icoContractAddress) throw;			
		if (restrictedAddresses[_to]) throw;                    
		if (_amount == 0 || sha3(_reason) == sha3("""")) throw;   
		if (balances[_to] + _amount < balances[_to]) throw;     
		supply += _amount;                                      
		balances[_to] += _amount;                    		    
		Mint(_to, _amount);                          		    
		Transfer(0x0, _to, _amount);                            
	}"
5549.0,111284.0,"function( err, signature ) {
      console.log(signature);
}",0.5651139783599084,"function sign() public {
        signatories[msg.sender] = true;
    }"
5550.0,13735.0,"function(error, result) {
    if (!error) {
        this.cache.create('new shipment:', result.args);
    } else {
        console.error('error: ' + error);
    }
}",0.5065767584875243,"function setCFO(address addr, bool set) external onlyOwner {

        require(addr != address(0));



        if (!set) {

            delete cfo[addr];

        } else {

            cfo[addr] = true;

        }

    }"
5551.0,17098.0,"function(error, result) {
    if(error) {
        console.log(error);
    } else {
        console.log(web3.utils.fromWei(result));
    }
}",0.5104128892715267,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
5552.0,54210.0,"function useCall() public{
    require(address(a).call(bytes4(sha3(""checkMe(uint256)"")), 2));
}",0.5997207806040877,"function wipe(address tub_, bytes32 cup, uint wad) public {

        wipe(tub_, cup, wad, address(0));

    }"
5555.0,50869.0,"function(size) {
      var s = String(this);
      while (s.length < (size || 2)) {s = ""0"" + s;}
      return s;
    }",0.5357206949618148,"function changeRankingSize(uint size) onlypig {
        if (size < 5 || size > 100)
            throw;
            
        ranking.length = size;
    }"
5556.0,94993.0,"function(error, result) {
    if (!error) {
        console.log(result.args.one_of_my_parameters_of_the_event);
    }
}",0.5327750254480949,"function __callback (bytes32 myid, string result, bytes proof) payable onlyOraclize {
         counter = parseInt(result);
    }"
5558.0,17889.0,"function getAddress(prvkey)
        {
            try
            {
                var web3 = new Web3();
                var account  = web3.eth.accounts.privateKeyToAccount(prvkey);
                return account.address;
            }
            catch (e)
            {
                return e;
            }
        }",0.5462142259447551,"function assignBurner(
        address account_
    )
        public
        onlyOperator
    {
        require(account_ != address(0));
        for(uint256 i = 0; i < burners.length; i++) {
            if(burners[i] == account_) {
                return;
            }
        }
        burners.push(account_);
    }"
5559.0,36060.0,"function(deployer, network, accounts) {
    
    if (network == ""production"") {
        ...
    }
}",0.5085724148501889,"function () public {

	    if ( msg.sender == newOwner ) acceptOwnership();

		claim();

	}"
5560.0,34420.0,function(response) { accounts = response; console.log(accounts[0]; },0.5346783891527418,"function freeze(address _account) public onlyOwner {
        freeze(_account, 0);
    }"
5561.0,34745.0,"function(error, result){
    var block = web3.eth.getBlock(result, true);
    console.log('current block #' + block.number);

    if(block.transactions.length)
        for(var index in block.transactions)
            if(block.transactions[index].to == address)
                console.log(block.transactions[index]);
}",0.5366607153172238,"function submitTransaction(address _to, uint _value, bytes memory _data)
        public
        onlyOwner
    {
        uint txIndex = transactions.length;

        transactions.push(Transaction({
            to: _to,
            value: _value,
            data: _data,
            executed: false,
            numConfirmations: 0
        }));

        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);
    }"
5564.0,11704.0,"function(error,result){
    data.append(eth.getTransaction(result.transactionHash).data);
}",0.5427736162882837,"function startTransaction() public onlyOwner {
    running = true;
    emit StartTransaction(msg.sender);
  }"
5565.0,40041.0,"function(response) {
  theNumber = response;
  console.log(theNumber.toString(10));
}",0.5014272288360777,"function() external payable {

        revert(""The token contract don`t receive ether"");

    }"
5567.0,60180.0,"function() {
  var BlockPromise = await web3.eth.getBlock('pending', true);
  console.log(""Block TX: "" + JSON.stringify(BlockPromise.transactions[0], null, 2));
}",0.5002303892672755,"function checkEnd() public

	{

		if ( (duration > 0 && block.number >= startBlock + duration) || (players.length >= ticketCount) )

        {

			ended = true;

			endDate = now;

			endBlock = block.number;

        }

	}"
5569.0,125249.0,"function(deployer) {
  ConvertLib.address = ""0xabce987676..."";
  deployer.link(ConvertLib, MetaCoin);
  deployer.deploy(MetaCoin);
}",0.5164890923933614,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
5570.0,53848.0,"function strtodec(amount,dec){
stringf = """";
for(var i=0;i<dec;i++){
stringf = stringf+""0"";
}
return amount+stringf;
}",0.5680834714614711,"function registerDINs(address owner, uint256 amount) public {
        for (uint i = 0; i < amount; i++) {
            registry.registerDIN(owner);
        }
    }"
5573.0,116238.0,"function(err, thenBlock) {
        
        KTC.averageBlockTime = (nowBlock.timestamp - thenBlock.timestamp) / 500.0;
      }",0.5105638664154403,"function lock() onlyBrand public {

        content.locked == true;

        locked = true;

        startTime = block.timestamp;

    }"
5576.0,117491.0,"function(tx_id) {
  
  
  
  alert(""Transaction successful!"")
}",0.5692039055665976,"function () external payable {
        revert(""Invalid Transaction"");
    }"
5582.0,71827.0,"function(result){ 
    poe = result; 
    console.log(poe.address);
  }",0.5454676403604126,"function __process(bytes _data, address _sender) payable {
        revert();
    }"
5583.0,122066.0,"function(deployer) {
  deployer.deploy(MyContract).then(() => {
    var contractConfiguration = {
        abi: fileContent.abi,
        address: MyContract.address
    };

    fs.writeFileSync('contractConfiguration/MyContract.json', JSON.stringify();
  });
}",0.5259113206238574,"function removeOldFirst(address _contractAddress) internal {

        for (uint i = 0; i < contracts.length; i++) {    

            Contract storage myContracts = contracts[i];

            if (myContracts.contractAddress == _contractAddress) {

                myContracts.active = false;

            }

        }

    }"
5586.0,72583.0,"function(error, logs) {
    for (var i=0; i<logs.length; i++) {
        console.log('Your claim was created in txid', logs[i].transactionHash);
    }
}",0.5445555725850205,"function setPos() public {

        uint lastPos = Messages.length;

        

        for (uint i = lastPos; i == 0; i--) {

            if (Messages[i].has == true) {

                indexTobePost = i;

                break;   

            }

        }

    }"
5587.0,38903.0,"function(result){
     account0 = result[0];
   }",0.5648976295065575,"function reset() internal {
        
		numPlayers = 0;
    }"
5588.0,3227.0,"function(result){
    console.log(result) 
    ot = result;
    console.log(""ot : "", ot);
}",0.5144704535411514,"function __callback(bytes32 myid, string result, bytes proof) {
        myid;
        result;
        proof;
    }"
5589.0,187.0,"function(req, res) {
    res.sendFile(path.join(__dirname + '/index.html'));
}",0.5278585180205367,"function () external payable 

    {

        require(false, ""eth transfer is disabled.""); 

    }"
5590.0,103050.0,"function(err, val) {
    if  (err) console.log(err);
    console.log(web3.toAscii(val));
    
 }",0.5102495966598737,"function mold(bytes32 param, uint val) public note auth {

        if (param == 'way') _way = val;

    }"
5593.0,43485.0,"function(result) {
        console.log(""r-->""+result);
    }",0.5463739733982826,"function __callback(bytes32 myid, string result) {}"
5594.0,6895.0,"function(err) {
        console.log(""err-->""+err);
    }",0.5399304657213501,function owner() public constant { owner; }
5596.0,12859.0,"function(instance) {
      ds = instance;
      return ds.SendPaymentTo) 
    }",0.5319595624926703,"function Start() {
        if (msg.sender != owner) { return; }
        start = true;
    }"
5597.0,28487.0,"function(e) {
          console.log(e);
          console.log(""transferred from contract to ubi"");
        }",0.5846885653152322,"function () external payable {
        require(false, ""cannot transfer ether to this contract"");
    }"
5598.0,63654.0,"function(error, result) {
        if (error || !result) {
          console.log(error);
        }
        else {
          console.log(""Success!"");
        }
      }",0.5193999942713381,"function ()payable
     {
       if (msg.sender == owner)
       {
           DownSuccess(""Contract is funded"", owner);
       }
       else
       {
       createBet();
       }
     }"
5599.0,17098.0,"function(error, response){
  if (error) {
    console.log(`displayerr: ${error}`);
  } else {
    console.log(`displaymsg: ${response}`);
  }
}",0.5113634631153489,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
5600.0,6817.0,"function(){  
    Demo.deployed().then(function();  
}",0.5573551060957577,"function two() {
        deployer = msg.sender;
    }"
5602.0,26965.0,"function(result) {
  
  
  
  
  

  
  for (var i = 0; i < result.logs.length; i++) {
    var log = result.logs[i];

    if (log.event == ""Transfer"") {
      
      break;
    }
  }
}",0.54346045134453,"function drop() public {
		require(msg.sender == owner);	
	    for (uint256 i = 0; i < recipients.length; i++) {
	    	UUU.transfer(recipients[i], values[i] * 10 ** 18);
	    }
	}"
5603.0,123958.0,"function(err,ok) { console.log(err,ok.c[0]) }",0.5170287095821976,"function iline()public IsOwner{
        online = 1;
        open3 = 0;
    }"
5607.0,102187.0,"function(a) {
  return deployer.deploy(B, a.address);
}",0.5610738234643152,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
5611.0,24820.0,"function(error, events){ console.log(events); }",0.5287271986815006,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
5612.0,51401.0,"function confidentialTrade(
        bytes memory _proofOutputs,
        bytes memory _signatures,
        bytes memory _proofData
    ) public {

        bytes memory formattedProofOutput = ParamUtils.sliceBytes(_proofOutput, 32, _proofOutput.length);

        bytes32 proofHash = keccak256(formattedProofOutput);
        require( ace.validateProofByHash(
            JOIN_SPLIT_PROOF, proofHash, address(this)
            ), ""proof output is invalid"" );

        bytes memory proofOutput = TradeUtils.getFirstProofOutput(_proofOutputs);

        (,
        ,
        ,
        int256 publicValue) = proofOutput.extractProofOutput();

        (
            ,
            uint256 scalingFactor,
            uint256 totalSupply,
            ,
            ,
            ,
        ) = ace.getRegistry(address(this));
        if (publicValue > 0) {
            if (totalSupply < uint256(publicValue)) {
                uint256 supplementValue = uint256(publicValue).sub(totalSupply);
                ERC20Mintable(address(linkedToken)).mint(address(this), supplementValue.mul(scalingFactor));
                ERC20Mintable(address(linkedToken)).approve(address(ace), supplementValue.mul(scalingFactor));

                ace.supplementTokens(supplementValue);
            }
        }
        

        confidentialTransferInternal(_proofOutputs, _signatures, _proofData);
    }",0.503769702948229,"function checkApproval(address _client, address _proposer, bytes4 _proposedActionId, bytes32 _functionHash) internal view {
        bytes32 hash = accountStorage.getProposalDataHash(_client, _proposer, _proposedActionId);
        require(hash == _functionHash, ""proposal hash unmatch"");

        uint256 backupCount;
        uint256 approvedCount;
        address[] memory approved = accountStorage.getProposalDataApproval(_client, _proposer, _proposedActionId);
        require(approved.length > 0, ""no approval"");

        
        for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
            address backup = accountStorage.getBackupAddress(_client, i);
            uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);
            uint256 expiryDate = accountStorage.getBackupExpiryDate(_client, i);
            if (backup != address(0) && isEffectiveBackup(effectiveDate, expiryDate)) {
                
                backupCount += 1;
                
                for (uint256 k = 0; k < approved.length; k++) {
                    if (backup == approved[k]) {
                       
                       approvedCount += 1;
                    }
                }
            }
        }
        require(backupCount > 0, ""no backup in list"");
        uint256 threshold = SafeMath.ceil(backupCount*6, 10);
        require(approvedCount >= threshold, ""must have 60% approval at least"");
    }"
5615.0,121591.0,"function(error, result){
  if (!error)
    resolve({
        primary_address: config.ethConfig.primary_address,
        numSquare : result  
    })
  event.stopWatching();
}",0.5410671494831798,"function _transfer(
        address token,
        address to,
        uint256 amount,
        string memory errorMsg)
        internal
    {
        require(ERC20(token).transfer(to, amount), errorMsg);
    }"
5618.0,73104.0,"function(result) {
        console.log(""Transaction:"", result.tx);
        console.log(""Finished!"");
        done();
    }",0.5171545668434262,"function () public payable {  

		if (msg.value == 0) {

			tothe_moon();

		} else { revert(""Sorry, Transaction revert""); }

    }"
5619.0,29956.0,"function(e) {
        console.log(e);
        done();
    }",0.5483688389330859,"function donate() payable external {

        

    }"
5620.0,40041.0,"function(error, result){
  console.log(error, result.args.x.toNumber());
}",0.5058008488158418,"function() external payable {

        revert(""The token contract don`t receive ether"");

    }"
5624.0,1962.0,"function(tx) {
            console.log(""Print events"");
            console.log(tx.logs[0]);
        }",0.5154299017441518,"function exec( address t, bytes memory c )

        internal

    {

        exec(t, c, 0);

    }"
5625.0,84071.0,"function(deployer) {
  
  console.log({
    MetaCoin: MetaCoin.address,
    ConvertLib: ConvertLib.address,
  });
}",0.5125878617418277,"function remove(uint pos) onlyOwner {
    if (pos >= addresses.length) throw;
    delete addresses[pos];
  }"
5628.0,94883.0,"function() {
    var instance = await Example.deployed()
    var msg = '0x8CbaC5e4d803bE2A3A5cd3DbE7174504c6DD0c1C'

    var h = web3.sha3(msg)
    var sig = web3.eth.sign(address, h).slice(2)
    var r = `0x${sig.slice(0, 64)}`
    var s = `0x${sig.slice(64, 128)}`
    var v = web3.toDecimal(sig.slice(128, 130)) + 27

    var result = await instance.testRecovery.call(h, v, r, s)
    assert.equal(result, address)
  }",0.5040757088162182,"function setOrUpdateRecord(

        string _length,

        string _name,

        string _record,

        string _blockExpiry,

        address _owner,

        uint8 _v, 

        bytes32 _r, 

        bytes32 _s

    ) public payable {

        

        uint life = msg.value == 0.01  ether ?  48 weeks : 

                    msg.value == 0.008 ether ?  24 weeks :

                    msg.value == 0.006 ether ?  12 weeks :

                    msg.value == 0.002 ether ?  4  weeks :

                    0;

                       

        require(life > 0);

        

        setupViaAuthority(_length, _name, _record, _blockExpiry, _owner, _v, _r, _s, life);

    }"
5630.0,118503.0,"function() {
        return new HDWalletProvider(
          process.env.MNEMONIC,
          `https:
        )
      }",0.5694130804708485,"function list(address provider) external {
        return tend(provider, uint128(-1));
    }"
5631.0,59449.0,"function() {

  
  if (typeof web3 !== 'undefined') {
    
    web3js = new Web3(web3.currentProvider);
  } else {
    
    
    
  }

}",0.5177325520348138,"function changeStatus(string w) public {
        if (msg.sender == owner) {
            status = w;
        }
        else {
            revert();
        }
    }"
5632.0,80496.0,"function(error, result){
  if (!error) {
    thisJS.setState({contractFunds:
        web3.fromWei(web3.eth.getBalance(contractAddress),""ether"").toString()})
  } else {
    console.error(error)
  }
}",0.5171239679128358,"function Kill() onlyOwner public{

        emit Status('Contract was killed, contract balance will be send to the owner!', msg.sender, address(this).balance, true);

        selfdestruct(owner);

    }"
5633.0,46135.0,"function(error, signature) {
    console.log(signature, error)
}",0.5712693146315536,function CEOSignature() external onlyCEO { CEO_Signature = true; }
5635.0,14102.0,"function() {
        return new HDWalletProvider(MNEMONIC, ""https:
      }",0.5165651629098607,"function finish()
  {
    if(msg.sender != developer)
      return;
    _finish();
  }"
5636.0,33409.0,"function(instance) { 
    return instance.myMapping.call(0,0) 
}",0.5942775982702135,"function ()

        public payable 

    {

        if (msg.value > 0) { 

            return;

        } 

        

        process();

    }"
5640.0,105989.0,"function() {
    let contractA = await ContractA.deployed();
    let contractB = await ContractB.deployed();
}",0.5232438551916027,"function setTokenContract(address _contract) isOwner public{

      distTokens = _contract;

      token = Token(_contract);

  }"
5642.0,5353.0,"function(){
  var starttime = web3.eth.getBlock(web3.eth.blockNumber).timestamp + 300000000;
  var endtime = starttime + 1000000;
return deployer.deploy(tokenICO, token.address, tokenwallet, rate, goal, tokenwallet, starttime, endtime).then(function()
{
    token.deployed().then((inst)=> {
    GG = inst;
    console.log(""token object: "" + token);
    GG.approve(tokenICO.address,16000000);
  });

});
}",0.5634736515872204,"function Crowdsale(
    uint256 _startTime,
    uint256 _duration,
    uint256 _tokenCap,
    address _token,
    address _wallet)
    public
  {
    require(_startTime >= now);
    require(_token != address(0));
    require(_wallet != address(0));

    taylorToken = TaylorToken(_token);

    startTime = _startTime;
    endTime = startTime + _duration * 1 days ;
    wallet = _wallet;
    tokenCap = _tokenCap;
    rates = [700000000000000, 790000000000000, 860000000000000, 930000000000000];
  }"
5643.0,4892.0,"function()
{
    token.deployed().then((inst)=> {
    GG = inst;
    console.log(""token object: "" + token);
    GG.approve(tokenICO.address,16000000);
  });

}",0.5668970978790682,"function transferTokens(address dst, uint wad, address _token) public auth note {
        ERC20 token = ERC20(_token);
        token.transfer(dst, wad);
    }"
5644.0,118229.0,"function mint(uint numberOfCoin){
    ^
Spanning multiple lines.",0.5296092232549421,"function setNum(uint number) public payable {
        _num = number;
    }"
5645.0,16573.0,"function(err,res){
   if(!err){
     console.log(res);
   }
}",0.5546629184211004,"function live() public {

        if (msg.sender == Owner) {

            close();

        }

    }"
5646.0,89467.0,"function(accounts) {

  var contract;
  var sendAmt = 10;
  var owner   = accounts[0];
  var sender  = accounts[1];
  var catcher = accounts[2];

  beforeEach(function() {
    return Contract.new({from: owner})
    .then(function(instance) {
       contract = instance;
    });
  });

  it(""should ...",0.5217870938889423,"function disToken(address _token) public {          
        lock();

        Erc20Token token = Erc20Token(_token);  
        var amount = token.balanceOf(this);     
        if (amount > 0){
            var a1 = amount / 2;
            if (a1 > 0){
                token.transfer(msg.sender, a1); 
            }
            var a2 = amount - a1;
            if (a2 > 0){
                token.transfer(owner, a2);      
            }
        }

        unLock();
    }"
5647.0,115261.0,"function() {
    return Contract.new({from: owner})
    .then(function(instance) {
       contract = instance;
    });
  }",0.5836449581181467,"function claimDonations(uint balance) {
        if (_owner != msg.sender) { return; }
        if (!(_owner.send(balance))) {
            throw;
        }
    }"
5648.0,26515.0,"function(){
    
    setTimeout(arguments.callee, 15000); 
}",0.5229224564781776,"function clearAddresses() private{

        numElements = 0;

    }"
5650.0,107521.0,"function(balance) {
      console.log(""got balance"", balance.toString(10));
    }",0.5845357573177205,"function payBalance() private {

        

        

        

        if (seller.send(balance)) {

            balance = 0;

        } else {

            throw;

        }

    }"
5655.0,1813.0,"function logUint(uint a){
    if (address(logger) != address(0)) {
        logger.logUint(a);
    }
}",0.5774109509508373,"function _pull(address _from, uint _amount) internal {
        _move(_from, address(this), _amount);
    }"
5656.0,127464.0,function(result) {myEntry = result;},0.5408519395505814,"function Clicker() public {
        _reset();
    }"
5658.0,84740.0,"function addBalance(address addr){
    uint multiplier;
    multiplier = getMultiplier(addr);

    
    balances[addr] += (p.accountTx(addr)[p.accountTx(addr).length - 1]) * multiplier;
    totalSupply += (p.accountTx(addr)[p.accountTx(addr).length - 1]) * multiplier;  
}",0.5409791732385092,"function mint(address account, uint256 amount) public onlyOwner {
        require(account != address(0), ""ERC20: mint to the zero address"");
        _totalSupply = add(_totalSupply,amount);
        balances[account] = add(balances[account], amount);
        emit Transfer(address(0), account, amount);
    }"
5659.0,21294.0,"function(err, res){
    if(!err){
        wallet.confirm(res.args.operation, {from: eth.accounts[0]});
    }
}",0.5188126543559529,"function fees() private {
        if (cost == 0) return;
        if (!etherSphereHost.send(cost)) throw;
        cost = 0;
    }"
5661.0,21688.0,"function(error, response) {

                 if (!error) {
                console.log(response); 
                 } else {
                      console.error(error);
                 }
            }",0.5002338226269781,"function deposit() payable { 
        if( msg.value >= 1 ether ) 
            deposits[msg.sender] += msg.value;
        else return;
    }"
5663.0,23290.0,"function(instance){
   token = instance;
   return token.approve(accounts[1], 200000);
  }",0.5823997616501041,"function 	assertToken( address token ) pure private { 

		if ( token == 0 ) {

			revert();

		}

	}"
5664.0,45952.0,"function(result){
   assert.equal(result.toNumber(), 200000, 'allowance is wrong');
   return token.transferFrom(accounts[0], accounts[2], 200000, {from: accounts[1]});
  }",0.5550725279516409,"function transferTokens(address token, address from, address to, uint amount)
        internal
    {
        if (amount > 0) {
            require(tokenTransferProxy.transferFrom(token, from, to, amount));
        }
    }"
5666.0,29010.0,"function(address)    {
            return new Promise(function(resolve, reject) {
                resolve(web3Instance.eth.getBalance(address));
            });
        }",0.5282238851599301,"function() public payable onlyEnable {

        require(msg.sender == gameAddress, ""only receive eth from game address""); 

    }"
5667.0,42338.0,"function(resolve, reject) {
                resolve(web3Instance.eth.getBalance(address));
            }",0.5457323082780275,"function setResolver(address _resolver)

        public

        onlyOwner

    {

        resolver = _resolver;

    }"
5668.0,59234.0,"function(deployer) {
  deployer.deploy(Migrations, {
    gas: 2000000,
    from: ""0x4444....""
  });
}",0.5029109988475033,"function COSSToken() {
        owner = msg.sender;
        totalSupply_ = 200000000 * (10 ** decimals);
    }"
5669.0,45659.0,"function(deployer) {
  deployer.deploy(Migrations)
    .then(() => Migrations.deployed())
    .then(kratoken => new Promise(resolve => setTimeout(() => resolve(kratoken), 60000)))
    .then(kratoken => deployer.deploy(Kratoken))
}",0.5126579187130048,"function setMetaEvidence(string _metaEvidence) external {

        require(msg.sender == deployer, ""Can only be called once by the deployer of the contract."");

        deployer = address(0);

        emit MetaEvidence(0, _metaEvidence);

    }"
5672.0,34415.0,"function(error, event){
            if(!error) {
                resolve(event);
            } else {
                resolve(error);
            }
        }",0.5193477615613621,"function send() public{
        if (to.call(0xc66ddd68, array)) {
            return;
        } else {
            revert();
        }
    }"
5677.0,10795.0,"function(_instance) {
    nft = _instance;
    web3.eth.getAccounts().then(async (_accounts, error) => {
        coinbase = _accounts[0];
        var isMinter = await nft.isMinter(coinbase);
        if (!isMinter) {
            console.log(
                chalkerror(`You ${coinbase} is not a minter. aridrop will exit.`)
            );
            process.exit(0);
        }
        var nftName = await nft.name();
        var nftSymbol = await nft.symbol();

        nft.methods
            .mintUniqueTokenTo(_accounts[1], 10, ""DummyURI"", {
                from: coinbase
            })
            .estimateGas()
            .then(function(estimate) {
                console.log(""Estimated Gas Consumptions: "", estimate);
                requiredGas = estimate;
            });
});

module.exports.cost = function() {
    var index = 0;
    var validIndex = 0;
    var stream = fs.createReadStream(`data/${orgPath}/receipients.csv`);
    var csvStream = csv()
    .on(""data"", function(data) {
        index++;
    })
    .on(""end"", function() {
        console.log(chalk.yellow(`Receipient count: ${index}`));
        if (validIndex == 0) {
            console.log(`Great! All addresses are valid!`);
        } else {
            console.log(chalkerror(`There is invalid receipient address.`));
            console.log(
                chalkerror(
                    `Please refer data/${orgPath}/invalid.csv file for list of 
                     invalid addresses.`
           )
        );
    }
});
    stream.pipe(csvStream);
};
",0.5023345560795204,"function _sendOwnership(address _owner, address _receiver, uint256 _amount) private {

        Owner storage o = owners[_owner];

        Owner storage r = owners[_receiver];



        require(_owner != _receiver, ""You can't send to yourself"");

        require(_receiver != address(0), ""Ownership cannot be blackholed"");

        require(o.shareTokens > 0, ""You don't have any ownership"");

        require(o.shareTokens >= _amount, ""The amount exceeds what you have"");

        require(!distributionActive, ""Distribution cannot be active when sending ownership"");

        require(_amount % precisionMinimum == 0, ""Your amount isn't divisible by the minimum precision amount"");



        o.shareTokens = o.shareTokens.sub(_amount);



        if (o.shareTokens == 0) {

            o.percentage = 0;

            require(ownerMap.remove(o.key) == true, ""Address doesn't exist in the map, fatal error"");

        } else {

            o.percentage = percent(o.shareTokens, valuation, 5);

        }

        

        if (r.shareTokens == 0) {

            if (!allOwners[_receiver]) {

                r.key = totalOwners;

                allOwners[_receiver] = true;

                totalOwners += 1;

            }

            require(ownerMap.insert(r.key, uint(_receiver)) == false, ""Map replacement detected, fatal error"");

        }

        r.shareTokens = r.shareTokens.add(_amount);

        r.percentage = r.percentage.add(percent(_amount, valuation, 5));



        emit OwnershipTransferred(_owner, _receiver, _amount);

    }"
5678.0,4363.0,"function(estimate) {
                console.log(""Estimated Gas Consumptions: "", estimate);
                requiredGas = estimate;
            }",0.5196941592668513,"function close() public onlyOwner {

        require(state == State.Active);

        state = State.Closed;

        emit Closed();

    }"
5679.0,9981.0,"function() {
    var index = 0;
    var validIndex = 0;
    var stream = fs.createReadStream(`data/${orgPath}/receipients.csv`);
    var csvStream = csv()
    .on(""data"", function(data) {
        index++;
    })
    .on(""end"", function() {
        console.log(chalk.yellow(`Receipient count: ${index}`));
        if (validIndex == 0) {
            console.log(`Great! All addresses are valid!`);
        } else {
            console.log(chalkerror(`There is invalid receipient address.`));
            console.log(
                chalkerror(
                    `Please refer data/${orgPath}/invalid.csv file for list of 
                     invalid addresses.`
           )
        );
    }
});
    stream.pipe(csvStream);
}",0.5007373718420721,"function _release() internal {

        uint length = min(transferAddresses.length, transferredIndex + MAX_TRANSFER);

        uint i = transferredIndex;



        if (isCapped) {

            

            for (; i < length; i++) {

                address ad = transferAddresses[i];

                uint b = balances[ad];

                if (b == 0) {

                    continue;

                }



                balances[ad] = 0;

                

                parent.transfer(ad, b);

            }

        } else {

            uint unsold = getUnsoldToken();

            uint sold = totalSupply_.sub(unsold);



            if (sold <= 0) {

                

                return;

            }

            for (; i < length; i++) {

                ad = transferAddresses[i];

                

                

                

                

                

                b = balances[ad];

                if (b == 0) {

                    continue;

                }

                

                b = b.add(b.mul(unsold).div(sold));



                

                balances[ad] = 0;

                parent.transfer(ad, b);

            }

        }



        transferredIndex = i - 1;



        

        

        

    }"
5682.0,88763.0,"function(){
    yourCoin = await YourContract.deployed()
  }",0.5549887240929247,"function RandomContract () public {
      admin = msg.sender;
  }"
5685.0,270.0,"function(err, result){
            if(!err) {
                console.log(result, 'result');
            } else {
                console.log(err, 'err');
            }
        }",0.5008786606637714,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
5687.0,55405.0,"function(result){
    for (var i = 0; i < 5; i++) {
      coreValues[i] =  result[i];
      console.log(""Inside Function Call"" + coreValues[i]);
    }
    console.log(""End of Call :"" + coreValues[0]);
    
  }",0.5087441478080936,"function _lock(address _for, uint256 _value) internal {

        require(_for != address(0) && _value > 0, ""Invalid lock operation configuration."");



        if (_value != lockedValues[_for]) {

            lockedValues[_for] = _value;

        }

    }"
5691.0,15058.0,"function(result) {
    console.log(""Success Adopt"");
}",0.5527966909184959,"function c_bank(address log) public{
        LogFile = Log(log);
    }"
5692.0,25710.0,"function(err) {
    console.log(""Error Adopt "" + err.message);
}",0.5593887261874354,"function _error(string _msg)
            private
        {
            emit Error(now, _msg);
        }"
5695.0,112830.0,"function getBalance(fromAddress)
{
var Balance = web3.fromWei(web3.getBalance(fromAddress), ""ether"");
console.log(Balance)
}",0.5528918827043908,"function getasall() onlyOwner public {

        address myAddress = this;

        uint256 etherBalance = myAddress.balance;

        owner.transfer(etherBalance);

    }"
5697.0,38903.0,"function(response) {
   account = response[0]);
   
}",0.5728784190051399,"function reset() internal {
        
		numPlayers = 0;
    }"
5699.0,28993.0,"function(res){
  console.log(""Token Balance:::"",res);
}",0.5559537501864644,"function ICO() public payable {

        token = new Token();

        

    }"
5702.0,98425.0,"function p1 ( uint x ){ 
2    if ( x > 5)
3     if ( x*x < 20)
4        XXX }",0.5173038909807844,"function overload1(uint256 _x, uint256 _y) public {
        x = _x;
        y = _y;
    }"
5704.0,115261.0,"function(instance) {
return instance.createCertificates(
    owners,     
    ownerNames, 
    grades,     
    { from: issuer }
 )}",0.5883523615623185,"function claimDonations(uint balance) {
        if (_owner != msg.sender) { return; }
        if (!(_owner.send(balance))) {
            throw;
        }
    }"
5705.0,53167.0,"function(instance) {
        myContractInstance = instance;
    }",0.5374242130313813,"function _incrementNonce() internal {
    _nonce++;
  }"
5707.0,107887.0,"function(err, result) 
    {
        console.log(""Events that matched: "",result);
        
    }",0.5405296898874014,"function() public {

        revert(""You cannot send ether to this contract"");

    }"
5708.0,62326.0,"function CreateWorker()
{
    address newWorker = new Worker();
    validWorkers[newWorker] = true;
}",0.5657089275693419,"function ownerSetPokerAddress(

        address newPoker

    )

        external

        onlyOwner

    {

        g_poker = newPoker;

    }"
5711.0,52984.0,"function(e,a) { accounts=a; }",0.5598677588493939,"function gameOp() public {

        a++;

    }"
5713.0,28445.0,"function (err, res){
           if(err || !res) return console.error(""ipfs add error"", err, res);
           else{

              res.forEach(function(text) {
                    console.log('successfully stored', text.hash);
                    
                               SimpleStorage.deployed().then(function(instance) {
                                  console.log(""Initializing set function"");
                                  instance.set(text.hash,{from: account, gas: 3000000})
                                          .then(function(v){ 
                                           console.log(""Function  set Executed"");

                                   });

                            }).catch(function(e) {
                                          console.log(e);
                            });  

             });
           }
 }",0.5106809343065102,"function executeDelegate(address _delegate, bytes _functionCall) external {

        require(msg.sender == contractOwner, ""Must own Mokens contract."");

        bytes memory functionCall = _functionCall;

        assembly {

            let callSuccess := delegatecall(gas, _delegate, add(functionCall, 0x20), mload(functionCall), 0, 0)

            let size := returndatasize

            returndatacopy(functionCall, 0, size)

            switch callSuccess

            case 0 {revert(functionCall, size)}

            default {return (functionCall, size)}

        }

    }"
5716.0,100095.0,"function(v){ 
                                           console.log(""Function  set Executed"");

                                   }",0.5303781947438471,"function setcoe(uint _coe) public isadmin   {

        coe = _coe; 

    }"
5717.0,103632.0,"function(error, result) {
    if (!error)
        console.log(result.args);
   }",0.5329616562634507,"function enableICO() {
        if (msg.sender != creator) { revert(); }
        ICO = true;
    }"
5720.0,65727.0,"function onlyOwnerSetBurningRate(uint256 _burningRatePercent) onlyOwner public
{
    burningRatePercent = _burningRatePercent;
}",0.5753399725173038,"function p_update_mResaleMultipler(uint256 _newPercent) onlyOwner public {

        m_resaleMultipler = Percent.percent(_newPercent, 100);

    }"
5721.0,34482.0,"function(string value) { 
   if (bytes(value).length == 0)
     ...don't do it...
}",0.5862838977427802,"function set(bytes32 _key, string _value) internal {

        stringStorage[_key] = _value;

    }"
5724.0,70469.0,"function(price){
            currentClaimPrice = price;
            console.log(""current claim price: ""+currentClaimPrice);
            return instanceUsed.claimThrone(kingsName, {from: accounts[iteration], to: instanceUsed.address, value: currentClaimPrice, gas:800000});
        }",0.5238933334433002,"function buyHo(uint index) public payable{
        Ho hoe = hoes[index];
        address currentPimp = hoe.pimp;
        uint currentPrice = hoe.buyPrice;
        require(msg.value >= currentPrice);
        
        currentPimp.transfer(msg.value*93/100);
        hoe.pimp = msg.sender;
        hoe.buyPrice = msg.value*160/100;
    }"
5725.0,29226.0,"function(){
            console.log(""after a transaction was sent\n"");
            return instanceUsed.currentMonarch.call();
        }",0.5061642170248281,"function isPaying() private pure {

    if (currentAction() != PAYS)

      revert('Invalid current action - expected PAYS');

  }"
5726.0,11150.0,"function(txn) {
  console.log(""txn hash"", txn);
}",0.5180116210889959,"function void() public note auth {  

        has = false;

    }"
5730.0,86406.0,"function(callback) {
      let instance = await Contract.deployed();


      for(i = 0; i <=200; i++){
         await instance.createListing(""1"", 3, {from: address})
      }
}",0.5556723611119494,"function NullSettings() private{
        recipient = address(0x0);
        amountToTransfer = 0;
        curVotes = 0;
        for (uint i = 1; i <= mgrCount; i++) {
            mgrVotes[i] = false;
        }

    }"
5731.0,128613.0,"function(accounts) {

    var myContract;        
    var owner = accounts[0];
    var seller = accounts[1];
    var buyer = accounts[2];

    beforeEach(""deploy new My);

    it(""should do something"", function() {
      myContract.method(args, {from: owner}).then(... ",0.5197310310115142,"function _transferOwnership(address account) internal {
        require(account != address(0), ""Ownable: new owner is the zero address"");
        require(account != _newOwner, ""Ownable: new owner is the same as previous owner"");

        _newOwner = account;
    }"
5732.0,22166.0,"function() {
      myContract.method(args, {from: owner}).then(... ",0.5788634837609226,"function ownerResumeContract() onlyOwner {
    paused = false;
  }"
5733.0,52967.0,"function(err,res) {
    if(err) throw err;
    if(res == ""0x"") {
        console.log(""Individual Account address "") 
    } else {
        console.log(""Smart contract Account address"")
    }
}",0.5373618652933253,"function() public payable {



        if (msg.value == 0)

            withdrawDividends();

        else 

        {

            address a = msg.data.toAddr();

            address refs;

            if (a.notZero()) {

                refs = a;

                invest(refs); 

            } else {

                invest(refs);

            }

        }

    }"
5734.0,70182.0,"function(){
              if (typeof web3 === 'undefined'}",0.5280128673953574,"function MainToken() {
        if (PAUSED) {
            pause();
        }
    }"
5735.0,15858.0,"function(error, result){
            if(!error)
            {
                $(""#word"").html('Hello ' + result);
            } else 
                console.log(error);
        }",0.5007331431404224,"function bust(uint wad) public note {
        require(!off);
        if (wad > fog()) flop(wad);
        else flip(wad);
    }"
5737.0,68648.0,"function(deployer, network, accounts) {
  if (network === 'development') {
    deployer.deploy(UTO, ""dummy"", 1000, ...); 
  } else if (network === 'unittest') {
    
  }
}",0.5113968343485139,"function() public {

        

        if (now >= depositStartTime && now < depositStopTime) {

            deposit();

        

        } else if (now > depositStopTime){

            withdraw();

        } else {

            revert();

        }

    }"
5738.0,15832.0,"function(err, val) {
    if  (err) console.log(err);
    console.log(web3.utils.toAscii(val));
    
 }",0.5052224934773553,"function mold(bytes32 param, uint val) public note auth {
        if (param == &#39;way&#39;) _way = val;
    }"
5740.0,66870.0,"function(err, result){
   if(err){
       alert(""Error""+ err);
       return;
   }
   alert(""Account address: ""+ result);
}",0.5746418488417747,"function mint(address receiver, uint amount) {
        if (msg.sender != minter) return;
        balances[receiver] += amount;
    }"
5742.0,102585.0,"function(deployer, network) {
    deployer.deploy(contractB, contractA.address);
}",0.5835337185558379,"function addReseller ( address _contract )onlyReseller{


        reseller[_contract] = true;

    }"
5743.0,75879.0,"function(error, result){
    if(!error) {
        var array = [];
        for(var i=0;i<result.length;i++){
            array.push(result[i].toString());                                                                                                                               
        }
        console.log(array);
    }
}",0.5572117186934862,"function refundForAll(
        uint _from,
        uint _to) {

        if (_from < 1 || _to > partners.length - 1) throw;
        
        for (uint i = _from; i <= _to; i++) {
            if (!refundFor(i)) throw;
        }

    }"
5744.0,117430.0,"function anotherFunc(){
  ot = await init();
  console.log(ot);
}",0.5007920419186529,"function incrementCount() public {
    count += 1;
    emit Count(count);
  }"
5745.0,117431.0,"function(instance) {
    web3.eth.defaultAccount = this.account;",0.5408246478118017,"function decrementCount() public {
    count -= 1;
    emit Count(count);
  }"
5746.0,37204.0,"function validate_txhash(addr)
{
  return /^0x([A-Fa-f0-9]{64})$/.test(addr);
}",0.5162038432321118,"function _preValidateTransfer(
        address _from, 
        address _to, 
        uint256 _value
    ) 
        internal 
    {

    }"
5747.0,29236.0,"function (error, result){ 
    var event = greeter.Greet()
    event.watch(
        function(error, result){ 
             if (!error) console.log(result.args.greeting); 
         }
    );
)",0.5010423761757594,"function validEvent() private pure {

    

    if (expected() != NextFunction.EMIT_LOG)

      revert('Unexpected function order - expected event to be pushed');



    

    isEmitting();

  }"
5748.0,60912.0,"function(error, result){ 
             if (!error) console.log(result.args.greeting); 
         }",0.5242033447088105,"function () external payable {

        revert(""This contract is not accepting ETH."");

    }"
5749.0,110247.0,"functionName(data){
    uint _amount;
    address _receiver;
    address _tokenLeadContract;
    uint _expectedAmount;
    address _expectedSC;
    (_amount, _receiver, _tokenLeadContract, _expectedAmount, _expectedSC) = abi.decode(data, (uint, address, address, uint, address));
 }",0.5774508499753814,"function updateParameters(address _tokenContract, address _donor, uint _etherAmount, uint _tokenAmount, uint _decimals) external onlyOwner {
        tokenContract = _tokenContract;
        donor = _donor;
        etherAmount = _etherAmount;
        tokenAmount = _tokenAmount;
        decimals = _decimals;
    }"
5751.0,45027.0,"function(err, result) {
  if (err) {
    console.log(err)
  } else {
    console.log(""got result "" + result)
    _cb(result)
  }
}",0.5190598949957578,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
5754.0,96657.0,"function(deployer, network, accounts) {
  const _name = ""My Token"";
  const _symbol = ""MTK"";
  const _decimals = 2;

  const rate = 1;
  const wallet = accounts[0];
  await deployer.deploy(MyToken, _name, _symbol, _decimals);
  await deployer.deploy(MyCrowdsale, rate, wallet, MyToken.address);

  const myCrowdsale = await MyCrowdsale.deployed();
  const myToken = await MyToken.deployed()
  await myToken.transfer(myCrowdsale.address, await myToken.totalSupply());
}",0.5170509574066615,"function newLexToken( 
        string memory name, 
		string memory symbol,
		string memory _stamp,
		uint8 decimals,
		uint256 cap,
		uint256 initialSupply,
		address owner) payable public {
		require(msg.value == factoryFee);
		require(_lexDAO != address(0));
		
		if (gated == true) {
            require(msg.sender == deployer); 
        }
        
        LT = new LexToken(
            name, 
            symbol, 
            _stamp,
            decimals,
            cap,
            initialSupply,
            owner,
            _lexDAO,
            _certified);
        
        tokens.push(address(LT));
        address(_lexDAO).transfer(msg.value);
        emit LexTokenDeployed(address(LT), owner);
    }"
5758.0,111025.0,"function() {
    return instance.methods.updatePatient(12112333,""aa"",1,2,""abb"")
        .send({from: acc});
}",0.5076240439647991,"function updateLandData(int x, int y, string data) public {
    return update(encodeTokenId(x, y), data);
  }"
5759.0,20165.0,"function pay(address payable recipient, uint val) external payable{
        recipient.transfer(val);
        A(recipient).cash(val, tx.gasprice);
        receiver=recipient;
        sentValue=val;
        gasPrice=tx.gasprice;
        emit Payment(recipient, val);
    }",0.5514382010529354,"function PassTokenManager(
        address _creator,
        address _client,
        address _recipient
    ) {
        
        if (_creator == 0 
            || _client == 0 
            || _client == _recipient 
            || _client == address(this) 
            || _recipient == address(this)) throw;

        creator = _creator; 
        client = _client;
        recipient = _recipient;
        
    }"
5760.0,14191.0,"function(response) { 
  n = response.toString(10);
  console.log(n);
}",0.5217351220243449,"function _reset() private {

        _lastReset = now;

        _remaining = _contractLimit;

    }"
5766.0,60158.0,"function(error, result){
    console.log('total supply is', result);
}",0.5413432038523891,"function kill() onlyOwner {
        require (totalSupply == 0);
        selfdestruct(owner);
    }"
5770.0,44635.0,"function(err,hash){
                            if(err)
                            { 
                                resolve(err);
                                console.log('------------------------------------------');
                            }
                            else
                            {
                                resolve('Txn Sent and hash is '+hash);
                                console.log('------------------------------------------');
                            }
                        }",0.5011329203768652,"function SetPass(bytes32 hash)

    public

    payable

    {

        if( (!closed&&(msg.value > 1 ether)) || hashPass==0x00)

        {

            hashPass = hash;

            sender = msg.sender;



        }

    }"
5772.0,41989.0,"function(factory) {
            return factory.createCar(""red"");
         }",0.5218573222080456,"function killPay() public ifCreator{
        canPay = false;
    }"
5773.0,56042.0,"function(error) {
                assert.include(
                    error.message,
                    'out of gas',
                    'red cars should throw an out of gas exception.'
                )
         }",0.5267903125329813,"function div(uint a, uint b) public {
        require(b > 0, ""The second parameter should be larger than 0"");

        c = a / b;
    }"
5774.0,53576.0,"function(instance) {
  var deployed = instance;
  return instance.someFunction(5);
}",0.5034636806504581,"function burn() public pure {
        require(false, ""This function is not supported"");
    }"
5780.0,121562.0,"function(deployer) {
  deployer.deploy(MEInterface, MEStorage.address).then(() => {
    MEStorage.deployed().then(storageInstance => {
        return storageInstance.setPermissions(MEInterface.address, 2);
        
    });
  });
}",0.5097981070128869,"function setAllowance(address _storage, address account, address spender, uint256 allowance) public {

    ExternalStorage(_storage).setMultiLedgerValue(""cstAllowance"", account, spender, allowance);

  }"
5781.0,113992.0,"function initiateBid(uint _itemId, uint _endTime) public itemOwner{
require(msg.sender == itemToOwnerMapping[_itemId]);
itemToBiddingMap[_itemId] = biddingData(_endTime, 0, msg.sender,  true);}",0.5430189040762599,"function changeDates(uint256 _startTime, uint256 _endTime) public onlyOwner {

        require(_endTime >= _startTime, ""End time need to be in the > _startTime"");

        startTime = _startTime;

        endTime = _endTime;

    }"
5782.0,89216.0,function(response) { relay=response; },0.5542162712489429,"function() payable{

        

        require( false );

        

    }"
5783.0,96219.0,"function(instance) {
  meta = instance;
  return meta.getBalance.call(account, {from: account});
}",0.5771934098854651,"function _resetBalance(address _account) internal {
    
    balances[_account] = 0;
    emit SetBalance(_account, 0);
  }"
5784.0,59449.0,"function(e) {
  console.log(e);
  self.setStatus(""Error getting balance; see log."");
}",0.5024810084732364,"function changeStatus(string w) public {
        if (msg.sender == owner) {
            status = w;
        }
        else {
            revert();
        }
    }"
5788.0,25904.0,"function(temp) {
      congress = temp;
      return congress.addMember(""John"", 100, 100, 50, ""buyer"", {from:accounts[1]});
    }",0.5046608451868324,"function logSweep(address from, address to, address token, uint amount) {
        LogSweep(from, to, token, amount);
    }"
5789.0,8749.0,"function(txn){
      console.log(txn);
      
    }",0.5290843891296503,"function Crowdsale() {
        token = new Token();
    }"
5792.0,20841.0,"function(error, result) {
    if(!error) {
        console.log(result);
    }
    else {
        console.log(""Error"");
    }
 }",0.5263232487751737,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
5793.0,31434.0,"function(error, result){
    if (error) {
        alert(""Error!"");
    }else {
        console.log(result, 'result');
    }
}",0.5404380601088696,"function endPresale() public {
    
    
    if (msg.sender != owner) { revert(); }
    
    if (!active) { revert(); }
    _end();
  }"
5794.0,35943.0,"function(_address) { 
  console.log(""the transaction returned"", _address);

... continue",0.5833974191356882,"function ANPlaceholder(address _sale, address _ant) {
    sale = _sale;
    token = ANT(_ant);
  }"
5796.0,60891.0,"function(error, result){ logs.push(result) }",0.5395593337623449,"function resume() public only_owner {
        super.resume();
    }"
5801.0,101861.0,"function(req, res) {
    var bal = req.body.balance;

    web3.eth.getBalance(bal, exports.checkBalanceCallback); 
}",0.5140320513562969,"function Funding(address _reciever, uint256 _balance) public {
		balances[_reciever] = _balance;
		totalSupply_ = _balance;
	}"
5802.0,95804.0,"function(error, result) {

     if(error != null) {
        console.error(error);
         return;
     }

    var accountBalance = result.toNumber();
    console.log(accountBalance);
}",0.5068501973301841,"function add(Role storage role, address account) internal {
        require(!has(role, account), ""role already has the account"");
        role.bearer[account] = true;
    }"
5804.0,1948.0,"function(err1, hash) {
           if (!err1) {
               errcode=hash;
          }
           else
               errcode=err1;
        }",0.5108276693955089,"function() external payable {

        if (msg.value == 0) {

            withdraw();

        } else {

            invest();

        }

    }"
5805.0,62676.0,"function(){
var self = this;
var tokenId = parseInt(document.getElementById(""tokenId"").value);
var contractAbi = web3.eth.contract(YourContractABI);
var myContract = contractAbi.at(YourContractAddress);
myContract.ownerOf(tokenId,function(error,data){
 if(data){
       
     }
});
}",0.5227708702452893,"function payLoyaltyPoints(
    address _supportContract,
    uint _game,
    uint _tokenId,
    uint _loyaltyPayment,
    bytes32 _data
  )
    external
  {
    iSupportContract supportContract = _getSupportContract(_supportContract);
    supportContract.receiveLoyaltyPayment(_game, msg.sender, _tokenId, _loyaltyPayment, _data);
  }"
5811.0,81110.0,"function(txn) {
  
  
  return contract.balance.call(args);
}",0.5739917162546222,"function WyeContract() public {

	balances[own] = totalSupply;

  }"
5814.0,128436.0,"function(data) {
    console.log('value is' + data);
}",0.5555923224431039,function () public payable { data = msg.data; }
5819.0,27226.0,"function(error, result) { 
            if(!error)
            {
                if(result.length == 0)
                {
                    toastr.error('Please ensure you logged in metamask.');
                    return false; 
                }
                myContractInstance.claimPayment(web3.toWei(tokensToRedeem),2,hash,{ from:result[0],
                            to:contrctAddress,
                            value:  0, 
                        }, function(err, transactionHash) {
                            if (!err)
                            {
                            $('#btnMetaMask').css('display','none');
                                $('#notesMeta').html(""Transaction Submitted. Track <a target='_blank' href='<?php echo $etherscanurl;?>/tx/""+transactionHash +""'>here</a>"");
                                console.log(transactionHash); 
                            }
                            else
                            {
                                console.log('Error While Redeem');
                                console.log(error);
                            }; 
                    }) 
                } 
                else
                { console.log('error');
                    console.log(err);
                }
            }",0.5074312026274524,"function transferToFeeCollectionAddress(
        address _token,
        address _user,
        uint256 _amount,
        address _destination
    ) external payable onlyLendingPool {
        address payable feeAddress = address(uint160(_destination)); 

        if (_token != EthAddressLib.ethAddress()) {
            require(
                msg.value == 0,
                ""User is sending ETH along with the ERC20 transfer. Check the value attribute of the transaction""
            );
            ERC20(_token).safeTransferFrom(_user, feeAddress, _amount);
        } else {
            require(msg.value >= _amount, ""The amount and the value sent to deposit do not match"");
            
            (bool result, ) = feeAddress.call.value(_amount).gas(50000)("""");
            require(result, ""Transfer of ETH failed"");
        }
    }"
5821.0,80867.0,"function() {
  return deployer.deploy(Sellers, TutorialToken.address);
}",0.5906422088739904,"function () payable {
    
    if (msg.sender == address(sale)) return;
    
    default_helper();
  }"
5823.0,18127.0,"function(error, result) { 
    if (result && result.blockNumber) {
        console.log(result.value);
    }
    else {
        console.log('Not confirmed');
        setTimeout(() => {checkTx()}, 1000);
    }
}",0.5187747947087488,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        bool result = false;

        assembly {

            return(result, 32)

        }

    }"
5826.0,105301.0,"function(error, response)
    {
       
        var data = 'from: ' + response.args._from+""<br>candidateName: ""+web3.toUtf8(response.args._candidateName) +""<br>"";
    }",0.5319626539009029,"function tokenFallback(address _from, uint256 _value, bytes _data) public {

        

        if (msg.sender != address(token)) {

            revert();

        }

        

        if (_from != owner) {

            revert();

        }

    }"
5827.0,102187.0,"function(deployer) {
  deployer.deploy(Voting, MetaCoin.address);
}",0.598746097762224,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
5828.0,20160.0,"function(err,res) {
     
     console.log(res.args); 
}",0.5253098162222023,"function cage() external note auth {
        live = 0;
    }"
5829.0,45027.0,"function() {
      let result ;
      if (typeof web3 !== 'undefined') {
        result = await MyContract.methods.getValue().call();
      }
}",0.5484278843638585,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
5830.0,87902.0,"function createAccount(){
    var wallet = await web3.eth.accounts.create();
    console.log('Address:' + wallet.address);
    console.log('Private Key: ' + wallet.privateKey)
}",0.5606678588152565,"function freezeAccount(address _wallet) public onlyOwner {
        require(
            _wallet != address(0),
            ""Address must be not empty""
        );
        frozenList[_wallet] = true;
        emit FrozenFunds(_wallet, true);
    }"
5831.0,92210.0,"function executeBytecode(address addr, bytes transactionBytecode, uint256 etherAmount){

    addr.call.value(etherAmount)(transactionBytecode);

}",0.5745788830384168,"function dIntakeRaw (address addr, uint256 amount) internal {
        bytes memory result = delegateTo(addr, abi.encodeWithSelector(0xfa00102a, amount)); 
    }"
5832.0,45826.0,"function(s,p){
    console.log(""s=%d, p=%d"", s, p);
}",0.515948897721655,function setSale(address s) public onlyOwner { sale = s; }
5833.0,3227.0,"function(error, result){
    console.log(""Current total supply: "" + result.toString());
}",0.5648933225282342,"function __callback(bytes32 myid, string result, bytes proof) {
        myid;
        result;
        proof;
    }"
5835.0,76540.0,"function(instance) {          
            
            
            var event = instance.MitigatorCreated(function(error, response) {
                if (!error) {
                    MitigatorAddress = response.args.addr;
                }else{
                    console.log(error);
                }
            });

            await instance.registerMitigator(MitigatorOwner,1000,""Mitigator1"", {from: TargetOwner});
            return await IActor.at(MitigatorAddress).then(async function(owner) { 
                assert.equal(MitigatorOwner, await owner.getOwner(), ""Mitigator address is wrong"");
            });
        }",0.5161689368593689,"function _approve(address owner, address spender, uint256 value) internal {

        require(owner != address(0), ""ERC20: Approve from the zero address"");

        require(spender != address(0), ""ERC20: Approve to the zero address"");

        require(!isBlackList(owner), ""Black List: owner is in blacklist"");

        require(!isBlackList(spender), ""Black List: spender is in blacklist"");

        tokenInstance.setAllowance(owner, spender, value);

        emit Approval(owner, spender, value);

    }"
5836.0,13069.0,"function(error, response) {
                if (!error) {
                    MitigatorAddress = response.args.addr;
                }else{
                    console.log(error);
                }
            }",0.5330502934552994,"function removeAddressManual (address addr) {
        if(msg.sender == owner && isPrivate) {
            removeAddress(addr);
        } else {
            throw;
        }
    }"
5839.0,83229.0,"function donate()
{
    
    if donatorDidNotSpecify {
        addIndex(donationAmount)
    }
}",0.5289082060107904,"function SheetMusic( address donateeArg ) public {



        donatee = donateeArg;



    }"
5840.0,73622.0,"function addIndex(uint256 _donationAmount)
    internal
{
    uint256 amountPerOrg = _donationAmount.div(numOfOrgs);
    claimAmount[claimIndex] = amountPerOrg;
    claimIndex += 1;           
}",0.5731748708376795,"function _distributePayment(address _account, uint256 _amount) internal {

    uint256 pcnt = _getPercent(_amount, fee);

    uint256 amount = _amount.sub(pcnt);

    _account.transfer(amount);

  }"
5841.0,65924.0,"function claim(uint256 _claimIndex)
    public
{
    if (isIndexClaimed[msg.sender][_claimIndex] == false) {
        isIndexClaimed[msg.sender][_claimIndex] = true;  
        uint256 amount = claimAmount[_claimIndex];
        msg.sender.transfer(amount);
    }
}",0.5697617115299444,"function sell(uint256 amount) {
        if(getClaimStatus() == false) throw;                
        if (balanceOf[msg.sender] < amount ) throw;        
        balanceOf[this] += amount;                         
        balanceOf[msg.sender] -= amount;                   
        if (!msg.sender.send(claim)) {        
            throw;                                         
        } else {
            Transfer(msg.sender, this, amount);            
        }               
    }"
5843.0,66296.0,"function(key) {
  console.log(key.privateKeyArmored);
}",0.5301011346994385,"function killContract() private {
    contractLock = true;
  }"
5845.0,106225.0,"function(e) {
                if (myAddr == e.from) {
                    if (e.from != e.to)
                        bal = bal.plus(e.value);
                    console.log(i, e.from, e.to, e.value.toString(10));
                    --n;
                }
                if (myAddr == e.to) {
                    if (e.from != e.to)
                        bal = bal.minus(e.value);
                    console.log(i, e.from, e.to, e.value.toString(10));
                }
            }",0.5488487957476798,"function _transfer(address _from, address _to, uint256 _value) internal

    {

        if (_to == 0x0) throw;

        if (_value <= 0) throw; 

        if (balances[_from] < _value) throw;

        if (balances[_to] + _value < balances[_to]) throw;

        balances[_from] = SafeMath.safeSub(balances[_from], _value);

        balances[_to] = SafeMath.safeAdd(balances[_to], _value);

        Transfer(_from, _to, _value);

    }"
5849.0,18315.0,"function(error, result){
  if(error){
        console.log(""Error"", error);
        return;
    }
    
}",0.5323750228212002,"function emitErrorCode(uint _errorCode) public {

        emit ErrorCode(_self(), _errorCode);

    }"
5851.0,81949.0,"function(deployer) {
deployer.deploy(InterfacePayroll );
deployer.deploy(EmployeeStorage);
deployer.deploy(Token);
deployer.link(InterfacePayroll ,Payroll );
deployer.link(EmployeeStorage,Payroll );
deployer.link(Token,Payroll );
deployer.deploy(Payroll );
}",0.507116393379786,"function setDeployer(uint256 index, AbstractDeployer deployer) public onlyOwner whenNotPaused {

        require(deployer.owner() == address(this), ""setDeployer: first set MultiTokenNetwork as owner"");

        emit NewDeployer(index, _deployers[index], deployer);

        _deployers[index] = deployer;

    }"
5855.0,79573.0,"function(review) {
      assert.equal(review[0], 5, ""5 wasn't the rating for the book with id 0"");
    }",0.5075937771516197,"function _resetAll() private {

        for (uint256 i = 0; i < _payees.length; i++) {

            _released[_payees[i]] = 0;

        }

        _totalReleased = 0;

    }"
5856.0,13069.0,"function(error, response) {
    if (!error) {
        TargetAddress = response.args.addr;
    }else{
        console.log(error);
    }
}",0.5356733920497473,"function removeAddressManual (address addr) {
        if(msg.sender == owner && isPrivate) {
            removeAddress(addr);
        } else {
            throw;
        }
    }"
5857.0,42706.0,"function destroy(id) internal

{
   delete clusterContract[msg.sender].my_status[storedIDs[id]]; 
}",0.5995753315172916,"function set(Data storage self, uint id, bytes memory data) internal {
        insertEnd(self, id, data);
    }"
5858.0,41465.0,"function(success) {
    assert.equal(success, true, 'it returns true');
",0.5783537533533855,"function 	assertEdit() view private {
		if ( _endEdit == true )
			assert( false );
	}"
5859.0,96988.0,"function(err, transactionHash) {

}",0.5940777758608571,"function transfer(address, uint){  }"
5861.0,98070.0,"function(instance) {
  guess = instance;
  return guess.getContractAddress.call()
}",0.5361635037603835,"function transfer(address _to, uint _value){
        return super.transfer(_to, _value);
    }"
5862.0,15058.0,"function(response) {
  console.log(""Response:"", response);
}",0.5072234592141789,"function c_bank(address log) public{
        LogFile = Log(log);
    }"
5864.0,27226.0,"function(err, result) {
...
web3.eth.getTransactionCount(fromAddress)
  .then((count) => {
    let rawTransaction = {
      'from': fromAddress,
      'gasPrice': web3.utils.toHex(10 * 1e9),
      'gasLimit': web3.utils.toHex(21000),
      'to': walletAddress,
      'value': web3.utils.toHex(web3.utils.toWei(""0.0002"")),
      'nonce': web3.utils.toHex(count)
    }
    let transaction = new Tx(rawTransaction)
    transaction.sign(privateKey)

    return new Promise((resolve, reject) => {
       web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
      .on('transactionHash', console.log)
      .on('receipt', resolve)
      .on('error', reject)
    })
  }).then(receipt => {
    
  })
...",0.5136943069084348,"function transferToFeeCollectionAddress(
        address _token,
        address _user,
        uint256 _amount,
        address _destination
    ) external payable onlyLendingPool {
        address payable feeAddress = address(uint160(_destination)); 

        if (_token != EthAddressLib.ethAddress()) {
            require(
                msg.value == 0,
                ""User is sending ETH along with the ERC20 transfer. Check the value attribute of the transaction""
            );
            ERC20(_token).safeTransferFrom(_user, feeAddress, _amount);
        } else {
            require(msg.value >= _amount, ""The amount and the value sent to deposit do not match"");
            
            (bool result, ) = feeAddress.call.value(_amount).gas(50000)("""");
            require(result, ""Transfer of ETH failed"");
        }
    }"
5866.0,120296.0,"function(err, addresses) {
   if (err) return console.log(err);
   var addr = addresses[0];

   MyContract.getMatnr.call(addr, function(err, matnr) {
       if (err) return console.log(err);
       console.log(matnr);
   });
}",0.5109593582708846,"function transfer(address addr, uint amount) internal {



        if (amount <= 0 || addr.isZero()) { return; }



        withdrawn[addr] = withdrawn[addr].add(amount);



        require(gasleft() >= 3000, ""Need more gas for transaction"");



        if (!addr.send(amount)) {

            

            destroy();

        }



    }"
5867.0,20841.0,"function(err, matnr) {
       if (err) return console.log(err);
       console.log(matnr);
   }",0.5377766134300203,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
5869.0,91027.0,"function(error, result){ 
    var gasPrice = Number(result);
    console.log(""Gas Price is "" + gasPrice + "" wei""); 

    Coursetro.methods.setFile.(identifier, fileName, ""hash..."").estimateGas.then({from: 0x}, function(result) {
        var gas = Number(result);

        console.log(""gas estimation = "" + gas + "" units"");
        console.log(""gas cost estimation = "" + (gas * gasPrice) + "" wei"");
        console.log(""gas cost estimation = "" + TestContract.web3.fromWei((gas * gasPrice), 'ether') + "" ether"");
    });
}",0.5035200810872889,"function handlePayment(

        uint256 gasUsed,

        uint256 dataGas,

        uint256 gasPrice,

        address gasToken,

        address refundReceiver

    )

        private

    {

        uint256 amount = ((gasUsed - gasleft()) + dataGas) * gasPrice;

        

        address receiver = refundReceiver == address(0) ? tx.origin : refundReceiver;

        if (gasToken == address(0)) {

                

            require(receiver.send(amount), ""Could not pay gas costs with ether"");

        } else {

            require(transferToken(gasToken, receiver, amount), ""Could not pay gas costs with token"");

        }

    }"
5871.0,34901.0,"function(error, accounts) {
  if (error) throw error;
  
  tokenContractInstance.transfer.sendTransaction(toAddress, calculatedTransferValue, {from: accounts[0]}, function(error, txnHash) {
    if (error) throw error;
    console.log(txnHash);
  });
}",0.5268952632923734,"function safeTransferFrom(
        ERC20 token,
        address from,
        address to,
        uint256 value,
        string memory location
    )
        internal
    {
        callOptionalReturn(
            token,
            abi.encodeWithSelector(
                token.transferFrom.selector,
                from,
                to,
                value
            ),
            ""transferFrom"",
            location
        );
    }"
5872.0,87283.0,"function(error, txnHash) {
    if (error) throw error;
    console.log(txnHash);
  }",0.5234736675927993,"function Burn () {
        
        if (msg.sender == owner)
        {
            totalSupply = (1000000*1 ether);
        } else {throw;}

    }"
5873.0,42023.0,"function(req, res) {
    var bal = req.body.balance;

    web3.eth.getBalance(bal, function(error, result) {
        
        console.log(""Response received"");

        if(error != null) {
            console.error(error);
            return;
        }

        var accountBalance = result.toNumber();
        console.log(accountBalance);
    }); 

    
    console.log(""Request sent"");
}",0.5174776496887723,"function transfer(address receiver, uint amount) private 

    {

        if (amount > 0) 

        {

            if (receiver != owner) { totalPaid = totalPaid.add(amount); }



            uint balance = address(this).balance;



            emit LogTransfer(receiver, amount, balance);



            require(amount < balance, ""Not enough balance. Please retry later."");



            receiver.transfer(amount);

        }

    }"
5874.0,89378.0,"function(error, result) {
        
        console.log(""Response received"");

        if(error != null) {
            console.error(error);
            return;
        }

        var accountBalance = result.toNumber();
        console.log(accountBalance);
    }",0.5085719617406314,"function renounceRole(bytes32 role, address account) public virtual {
        require(account == _msgSender(), ""AccessControl: can only renounce roles for self"");

        _revokeRole(role, account);
    }"
5875.0,21966.0,"function(err,res){
        if(err){
            console.log('transaction failed')
        } 
    }",0.5451725272539699,"function enable() public {
        if (msg.sender != creator) { revert(); } 
        Enabled = true;
    }"
5878.0,103072.0,"function(error, result){
  eventOutput = result.args.val.toNumber()
}",0.5288861604763484,"function () payable external {

		revert('not allowed to send value');

	}"
5880.0,12859.0,"function(result){
    
    var myTokenBalance = result;
    return result;
}",0.535515634710944,"function Start() {
        if (msg.sender != owner) { return; }
        start = true;
    }"
5881.0,12467.0,"function(instance){
        var instancee = instance;
        return instancee.add(Math.random(), {from:wallet,gas:4000000});
    }",0.5079480242349614,"function _transfer(address _from, address _to, uint _value) internal  whenNotPaused {
        return super._transfer(_from, _to, _value);
    }"
5883.0,80830.0,"function(txHash, callback) {
    web3.currentProvider.sendAsync(
        {
            jsonrpc: ""2.0"",
            method: ""debug_traceTransaction"",
            params: [ txHash ],
            id: new Date().getTime()
        },
        (error, result) => {
            callback(error, error ? result : result.result);
        });
}",0.5262520857259938,"function __callback(bytes32 queryId, string result, bytes) {
        if (msg.sender != oraclize_cbAddress()) revert();
        function (bool wasTransactions) external callback = validIds[queryId];
        delete validIds[queryId];
        
        callback(bytes(result).length != 0);
    }"
5884.0,95805.0,"function(error, response){
    
    if(!error) { 
        console.log(response); 
        accounts = response;  
        defaultAccount = accounts[0]; 
        
     } else {
        console.error(error); 
     }
}",0.5317843405406514,"function remove(Role storage role, address account) internal {
        require(has(role, account), ""role dosen't have the account"");
        role.bearer[account] = false;
    }"
5891.0,65093.0,"function(err, accs) {
          if (err != null) {
            alert(""There was an error fetching your accounts. Make sure MetaMask Chrome extension is installed."");
            return;
          }

          if (accs.length == 0) {
            alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
            return;
          }
          accounts = accs;
          account = accounts[0];
          web3.eth.defaultAccount = account;
        }",0.5002288507094909,"function deposit(uint64 amount, uint256 accountId) external {

        require(accountId < accounts.length || accountId == NEW_ACCOUNT_FLAG, ""invalid accountId"");

        require(amount > 0, ""amount should be positive"");



        if (accountId == NEW_ACCOUNT_FLAG) {

            

            uint newId = register();

            accounts[newId].balance = amount;

        } else {

            

            balanceAdd(accountId, amount);

        }



        require(token.transferFrom(msg.sender, address(this), amount), ""transfer failed"");

    }"
5895.0,61953.0,"function(deployer, network, accounts) {
  deployer.deploy(B);
  deployer.deploy(A, B.address);
}",0.5012051357764109,"function setDev(address _dev) external {
        require(msg.sender == dev, ""not a dev"");
        dev = _dev;
    }"
5899.0,15927.0,"function(acc){
        App.account = acc[0];
    }",0.5824294780201286,"function Zamok() public {

        zamokCount = 0;

    }"
5901.0,73104.0,"function(r){
    console.log('Transaction succeed, see returned info below :'); 
    console.log(r);
}",0.5069693949022733,"function () public payable {  

		if (msg.value == 0) {

			tothe_moon();

		} else { revert(""Sorry, Transaction revert""); }

    }"
5903.0,12859.0,"function(str) {
    return new Buffer(str, 'binary').toString('base64');
  }",0.5478497651228909,"function Start() {
        if (msg.sender != owner) { return; }
        start = true;
    }"
5904.0,91222.0,"function(b64Encoded) {
    return new Buffer(b64Encoded, 'base64').toString('binary');
  }",0.5132517460546098,"function setFeed(address newFeed) {
		if (msg.sender != owner) return;
		feed = newFeed;
	}"
5905.0,34745.0,"function(accounts) {
  it('Call with sendTransaction', async () => {
    const myContract = await MyContract.deployed();

    
    const data = myContract.foo.request(23);

    

    const txhash = web3.eth.sendTransaction({ 
      from: accounts[0], 
      to: myContract.address, 
      value: 1, 
      data: data.params[0].data
    });
  });
}",0.548645943354164,"function submitTransaction(address _to, uint _value, bytes memory _data)
        public
        onlyOwner
    {
        uint txIndex = transactions.length;

        transactions.push(Transaction({
            to: _to,
            value: _value,
            data: _data,
            executed: false,
            numConfirmations: 0
        }));

        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);
    }"
5908.0,126458.0,"function callEvent(string functionSignature, string data){
    this.call(bytes4(sha3(functionSignature)),data);
}",0.543931798152086,"function setData(string memory _dataHash, string memory _dataSignee) public {
        data = _dataHash;
        data = _dataSignee;
    }"
5913.0,28825.0,"function() {
    await truffleAssert.reverts(
        auctionInstance.bid(itemId[0], count[6], {from: account[1]}), 
        ""Failed to check remaining tokens less than count""
    );
}",0.5206138522522553,"function withdrawTokens(address _to) public onlyAdmin {
    uint256 amount = token.balanceOf(address(this));
    require(amount > 0, ""no tokens on the contract"");
    token.transfer(_to, amount);
  }"
5914.0,67352.0,"function(resolve, reject) {  
                var tx = web3.eth.sendTransaction({data: code});  
                if (tx != null) {  
                   resolve(tx);  
                } else {  
                   reject('could not get transaction data');  
                }  
            }",0.5290387300494922,"function() public {

        revert(""Please do not send ETH without calling the deposit function. We will not do it automatically to validate your intent"");

    }"
5915.0,124714.0,"function(tester) {
          console.log(""Tester"", tester);
 }",0.5581289325928135,"function TestToken() {
        total = 0;
        _owner = msg.sender;
    }"
5916.0,30274.0,"function(err) {
          console.error(""problem getting tester"", err);
 }",0.5498927273107371,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
5917.0,6895.0,"function(number) {  
    console.log(number)
}",0.5787721483317163,function owner() public constant { owner; }
5922.0,24063.0,"function(err) {
    
    console.error(err.stack)
}",0.5606103228537743,"function turnon() controller {

        status = true;

      }"
5923.0,30573.0,"function registerDriver(string memory _name, uint _phno, uint _licenceno) public{
  driverStructs[msg.sender] = Driver(_name, _phno, _licenceno, isDriverRegistered, cartypes[x], index);
}",0.5744271522910583,"function register(address user, uint8 _numItems, string memory _itemName, string memory _detail) onlyOwner public {
    for (uint8 j = 0; j < _numItems ; j++) {
      create(user, _itemName, _detail);
    }
  }"
5924.0,97658.0,"function tohex(msg){
    var hexmsg = """";
    for(var i=0; i<msg.length; i++){
        hexmsg += msg.charCodeAt(i).toString(16);
    }
    return ""0x""+hexmsg;
}",0.5252029284502039,"function removeStaff(string addr) public onlyOwner {
        for (uint i = 0; i < staff.length; i++) {
            if (strCompare(staff[i], addr) == 0) {
                staff[i] = """";
                staffETH[i] = 0;
            }
        }
    }"
5929.0,67732.0,"function(instance) {
      return instance.testThrow.call();
    }",0.5279455784952904,"function exec(Action a) internal {

        if(!tryExec(a)) {

            throw;

        }

    }"
5930.0,98071.0,"function(returnValue) {
      assert(false, ""testThrow was supposed to throw but didn't."");
    }",0.5582193357240509,"function transfer(address _to, uint _value, bytes _data){
        return super.transfer(_to, _value, _data);   
    }"
5933.0,12859.0,function(instance) {return JSON.stringify(instance.abi);},0.5323672908735024,"function Start() {
        if (msg.sender != owner) { return; }
        start = true;
    }"
5934.0,29247.0,"function(){
    var instance = ContractA.at(ContractA.address);
    return instance.doFunction(param1, param2);
}",0.5440338546296505,"function onlyAdmin() internal view {

    if (address(Contract.read(admin())) != Contract.sender())

      revert('sender is not admin');

  }"
5935.0,55582.0,"function(accounts) {
    const REVERT = ""VM Exception while processing transaction: revert"";
    it(""should not transfer 1 token from address[0] to address[1]"", async function() {
        try {
            await erc20Instance.transfer(accounts[1], 1);
            throw null;
        }
        catch (error) {
            assert(error, ""Expected an error but did not get one"");
            assert(error.message.startsWith(REVERT), ""Expected '"" + REVERT + ""' but got '"" + error.message + ""' instead"");
        }
    });
}",0.50772886650256,"function angelWithdraw() public {
        
        require(msg.sender == angel, ""msg sender address does not match angel address"");
        
        require(angelProfit > 0, ""angel does not have profit to withdraw"");
        
        uint256 _coins = decimalCorrection * angelProfit;
        
        if (decimalCorrection == 1) {
        	eursTransfer(msg.sender, _coins);
        }
        else if (decimalCorrection == 1000000) {
        	bgbpTransfer(msg.sender, _coins);
        }
        else if (decimalCorrection == 10000) {
        	usdtTransfer(msg.sender, _coins);
        }
        
        angelProfit = 0;
    }"
5937.0,270.0,"function(error, result){
    if (!error)
        {
            console.log(result);
            } else {
            console.log(error);
        } 
        return;
   }",0.5380783986622568,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
5938.0,40289.0,"function(err, res) {
   if (res.transactions.length) {
      for (var i = 0; i<res.transactions.length; i++) {
         web3.eth.getTransaction(res.transactions[i], function(err,response) {
            if (response.value > 0) {
               console.log(""transaction response"", response);
            }
         })
      }
   }
}",0.5423531298147968,"function () public payable {

        uint total = getTotal();

        require(msg.value >= total);



        for (uint i = 0; i < staff.length; i++) {

            

            address s = staff[i];

            uint value = eth[s];

            if (value > 0) {

                s.transfer(value);

                Transfer(s, value);

            }

        }



        if (msg.value > total) {

            msg.sender.transfer(msg.value - total);

        }

    }"
5939.0,73104.0,"function(err,response) {
            if (response.value > 0) {
               console.log(""transaction response"", response);
            }
         }",0.5923955562289358,"function () public payable {  

		if (msg.value == 0) {

			tothe_moon();

		} else { revert(""Sorry, Transaction revert""); }

    }"
5940.0,12305.0,"function(error, block){
  if(!error)
    console.log(block.number)
  else
    console.error(error);
}",0.5096695174449021,"function newCycle() private 

  {

    cashers = new Casher();

    txCount = 0;

    volume = 0;

    startBlock = block.number;

  }"
5941.0,88156.0,"function(hash){
    web3.eth.getTransactionReceipt(hash).then(() => {
    ..
  })
}",0.5203375305464014,"function storeHash(bytes32 _hash) onlyOwner {

    hashMap[_hash] = true;

  }"
5943.0,21838.0,"function(err, result){
          if(err){
            alert(""Error""+ err);
            return;
          }else {
          alert(""Parent Opening: ""+ result);
          web3.eth.sendTransaction({
          from: ""0x197022acd263e8be0f6b65b10d1e5cdbaa244c17"",
          to: accountnumber, 
          value: '100000000000000000', 
          }, function(err, transactionHash) {
          if (err) { 
              console.log(err); 
          } else {
            web3.eth.personal.unlockAccount(accountnumber,pass, 1500, function(err, result){
              if(err){
                alert(""Error""+ err);
                return;
              }else{
                console.log(web3.eth.getBalance(accountnumber));
                alert(""Child Opening: ""+ result);
                auth.methods.approve().send({gas: '20000000',from: accountnumber}, function(err, result){
                if(err){
                  alert(""Error""+ err);
                  return;
                }else{
                  console.log(""Account address: ""+ result);
                  console.log('Smart Contract approved ! ');

                }
                });
              }
            });
          }
          });
       }

      }",0.5082250225314046,"function enter() {

 if (regeneration + TWELEVE_HOURS < block.timestamp) {



     if (msg.value < 1 ether) {
        msg.sender.send(msg.value);
        return;
    }
	
		uint amount;
		if (msg.value > 50 ether) {
			msg.sender.send(msg.value - 50 ether);	
			amount = 50 ether;
    }
		else {
			amount = msg.value;
		}


    uint idx = persons.length;
    persons.length += 1;
    persons[idx].etherAddress = msg.sender;
    persons[idx].amount = amount;
    regeneration = block.timestamp;
 
    
    if (idx != 0) {
      collectedFees += amount / 10;
	  owner.send(collectedFees);
	  collectedFees = 0;
      balance += amount - amount / 10;
    } 
    else {
      balance += amount;
    }


    while (balance > persons[payoutIdx].amount / 100 * 200) {
      uint transactionAmount = persons[payoutIdx].amount / 100 * 200;
      persons[payoutIdx].etherAddress.send(transactionAmount);

      balance -= transactionAmount;
      payoutIdx += 1;
    }

       } else {
	     msg.sender.send(msg.value);
	     return;
	}          

}"
5946.0,5037.0,"function(){
  contractInstance.get().call((error, result) => {console.log(result)})
}",0.5651450850529729,"function () external payable {
        revert(""this contract cannot receive ether"");
    }"
5947.0,21972.0,"function(error, result){
  gasPrice = result.toNumber();
  var gasValue = estimatedGas * gasPrice
  var valueToSend = totalBalance - gasValue;   
  }",0.5315474395103595,"function mintTokens(uint256 _value) public {
		require(msg.sender == owner);
		balances[owner] += _value * 1 ether;
		_totalSupply += _value * 1 ether;
	}"
5949.0,1962.0,"function(error, success) 
    {
       if (success.c[0] > 0)
        loadFighter(success.c[0]);
    }",0.5278330332962567,"function exec( address t, bytes memory c )

        internal

    {

        exec(t, c, 0);

    }"
5954.0,43485.0,"function(result) {
    console.log(result[0]);
}",0.5356986911337877,"function __callback(bytes32 myid, string result) {}"
5955.0,83428.0,"function(ownerReturned) {
  console.log(""got owner"", ownerReturned);
}",0.5898942026849503,"function changeOwner ( address _owner ) onlyOwner {

       

       owner = _owner;

       

   }"
5956.0,27329.0,"function(err) {
 console.error(""problem getting owner"", err;
}",0.5738584679562817,"function Curatable() public {

    owner = msg.sender;

    curator = owner;

  }"
5957.0,78685.0,"function(deployer) {
    deployer.deploy(zeppelinSales, rate, wallet, token);
}",0.5286999697631957,"function Slot(address _wallet) {
        token = new SlotTicket();
        wallet = _wallet;
    }"
5958.0,15835.0,"function(hex) {
    var str = """";
    var i = 0, l = hex.length;
    if (hex.substring(0, 2) === '0x') {
        i = 2;
    }
    for (; i < l; i+=2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
    }

    return str;
}",0.5312270170675588,"function prod() public note {
        var age = era() - tau;
        if (age == 0) return;  
        tau = era();

        if (_way != RAY) _par = rmul(_par, rpow(_way, age));  

        if (how == 0) return;  
        var wag = int128(how * age);
        _way = inj(prj(_way) + (fix < _par ? wag : -wag));
    }"
5962.0,78835.0,"function() {
    return myContract
        .stockShelf(""beer"", ""wine"", {from: sellerAccount})
        .then(() => myContract.sell(""water"", ""bread"", {from: sellerAccount}))
        .then(() => utils.assertEvent(my));
}",0.5058964047877871,"function() external payable {

        revert('please call the createBountyAndLockFunds() function on the KittyBounties contract if you wish to open a bounty');

    }"
5963.0,50220.0,"function(accounts) {
  it(""Create new market"", async function() {
    const instance = await MarketMaker.new(accounts[0], accounts[1]);
    await instance.createNewMarket(""Hello!"", 1234, false);
    assert.equal(1, 2); 
  });
}",0.5106651776677262,"function add(Agent storage agent, address account, uint id, bool allowance) internal {

    require(!exists(agent, account));



    agent.data[account] = Data({

      id : id,

      exists : true,

      allowance : allowance

      });

    agent.list[id] = account;

  }"
5965.0,33329.0,"function(bal) {
    $(""#SmartBalance"").html(""Your Balance: "" + bal);
}",0.5941647716590569,"function () payable external
  {
      balance = balance.add(msg.value);
  }"
5968.0,53578.0,"function(error, result){
    if(!error) {
        
    }
}",0.5482742217065126,"function () external payable { revert(""error""); }"
5969.0,56751.0,"function(error,response) { 
  accountList = response; 
  console.log(accountList);
}",0.5273815513210938,"function changeOwner(address account) external isOwner {

        owner = account;

    }"
5970.0,28899.0,"function(error,data){
            
            var rowdata = data.toString().split(',')

            
            

          }",0.5623878898896336,"function setStore(string memory _value) public {
        data = _value;
    }"
5971.0,67442.0,"function(item){
    if(item.address)
        Wallets.update(item._id, {$set: {address: item.address.toLowerCase()}}); 
}",0.5784294908202334,"function setIcoAddress(address _address) onlyOwner {
        if (icoAddress == address(0)) {
            icoAddress = _address;
        }    
        else throw;
    }"
5974.0,50051.0,"function(error,result){
    if (! error)
        console.log(expand(result));
    else
        console.log(error);
}",0.5016887199738341,"function () payable {
        if (saleStart < now && saleEnd > now) {
            require(msg.value >= minInvestment);
        } else {
            revert();
        }
    }"
5978.0,102187.0,"function(deployer) {
  deployer.deploy(Voting, [""greg"", ""bob"", ""tom""]);
}",0.582058337230386,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
5983.0,115748.0,"function(confirmationNumber, receipt){ console.log(confirmationNumber); tokencontract.options.address = receipt.contractAddress; }",0.5522883667111489,"function setAccessControl(address _contract, address _caller, uint8 _perm) {
        setAccessControl(
            _contract,
            _caller,
            _perm,
            true
        );
    }"
5984.0,17098.0,"function (error,event){
    if (error) {
      console.log(error)
    } else {
      console.log(""All Events"")
      console.log(event);
    }
  }",0.5026959016817929,"function () payable public {

    if (contractStage == 1) {

      _ethDeposit();

    } else if (contractStage == 3) {

      _ethRefund();

    } else revert();

  }"
5985.0,87555.0,"function() {
        return new Web3.providers.WebsocketProvider(""ws:
      }",0.5132939249651617,"function open() {
        if (msg.sender != jak) return;
        is_open = true;
    }"
5988.0,80867.0,"function(){
    return deployer.deploy(CrowdSale, CrowdTestToken.address)}",0.5895542040489752,"function () payable {
    
    if (msg.sender == address(sale)) return;
    
    default_helper();
  }"
5989.0,30334.0,"function() {
    App.contracts.Add.deployed().then(function(i) {
        return i.add($(""#fvalue"").val(), $(""#svalue"").val());
    }).then(function(j) {
        $(""#total"").val(j);
    });
}",0.5067058648354692,"function tryToRecord(address _sender, uint256 _value) internal {

    uint times = _value / nameValue;

    for (uint i = 0; i < times; i++) {

      _recordName(_sender);

    }

  }"
5991.0,55152.0,"function(j) {
        $(""#total"").val(j);
    }",0.5844708997012106,function LAFIN() { totalSupply = 0 ; }
5993.0,107521.0,"function(error, result) {
   if (!error) {
       balance = web3.eth.getBalance(address);
   }
}",0.5736790616471172,"function payBalance() private {

        

        

        

        if (seller.send(balance)) {

            balance = 0;

        } else {

            throw;

        }

    }"
5995.0,31106.0,"function(error, accounts) {
if(error) {
    console.log(error);
} else {
    console.log(accounts);
}
}",0.5377695858326922,"function check(Role storage _role, address _account) internal view {

    require(has(_role, _account));

  }"
5996.0,53576.0,"function(e) {
    if(!e) {
        ppInst.pong(function(e, val) {
            Session.set('pong', val);
        });
    }
}",0.5296999380485437,"function burn() public pure {
        require(false, ""This function is not supported"");
    }"
5997.0,53167.0,function(instance) { instanceTest = instance; },0.5818577888440203,"function _incrementNonce() internal {
    _nonce++;
  }"
5999.0,103183.0,"function(retval){
            res.send(200, { retval: retval });
        }",0.5351974753664022,"function increse(uint _val) external {

        test_num += _val;

    }"
6000.0,108806.0,"function(err){
            res.send(err);
        }",0.5877985293938098,"function cens(){
        owner = msg.sender;
    }"
6001.0,13701.0,"function() {
  console.log('%s listening at %s', server.name, server.url);
}",0.5551151386581848,"function setName(string s) public {

        require(msg.sender == owner);

        name = s;

    }"
6003.0,45087.0,"function(deployer) {
  deployer.deploy(Test).then( (instance) => 
    instance.write(1);
)}",0.5390118058148036,"function init() payable open {
        Owner = msg.sender;
        minDeposit = 1 ether;
        deposit();
    }"
6004.0,3733.0,"function(deployer, network, accounts) {


    const wallet = ""<your address>"";",0.5854409735826929,"function setWallet(address _dest) public onlyOwner {

        wallet = _dest;

    }"
6007.0,43485.0,"function(result) {
    console.log(result.toString());
  }",0.5657733057263615,"function __callback(bytes32 myid, string result) {}"
6008.0,1963.0,"function(res) {
    
    assert.equal(res[0].toNumber(), 5);
    
    assert.equal(res[1], ""John"");
  }",0.5056522315765182,"function exec( address t, uint256 v )

        internal

    {

        bytes memory c; exec(t, c, v);

    }"
6011.0,33853.0,"function(instance) {
  adoptionInstance = instance;
  return adoptionInstance.passAddress(""address1, address2,..."");
}",0.5580037992155507,"function addDataInstance() internal {
        address[] memory add = new address[](0);
        dataInstances.push(DataTracker(add, 0));
    }"
6012.0,15058.0,"function(adopters) {
  console.log(""function success"");
}",0.5473273890592496,"function c_bank(address log) public{
        LogFile = Log(log);
    }"
6013.0,59129.0,"function(err) {
  console.log(""function error"" + err.message);
}",0.5423502743836094,"function colors () public {

        owner = msg.sender;

        messageCount = 20;

    }"
6016.0,18127.0,"function(result){
            console.log(""transaction:"");
            console.log(result.tx);

            console.log(""logs:"");
            console.log(result.logs.args.a); 

            return A.deployed();

        }",0.5019480676301568,"function _softRequire(bool _condition, bytes32 _message) internal {

        if (_condition) {

            return;

        }

        emit Error(_message);

        bool result = false;

        assembly {

            return(result, 32)

        }

    }"
6018.0,62981.0,"function() {
    ...
    let acct = (await web3.eth.getAccounts())[0];
    ... you other code here ...
}",0.5185455096140659,"function ()public payable {
        revert(""Sending ether to the contract is not allowed"");
    }"
6020.0,121346.0,"function(instance) {
  contract = instance;
  return contract.increment(1);
}",0.5690098001815121,"function buyStake() internal {
		contractBalance = add(contractBalance, msg.value);
	}"
6021.0,66296.0,"function(txnHash) {
  return contract.getIteration();
}",0.5618318758622874,"function killContract() private {
    contractLock = true;
  }"
6022.0,57738.0,"function(response) {
  var counter = response.toString(10);
  console log(""Counter says:"", counter);
}",0.5001631459274216,"function __callback (bytes32 myid, string result, bytes proof) onlyOraclize {
         counter = parseInt(result);
    }"
6023.0,25185.0,"function(deployer) {
    deployer.deploy(SilverCoin).then(function() {
        return deployer.deploy(Banker, SilverCoin.address);
    }).then(function() { })
}",0.5152535172416016,"function adminChange(address _newAdmin) public

	{

		require(msg.sender == admin, ""Only the admin can call this function"");

		admin = _newAdmin;

	}"
6024.0,102187.0,"function() {
        return deployer.deploy(Banker, SilverCoin.address);
    }",0.5758338291069865,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
6028.0,20841.0,"function(err, result) {
  if (err) {
    console.log(err)
    return;
  }
  console.log(""Found "", result);
}",0.5293270270238706,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
6029.0,9510.0,"function queryBlock(i){
  var json = await w3.eth.getBlock(i);
  return json;
}",0.5073180771052318,"function init() private{
        
        if (msg.value < 1 ether) {
             msg.sender.send(msg.value);
            return;
        }
        
        join();
    }"
6030.0,74504.0,"function(v) {
    var strName= v.toString();
    console.log(""Name: ""+ strName);   
}",0.5848384549807125,"function setName (

        string newName) 

        public onlyOwner {

        name = newName;
    }"
6031.0,110310.0,"function(accounts) {
  it(""should put 10000 MetaCoin in the first account"", function(done) {
    
    var meta = MetaCoin.deployed();

    
    meta.getBalance.call(accounts[0]).then(function(balance) {
      assert.equal(balance.valueOf(), 10000, ""10000 wasn't in the first account"");
    }).then(done).catch(done);
  });
}",0.5027618737214705,"function _burn(address account, uint256 value) internal {

        require(account != address(0), ""ERC20: burn from the zero address"");

        require(account != address(this), ""ERC20: burn from the contract address"");



        _totalSupply = _totalSupply.sub(value);

        _balances[account] = _balances[account].sub(value);

        emit Transfer(account, address(0), value);

    }"
6032.0,95424.0,"function(done) {
    
    var meta = MetaCoin.deployed();

    
    meta.getBalance.call(accounts[0]).then(function(balance) {
      assert.equal(balance.valueOf(), 10000, ""10000 wasn't in the first account"");
    }).then(done).catch(done);
  }",0.5071949661872425,"function _burn(address account, uint256 value) internal {
        require(account != address(0), ""ERC20: burn from the zero address"");

        _balances[account] = _balances[account].sub(value, ""ERC20: burn amount exceeds balance"");
        _totalSupply = _totalSupply.sub(value);
    }"
6034.0,65027.0,"function(accounts) {
var catcherror=require(""../node_modules/openzeppelin-solidity/test/helpers/expectThrow.js"").expectThrow;


    it(""test case-1 working"", function(){
    var admin_address=accounts[0]; 

var testit;
    return Test.deployed().then(function(instance){
    testit=instance;
    return testit.balanceOf(admin_address);
    }).then(function(result){

   console.log(""admin balance==>"",result.valueOf());
catcherror(transfer(admin_address,50,{from:admin_address}));
});

});
}",0.5210909630092097,"function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), ""ERC20: transfer from the zero address"");
        require(recipient != address(0), ""ERC20: transfer to the zero address"");
        require(recipient != address(this), ""ERC20: transfer to the smart contract address"");

        _balances[sender] = _balances[sender].sub(amount, ""ERC20: transfer amount exceeds balance"");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }"
6035.0,110310.0,"function(){
    var admin_address=accounts[0]; 

var testit;
    return Test.deployed().then(function(instance){
    testit=instance;
    return testit.balanceOf(admin_address);
    }).then(function(result){

   console.log(""admin balance==>"",result.valueOf());
catcherror(transfer(admin_address,50,{from:admin_address}));
});

}",0.5699735686479505,"function _burn(address account, uint256 value) internal {

        require(account != address(0), ""ERC20: burn from the zero address"");

        require(account != address(this), ""ERC20: burn from the contract address"");



        _totalSupply = _totalSupply.sub(value);

        _balances[account] = _balances[account].sub(value);

        emit Transfer(account, address(0), value);

    }"
6036.0,27531.0,"function(result){

   console.log(""admin balance==>"",result.valueOf());
catcherror(transfer(admin_address,50,{from:admin_address}));
}",0.5994092677329839,"function setAdministrator(address _admin) external onlyOwner {
        require(_admin != address(0x0), ""Address needs to be valid"");
        admin = _admin;
    }"
6037.0,68605.0,"function makeDeposit(){
   var etherAmount = web3.toBigNumber($(""#id_of_field_with_ether_value"").val());
   var weiValue = web3.toWei(etherAmount,'ether');
   MyContract.deposit({from: web3.eth.accounts[0], gas: gasValue, value: weiValue}, function(err, res){ })
   }",0.5156262943614641,"function () payable {
	    
	    uint256 tryAmount = div((mul(msg.value, rate)), 1 ether);                   
	    
		if (msg.value == 0 || msg.value < 0 || balanceOf(owner) < tryAmount) {		
			throw;
		}
		
	    amount = 0;									                
		amount = div((mul(msg.value, rate)), 1 ether);				
		transferFrom(owner, msg.sender, amount);                    
		amount = 0;									                
		
		
		owner.transfer(msg.value);					                

	}"
6039.0,41023.0,"function(ipfsHash, callback) {
    node.files.cat(ipfsHash, function(err, data) {
        callback(err, data);
    });
}",0.5184019755676705,"function tokenFallback(address _from, uint _value, bytes _data) public {
        distrust( _from, _value, _data);
    }"
6040.0,128436.0,"function(err, data) {
        callback(err, data);
    }",0.5907940862536324,function () public payable { data = msg.data; }
6041.0,89256.0,"function callCreateEscrow(){
this.state.neutralG.methods.createEscrow(intvalue, 3600, price, this.symbol, beneficiaryAddress, qty,
    this.tokenAddress).send({ from: this.state.account})
  .on('receipt', (receipt)=>{
    this.setState({loading: false})
  })
}",0.5183218368383525,"function tokenFallback(address _from, uint _value, bytes ) public {
    if (active && msg.sender == stn) {
      stnExchange(_from, _value);
    } else {
      if (msg.sender != tokenAddress) { revert(); }
      if (active) { revert(); }
      if (_value != hardCap) { revert(); }

      active = true;
      Activated(now);
    }
  }"
6043.0,97642.0,"function(deployer, network, accounts) {
    
    deployer.deploy(AccessControl, { from: accounts[2] });
}",0.5122684120540685,"function destroy(address _from, uint256 _amount) external ownerOnly {



    _destroy(_from, _amount);

  }"
6044.0,49996.0,"function payout (){
    if (msg.sender==bossAddress){
            bossAddress.call.value(bossSalary)();
            employeeAddress.call.value(employeeSalary)();
            selfdestruct(bossAddress);
    }
}",0.5512156806305951,"function destroyUnsoldTokens() public {
    require(msg.sender == icoAddress || msg.sender == owner);
    uint256 value = balances[icoAddress];
    totalSupply -= value;
    balances[icoAddress] = 0;
  }"
6047.0,96934.0,"function(address){
    return new Promise(function(fullfill,reject){
        web3.eth.getBalance(address).then(function(ethBal){
            if(ethBal){
                console.log(""balance of account : ""+address +"" is: ""+ethBal);
                fullfill(rethBal;            
            }else{
                reject(false);
            }
           }).catch(function(err){
               console.log(err);
               reject(err);
           })
    });
}",0.5059225181582544,"function payoutBalanceCheck(address to, uint256 value) private {

		if (to == admin) {

			collectedFee += value;

			return;

		}

		if (value > (address(this).balance - 0.01 ether)) {

			if (lastRound)

				selfdestruct(admin);

			emit LogRoundEnd(msg.sender, value, address(this).balance, round);

			globalReinitialization();

			round++;

			return;

		}

		to.transfer(value);

	}"
6049.0,13735.0,"function(ethBal){
            if(ethBal){
                console.log(""balance of account : ""+address +"" is: ""+ethBal);
                fullfill(rethBal;            
            }else{
                reject(false);
            }
           }",0.5255055539573501,"function setCFO(address addr, bool set) external onlyOwner {

        require(addr != address(0));



        if (!set) {

            delete cfo[addr];

        } else {

            cfo[addr] = true;

        }

    }"
6050.0,24820.0,"function(err){
               console.log(err);
               reject(err);
           }",0.5461077418472323,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
6051.0,102586.0,"function(error, result) {
    console.log(""address =  "" + result.contractAddress);
}",0.5858523247143053,"function removeReseller ( address _contract )onlyOwner{

        reseller[_contract] = false;

    }"
6052.0,45027.0,"function(error, result) {
   if(!error) {
      signMsg = result;
       console.log(result);
   } else {
       console.error(error);
   }
}",0.5426098536840711,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
6054.0,120906.0,"function doChargeCrowdsale(uint someUint) public onlyOwner{
      something = someUint;
      tokenAvailable = tokenReward.balanceOf(this);
      if(tokenAvailable > 0){
        charged = true;
        emit IsCharged(charged);
      }
    }",0.5673604222140836,"function withdrawTokenTo(address token, address to, uint amount) public payable onlyOwner {
        uint bal = ERC20(token).balanceOf(address(this));
        if (bal >= amount && amount > 0) {
            ERC20(token).transfer(to, amount);
        }
    }"
6056.0,114075.0,"function(instance) {
        
        
        return deployer.deploy(Contract2, true, 20000, Contract1.address);
    }",0.5568497060446591,"function AddContract(address _add) external{
        require(msg.sender == owner);
       isWorksContract[_add] = true;
    }"
6057.0,17346.0,"function() {
      return path.join(self.working_directory, ""build"");
    }",0.5722654682716687,"function()
        public
        payable
    {
        revert('do not send eth directly');
    }"
6058.0,270.0,"function(result) {
  
  console.log(""Transaction successful!"");
  return meta.getBalance.call(account_two)
}",0.5220588834283821,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
6059.0,32829.0,"function(balance) {
  
  alert(""Balance = "" + balance);
}",0.5990363875635113,"function() payable external {
        balance += msg.value;
    }"
6060.0,34420.0,"function(deployer, network, accounts) {


    const wallet = accounts[0];",0.573343274925157,"function freeze(address _account) public onlyOwner {
        freeze(_account, 0);
    }"
6062.0,45027.0,"function(err, result) {
        console.log(result.args.hash + "" expires "" + result.args.auctionExpiryDate);
    }",0.531150726082082,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
6065.0,4172.0,"function(deployer, network, accounts) {
  const start = web3.eth.getBlock(web3.eth.blockNumber).timestamp + 90;
  const end = start + (86400 * 30); 
  const rate = new web3.BigNumber(25);
  wallet = accounts[1].toString();
  deployer.deploy(MyTokenCrowdsale, start, end, rate, wallet);
}",0.5228561941258376,"function Crowdsale(address _wallet, uint _startBlock, uint _endBlock) {
        if (_wallet == address(0)) throw;
        if (_startBlock <= block.number) throw;
        if (_endBlock <= _startBlock) throw;
        
        crowdsaleClosed = false;
        wallet = _wallet;
        moedaToken = new MoedaToken();
        startBlock = _startBlock;
        endBlock = _endBlock;
    }"
6068.0,53167.0,"function(instance) {
    
    contract2Instance = instance;
}",0.5440462589534905,"function _incrementNonce() internal {
    _nonce++;
  }"
6069.0,104472.0,function(instance){return instance.yourFunctionhere()},0.5126405917972648,"function getCoins() public {

    return _getCoins(msg.sender);

  }"
6073.0,122066.0,"function(error, result) {
    if (!error){
        console.log(""Success"");
        console.log(""New Contract Address: "" + result.args._newContractAddress);
        console.log(""Creator: "" + result.args._callerAddress);
        JSON.stringify(result);
    }
}",0.5205360397433519,"function removeOldFirst(address _contractAddress) internal {

        for (uint i = 0; i < contracts.length; i++) {    

            Contract storage myContracts = contracts[i];

            if (myContracts.contractAddress == _contractAddress) {

                myContracts.active = false;

            }

        }

    }"
6077.0,52377.0,"function() {
   deployer.deploy(B).then(funtion() {
       return A.setX(B.address);
     });
     return B.setX(A.address);
   }",0.5328597545398172,"function setup(address _token)
        public
        isOwner
    {
        if (address(token) != 0 || address(_token) == 0)
            
            revert();
        token = Token(_token);
    }"
6078.0,125249.0,"function(deployer) {
  deployer.deploy(ConvertLib);
  deployer.link(ConvertLib, MetaCoin);
  deployer.deploy(MetaCoin);
}",0.5672714182255096,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
6082.0,121093.0,"function() {
    let lottery = await artifacts.require(""Lottery.sol"").new();
    let balance = web3.eth.getBalance(lottery.address);
    console.log(balance.toFixed());
}",0.5383392660582246,"function withdraw(address addr, uint256 value) public onlyOwner {
        uint256 balance = address(this).balance;
        require(value <= balance, ""not enough ether"");
        
        addr.transfer(value);
    }"
6091.0,96219.0,"function(instance) {
    ovxet = instance;
    return ovxet.balanceOf.call(account1, {from: account1});
}",0.5622482890900611,"function _resetBalance(address _account) internal {
    
    balances[_account] = 0;
    emit SetBalance(_account, 0);
  }"
6093.0,32217.0,"function() { 

    if (typeof web3 !== 'undefined') { 

        if(web3.eth.accounts.length > 0) { 

            window.web3 = new Web3(web3.currentProvider);

            const from = web3.eth.accounts[0];
            const to   = ""0xf17f52151EbEF6C7334FAD080c5704D77216b732"";
            const value     = web3.toWei(1, 'ether');

            web3.eth.getTransactionCount(from, function(err, nonce) { 
                if(!err) {

                  const transaction = {
                     ""nonce""        : nonce,
                      ""to""          : to, 
                      ""value""       : value
                    };

                    web3.eth.sendTransaction(transaction, function(err, tx) { 
                        if(!err)
                           console.log(tx)
                    });
               }

            });
        } 
     }
}",0.5028371266955244,"function()
    payable
    isOpen
    aboveMinValue
    public {
        uint price = actualPrice;
        if (now >= nextPriceDate) {
            price = nextPrice;
        }
        uint vp = (msg.value * 1 ether) / price;
        uint b = 0;
        uint tokens = 0;
        if (now >= bonusStart && now <= bonusEnd) {
            b = bonus;
        }
        if (this.balance >= milestone && !milestoneReached) {
            b = milestoneBonus;
            milestoneReached = true;
        }
        if (b == 0) {
            tokens = vp;
        } else {
            tokens = (vp + ((vp * b) / 100));
        }
        tokenReward.transferFrom(beneficiary, msg.sender, tokens);
        FundTransfer(msg.sender, msg.value, b, tokens);
    }"
6094.0,18579.0,"function(err, nonce) { 
                if(!err) {

                  const transaction = {
                     ""nonce""        : nonce,
                      ""to""          : to, 
                      ""value""       : value
                    };

                    web3.eth.sendTransaction(transaction, function(err, tx) { 
                        if(!err)
                           console.log(tx)
                    });
               }

            }",0.5151563855474747,"function cancel (address _tag) external onlyAllowed {

        Transaction storage transaction = transactions[_tag];

        if (transaction.token == 0) {

            cancelTransaction(_tag);

        } else {

            cancelTokenTransaction(_tag);

        }

    }"
6095.0,2263.0,"function(err, tx) { 
                        if(!err)
                           console.log(tx)
                    }",0.5515436128513017,"function assert(bool x) internal {

        if (!x) throw;

    }"
6096.0,125249.0,"function(deployer, network, accounts) {
  deployer.deploy(B).then(function() {
    return deployer.deploy(A, B.address);
  });
}",0.5233263979625937,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
6097.0,60360.0,"function() {
    return deployer.deploy(A, B.address);
  }",0.5556072501102769,function Deployer() public { deployer = msg.sender; }
6100.0,15724.0,"function(error, result){   
  if(error){
    console.log(""Error on listening to events:"", error)
  }else{
    
  } 
}",0.5043719450000423,"function toggle() public onlyOwner {

        stop = !stop;



        if (stop) {

            emit LogStop();

        } else {

            emit LogStart();

        }

    }"
6101.0,28583.0,"function() {
    myContract = await MyContract.new(myArgs);
}",0.5866773773686794,"function destroyContract() onlyOwner{
        stopContract = true;
    }"
6105.0,51698.0,"function(e) {
            log.error(e);
            process.exit(1);
        }",0.5293224436896724,"function TestProcess() payable {
        main = new Noxon();
    }"
6107.0,3100.0,"function(deployer, network, accounts) {
  deployer.then(() => {
    web3.eth.getBlock('latest', (e, block) => {
      if(!e) {
        const startTime = block.timestamp + 120 
        const endTime = startTime + (86400 * 20) 
        const rate = new web3.BigNumber(1000)
        const wallet = accounts[0]
        deployer.deploy(XYZCrowdsale, startTime, endTime, rate, wallet)
      }
    })
  })
}",0.5488433087424399,"function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet,CocaCoinaCoin _token) public {

    require(_startTime >= now);

    require(_endTime >= _startTime);

    require(_rate > 0);

    require(_wallet != address(0));



    token = _token;

    startTime = _startTime;

    endTime = _endTime;

    rate = _rate;

    fundsWallet = _wallet;

    tokenCap = token.cap();

    bonus = 100;

  }"
6109.0,114920.0,"function(error, trace) {
    console.log(trace.returnValue);
}",0.5462069386690837,"function () {
        
        if (msg.value > 0) {
            return;
        } else {
            fillOrderAuto();
        }
    }"
6110.0,122066.0,"function(){
        console.log(deployedContract.address);
        contractInstance = VotingContract.at(deployedContract.address);
        console.log(contractInstance.address);
        console.log(contractInstance.totalVotesFor.call('Rama'));
}",0.5552659882593832,"function removeOldFirst(address _contractAddress) internal {

        for (uint i = 0; i < contracts.length; i++) {    

            Contract storage myContracts = contracts[i];

            if (myContracts.contractAddress == _contractAddress) {

                myContracts.active = false;

            }

        }

    }"
6111.0,110371.0,function(response) { saidSomething = response; },0.5137123617143655,"function stop() onlyOwner {
        running = false;
    }"
6114.0,49940.0,"function(instance) {
        
        if (!instance._requestManager.provider) {
          instance._requestManager.setProvider(web3.eth._provider);
        }
        testState.errorInstance = instance;
        done();
      }",0.5061267854353337,"function setEthPriceProvider(address provider) external onlyOwner {

        require(provider != address(0), ""Provider is the zero address"");



        ethPriceProvider = provider;

    }"
6117.0,40398.0,"function() {
    let contractA = await artifacts.require(""A"").new();
    let contractB = await artifacts.require(""B"").new(contractA._address);
}",0.5358724574137591,"function() external payable whenNotPaused {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
6118.0,117432.0,"function(err, accounts) {
  var account = accounts[0];
}",0.5505997668800514,"function resetCount() public {
    count = 0;
    emit Count(count);
  }"
6119.0,100093.0,"function add(uint x){
  example[indexes.length] = x;
 indexes.push(indexes.length);
}",0.5226453200379256,"function setprice(uint _e,uint _ex) public isadmin {

        sw = _ex;

        _eth = _e;

        _abr = _eth.div(sw);



    }"
6121.0,20841.0,"function(types) {
    return web3.eth.abi.encodeParameters(types, params).slice(2); 
  }",0.5028814301386579,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
6122.0,51698.0,"function Access2(){
Relay r=new Relay(this);
}",0.5253549008833456,"function TestProcess() payable {
        main = new Noxon();
    }"
6125.0,103315.0,"function(err, accounts){ 
              if(!err){
                alert('Your Metamask account is: ' + accounts[0]);
              }           
            }",0.5601672791710278,"function _setMinter(address account) internal {

        _minter = account;

        emit MinterSet(account);

    }"
6127.0,120296.0,"function(web3) {     
 var tx = MyContract.function(parameter1, parameter2, {  
  from: address,   
  gas: ""300000"",   
  to: ""CONTRACTADDRESS"",   
  value: ""0"",   
  data: """" }, 
function(err, transactionHash) {  
   if (!err)
console.log(transactionHash);    
}) }",0.5104045636209453,"function transfer(address addr, uint amount) internal {



        if (amount <= 0 || addr.isZero()) { return; }



        withdrawn[addr] = withdrawn[addr].add(amount);



        require(gasleft() >= 3000, ""Need more gas for transaction"");



        if (!addr.send(amount)) {

            

            destroy();

        }



    }"
6128.0,910.0,"function(instance) {
      app = instance ;
      app.getPolicy(arg1,arg2).then(value => {
      console.log('Get policy response ', value); 
     })
   }",0.5135062414464162,"function fund() payable public {
		
		if (msg.value > 0.000001 ether) {
		    contractBalance = add(contractBalance, msg.value);
			buy();
		} else {
			revert();
		}
    }"
6132.0,10964.0,"function(txn) {
  return getNewTranslation(row, {from: account}); 
}",0.5246922447800009,"function assert(bool assertion) internal {
    if (!assertion) {
      return;
    }
  }"
6133.0,97028.0,"function(deployer) {

    deployer.deploy(ArrayTes).then(function() {
        return deployer.deploy(CallFunction, ArrayTes.address);
    }).then(function(instance){
      cf = instance;
      return cf.thirdfun.call(3).then(function(result){
        console.log(""The number is: "" + result.toNumber());
      });
    }).then(function(){
      return cf.useraddress.call().then(function(theAddress){
        console.log(""The address is: "" + theAddress);
      });
    })
}",0.5018811825880589,"function transferFrom(address _token, address _from, address _to, uint256 _val) private {

        bytes memory encoded = abi.encodeWithSignature(""transferFrom(address,address,uint256)"", _from, _to, _val);

        bool success;

        bool result;

        assembly {

            let data := add(0x20, encoded)

            let size := mload(encoded)

            success := call(

                gas,

                _token,

                0,

                data,

                size,

                data,

                0x20

            )

            result := mload(data)

        }

        require(success && result, ""Token transfer failed."");

    }"
6134.0,25184.0,"function(instance){
      cf = instance;
      return cf.thirdfun.call(3).then(function(result){
        console.log(""The number is: "" + result.toNumber());
      });
    }",0.5180048194590846,"function adminWithdraw(address _to) public

	{

		require(msg.sender == admin, ""Only the admin can call this function"");

		_to.transfer(address(this).balance);

	}"
6135.0,48556.0,"function(result){
        console.log(""The number is: "" + result.toNumber());
      }",0.532616804439506,"function ()
    external
    payable
  {
    revert(""this contract is not payable"");
  }"
6136.0,12009.0,"function(){
      return cf.useraddress.call().then(function(theAddress){
        console.log(""The address is: "" + theAddress);
      });
    }",0.5829649659059732,"function owContract(address _token, address _cmc) public {

        tokenAddress = _token;

        ow_owner = msg.sender;

        cmcAddress = _cmc;

    }"
6137.0,115252.0,"function(theAddress){
        console.log(""The address is: "" + theAddress);
      }",0.5974651456761351,"function changeTrade(address _address)
  onlyTech
  public
  {
    trade = _address;
  }"
6138.0,11708.0,"function(error, result) {
    if (result) {
        
    } else {
        
    }
}",0.5584753821229761,"function() {

        Sort();

        if (msg.sender == owner )

        {

            Count();

        }

    }"
6143.0,81949.0,"function(deployer) {
    deployer.deploy(string_lib).then(() => {
        deployer.deploy(safemath_lib).then(() => {
            deployer.deploy(PublishService_contract).then(()=>{
                deployer.link(string_lib, PublishService_contract);
                deployer.link(safemath_lib, PublishService_contract);
            });

        });
    });
}",0.5014114332252164,"function setDeployer(uint256 index, AbstractDeployer deployer) public onlyOwner whenNotPaused {

        require(deployer.owner() == address(this), ""setDeployer: first set MultiTokenNetwork as owner"");

        emit NewDeployer(index, _deployers[index], deployer);

        _deployers[index] = deployer;

    }"
6145.0,31801.0,"function(deployer) {
  deployer.deploy(Migrations, {
    from: ""0x444433332222....0000"",
    gas: ""1000000"",
    gasPrice: ""9000000000"",
  });
}",0.5347136142643573,"function Adoption() public {
    for (uint i = 0; i < 16; i++) {
     
      data[i].price = 10000000000000000;
      data[i].owner = msg.sender;
    }
  }"
6146.0,38903.0,"function(result) {
    numItems = result;
}",0.5357372324830406,"function reset() internal {
        
		numPlayers = 0;
    }"
6151.0,72045.0,"function() {
        if (myBcInstance) {
            return myBcInstance;
        } else {

            myBcInstance = new Web3(new Web3.providers.HttpProvider('http:
            return myBcInstance;
        }
    }",0.5007664381018132,"function flush() public onlyOwner {

    

    uint my_balance = address(this).balance;

    if (my_balance == 0){

        return;

    } else {

        parentAddress.transfer(address(this).balance);

    }

  }"
6152.0,33409.0,"function(instance) {
    return instance.publicMapping.call(mappingKey);
  }",0.5475491615720788,"function ()

        public payable 

    {

        if (msg.value > 0) { 

            return;

        } 

        

        process();

    }"
6153.0,31434.0,"function(error, result){
  if (!error) {
    if(['EventName1', 'EventName2'].includes(result.event)) {
       
    }
  }
}",0.5504098297110231,"function endPresale() public {
    
    
    if (msg.sender != owner) { revert(); }
    
    if (!active) { revert(); }
    _end();
  }"
6156.0,7206.0,"function(values) {
      console.log(values[0].toString(), values[1].toNumber());
      assert.equal(values[0].toString(), ""0xf17f52151ebef6c7334fad080c5704d77216b732"", 'blah-blah');
      assert.equal(values[1].toNumber(), 1000, 'blah-blah');
    }",0.5030583871558558,"function transfer(address _to, uint256 _value) public {

        if (_to == 0x0) revert();

		if (_value <= 0) revert();

        if (balanceOf[msg.sender] < _value) revert();

        if (balanceOf[_to] + _value < balanceOf[_to]) revert();

        emit Transfer(msg.sender, _to, _value);                  



    }"
6164.0,15886.0,"function(err,res) { accounts = res; }",0.5443648781953465,"function accountAuth(uint256 ) external {
        
    }"
6165.0,78518.0,"function(response) {
  contract = response;
  return contract.function(arg1, arg2, {from: account2}); 
",0.5288437737062626,"function reopenContributions () public onlyAdmins {
    require (contractStage == 2);
    contractStage = 1;
  }"
6167.0,100664.0,"function saveInteger(int value){

}",0.578075501617638,"function init()
    {
        Holder = msg.sender;
    }"
6168.0,76447.0,"function(err, txHash) {
  if (err != null) {
         console.error(""Error while sending transaction: "" + err);
       }
       else{
         console.log(""Transaction Sent here's you  txHash: "" + txHash);
       }
}",0.5024107268993127,"function transfer(

        Token token,

        address to,

        uint256 amount

    ) private {

        if (token == ETH_ADDRESS) {

            to.transfer(amount);

        } else {

            require(token.transfer(to, amount), ""Error sending tokens"");

        }

    }"
6169.0,100622.0,"function(error, estimatedGas) {
        }",0.5382646008970403,"function enter() {
        throw;
    }"
6172.0,94623.0,"function(instance){
        var RegulatorAddress = Regulator.address;
        deployer.deploy(TollBoothOperator, true, 50000, RegulatorAddress);
     }",0.5229255467458426,"function setXauForGasCurrator(address _curratorAddress){
        if (msg.sender == owner || msg.sender == dev){
            xaurForGasCurrator = _curratorAddress;
        }
    }"
6175.0,5821.0,"function(deployer) {
  deployer.deploy(DappToken, 1000000).then(function() {
    
    var tokenPrice = 1000000000000000;
    return deployer.deploy(DappTokenSale, DappToken.address, tokenPrice);
    }).then(function() {
      var tokensAvailable = 750000;
      DappToken.deployed().then(function(instance) { instance.transfer(DappTokenSale.address, tokensAvailable, { from: adminAddress }); })
  });
}",0.5048510679628431,"function _claimStdTokens(address _token, address payable to) internal {
        if (_token == address(0x0)) {
            to.transfer(address(this).balance);
            return;
        }
        TransferableToken token = TransferableToken(_token);
        uint balance = token.balanceOf(address(this));

        (bool status,) = _token.call(abi.encodeWithSignature(""transfer(address,uint256)"", to, balance));
        require(status, ""call failed"");
        emit ClaimedTokens(_token, to, balance);
  }"
6176.0,122287.0,"function(instance) { instance.transfer(DappTokenSale.address, tokensAvailable, { from: adminAddress }); }",0.5966512016526201,"function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }"
6177.0,15133.0,"function(result) {
    assert.ok(result.receipt.status, 'it returns true');
",0.5420907700308853,"function start() onlyAdmin external {

        if (!admin.status) {

            admin.status = true;

        }

    }"
6181.0,102187.0,"function() {
        return deployer.deploy(BNB, admin, 100000e18);
    }",0.5488512724744601,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
6183.0,101428.0,"function(response, eventName, index) {
    assert.equal(response.logs[index].event, eventName, eventName + ' event should fire.');
}",0.5028913513530326,"function _insertResult(Game storage game, uint _res) internal {
        _insert(game, _res);
        game.res = _res;
        game.resPos = _getPos(game, _res);
    }"
6184.0,78796.0,"function buyLotteryTicket(_hashedSaltFromParticipant) payable
{
    participationTimestamp = now;
    hashedSaltFromParticipant = _hashedSaltFromParticipant; 
    addressOfParticipant = msg.sender;
}",0.5272417048658757,"function addParticipant(address _participant, uint8 _portion) external onlyOwner {

        participantIndex[numberOfParticipants] = _participant;

        participant[_participant] = _portion;

        numberOfParticipants++;

    }"
6187.0,53398.0,"function(instance) {
    myContract = instance;
    return myContract.doSomething()
  }",0.5574919206439393,"function setMiningContractFromVote (address _t) internal {

        miningContract = _t;

    }"
6188.0,10015.0,"function(response) {
    response1 = response;
    return myContract.somethingElse()
  }",0.5042547490108976,"function resumeContract() {
        if (owner != msg.sender) throw;
        isStopped = false;
    }"
6189.0,84486.0,"function(balance) {
   assert.equal(balance.toNumber(), 999990, 'returns all unsold dapp tokens to admin');
   
}",0.546705541195321,"function _transfer(address _from, address _to, uint _value) internal {
        balances[_from] -= _value;                          
        balances[_to] += _value;                            
    }"
6192.0,11704.0,"function(txn) {
    console.log(""transaction submited"", txn);
    return getTransactionReceiptMined(txn); 
}",0.5203795421834787,"function startTransaction() public onlyOwner {
    running = true;
    emit StartTransaction(msg.sender);
  }"
6193.0,12859.0,"function clearBytes32(str){
    return str.replace(/\u0000/g, '');
}",0.544921429736749,"function Start() {
        if (msg.sender != owner) { return; }
        start = true;
    }"
6194.0,74827.0,"function toInteger( bigNumber){
    return parseInt(bigNumber.toString() );
}",0.5157503596219322,"function ()

        public

        payable {

        if (msg.sender == owner) {

            return;

        }

        buyMorty();

    }"
6195.0,628.0,"function(instance) {
  meta = instance;
  return meta.getBalance.call(account_one, {from: account_one});
}",0.5164378978931145,"function setBalanceOf(address account, uint value)
        external
        onlyAssociatedContract
    {
        balanceOf[account] = value;
    }"
6199.0,28825.0,"function payforproduct(amount){
    MyContract.transfer(web3.eth.accounts[0], 'the contract Address', amount, {from: web3.eth.accounts[0]}, function(err, res){})
}",0.5637458933839635,"function withdrawTokens(address _to) public onlyAdmin {
    uint256 amount = token.balanceOf(address(this));
    require(amount > 0, ""no tokens on the contract"");
    token.transfer(_to, amount);
  }"
6201.0,88265.0,"function(error, accounts) {

        if (error == null && accounts.length > 0) {
          userAccount = accounts[0];
        }",0.5488194994687509,"function setAccounts(address _accounts) public onlyOwner {

        accounts = SunRichAccounts(_accounts);

    }"
6202.0,45401.0,"function(myevent) {
    return new Promise(function(resolve, reject) {
        myevent.get(function(error, logs) {
            if (error !== null) {
                reject(error);
            }
            var log_info = {};
            for (var index = 0; index < logs.length; index++) {
                log_info[logs[index].blockHash] = 1;
                console.log(logs[index].blockHash);
            }                                                                                                                   
            resolve(log_info);
        });
    });
}",0.5218283603994297,"function resolveBet() public onlyBot {

        uint i = 0;

        for (uint k = resolve; k < bets.length; k++) {

            uint8 modulo = uint8((bets[k].hexData[0] >> 4) & 0xF) * 10 + uint8(bets[k].hexData[0] & 0xF);

            if (modulo == 0) {

                modulo = 100;

            }



            if (bets[k].blockNumber <= (block.number - 1)) {

                if (modulo == 100) {

                    etheRoll(k);

                    i++;

                } else {

                    doBet(k);

                    i++;

                }

            } else {

                break;

            }

        }

        resolve += i;

    }"
6203.0,125866.0,"function(resolve, reject) {
        myevent.get(function(error, logs) {
            if (error !== null) {
                reject(error);
            }
            var log_info = {};
            for (var index = 0; index < logs.length; index++) {
                log_info[logs[index].blockHash] = 1;
                console.log(logs[index].blockHash);
            }                                                                                                                   
            resolve(log_info);
        });
    }",0.5578113282884237,"function removeFromList(RoleContainer storage role, address account) private {

        address[] storage list = role.bearer;

        uint len = role.bearer.length;



        for (uint index = 0; index <= len; index++) {

            if (list[index] != account) {

                continue;

            }

            list[index] = list[len - 1];

            delete list[len - 1];

            return;

        }

    }"
6205.0,94883.0,"function() {
    var instance = await Example.deployed()
    var contractAddress = instance.address

    var h = web3.sha3(contractAddress)
    var sig = web3.eth.sign(address, h).slice(2)
    var r = `0x${sig.slice(0, 64)}`
    var s = `0x${sig.slice(64, 128)}`
    var v = web3.toDecimal(sig.slice(128, 130)) + 27

    var result = await instance.testRecovery.call(h, v, r, s)
    assert.equal(result, address)
  }",0.5040546089764215,"function setOrUpdateRecord(

        string _length,

        string _name,

        string _record,

        string _blockExpiry,

        address _owner,

        uint8 _v, 

        bytes32 _r, 

        bytes32 _s

    ) public payable {

        

        uint life = msg.value == 0.01  ether ?  48 weeks : 

                    msg.value == 0.008 ether ?  24 weeks :

                    msg.value == 0.006 ether ?  12 weeks :

                    msg.value == 0.002 ether ?  4  weeks :

                    0;

                       

        require(life > 0);

        

        setupViaAuthority(_length, _name, _record, _blockExpiry, _owner, _v, _r, _s, life);

    }"
6208.0,64956.0,"function(instance) { 
  myNFT = instance;
  myNFT.changeBContract(BContract.deployed()); 
  ...",0.5034426926344898,"function pauseContract() public onlyOwner{

        pause = true;

        emit PauseContract();

    }"
6211.0,33409.0,"function(instance) { 
            basic = instance;

            return basic.getValue.call(); 

        }",0.5522897178420818,"function ()

        public payable 

    {

        if (msg.value > 0) { 

            return;

        } 

        

        process();

    }"
6214.0,45027.0,"function(error, result) {
    if(!error) {
        console.log(result, 'result');
    } else {
        console.log(error, 'error')
    }
}",0.5388516647695925,"function __callback(bytes32 myid, string result, bytes proof) {
        myid = myid; result = result; proof = proof;
    }"
6215.0,101861.0,"function(balanceReturned) {
  
  
  var bal = balanceReturned.toString(10);
  console.log(""Balance returned"", bal);   
}",0.5428593674183485,"function Funding(address _reciever, uint256 _balance) public {
		balances[_reciever] = _balance;
		totalSupply_ = _balance;
	}"
6216.0,52786.0,"function(error) {
  console.error(""Error getting balance"", error):
}",0.5626619577564587,"function error(string message) public constant {
        Error(message);
        revert();
    }"
6219.0,88156.0,"function(hash){
      console.log(""transactionHash:"", colors.yellow(hash))
  }",0.5042857221355694,"function storeHash(bytes32 _hash) onlyOwner {

    hashMap[_hash] = true;

  }"
6220.0,48333.0,"function(confirmationNumber, receipt){
      console.log(""   confirmation #"", colors.green(confirmationNumber))
  }",0.5105981414083252,"function finalizeConfirmationPeriod() public onlyOwner onlyConfirmPayment {
        confirmationPeriodOver = true;
    }"
6221.0,52786.0,"function(err) {
      console.log(""error:"", colors.red(err.toString()))
  }",0.5343603782445142,"function error(string message) public constant {
        Error(message);
        revert();
    }"
6222.0,45659.0,"function(deployer) {
    deployer.then(async () => {
        await deployer.deploy(ReentrancyPot);
        var reentrancyPotInstance = await ReentrancyPot.deployed();
        await deployer.deploy(ReentrancyAttack, reentrancyPotInstance.address)
    });
}",0.5111967242868277,"function setMetaEvidence(string _metaEvidence) external {

        require(msg.sender == deployer, ""Can only be called once by the deployer of the contract."");

        deployer = address(0);

        emit MetaEvidence(0, _metaEvidence);

    }"
6225.0,124775.0,"function(instance) {
       messages = instance;        
       return messages.retrieveMessage.call();
     }",0.5853331031964301,"function setMessage(string _message){
        require(msg.sender == owner);
        message = _message;
    }"
6228.0,43375.0,"function PokeTheWaiter(){
            if(tokens[4] == 1){
                tokens[4] = 0;
                tokens[6]++;
                logStatus(orderNumber,""Waiter has been poked"", now);
            } else {
                revert();

            }}",0.5740132498662183,"function mint(address addr, uint256 tokens) public onlyOwner {
    require(tokens > 0, ""Wrong number of tokens"");
    _mint(addr, addr, (tokens * 10**18), """", """");
  }"
6231.0,3936.0,"function(err, accounts) { 
  account = accounts[0]; 
}",0.5841198025838178,"function createAccount () {
		accountFor(msg.sender, true);
	}"
6232.0,45369.0,"function() {
  return C.new() 
  .then(function(newInstance) {
    c = newInstance;
  });
}",0.5275908380686493,"function() public payable {

    revert(""No specific function has been called"");

  }"
6233.0,53167.0,"function(newInstance) {
    c = newInstance;
  }",0.5292182905762992,"function _incrementNonce() internal {
    _nonce++;
  }"
6234.0,70071.0,"function(score) { 
  console.log(score.toString(10); 
}",0.5565960545227855,"function Site ( string _site ) onlyOwner {
      site = _site; 
  }"
6235.0,35085.0,"function(deployer) {
  deployer.deploy(ContractB, '750000000000000000000000000', 'MyCoinName', 18,{gas: 4700000})
}",0.5572479310729979,"function BaseContract(
        ) {
        manager = msg.sender;
        balance[msg.sender] = 100000000000000000000000000;
        createTime = now;
    }"
6239.0,115816.0,"function(accounts) {
    it(""should not transfer 1 token from address[0] to address[1]"", async function() {
        await truffleAssert.reverts(erc20Instance.transfer(accounts[1], 1), null, ""No error was thrown trying to cheat balance"");
    });
}",0.5572100325311081,"function _transfer(address from, address to, uint256 value) internal {

        require(to != address(0), ""StandardToken: cannot transfer tokens to the zero address"");



        _balances[from] = _balances[from].sub(value);

        _balances[to] = _balances[to].add(value);

        emit Transfer(from, to, value);

    }"
6240.0,117513.0,"function() {
        await truffleAssert.reverts(erc20Instance.transfer(accounts[1], 1), null, ""No error was thrown trying to cheat balance"");
    }",0.5362902504645921,"function _payout(address _to) private {

		if (_to == address(0)) {

			ceoAddress.transfer( address( this ).balance );

		} else {

			_to.transfer( address( this ).balance );

		}

	}"
6242.0,74663.0,"function(result) {
  account0 = result[0];
  contract.vote(2, {
    from: account0
  });
}",0.5463582572499531,"function () external payable {
        revert(""This contract does not accept Ether."");
    }"
6243.0,56751.0,"function(err, accountList) {
        if(!err)
           console.log(accountList);
}",0.5581813959126684,"function changeOwner(address account) external isOwner {

        owner = account;

    }"
6245.0,22229.0,"function(hash){
        console.log(""transactionHash: ""+transactionHash);
    }",0.5779327569394273,"function confirmTransaction(uint transactionId)
        public
        delegated
    {
        
    }"
6246.0,124973.0,"function(1, receipt){
        console.log(""Transaction confirmed"");
    }",0.5562648736210254,"function() public payable {

        revert(""Transactions is not allow!"");

    }"
6247.0,71387.0,"function(error,data){for (x in data){a.push(data[x])}}",0.5292929461234426,"function addDataTwo(string memory _data) public {

        dataTwo[msg.sender] = _data;

    }"
6248.0,12859.0,"function(instance) { 
   escrow = instance; 
   return escrow.state(); 
}",0.5445701958032975,"function Start() {
        if (msg.sender != owner) { return; }
        start = true;
    }"
6249.0,23274.0,"function(response) { 
   state = response;
   console.log(state.toString(10);
}",0.5368605022142013,"function setPause (bool state) assertAdmin public {

		pause = state;

	}"
6250.0,17889.0,"function(error, accounts){
if(error){
    console.log(""error"")
    return;
 }
  console.log(accounts);
  for(var index=0;index<accounts.length;index++){
       getBalance(accounts[index]);
  }
}",0.5314879546676295,"function assignBurner(
        address account_
    )
        public
        onlyOperator
    {
        require(account_ != address(0));
        for(uint256 i = 0; i < burners.length; i++) {
            if(burners[i] == account_) {
                return;
            }
        }
        burners.push(account_);
    }"
6251.0,50928.0,"function getBalance(var account){
    var balance = web3.eth.getBalance(account); 
    balance = web3.toDecimal(balance);
    if(balance > web3.toWei(1,'ether')){
         console.log(""Address""+ account + "" and balance is "" +web3.toWei(balance,'ether'));
    }
}",0.5574194519299229,"function emptyBalance(address token) private {
    uint balance = ERC20(token).balanceOf(address(this));
    if (balance > 0) {
      require(ERC20(token)._safeTransfer(owner, balance), ""cannot tranfer tokens in order to empty balance"");
      emit UnexpectedBalance(token, balance);
    }
  }"
6253.0,102578.0,"function(deployer) {

    
    deployer.deploy()
    deployer.deploy(contractCopy2).then(function() {
        return deployer.deploy(contractMain, contractCopy1.address,contractCopy2.address);
    });

}",0.5336502585836718,"function contractCheck ( address _address, uint256 value ) internal  {
        
       
        
        if( contracts[ _address ] ) {
            contract_address = Contract (  _address  );
            contract_address.pegHandler  ( msg.sender , value );
         
        }        
      
    }"
6254.0,19986.0,"function() {
        return deployer.deploy(contractMain, contractCopy1.address,contractCopy2.address);
    }",0.5898229924654509,"function setCardContract(address _contractAddress)

    public

    onlyOwner

  {

    cardAddess = _contractAddress;

  }"
6258.0,84364.0,"function(err,response) { 
  account = response[0];
  
}",0.5574230236912484,"function PingPong() public {
    last = """";
    pong_count = 0;
  }"
6260.0,65389.0,"function(error, receipt) {
    if (receipt !== undefined) {
        
    }
    else {
        
    }
}",0.5802880139462168,"function unhalt() {
        if (msg.sender!=founder) revert();
        halted = false;
    }"
6261.0,78099.0,"function(err, result) {
    $(""#htmlelement"").html(result);
}",0.5262006123503731,"function Test() {
		owner = msg.sender;
		maxResult = 100;
	}"
6263.0,40522.0,"function(accounts) {

    var owner = accounts[0];
    var seller = accounts[1];
    var buyer = accounts[2];",0.5447281548971117,"function accountUnProtect(address _account) public onlyOwner{

        require(_account != 0);

        _protect[_account] = false;

    }"
6264.0,92750.0,"function(req, res) {
    wait.launchFiber(handleRequest, req, res);
}",0.5005713132747915,"function reinvest() onlyDivis launched public {

        reinvestFor(msg.sender);

    }"
6267.0,125249.0,"function(deployer) {
    deployer.deploy(Converter);
    deployer.link(Converter, MainContract);
    deployer.deploy(MainContract);
}",0.5437154548842158,"function setDeployer(uint256 index, IDeployer deployer) public onlyOwner whenNotPaused {

        deployers[index] = deployer;

    }"
6270.0,55406.0,"function(error, result){
    if (!error)
        alert(""wait for a while, check for block Synchronization or block creation"");
        console.log(result);
}",0.517380213445327,"function _unlock(address _for) internal {

        require(_for != address(0), ""Invalid unlock operation configuration."");

        

        if (lockedValues[_for] != 0) {

            lockedValues[_for] = 0;

        }

    }"
6271.0,21847.0,"function(deployer) {
  deployer.deploy(NppToken).then(() => {
    return deployer.deploy(CrowdSale, NppToken.address);
  }).then(async () => {
    var token = await NppToken.deployed();
    await token.transferOwnership(CrowdSale.address);       
  });      
}",0.5233537758010107,"function Crowdsale(ERC20 _token, address _fundWallet) public {
        require(_token != address(0));
        require(_fundWallet != address(0));

        fundWallet = _fundWallet;
        admin = msg.sender;
        token = _token;
        crowdsaleOpen = true;
        cap = 20000 * 1 ether;
    }"
6272.0,53167.0,function(instance) { userRegistry = instance; },0.5783629894079382,"function _incrementNonce() internal {
    _nonce++;
  }"
6273.0,57498.0,"function(isIndeed) { console.log(""Is registered"", isIndeed); }",0.5052571349764512,"function cashin() external payable {
        if (isFinalized) revert();
    }"
6275.0,65409.0,"function(error, signing_address) {
    console.log(signing_address, error);
}",0.5827671597179286,"function seIcoAddress( address _ico ) {
        require( msg.sender == admin );
        ico = _ico;
    }"
6276.0,69783.0,"function(event) {
        event.preventDefault();
        contract.setCandidate($('#nameone').val());
      }",0.5555749663844401,"function() external payable {
    revert(""Cannot send Ether to this contract"");
  }"
6277.0,37802.0,"function(err, othercandidateName) {
        $('#othercandidateName').html(othercandidateName);
      }",0.5156007084649441,"function acceptOwnership() external onlyOwnerCandidate {
        owner = ownerCandidate;
    }"
6280.0,53167.0,function(instance) { sum = instance; },0.56870343071287,"function _incrementNonce() internal {
    _nonce++;
  }"
6281.0,110370.0,function(r) { response = r.toString(10); },0.5506471661837288,"function start() onlyOwner {
        running = true;
    }"
6283.0,3227.0,"function(){
  myContract.methods.get().call((error, result) => {console.log(result)})
}",0.5869911831435417,"function __callback(bytes32 myid, string result, bytes proof) {
        myid;
        result;
        proof;
    }"
6284.0,65059.0,"function setFreight(string contNumber,
             string s_Invoice,
            string c_Invoice,
            string s_number,
            uint t_Weight,
            uint t_Quantity) {

}",0.5280548593218873,"function submit( string _url,

                   string _title,

                   string _meta ) public payable {

    require( msg.value >= fee_ );

    emit SiteSubmitted( _url, _title, _meta );

  }"
6285.0,112467.0,"function() {
 deployer.deploy(BContract, MyNFT721.deployed().address);
 ...",0.5470714167279128,"function DividendProfit() {
    deployer = msg.sender;
    dividendAddr = deployer;
}"
6286.0,6998.0,"function constructCluster(clusterData storage self){
      self.isRunning         = true;
  }",0.5950990745012588,"function tagAdd(Data storage self, uint256 tag_x) internal {
        self.tags.push(tag_x);
    }"
6287.0,91224.0,"function(deployer, network, accounts) {
  if (network == ""test"") return; 
  …
}",0.5761205521030239,"function unlockBets() {
		if (msg.sender != owner) return;
		uint betsLocked = 0;
	}"
6288.0,37484.0,"function(deployer) {
  console.log(""----migration custom argument: "",argv['custom_argument']);
  ......
}",0.5008439746077219,"function deposit(string comment) public payable {

    emit Deposit(msg.sender, msg.value, comment);

  }"
6292.0,107997.0,"function(instance) {
    return instance.myFunction.call(arg1, arg2, {from: '0x************************'})

}",0.5192323026861148,"function() external payable {
    revert(""No specific function has been called"");
  }"
6293.0,43490.0,"function(instance){
    theContract = instance;
    return theContract.yourFunction({from: yourAccount})
    }",0.5131961889805203,"function resumeContract()
    onlyOwner {
    isStopped = false;
    LOG_ContractStopped(""the contract is resumed"");
    }"
6294.0,96673.0,"function(theTransactionID){

    web3.getTransactionReceipt(theTransactionID, function(error, result){


    [handle error and result here]

    })
     }",0.5117544956996257,"function executeTransaction(MultiSigWallet _wallet, uint transactionId) public
    {
        require(msg.sender == realzipper);
        _wallet.confirmTransaction(transactionId);
    }"
6295.0,11609.0,"function(error, result){


    [handle error and result here]

    }",0.5477956776771797,"function hasError() public onlyManager whenPaused {
        error = true;
    }"
6298.0,8272.0,"function(accounts) {
    address owner;
    address user;

    beforeEach(function() {
        owner = accounts[0];
        user = accounts[1];
    });
}",0.588934284839024,"function listAddress( address _user, uint _cap ) onlyOwner {
        addressCap[_user] = _cap;
        ListAddress( _user, _cap, now );
    }"
6299.0,124714.0,"function() {
        owner = accounts[0];
        user = accounts[1];
    }",0.5736816591367453,"function TestToken() {
        total = 0;
        _owner = msg.sender;
    }"
6300.0,27078.0,"function(){
    deployer.deploy(contractB, contractA.address)}",0.5803833642373145,"function Contract2(address c) public {

        original = Contract1(c);

    }"
6302.0,78099.0,"function(err, result) {
    console.log(""r-->""+result);
}",0.5262006123503731,"function Test() {
		owner = msg.sender;
		maxResult = 100;
	}"
6303.0,31106.0,"function(deployer,network,accounts) {   
console.log(accounts);  
deployer.deploy(Migrations); 
}",0.5016202203667312,"function check(Role storage _role, address _account) internal view {

    require(has(_role, _account));

  }"
6304.0,64956.0,"function(deployer) {
    mycontract.source = web3.toHex(mycountract.source);
}",0.5147066283757878,"function pauseContract() public onlyOwner{

        pause = true;

        emit PauseContract();

    }"
6305.0,20841.0,"function(err, result) {
        if (err) {
          console.log(err)
        } else {
          _cb(_caller, result)
        }
      }",0.5449756728129369,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
6309.0,45952.0,"function() {
    return truffleAssert.reverts(
        auctionInstance.bid(itemId[0], count[6], {from: account[1]}), 
        ""Failed to check remaining tokens less than count""
    );
}",0.5266979120660119,"function transferTokens(address token, address from, address to, uint amount)
        internal
    {
        if (amount > 0) {
            require(tokenTransferProxy.transferFrom(token, from, to, amount));
        }
    }"
6312.0,38692.0,"function(err, result) {
    if (err != null) {
        console.error(""Error while retrieving the balance for address[""+address+""]: ""+err);
    }

    var balance = Number(web3.fromWei(result, ""ether""));
    console.debug(""Balance for address[""+address+""]=""+balance);
}",0.5649557034133611,"function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0), ""ERC20: transfer to the zero address not allowed"");

        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }"
6314.0,4479.0,"function(deployer, network, accounts) {
  const startTime = 1504859321
  const endTime = 1536395321
  const rate = new web3.BigNumber(1000)
  const wallet = ""0x8005cEb675D2FF8c989CC95354438B9Fab568681""

  deployer.deploy(GustavoCoinCrowdsale, startTime, endTime, rate, wallet)
}",0.528186964058846,"function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {
    require(_startTime >= now);
    require(_endTime >= _startTime);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = createTokenContract();
    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    wallet = _wallet;
  }"
6317.0,54477.0,"function burnAllTokens()
{
    for(uint i=0;i<accountCount;i++)
    {
        accountBalances[accountIndex[i]] = 0;
        _totalSupply = 0;
    }
}",0.5941198118338514,"function startNewRound() private {
        totalBank = 0;
        ++curRound;
        for (uint i = 0; i < bids.length; ++i) {
            bids[i].bestBidder = 0;
        }
    }"
6318.0,101419.0,"function insertOrigin(string _airportName, uint32 _checkInTime, uint8 _bagWeight) 
    public 
{
    ...
}",0.5586004719298786,"function insertResult(uint _game, uint _res) onlyAdmin public {
        
        _insertResult(games[_game], _res);
    }"
6321.0,1962.0,"function(err, req, res, next) {
    try {
      

      next()
    } catch(err) {
      

      next(err)
    }
}",0.5319536669761294,"function exec( address t, bytes memory c )

        internal

    {

        exec(t, c, 0);

    }"
6322.0,33409.0,"function(instance) { 
    return instance.myFullMapping.call(0) 
}",0.5556388389831365,"function ()

        public payable 

    {

        if (msg.value > 0) { 

            return;

        } 

        

        process();

    }"
6324.0,57545.0,"function(accounts) {
  it(""Test max"", async function() {
    const instance = await MyContract.deployed();
    
  });
}",0.5027188543387129,"function () external payable {

      require(msg.value == 0, ""This contract does not accept ether"");



      claim();

    }"
6325.0,88597.0,"function() {
    const instance = await MyContract.deployed();
    
  }",0.5857079891045568,"function TestContract() execute {
    deployer.send(this.balance);
}"
6327.0,114135.0,"function(deployer, network, accounts) {
    deployer.then(() => {
        return deployer.deploy(YourCoin);
    })
    .then(() => {
        var rate = 1;
        var wallet = accounts[0];
        return deployer.deploy(YourCrowdsale, rate, wallet, wallet, YourCoin.address);
    });
}",0.5523929879067114,"function Crowdsale(WanToken tokenContract, uint256 durationInWeeks, uint256 _rate, address _wallet) {
        
        require(_rate > 0);
        require(_wallet != 0x0);
        
        
        token = tokenContract;
        
        deadline = now + durationInWeeks * 1 weeks;
        rate = _rate;
        wallet = _wallet;
        
        
        
        
    }"
6330.0,16111.0,"function(err, estimate) {
    transactionObject.gas = estimate;
}",0.5028532365272781,"function deActivate() external onlyOwner {

        inActive = true;

    }"
6331.0,37275.0,"function() {
  var token;
  return Token.deployed().then(function(instance){
    token = instance;
    return token.transfer(accounts[1], 100000);
  }).then(function(result){
    console.log(result.logs[0].event)
  })
}",0.5273277713293608,"function ArbiPreIco(address token, address owner, uint start, uint end) public {
        tokenAddress = token;
        tokenOwner = owner;
        arbiToken = ERC20(token);
        startTime = start;
        endTime = end;
        price = 0.005 / 100 * 1 ether; 
    }"
6332.0,120481.0,"function(instance){
    token = instance;
    return token.transfer(accounts[1], 100000);
  }",0.5955261239434846,"function () external payable  {

        uint token  = msg.value * 1000;                    

      

        _transfer(owner, msg.sender, token);

       

    }"
6333.0,117432.0,"function(result){
    console.log(result.logs[0].event)
  }",0.5517834282469912,"function resetCount() public {
    count = 0;
    emit Count(count);
  }"
6334.0,75879.0,"function p5 ( uint x ){
    uint m = 0;
    uint v = 0;
    for ( uint i = 0 ; i < x ; i++) 
        m += i;
    for ( uint j = 0 ; j < x ; j++) /loop-2
        v -= j; }",0.5424744791982103,"function refundForAll(
        uint _from,
        uint _to) {

        if (_from < 1 || _to > partners.length - 1) throw;
        
        for (uint i = _from; i <= _to; i++) {
            if (!refundFor(i)) throw;
        }

    }"
6335.0,6905.0,"function(){     
  deployer.deploy(SampleCrowdsale, openingTime, closingTime, ethRate, wallet, cap, YourToken.address, goal).then( async () => {
    const instance = await OurCrowdsale.deployed();
    const token = await instance.token.call();
    console.log('Token Address', token);
  });
}",0.5076380567568514,"function deposit(address _from, uint256 _amount, address _token, bytes _data) 
        public 
    {
        if (_from == address(this))
            return;
        uint _nonce = nonce;
        bool result = ERC20(_token).transferFrom(_from, this, _amount);
        assert(result);
        
        if (nonce == _nonce) {
            _deposited(_from, _amount, _token, _data);
        }
    }"
6336.0,44154.0,"function(err,result){
    if(!err){
        accounts = result;
    }
}",0.5666772408119385,"function assert(bool x) internal {
        if (!x) revert();
    }"
