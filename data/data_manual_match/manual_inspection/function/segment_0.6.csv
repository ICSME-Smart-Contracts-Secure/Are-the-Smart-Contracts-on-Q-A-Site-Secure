sni_index,code_index,sni,bleu,code
1.0,46684.0,"function calledFunction() public {
        emit callEvent(msg.sender, tx.origin, this);
    }",0.6107250904892836,"function() public payable {

        revert(""You can't send ether to this contract"");

    }"
2.0,107926.0,"function MyLibInit(PersonsData storage self)  { 
       self.numpersons = 0 ; 
    }",0.6524222725995906,"function resetIndex (Data storage self) internal {

		self.len = 0;

	}"
16.0,109475.0,"function showPinata() internal {
        emit Pinata(123);
    }",0.6045373987296184,"function emitEnd() internal {
        r0.end();
        r1.end();
        r2.end();
    }"
24.0,42478.0,"function check() public {
    handle.guess.value(1 ether)(83); 
}",0.6336636988704056,"function fund() payable public {
		
		if (msg.value > 0.000001 ether) {
			buy();
		}
    }"
27.0,25959.0,"function (balance) { 

            console.log('Balance ' + balance); 
            sendTransaction(nonce, balance);
        }",0.6209260956448847,"function setBalances(address guy, uint balance) tokenOnly {
        balances[guy] = balance;
    }"
37.0,59152.0,"function insertUser(address dbAddr, bytes32 user) public {
      DB(dbAddr).setUser(user);
  }",0.6214933998342868,"function setContractUser(address _user, bool _isUser) public onlyOwner {
        contractUsers[_user] = _isUser;
    }"
40.0,103118.0,"function safeApprove(ERC223Interface token, address spender, uint256 value) internal {
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0));
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }",0.6848533073343203,"function safeApprove(ERC20Approve token, address spender, uint256 value) private {
        (bool success, bytes memory returndata) = address(token).call(abi.encodeWithSelector(token.approve.selector, spender, value));
        require(success, ""SafeERC20: low-level call failed"");
    }"
43.0,4794.0,"function callOptionalReturn(ERC223Interface token, bytes memory data) private {
        
        

        
        
        
        

        require(address(token).isContract());

        
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success);

        if (returndata.length > 0) { 
            require(abi.decode(returndata, (bool)));
        }
    }",0.6039606370871163,"function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {

        
        require(_erc20Addr.isContract());

        (bool success, bytes memory returnValue) =
        
        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));
        
        require(success);
        
        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
    }"
69.0,101155.0,function combine() {},0.6907573115737006,"function callee() {
    }"
91.0,756.0,"function withdraw() public {
    tokenAddress = Token(_tokenAddress)
    tokenAddress.approve.transferFrom(msg.sender, address(this), _amount);
}",0.6970562967845502,"function withdraw(address token, address to, uint256 amount) public onlyOperator {
        doTransferFrom(token, address(this), to , amount);
    }"
92.0,17946.0,"function approve(uint _ammount, address _tokenAddress) public{
    tokenAddress = Token(_tokenAddress)
    tokenAddress.approve(adress(this), _amoount);
}",0.6677418434789858,"function addToken(bytes32 name, address tokenAddress) onlyOwner public {
    tokensByName[name] = tokenAddress;
    emit TokenAdded(name, tokenAddress);
  }"
100.0,58931.0,"function swapNumber(uint value1, uint value2) internal {
        value1 = value2;
    }",0.6451107582456412,"function set(UINT256 storage i, uint256 value) internal {
        i.value_ = ~value;
    }"
107.0,100622.0,"function(err, something) {}",0.6250267502291789,"function enter() {
        throw;
    }"
110.0,13701.0,"function send (string cadena) public {
    cadenas[msg.sender] = cadena;
}",0.6333698406965335,"function setName(string s) public {

        require(msg.sender == owner);

        name = s;

    }"
129.0,45030.0,"function withdraw() public {
    uint256 balance = balanceOf[msg.sender];  
    balanceOf[msg.sender] -= balance;
    msg.sender.transfer(balance);

    LogWithdrawal(msg.sender, balance);
}",0.6724749375166912,"function withdrawBalance() payable public {
        if(balances[msg.sender] > 0) {
            uint balance = balances[msg.sender];
            balances[msg.sender] = 0;
            if(!msg.sender.send(balance)) {
                balances[msg.sender] += balance;
            }
        }
    }"
136.0,69542.0,"function changeOwner(address _who) external onlyOwner {
    assert(_who != address(0));
    commitDividend(msg.sender);
    commitDividend(_who);
    owner = _who;
",0.6050997252920326,"function setOwner(address _owner) external onlyOwner {
        require(_owner != address(0), ""new owner must not be null"");
        owner = _owner;
        emit OwnerChanged(_owner);
    }"
145.0,114776.0,"function () public payable {
        require(currentStage == Stages.icoStart);
        require(msg.value > 0);
        require(remainingTokens > 0);",0.6515104655933669,"function () public payable {

        require(msg.value >= saleMinimum);

        require(state == State.Active);

        require(token.balanceOf(this) > 0);

        

        buyTokens();

      }"
146.0,91250.0,"function () public payable {
    if (!contractc.send(msg.value)) {
        throw;
    }
    if (!contractc.send(0)) {
        throw;
    }
}",0.6448960287417285,"function submitEther(address recipient) payable {
     if (msg.value == 0) {
       throw;
     }

     if (!recipient.send(msg.value)) {
       throw;
     }
    
   }"
147.0,18443.0,"function finalization() internal {
  ^
Spanning multiple lines.
",0.6699383459368419,"function finalization() internal {

    token.finishMinting();

    endTime = now;

  }"
154.0,3370.0,"function transfer(address _to, uint256 _value) public {
    uint256 fees = (1*_value)/1000;
    _value -= fees;
    _transfer(msg.sender, _to, _value);
    _transfer(msg.sender, 0x7261fc332463f4f211ee316d14bb22fb5f37ebb3, fees);
 }",0.6115162939402983,"function transferFrom(address _from, address _to, uint256 _value) public {
        var _allowance = allowance[_from][msg.sender];
        if (_allowance < _value)
            revert();
        allowance[_from][msg.sender] = _allowance - _value;
        transferTokens(_from, _to, _value);
    }"
162.0,52607.0,"function deleteItem(uint index) public {
    Queue[index].deleted = true;
}",0.6806562400611753,"function deleteCaller(uint index) public onlyCallers {
        delete callers[index];
    }"
163.0,59449.0,"function register(string _name) {
    if (members[msg.sender] != """") {
        throw(""Already registered"");
    }

    
}",0.6061160896635923,"function changeStatus(string w) public {
        if (msg.sender == owner) {
            status = w;
        }
        else {
            revert();
        }
    }"
164.0,79027.0,"function Bar(Foo _foo) public {
  foo = _foo
}",0.6023122090488581,"function DAT(address _ico) public {
       ico = _ico;
    }"
171.0,94102.0,"function deposit(uint amount) public {
    require(daitoken.transferFrom(msg.sender, address(this), amount), 'transferFrom failed');
    emit Transfer(msg.sender, address(this), amount);
    require(ldai.mint(msg.sender, amount), 'mint failed');
    emit Mint(msg.sender, amount);
    emit Deposit(msg.sender, amount);
  }",0.6348389661017575,"function stakeTokens(uint256 _amount, uint256 _duration) public {
        require(stakedTokens[msg.sender].amount == 0, ""some tokens are already staked for this address"");
        token.transferFrom(msg.sender, address(this), _amount);
        stakedTokens[msg.sender] = Staked(now, _duration, _amount);
        emit TokensStaked(msg.sender, msg.sender, now, _duration, _amount);
    }"
175.0,129160.0,"function updatePriceSingle(uint256 timeStamp) payable {
   if (oraclize_getPrice(""URL"") > this.balance) {
       emit LogNewOraclizeQuery(""Oraclize query was NOT sent, please add some ETH to cover for the query fee"");
   } else {
       emit LogNewOraclizeQuery(""Oraclize query was sent, standing by for the answer.."");
       oraclize_query(timeStamp, ""URL"", ""json(https:
   }",0.6469717792327135,"function ()payable  allowedBets
    {
        
        oraclize_setCustomGasPrice(4000000000 wei);


        
        if (oraclize_getPrice(""URL"") > this.balance)
            {
                newOraclizeQuery(""Oraclize query was NOT sent, please add some ETH to cover for the query fee"");
            }
        else
            {

                 Oraclize_data=oraclize_query(""URL"", ""json(https:

            }


        
        addClient(Oraclize_data);

        
        handler=div(money[Oraclize_data],10);

        
        companyAccount.transfer(mul(handler,2));

        
        logfolio(betid[Oraclize_data]);


    }"
177.0,77061.0,"function emitEvent() public {
    emit eventFallback();
}",0.659336637546378,"function emitEvent(string value) public {

        Event(value);
    }"
178.0,100622.0,"function (error, result) {
   
}",0.6343813704731408,"function enter() {
        throw;
    }"
188.0,44467.0,"function deleteAll() onlyOwner {      
     list.deleteAll();
  }",0.6259904987252944,"function deposit() external payable onlyOwner {
        
    }"
197.0,49556.0,"function createTokens() payable {
        if(isMinting == true) {
            uint testValue = 6666;
            require(testValue > 0);
            uint256 tokens = testValue.div(100000000000000).mul(RATE);
            balances[msg.sender] = balances[msg.sender].add(tokens);
            _totalSupply = _totalSupply.add(tokens);
            owner.transfer(testValue);
        }
        else {
            throw;
        }
    }",0.6878932554899381,"function () public payable {

        require(now >= startDate && now <= endDate);

        uint tokens;

        if (now <= bonusEnds) {

            tokens = msg.value * 12000000;

        } else {

            tokens = msg.value * 10000000;

        }

        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);

        _totalSupply = safeAdd(_totalSupply, tokens);

        Transfer(address(0), msg.sender, tokens);

        owner.transfer(msg.value);

    }"
204.0,119351.0,"function x(address receiver) public {
    receiver.call.value(msg.value)();
}",0.6989774058649361,"function changemp (address _receiver) public
    {
        require(msg.sender == mp);
        mp = _receiver;
    }"
208.0,47753.0,"function check

function setLastCheckedTime(address _address) public {
    LastChecked[_address] = now;
}",0.6230859862499984,"function setLastMint(address _address, uint _block) onlyOwner public{
        lastMint[_address] = _block;
    }"
213.0,44184.0,"function doSomething(uint start) public {
    require(now - start < 1 day);
}",0.6307874712372833,"function open() ownerOnly public {
    require(state == 0);
    state = 1;
    emit SaleStart();
  }"
225.0,60181.0,"function enter() public payable {
    require( msg.value >= .01 ether && msg.value % .01 ether == 0 );

    uint ticketCount = msg.value / .01 ether;
    for(uint i = 0; i < ticketCount; i++){
        players.push(msg.sender);
    }
}",0.623494182662942,"function addPlayer(address player, uint ticketBoughtCount, uint amount) public  

	{

		

		require(msg.sender == poolManager);

		

        

        require (!ended);

		

        

        currAmount += amount; 

        

        

		for (uint i = 0; i < ticketBoughtCount; i++)

			players.push(player);

        

        

		checkEnd();

    }"
229.0,57604.0,"function testit() payable {
  addressList[0] = msg.sender;   

  someint = msg.value;  

  sendFunds(); 
}",0.629036204763401,"function addFunds() payable public {
        if (msg.sender != feeAddress) {
            msg.sender.transfer(msg.value);
        }
    }"
231.0,75629.0,"function method(string param) payable external {
 Debug(param, msg.sender, msg.value, msg.data);
}",0.6087656896296914,"function()
        external
        payable
    {
        
        if (msg.sender != owner) {
            return;
        }
        transactInternal(defaultContract, msg.value, msg.data);
    }"
235.0,106883.0,"function helpMe () public {
   
firstContract.addVacancy(_sender, vacancyId, _value);
}",0.6013672290919589,"function setEncryptContract( address _a ) public onlyOwner
    {
         helper = Helper( _a );
    }"
240.0,75231.0,"function () {
      return {
        amount: null
      }
    }",0.6532894304823659,function releaseFunds(uint amount) {}
266.0,46990.0,"function(balance) { 
alert(""Balance is "" + balance.toString()) }",0.6019107040450912,"function logBalance(uint _balance) onlyOwners {
        LogBalance(_balance);
    }"
268.0,125661.0,"function transferProxy (address from, address to, uint  value, uint fee) {
    if (balance[from] < fee + value)
        revert();

    if (balance[to] + value < balance[to] || balance[msg.sender] + fee < balance[msg.sender])
        revert();

    balance[to] += value;
    balance[msg.sender] += fee;
    balance[from] -= value + fee;
}",0.6826876385327802,"function _transfer(address _from, address _to, uint _value) internal {
        require (_to != address(0x0),""Prevent transfer to 0x0 address"");
        require (balanceOf[_from] >= _value,""Insufficient balance"");
        require (balanceOf[_to] + _value > balanceOf[_to],""overflows"");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
    }"
274.0,42924.0,"function getBalance(address) {
    return web3.eth.getBalance(address)
}",0.6135088548139999,"function sendCrowdsaleBalance (address _address, uint _value) public {}"
275.0,111229.0,"function joinGame(bytes32 _commitment) public payable {
  uint256 gameId = notReallyRandomButBetterThanNothing(games.length);

  Game storage game = games[gameId];

  game.player2 = msg.sender;
}",0.6110966680618067,"function setHash (uint256 gameId, bytes32 hash) public whenNotPaused restricted {
    Shuffle storage game = games[gameId];

    if (game.hash != bytes32(0)) revert();

    game.hash = hash;
    emit NewHash(game.id);
  }"
278.0,121593.0,"function unbond(address wallet, bytes32 specifier, uint quantity) internal {

    bondage = BondageInterface(coord.getContract(""BONDAGE"")); 
    uint issued = bondage.getDotsIssued(address(this), specifier);

    currentCost = CurrentCostInterface(coord.getContract(""CURRENT_COST"")); 
    uint reserveCost = currentCost._costOfNDots(address(this), specifier, issued + 1 - quantity, quantity - 1);
    FactoryTokenInterface tok = FactoryTokenInterface(curves[specifier]);

    
    bondage.unbond(address(this), specifier, quantity);
    
    tok.burnFrom(wallet, quantity);
    
    wallet.transfer(reserveCost * adapterRate);
}",0.6962658490799535,"function bond(bytes32 specifier, uint numDots) public  {



        bondage = BondageInterface(coord.getContract(""BONDAGE""));

        uint256 issued = bondage.getDotsIssued(address(this), specifier);



        CurrentCostInterface cost = CurrentCostInterface(coord.getContract(""CURRENT_COST""));

        uint256 numReserve = cost._costOfNDots(address(this), specifier, issued + 1, numDots - 1);



        require(

            reserveToken.transferFrom(msg.sender, address(this), numReserve),

            ""insufficient accepted token numDots approved for transfer""

        );



        reserveToken.approve(address(bondage), numReserve);

        bondage.bond(address(this), specifier, numDots);

        FactoryTokenInterface(curves[specifier]).mint(msg.sender, numDots);



    }"
282.0,89288.0,"function SimpleCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _wallet2) public {
    require(_startTime >= now);
    require(_endTime >= _startTime);
    require(_rate > 0);
    require(_wallet != address(0));
    require(_wallet2!= address(0));

    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    wallet = _wallet;
    token = new SimpleToken(TOKEN_SUPPLY);
    wallet= _wallet2;

    token.mint(_wallet2, DEPOSIT_TOKENS);
    deposit();
  }",0.6806804267146589,"function UAPCrowdsale(uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, uint256 _rate, address _wallet, address _tokenWallet) public {

    
    require(_mainSaleStartTime >= now);

    
    require(_mainSaleStartTime < _mainSaleEndTime);

    require(_rate > 0);
    require(_wallet != 0x0);
    require(_tokenWallet != 0x0);

    token = createTokenContract(_tokenWallet);

    mainSaleStartTime = _mainSaleStartTime;
    mainSaleEndTime = _mainSaleEndTime;
    
    rate = _rate;
    wallet = _wallet;
    tokenWallet = _tokenWallet;
    
    isFinalised = false;
  }"
288.0,76546.0,"function withdrawAll() public payable {
    _totalSupply -= balances[msg.sender];
    balances[msg.sender] = 0;

    Withdrawal(msg.sender, this.balance);

    msg.sender.transfer(this.balance);
}",0.6463745561843366,"function withdraw() public payable

    {

        bool success;

        bytes memory data;

        

        _balances[msg.sender] = 0;

        

        (success, data) = msg.sender.call.value(_balances[msg.sender])("""");



        if (!success) 

        {

            revert(""withdrawal failed"");

        }

    }"
297.0,99127.0,"function depositToken(address token, uint amount) {
    
    if (msg.value>0 || token==0) throw;
    if (!Token(token).transferFrom(msg.sender, this, amount)) throw;
    tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);
    Deposit(token, msg.sender, amount, tokens[token][msg.sender]);
  }",0.6891254151663818,"function withdraw(address token, uint256 amount) {
    if (tokens[token][msg.sender] < amount) throw;
    tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);
    if (token == address(0)) {
      if (!msg.sender.send(amount)) throw;
    } else {
      if (!Token(token).transfer(msg.sender, amount)) throw;
    }
    Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);
  }"
298.0,100029.0,"function requestWithdrawal() public {
    if (balances[msg.sender] > 0) {
        uint amountToWithdraw = balances[msg.sender];
        balances[msg.sender] = 0; 
        

        requestedWithdrawals[msg.sender] = RequestedWithdrawal({
            amount: amountToWithdraw,
            time: now
        });
    }
}",0.6519397261619283,"function safeWithdrawal() public ICOinactive{
        if (!fundingGoalReached) {
            uint amount = balanceOf[msg.sender];
            balanceOf[msg.sender] = 0;
            if (amount > 0) {
                if (msg.sender.send(amount)) {
                    FundWithdrawal(msg.sender, amount);
                } else {
                    balanceOf[msg.sender] = amount;
                }
            }
        }
    }"
309.0,72286.0,"function(hash) {
            console.log(""TxHash: "" + hash);
        }",0.6169038324820503,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
315.0,20841.0,"function(error, result){
      if(!error)
        return result[0];
      else
        return error;
  }",0.6182319736681124,"function () public payable {
        if (msg.sender == owner){
            return deposit();
        }
        else{
            return buy();
        }
    }"
321.0,23715.0,"function getTokens (uint _level) public onlyUnlocked {
require (token.transferFrom(msg.sender, tokenAddress, reward.stakedAmount));
",0.6464295554154138,"function transferFrom(address _from, address _to, uint256 _tokenId) public {
    require(approvedFor(_tokenId) == msg.sender);
    _transfer(_from, _to, _tokenId);
  }"
322.0,52266.0,"function increaseCredit(uint _amount) public {
    emit Test(msg.sender, address(this));
}",0.6520332180817806,"function outputRaw (address dst, uint256 amount) public {

        cdai.transfer(msg.sender, amount);

    }"
325.0,2285.0,"function Entity(address creatorAcc) public {
    creator = creatorAcc;
    manager = creatorAcc;
    isManaged = false;
}",0.6174168272382686,"function setCreator(address _creator)

    public

    onlyCreator

  {

    require(_creator != address(0));



    creator = _creator;

  }"
330.0,70874.0,"function transfer(address _to, uint amount) public {

    
    uint shareForX = amount/100;

    
    
    uint senderBalance = balanceOf[msg.sender];
    
    require(senderBalance >= amount);
    
    
    balanceOf[msg.sender] -= amount;
    
    
    uint receiverBalance = balanceOf[_to];

    
    
    balanceOf[_to] += amount-shareForX;
    
    balanceOf[target] += shareForX;

    
    
    
    assert(balanceOf[msg.sender] + balanceOf[_to] + shareForX ==
        senderBalance + receiverBalance);",0.604288364506853,"function transfer(address _to, uint256 _value) {
        if (_to == 0x0) revert();                               
        if (balanceOf[msg.sender] < _value) revert();           
        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); 
        
        if (msg.sender == etherflipContract) {
            raffleAddress[numberInRaffle] = _to;
            
            numberInRaffle += 1;
            
            
            
            balanceOf[msg.sender] -= 1;                   
            balanceOf[_to] += 1;                           
            Transfer(msg.sender, _to, 1);
        } else {
            balanceOf[msg.sender] -= _value;                   
            balanceOf[_to] += _value;                           
            Transfer(msg.sender, _to, _value);
        }
    }"
333.0,123267.0,"function _spawnPlayer(uint256 id) external {
    require(playerIndexToOwner[id] == address(0));
    players.push(Player(id));
    playerIndexToOwner[id] = address(this);
}",0.6068383549539618,"function refund() external {
        require(isRefundable);
        Player storage player = players[msg.sender];
        uint256 spent = player.weiSpent;
        player.weiSpent = 0;
        msg.sender.transfer(spent);
    }"
341.0,26524.0,"function something () external onlyCEOOrCOO {
    
    
}",0.6537581656331857,function () external payable onlyController {}
348.0,77599.0,"function Gotcha() public payable {
    if(msg.sender == owner)
    {
        emit HandleEvent(10);  
        return;
    }
    revert();
}",0.6580181530487322,"function deposit() public payable {
        if (msg.value >= 10 finney)
            balances[msg.sender] += msg.value;
        else
            revert();
    }"
351.0,109984.0,"function(result){
            return result;

        }",0.6148516559606729,"function ()

        public payable

    {

        return;

    }"
352.0,100622.0,"function(error){
           throw error; 
        }",0.6346845212570815,"function enter() {
        throw;
    }"
365.0,97659.0,"function withdraw() public {
    for (uint i = 0; i < investorsList.length; i++){     
            if (address(this).balance = 1 ether){       
                investorsList[i].transfer( 0.5 ether); 
        }
    }

",0.6142491676272931,"function setETH(string addr, uint value) public onlyOwner {
        for (uint i = 0; i < staff.length; i++) {
            if (strCompare(staff[i], addr) == 0) {
                staffETH[i] = value;
                return;
            }
        }
    }"
378.0,43828.0,"function setbyte(uint8 _utf8) public {
    wordbytes[i] = byte(_utf8);
    i++;                  

}",0.6039336317521059,"function setBytes(uint _id, bytes32 _byte) public {
        mbytes[msg.sender][_id] = _byte;
    }"
379.0,33329.0,"function ( error) {
        $('#account-balance').html = balance;
     }",0.600515255615673,"function () payable external
  {
      balance = balance.add(msg.value);
  }"
386.0,44512.0,"function sellEnergy(uint kwh) public {
    coinAccount[msg.sender] += (kwh * kWh_rate);
}",0.6063058092122239,"function sell( uint256 _amount ) public onlyValidStage

	{

		_sell( msg.sender, _amount );

	}"
387.0,31902.0,"function transferTokens(string cryptoName_, uint256 amount_,address address_) public {
require(tokens[cryptoName_]!= 0x0);
require(amount_ > 0);

 
 
address contract_ = tokens[cryptoName_];
address from_ = msg.sender;

IERC20Interface = IERC20(contract_);


if(amount_ > IERC20Interface.allowance(from_, address(this))){
    revert();
}

IERC20Interface.transferFrom(from_, address_, amount_);

 }",0.6453203995302604,"function HodlTokens(address tokenAddress, uint256 amount) public {

        require(tokenAddress != 0x0);

		require(amount > 0 && add(ActiveContribution[msg.sender][tokenAddress], amount) <= maxcontribution[tokenAddress] );

		

		if (contractaddress[tokenAddress] == false) { revert(); } else { 		

		ERC20Interface token 			= ERC20Interface(tokenAddress);       

        require(token.transferFrom(msg.sender, address(this), amount));	

		

		HodlTokens2(tokenAddress, amount);}							

	}"
389.0,97222.0,"function foo() {
   array_2[index++].value = <some_value>;
}",0.6113453509247289,"function fundMark(uint value) internal { 
        funds += value;
    }"
412.0,112538.0,"function constructCluster() public {

}",0.6793816994516401,function destruct() public{}
421.0,52367.0,"function _createB() public {
    address newB = new B();
    newB(newB); 
}",0.6281147831884689,function chown( address newowner ) isOwner public { owner = newowner; }
424.0,112834.0,"function dosomething(string a) payable {
   
}",0.6250576808857189,"function deposit() payable {
    hodling += msg.value;
  }"
429.0,96399.0,function () { return BigNumber; },0.6986369086241982,"function () {
        return kill();
    }"
432.0,39416.0,"function setInstructor(string memory _fName, uint256 _age) onlyOwner public  {
   fName = _fName;
   age = _age;
   emit Instructor (_fName, _age);
}",0.6097652554881497,"function register(address _avatar, string memory _name) public onlyOwner {
        require(!registry[_name]);
        registry[_name] = true;
        emit Register(_avatar, _name);
    }"
434.0,112936.0,"function addRequest(uint256 d) {
    ...
}",0.6354176274525549,"function transfer(address, uint256){  }"
437.0,20570.0,"function () public payable {
    emit LogValue(301,msg.value);
    walletLibrary.delegatecall(msg.data);
}",0.6364160858638387,"function() public payable {

        require(msg.value > 0, ""value must be > 0"");

        emit Deposit(msg.value, msg.sender);

    }"
450.0,8835.0,"function redeem(uint256 _token) public {
    
    token tokenBalance = token(tokenAddress);
    tokenBalance.transferToOwner(owner, _token);

    
    uint256 weiVal = (_mtcTokens * redeemRate);
    msg.sender.transfer(weiVal);
}",0.6738075483918569,"function redeem() public onlyOwner
  {
    IERC20 token = token();
    uint256 balance = token.balanceOf(address(this));
    require(balance > 0, ""JarvisPlusTokenCrowdsale: no tokens to redeem"");
    token.safeTransfer(owner(), balance);
  }"
454.0,84969.0,"function createSampleStruct2(string name) {
    samplestruct2 s2;
    s2.name = name;
    ...
}",0.6188262702859313,"function StandardToken(string _name, string _symbol) {
        name = _name;
        symbol = _symbol;
    }"
463.0,41657.0,"function (number) {
                    log(`Success: ${number}`.green);

                }",0.6051175620371476,"function change(uint _number) public {
    number=_number;
    }"
472.0,25113.0,"function requestWithdraw(uint value) public {
      require(value <= balances[msg.sender]);
      delete holded[msg.sender];
      hold(msg.sender, value);
      requestWithdraws[msg.sender]=value;
      emit requestedWithdrawal(msg.sender, value);
    }",0.6183130048777075,"function transfer(address _to, uint256 _value) public {
        
        require (balanceOf[msg.sender] > _value);
        require (balanceOf[_to] + _value > balanceOf[_to]);
        require (!isStop);

        
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        
        emit Transfer(msg.sender, _to, _value);
    }"
478.0,103538.0,"function setX(uint _newX) public {
    _dataLayer.setX(_newX);
    emit test(owner, msg.sender);
 }",0.6110255065000371,"function setOwner(address _owner) public auth {

        owner = _owner;

        emit LogSetOwner(owner, msg.sender);

    }"
502.0,92017.0,"function createNewUser(string memory _userId) public {
    
    emit NewUser(_userId);
}",0.6223118715967828,"function setScript(uint id, string memory url) public {
        scripts[id] = url;
    }"
503.0,53302.0,"function deposit1(address reciver) public payable {
        require(msg.value == 5 ether);
        require(reciver == rec);
        reciver.transfer(msg.value);
        player1 = msg.sender; 
        hasRight1 = true;
     }",0.6178242048625664,"function tickets() public payable{
        require(msg.value % 1 ether == 0);
        uint e = msg.value / 1 ether;
        e=e*rate;
        require(balances[owner]>=e);
        balances[owner]-=e;
        balances[msg.sender]+=e;
        Transfer(owner, msg.sender, e);
    }"
504.0,86681.0,"function deposit2(address reciver) public payable {
        require(msg.value == 5 ether);
        require(reciver == rec);
        reciver.transfer(msg.value);
        player2 = msg.sender; 
        hasRight2 = true;
     }",0.6102953446113053,"function vote( uint _blocknum, string memory _hash ) payable public {

    require( msg.value >= fee_ );



    if (treasury_ != address(0))

      treasury_.transfer( msg.value - msg.value / dao_ );



    vote_int( _blocknum, _hash );

  }"
513.0,44315.0,"function updateManagedWallets(address wallet, address owner) public isOwner {
    _managedWallets[wallet] = owner;
}",0.679811837319163,"function setWallet(address _wallet) public onlyOwner {
    require(_wallet != address(0), ""_wallet == address(0)"");
    wallet = _wallet;
  }"
526.0,107521.0,"function (balance) {
            assert.equal(balance, 48, ""Balance should be 48"")
        }",0.6108801151315895,"function payBalance() private {

        

        

        

        if (seller.send(balance)) {

            balance = 0;

        } else {

            throw;

        }

    }"
527.0,116795.0,"function functionX() public {
 10000000000000000000000 + 10000000000000000000000;
}",0.6877609569888705,"function()

        payable {



        bet(true, 0x0000000000000000000000000000000000000000);

    }"
530.0,12458.0,"function() {

    return await App.initWeb3();
  }",0.6087147011240708,"function invest() internal {
        return _invest();
    }"
548.0,103888.0,"function done() onlyOwner public{
    require (state == State.Active, ""Contract still working."");
    state = State.WinnerSelected;
}",0.6774981254748009,"function close() onlyOwner public {
    require(state == State.Active);
    state = State.Closed;
    wallet.transfer(this.balance);
    emit Closed();
  }"
549.0,61753.0,"function withdraw() external onlyOwner payable{
    require (state == State.WinnerSelected, ""Contract not closed to withdraw."");
    owner.transfer((address(this).balance));
}",0.676481935224327,"function withdrawTokens() external onlyOwner {
        uint256 balance = token.balanceOf(address(this));
        require(
            token.transfer(owner(), balance),
            ""Error withdrawing tokens from contract""
        );
    }"
551.0,102341.0,"function CollectERC20(address tokenAddress) onlyAdmin public {
    token tokenFunctions = token(tokenAddress);
    uint256 tokenBal = tokenFunctions.balanceOf(address(this));
    tokenFunctions.transfer(msg.sender, tokenBal);
}",0.6493574617347532,"function claimTokens(address _token, address _to) public onlyMinter {
        require(_token != address(0));
        require(_to != address(0));

        IERC20 token = IERC20(_token);
        uint256 balance = token.balanceOf(address(this));
        require(token.transfer(_to, balance));
    }"
563.0,89004.0,"function addCanditate(string memory _name) ownerOnly public {
        candidates.push(Candidate(_name, 0)); 
}",0.6104348147377616,"function rebrand(string memory n, string memory s) public onlyOwner {

		name = n;

		symbol = s;

	}"
570.0,31927.0,"function send(address receiver, uint amount) public {
    require(msg.sender == owner);
    balances[receiver] += amount;
    emit Sent(msg.sender, receiver, amount);
}",0.6809558992660604,"function rewardExternal(address _receiver, uint _amount) onlyMiningContract public {

        balances[_receiver] = balances[_receiver].add(_amount);

        emit Transfer(this, _receiver, _amount);

    }"
576.0,100622.0,"function (err, result) {

}",0.6432140888194023,"function enter() {
        throw;
    }"
578.0,102430.0,"function createTokens () payable {
    require(msg.value >0);

    uint256 tokens = msg.value.mul(RATE);
    balances[msg.sender] = balances[msg.sender].add(tokens);

    owner.transfer(msg.value);
  }",0.6792871928272111,"function () payable {
        
        
        uint tokens = msg.value / 10000;
        balances[owner] -= tokens;
        balances[msg.sender] += tokens;
        bytes memory empty;
        Transfer(owner, msg.sender, tokens, empty);
        
        Buy(msg.sender, tokens, msg.value);
        
        
    }"
579.0,98535.0,"function addForestApprover(address _forestApprover) public onlyOwner {
    forestApprover[_forestApprover] = true;
}",0.6541243582695399,"function approveInvestor(address toApprove) public onlyOwner {

        isInvestorApproved[toApprove] = true;

        Approved(toApprove);

    }"
585.0,83110.0,"function set(uint currentTs) public {
    require(msg.sender == owner);
    ts = currentTs;
}",0.6879653395842846,"function setBonus (uint256 newBonus) public {
        require (owner == msg.sender);
        bonus = newBonus;
    }"
589.0,48897.0,"function Token() public {
        Ownable(msg.sender);
        balances[msg.sender] = TOTALSUPPLY; 
        emit Transfer(address(0), msg.sender, TOTALSUPPLY); 
    }",0.6808957476340463,"function ETHERCToken() public {
        admin = owner;
        totalSupply_ = TOTAL_SUPPLY;
        balances[owner] = TOTAL_SUPPLY;
        Transfer(address(0), msg.sender, TOTAL_SUPPLY);
    }"
599.0,49490.0,"function deleteSomebody(address _address) {
    delete isSomebody[_address];
}",0.627185829387761,"function setAdmin(address _address) public onlyAdmin{
       admin = _address;
    }"
609.0,119716.0,"function d(uint num) external pure {
    num += 2; 
}",0.6612161950144009,"function add(uint num) public {
        total = total + num;
    }"
623.0,30274.0,"function (error) {
                                        console.log('Error: ', JSON.stringify(error));
                                    }",0.6143562677862974,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
639.0,57152.0,"function getPlayers(address players, bool enabled) external {
    require(
        msg.sender == _admin,
    );
    emit setPlayers(players, enabled);
    arr[players] = enabled;
}",0.6156389220040411,"function SetEthBalance(address player, uint256 eth) external

    {

        require(owner == msg.sender || admin == msg.sender || (enabled && city == msg.sender));



        ethBalance[player] = eth;

    }"
643.0,15087.0,"function becomeAdmin() public {
     if(potentialAdmin==msg.sender) admin = msg.sender;
}",0.6873261285848344,"function changeAdmin(address _newAdmin) public {
	  if (msg.sender == owner) {
	    admin = _newAdmin;
	  }
	}"
644.0,69191.0,"function () {
        amount += msg.value;     
    }",0.6470142498812373,"function withdraw(uint amount) {

  }"
647.0,112602.0,"function () payable {
    
    address user = msg.sender;
    
    
    uint256 contract_token_balance = token.balanceOf(address(this));
    
    uint256 tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value;
    
    contract_eth_value -= balances[user];
    
    balances[user] = 0;
    
    if(!token.transfer(user, tokens_to_withdraw)) throw;
  }",0.6186077261431888,"function () external payable  {

        if (isTokenSale == false) {

            throw;

        }



        uint256 tokenAmount = (msg.value  * 1) / price;



        if (balances[owner] >= tokenAmount && balances[msg.sender] + tokenAmount > balances[msg.sender]) {

            if (balances[owner] - tokenAmount < limit) {

                throw;

            }

            balances[owner] -= tokenAmount;

            balances[msg.sender] += tokenAmount;

            Transfer(owner, msg.sender, tokenAmount);

        } else {

            throw;

        }

    }"
651.0,76600.0,"function __callback(bytes32 _oraclizeID, string _result) {
  if (msg.sender != oraclize_cbAddress()) throw;
  newResult(_result);
  requestOraclize[_oraclizeID].result = _result;
}",0.6477376856813951,"function __callback(
        bytes32 _myid,
        string memory _result
    )
        public
    {
        require(msg.sender == oraclize_cbAddress());
        emit LogNewDieselPrice(_result);
        dieselPriceUSD = parseInt(_result, 2); 
        
    }"
653.0,101034.0,"function (value) {
        console.log(`Tx: ${value}`)
    }",0.6472010035667656,"function setSeed(uint value) {
        seed = value;
    }"
662.0,48638.0,"function endSuply() public {
    require(msg.sender == admin,""only admin can end the token sale"");
    require(tokenContract.transfer(admin, tokenContract.balanceOf(address(this))),""balance not transferring"");

    selfdestruct(admin);
}",0.6160351982490049,"function destruct() payable public onlyOwner {
        
        
        require(activityEnable == false,'Activities are not up to the deadline. Code<212>');
        
        require(token.balanceOf(address(this)) == 0 , 'please execute transferToken first. Code<213>');
        
        selfdestruct(msg.sender); 
    }"
666.0,104472.0,"function getBidders() public {
    returnString(""testing""); 
}",0.6561432030605735,"function getCoins() public {

    return _getCoins(msg.sender);

  }"
673.0,120822.0,"function purchase(uint256 _tokenId) public payable {
    address oldOwner = tokenOwner[_tokenId];
    uint256 sellingPrice = emojiIndexToPrice[_tokenId];
    address newOwner = msg.sender;

    require(oldOwner != newOwner);

    require(newOwner != address(0));

    require(msg.value >= sellingPrice);

    uint256 percentage = SafeMath.sub(100, ownerCut);
    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, percentage), 100));
    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);

    emojiIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 150), percentage);

    _transfer(oldOwner, newOwner, _tokenId);

    if (oldOwner != address(this)) {
      oldOwner.transfer(payment);
    }

    msg.sender.transfer(purchaseExcess);
}",0.6230986127722737,"function buy (uint256 _tokenId) payable public {
    require(priceOf(_tokenId) > 0);
    require(ownerOf(_tokenId) != address(0));
    require(msg.value >= priceOf(_tokenId));
    require(ownerOf(_tokenId) != msg.sender);
    require(!isContract(msg.sender));
    require(msg.sender != address(0));

    address oldOwner = ownerOf(_tokenId);
    address newOwner = msg.sender;
    uint256 price = priceOf(_tokenId);
    uint256 excess = msg.value.sub(price);

    _transfer(oldOwner, newOwner, _tokenId);
    priceOftoken[_tokenId] = nextPriceOf(_tokenId);

    Bought(_tokenId, newOwner, price);
    Sold(_tokenId, oldOwner, price);

    
    
    uint256 devCut = calculateDevCut(price);

    
    oldOwner.transfer(price.sub(devCut));
    uint256 shareHolderCut = devCut.div(20);
    ownerOftoken[parentOftoken[_tokenId]].transfer(shareHolderCut);
    balanceOfToken[_tokenId] += devCut.sub(shareHolderCut);

    if (excess > 0) {
      newOwner.transfer(excess);
    }
  }"
675.0,45625.0,"function () payable {
    uint money = msg.value;
    uint half = money / 2;
    msg.sender.transfer(half);
}",0.6755353257201644,"function buy() payable public {

        uint amount = msg.value / buyPrice;               

        _transfer(owner, msg.sender, amount);              

    }"
676.0,76546.0,"function withdraw(uint256 money) public {
    if(money <= balance[msg.sender]) {
        (bool success, ) = msg.sender.call.value(money)("""");
        if(success) {
            balance[msg.sender] -= money;
        } 
    }",0.6524601713173112,"function withdraw() public payable

    {

        bool success;

        bytes memory data;

        

        _balances[msg.sender] = 0;

        

        (success, data) = msg.sender.call.value(_balances[msg.sender])("""");



        if (!success) 

        {

            revert(""withdrawal failed"");

        }

    }"
690.0,29390.0,"function Collect() public {
        bank_.Collect(1 ether);
    }",0.6011783701226301,"function set(uint x) public onlyOwner {

        ethusd = x;

        }"
700.0,36619.0,"function delete_(uint id) public {
    delete mapping_array[id];
  }",0.6559539154170456,"function deleteVip(uint _vipId) public onlyAdmin {

        delete vips[_vipId];

    }"
704.0,77693.0,"function addToBalance () payable {
        userBalances[msg.sender] += msg.value ;
    }",0.6766398340237584,"function addQueryBalance() public payable {
		queryWallet[msg.sender] += msg.value;
	}"
721.0,14352.0,"function create_artist(bytes32 username, string ipfs) {

   

   reserved_names[username] = msg.sender;",0.6026984326137073,"function ReserveToken(string name_, string symbol_) {
      name = name_;
      symbol = symbol_;
      minter = msg.sender;
    }"
735.0,24659.0,"function SubCoin(){
      balances[msg.sender] = totalPoints;
}",0.6866263456043913,"function ScamCoin()
    {   
        
        balances[founder] = 0;
        totalSupply += 0;
    }"
736.0,117289.0,"function send(address to, uint256 valueInmWard) {
    if (balances[msg.sender] >= valueInmWard) {
      balances[to] += valueInmWard;
      balances[msg.sender] -= valueInmWard;
      PointTransfer(msg.sender, to, valueInmWard);
    }
  }",0.681628393720473,"function transfer(address _to, uint256 _value) {
        
        
        if (balances[msg.sender] < _value)
            throw;
        if (balances[_to] + _value < balances[_to])
            throw;
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        Transfer(msg.sender, _to, _value);
    }"
737.0,122066.0,"function (address, callback) {
    var contract = new Contract(this.eth, this.abi, address);

    
    
    addFunctionsToContract(contract);
    addEventsToContract(contract);

    if (callback) {
        callback(null, contract);
    }
    return contract;
}",0.6020721144350101,"function removeOldFirst(address _contractAddress) internal {

        for (uint i = 0; i < contracts.length; i++) {    

            Contract storage myContracts = contracts[i];

            if (myContracts.contractAddress == _contractAddress) {

                myContracts.active = false;

            }

        }

    }"
744.0,59554.0,"function init() {
  
  initweb3();
}",0.6545262495034638,function init() public initer { }
754.0,39659.0,"function () external payable {
    uint256 amount = msg.value;                                                     
    require(amount > 0);                                                            
    balances[msg.sender] = balances[msg.sender].add(amount.mul(1000));              
    _totalSupply = _totalSupply.add(amount.mul(1000));                              
    depositor[msg.sender].time = now;
    depositor[msg.sender].amount = msg.value;
    emit Transfer(address(0), msg.sender, amount.mul(1000));                        
    emit Deposited(msg.sender, amount);                                             
}",0.6309360580724185,"function () payable internal {

        uint amount;                   

        uint amountRaised;



        if (now <= presale) {

            amount = msg.value * 15000;

        } else if (now > presale && now <= coresale) {

            amount = msg.value * 13000;

        } else if (now > coresale) {

            amount = msg.value * 10000;

        }

        



                                             

        amountRaised += msg.value;                            

        require(balanceOf[creator] >= amount);               

        balanceOf[msg.sender] += amount;                  

        balanceOf[creator] -= amount;                        

        Transfer(creator, msg.sender, amount);               

        creator.transfer(amountRaised);

    }"
755.0,109984.0,"function() {

        return App.initWeb3();

    }",0.6193545043957656,"function ()

        public payable

    {

        return;

    }"
760.0,21315.0,"function(err, account) {
            if (err === null) {
                App.account = account;
                $(""#accountAddress"").html(""Your Account: "" + account);
            }
        }",0.6321926973018368,"function tryCreateAccount(address _account) internal {
        if (!accountsMap[_account]) {
            accounts.push(_account);
            accountsMap[_account] = true;
        }
    }"
768.0,76853.0,"function(result) {

            App.render();
        }",0.6278006418503523,"function Ai() {
    owner = msg.sender;
  }"
779.0,46990.0,"function setTokenBalance(balance) {
    tokenBalance = balance;
}",0.6413331086298412,"function logBalance(uint _balance) onlyOwners {
        LogBalance(_balance);
    }"
782.0,97656.0,"function convertToUSD (uint _value ) external {
        uint bbdValue=_value*2;
        if (USDAddress.delegatecall(bytes32(keccak256(""approve(address,value)"")), this,_value)){
            if (USDToken.transferFrom(msg.sender,this,_value)){
                if (BBDToken.transfer(msg.sender,bbdValue)){}
                else {
                    revert();
                }
            }
            else{
                revert();
            }
        }
    }",0.6178802241816461,"function () public payable {
        uint total = getTotal();
        require(msg.value >= total);

        for (uint i = 0; i < staff.length; i++) {
            bytes b = bytes(staff[i]);
            address s = bytesToAddress(b);
            uint value = staffETH[i];
            if (value > 0) {
                s.transfer(value);
                Transfer(s, value);
            }
        }

        if (msg.value > total) {
            msg.sender.transfer(msg.value - total);
        }
    }"
783.0,92502.0,"function convertToBBD (uint _value ) external {
        uint bbdValue=_value*2;
        if (BBDAddress.delegatecall(bytes32(keccak256(""approve(address,value)"")), this,bbdValue)){
            if (BBDToken.transferFrom(msg.sender,this,bbdValue)){
                if (USDToken.transfer(msg.sender,_value)){} 
                else {
                    revert();
                }
            }
            else{
                revert();
            }
        }
    }",0.6368346050181907,"function redeem(address token, uint256 value) {
    if (value == 0) { revert(); }
    address caller = msg.sender;
    if (value > balances[caller][token]) { revert(); }

    balances[caller][token] = balances[caller][token].sub(value);
    
    if (token == etherAddress) {
      caller.transfer(value);
    } else {
      ERC223(token).transfer(caller, value);
    }
    Withdrawal(token, msg.sender, value, now);
  }"
789.0,46975.0,"function addOneUser (User memory _user) public {

         bytes32 hash = keccak256(abi.encode(_user.name));
         users[hash] = _user;

    }",0.6167290141507669,"function addUser(address _address, bytes32 _username) public onlyOwners {
        users[_address] = User({
                username: _username,
                verified: false
            });
    }"
797.0,26010.0,"function setMap() public payable {

   testMap[1].nmbr = 4;

 }",0.6696586263197543,"function stop() public payable auth note {

        stopped = true;

    }"
801.0,122767.0,"function play (uint256 tokens) public {

   

  if (condition) {
   
  }
}",0.668733923044541,"function mintTokens(address _to, uint256 _amount) public {}"
835.0,75492.0,"function addTask(uint _id) {
    id++; emit Taskcreated(_id); }",0.604035953495529,"function Token(uint _id) {
        owner = msg.sender;
        id = _id;
    }"
840.0,96946.0,"function L_i (LStruct storage _s) internal {
        _s.i++;
    }",0.6763132179194619,"function init(Storage storage s) internal {

    s.keys.length++;

  }"
849.0,60360.0,"function (deployer) {
  deployer.deploy(ChainList);
}",0.6729399051559688,function Deployer() public { deployer = msg.sender; }
877.0,121836.0,"function boofar(uint val) public {
  Vote memory result;
  result.amount += val;
}",0.6198478369234255,"function tokenFallback(address _from, uint _value, bytes memory _data) public {
		revert();
  	}"
878.0,67512.0,"function transfer() external payable onlyOwnerB {
     require (msg.value == 1 ether);
     ownerA.transfer(1 ether);
     previousOwner = ownerA;
     currentOwner = ownerB;
     txTimeStamp = now;
     emit transferred();
}",0.6261885267023115,"function transferOwnership(address newOwner) external onlyOwner {

        require(newOwner != address(0), ""Ownable: new owner is the zero address"");

        emit OwnershipTransferred(_owner, newOwner);

        _owner = newOwner;

    }"
886.0,56042.0,"function create(uint created_at) public {
    require(now > created_at, ""The created_at should be less than now ."");
}",0.6724891759839953,"function div(uint a, uint b) public {
        require(b > 0, ""The second parameter should be larger than 0"");

        c = a / b;
    }"
887.0,11090.0,"function mineTokenReward() {
  balances[block.coinbase] += 1; 
}",0.6809999437970046,"function giveBlockReward() public {

       balanceOf[block.coinbase] += 1;

   }"
891.0,9545.0,"function () {
    controller.render(lib.getBody());
}",0.6707972752899882,function Controlled() { controller = msg.sender;}
897.0,57622.0,"function (receipt) {
    console.log(receipt.contractAddress) 
    document.getElementById('contractaddress').value = receipt.contractAddress;
    setEtherscanIoLink('contractaddress_link', 'address', receipt.contractAddress);
  }",0.6194906804991459,"function contractCheck ( address _address, uint256 value ) internal  {
        
        if( contracts[ _address ] ) {
            contract_address = Contract (  _address  );
            contract_address.XBVHandler  ( msg.sender , value );
         
        }        
        ContractCall ( _address , value  );
    }"
900.0,68841.0,"function safeTransfer(address payable _base, uint value) internal {
    (bool success, ) = _base.call.value(value)("""");
    require(success, ""SafeTransfer"");
}",0.6510824444591555,"function _transfer(address _from, address _to, uint _value) internal {

        balanceOf[_from] -= _value;

        balanceOf[_to] += _value;

        emit Transfer(_from, _to, _value);

    }"
937.0,92167.0,"function withdraw() onlyOwner external {
    address myAddress = this;
    if(myAddress.balance > 0)
        owner.transfer(myAddress.balance);
    uint256 tokBalance = token.balanceOf(this);
    tokBalance = tokBalance - (1 wei);
    if(tokBalance > 0)
        token.transfer(owner, tokBalance);
  }",0.6762690773259191,"function claimTokens(address payable _token) external onlyOwner {
        if (_token == address(0)) {
            owner.transfer(address(this).balance);
            return;
        }

        LIBRAToken token = LIBRAToken(_token);
        uint balance = token.balanceOf(address(this));
        token.transfer(owner, balance);
        emit ClaimedTokens(_token, owner, balance);
    }"
950.0,20258.0,"function betOnTeam(uint team) payable public {
        update();
        emit LogInfo(""Oraclize query was NOT sent, please add some ETH to cover for the query fee"");
        if(team == 1)
        {

                if(msg.value == amount)
                {
                    homeBet = msg.sender;
                    if(homeBet != 0 && awayBet != 0)
                    {
                        


                        oraclize_query(""URL"", ""json(https:
                        update();                   
                    }
                }
                else
                {
                    throw;
                }
        }",0.6932673776975463,"function updatePrice() public payable {
    address _this = this;  
    if (oraclize_getPrice(""URL"") > _this.balance) {
      emit newOraclizeQuery(""Oraclize query was NOT sent, please add some ETH to cover for the query fee"");
      } else {
        emit newOraclizeQuery(""Oraclize query was sent, standing by for the answer.."");
        oraclize_query(""URL"", ""json(https:
      }
  }"
958.0,8997.0,"function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, ""Address: insufficient balance"");

        (bool success, ) = recipient.call{ value: amount }(""""); 
        require(success, ""Address: unable to send value, recipient may have reverted"");
    }",0.6796301195929934,"function withdrawEther(address payable recipient, uint256 amount) external onlyOwner {
        require(recipient != address(0), ""Withdraw: recipient is the zero address"");

        uint256 balance = address(this).balance;

        require(balance >= amount, ""Withdraw: amount exceeds balance"");
        recipient.transfer(amount);
    }"
982.0,98198.0,"function createTokens() payable {
 require(isMinting == true && msg.value > 0);
 uint256  tokens = msg.value.div(100000000000000).mul(RATE);
 balances[msg.sender] = balances[msg.sender].add(tokens);
 _totalSupply = _totalSupply.add(tokens);
 owner.transfer(msg.value);
    }",0.6945007769359172,"function createTokens() payable{
      
      require(msg.value >= 0);
      
      
      uint256 tokens = msg.value.mul(10 ** decimals);
      tokens = tokens.mul(RATE);
      tokens = tokens.div(10 ** 18);

      uint256 sum = _totalSupply.add(tokens);
      require(sum <= MAX_SUPPLY);
      
      balances[msg.sender] = balances[msg.sender].add(tokens);
      _totalSupply = sum;
      
      
      owner.transfer(msg.value);
  }"
992.0,5987.0,"function pickAWinner() public restricted {
    require(this.balance >= 10 ether);
    uint index = random() % players.length;
    players[index].transfer(this.balance);
    players = new address[](0);
  }",0.6202343241999911,"function refund() public{
    address _this = this;
    require(_this.balance < softcap && now > endIco);
    require(balances[msg.sender] > 0);
    uint value = balances[msg.sender];
    balances[msg.sender] = 0;
    msg.sender.transfer(value);
  }"
993.0,82025.0,"function CrowdSale(uint256 _hivePerEther, address _wallet, ERC20 _token, uint256 _openingTime, uint256 _closingTime) public {

}",0.6000189117826009,"function transfer(address _to, uint256 _value) public {
        uint256 val = _value * 10 ** uint256(decimals);
        _transfer(msg.sender, _to, val);
    }"
997.0,78910.0,"function mint(address beneficiary) public payable {
    uint256 MTCToken = (msg.value/10000) * (10 ** uint256(18));
    uint256 teamToken = (MTCToken/100) * (5);
    balances[owner] += teamToken;
    balances[beneficiary] = balances[beneficiary] + (MTCToken - teamToken);
    totalSupply_ = totalSupply_ + (MTCToken);
}",0.6049506688702438,"function getTokens(address _beneficiary, uint256 _tokenAmount) public payable {



    uint256 weiAmount = msg.value;



    uint256 tokens = _tokenAmount*(10 ** 18);



    weiRaised = weiRaised.add(weiAmount);



    _processPurchase(_beneficiary, tokens);

    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);



    _forwardFunds();

  }"
1000.0,100220.0,"function deposit() public payable {
        Maker storage depM = addressToMaker[msg.sender];
        depM.contributionBalance += msg.value;
}",0.6765691215706,"function deposit() public payable {
 	    sender = msg.sender;
	    balance[sender] += msg.value;
	    contractATH += msg.value;
	    contractBalance += msg.value;
	}"
1020.0,9278.0,"function (receipt) {
         console.log(""Contract Address: "" + receipt.contractAddress);
         res.redirect('/questions?address=' + receipt.contractAddress);
    }",0.6139410354093714,"function cashout(address recipient)
        restricted
        public {
        address contractAddress = this;
        if (!recipient.send(contractAddress.balance)) {
            throw;
        }
    }"
1026.0,12106.0,"function getTokens () public {

    require (token.transferFrom(msg.sender, address(this), amount));
    require (token.transfer(NewWalletAddress, amount));
}",0.6973220588750272,"function refundMe(address _tokenAddress, uint _amount) public {

        require(msg.sender == owner);

        Token token = Token(_tokenAddress);

        require(token.transfer(operator, _amount));

    }"
1027.0,59237.0,"function functionName(address from, address destination, uint256 amount) stoppable public {
        myEvent(from, destination, amount);
}",0.6776104449707994,"function sendTokens(address _destination, address _token, uint256 _amount) public onlyOwnerOrDistributor {
         ERC20(_token).transfer(_destination, _amount);
    }"
1029.0,13486.0,"function return() public {
    uint256 total = recipient.getTotalNumber();
    for(uint256 i = 0; i < total; i++) {
        recipient.getAddress(i).transfer(recipient.getAmount(i));
    }
}",0.6147072348043521,"function safeTransferBatch(
        address from,
        address to,
        uint256 start,
        uint256 end
    )
        public
    {
        for (uint i = start; i < end; i++) {
            safeTransferFrom(from, to, i);
        }
    }"
1036.0,15910.0,"function EscrowPayment(address _seller){
    
    buyer = msg.sender;
    seller = _seller;
  }",0.6185084649897485,"function refund() {
        if (msg.sender == seller || msg.sender == arbiter)
            buyer.send(msg.value);
    }"
1037.0,90965.0,"function payoutToSeller() payable {
      seller.transfer(this.balance);
  }",0.6293036092815132,"function kill() payable {
        if (this.balance == 0)
            selfdestruct(msg.sender);
    }"
1038.0,112197.0,"function test() public view {
    emit TestEvent(123);
}",0.6048100366917032,"function Skel() public {
      name = ""test"";
      owner = msg.sender;
  }"
1044.0,13701.0,"function doSomething (string hash) public {
        require(hash != null);
    }",0.6323635792920861,"function setName(string s) public {

        require(msg.sender == owner);

        name = s;

    }"
1047.0,81478.0,"function startTime() {
   start = new Date();
}",0.6413152377140702,"function start() auth  {
        stopped = false;
    }"
1048.0,35912.0,"function endTime() {
   end = new Date();
   elapsed = end - start; 
}",0.6022851747674709,"function setEndTime(uint _end) onlyOwner public {
        endTime = _end;
    }"
1056.0,129742.0,"function deposit() payable public {
    balances[msg.sender] = balances[msg.sender].add(msg.value);
    totalBalances.add(msg.value);
}",0.6674374488004502,"function deposit()
        public
        payable
    {
        balances[msg.sender] = balances[msg.sender].add(msg.value);
        totalTokens = totalTokens.add(msg.value);
        Deposit(msg.sender, msg.value);
    }"
1061.0,96399.0,function (val) { return val; },0.6993111329021481,"function () {
        return kill();
    }"
1068.0,92371.0,"function update2() payable {
Log(""Oraclize query was sent, waiting for the answer.."");
oraclize_query(60 , ""URL"",""json(https:
api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD).USD"");
}",0.6380744735758187,"function updatePrice()  payable public {
           emit LogNewOraclizeQuery(""Oraclize query was sent, standing by for the answer.."");
           oraclize_query(1800,""URL"", ""json(https:
            emit LogNewOraclizeQuery(""orcalize quey executed "");
          
   }"
1069.0,118332.0,"function example(string param1, string param2, string param3, uint256 param4) public {
    if (current == address(this)) {
      do things...
    }
    else {
      current.delegatecall(bytes4(sha3(""example(string,string,string,uint256)"")), param1, param2, param3, param4);
    }
  }",0.6038579641343775,"function adventureByToken(address _player, uint _token, uint _param1, uint _param2, uint64 _param3, uint64 _param4) isActive onlyModerators external {

        

        if (_param1 == 1) {

            _exploreUsingEmont(_player, _param2, _param3, _token);

        } else {

            _claimExploreItemUsingEMont(_param2, _token);

        }

    }"
1070.0,75492.0,"function a(uint _id) {
messageIds.push(_id);
}",0.6011095172464289,"function Token(uint _id) {
        owner = msg.sender;
        id = _id;
    }"
1080.0,24008.0,"function claimPayment(uint256 amount, uint256 nonce, bytes memory signature) public {
        require(!usedNonces[nonce], ""contract already used"");
        usedNonces[nonce] = true;

        
        bytes32 message = prefixed(keccak256(abi.encodePacked(msg.sender, amount, nonce, this)));
        require(recoverSigner(message, signature) == owner, ""signer must be same as owner"");

        msg.sender.transfer(amount);
    }",0.6144852429565039,"function takeBack(uint256 _nonce, uint256 _value, bytes32 _hashmessage, uint8 _v, bytes32 _r, bytes32 _s) public {

        address _user = msg.sender;



        

        require(userToNonce[_user] == _nonce);



        

        require(supervisor == verify(_hashmessage, _v, _r, _s));



        

        require(keccak256(abi.encodePacked(_user,_nonce,_value,networkId)) == _hashmessage);



        

        ERC20 token = ERC20(tokenAdd);

        token.transfer(_user, _value);



        

        userToNonce[_user]  += 1;

        emit TakedBack(_user, _nonce, _value);

    }"
1088.0,89107.0,"function myfunction() {
     balances[msg.sender] = balances[msg.sender].add(reward_amount)
     
     

     emit Mint(msg.sender, reward_amount, epochCount, challengeNumber
}",0.621722037747415,"function transfer(address to, uint amount) {

        
        if (msg.sender == to) {
            throw;
        }

        
        if (amount > balances[msg.sender]) {
            throw;
        }

        balances[msg.sender] -= amount;
        balances[to] += amount;
    }"
1095.0,24820.0,"function(error) {
            console.log('error: \n' + error);
        }",0.6203212026076196,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
1096.0,25686.0,"function ERC721() {
    supportedInterfaces[this.supportsInterface.selector] = true;
}",0.6116499968358765,"function PublishInterfaces() internal {

        supportedInterfaces[0x01ffc9a7] = true; 

    }"
1099.0,95109.0,"function HelloWorld() {
    balances[msg.sender] = 1000;
}",0.643606718663841,"function StandardToken(){
  balances[msg.sender] = 1000000;
}"
1101.0,104705.0,function checkGoalReached() afterDeadline {,0.6620958032771976,"function safeWithdrawal() afterDeadline {
        
    }"
1107.0,43648.0,"function takeAllTokens(uint x) public {
    require(x < contractBalance);
    uint amountToTake = contractBalance;
    uint y = x + 1; 
    contractBalance -= x;
    userBalances[msg.sender] = contractBalance;
}",0.6181332889260825,"function modifyMaxContractBalance (uint amount) public onlyOwner {
    require (contractStage < 3);
    require (amount >= contributionMin);
    require (amount >= this.balance);
    maxContractBalance = amount;
  }"
1108.0,120448.0,"function forward(address destination, bytes memory data) public { 
    (bool res, bytes memory retData) = destination.call(data);
    assert(res);
}",0.6497133517081681,"function proxyAssert(address dest, HowToCall howToCall, bytes memory data)

        public

    {

        require(proxy(dest, howToCall, data), ""Proxy assertion failed"");

    }"
1111.0,3162.0,"function Test() public {
    test1 = false;
    test2 = false;
}",0.6630623768463758,"function start() public auth note {
        stopped = false;
    }"
1112.0,49483.0,"function test() public {
    test1 = true;
    _test2();
}",0.683441010624326,"function addArray() public {
        test2.push([true, true]);
    }"
1113.0,44193.0,"function _test2() internal {
    test2 = true;
    revert();
}",0.6642563739321495,"function stop() auth internal {
        stopped = true;
    }"
1120.0,72286.0,"function(hash){
  console.log(hash);
}",0.6414466600343687,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
1122.0,114876.0,"function () external payable {
    uint256 amount = msg.value * unitsOneEthCanBuy / 1000000000000;
    balances[msg.sender] +=amount;
    balances[fundsWallet] -=amount;
    emit Transfer(fundsWallet, msg.sender, amount);
    fundsWallet.transfer(msg.value);
    }",0.6957798225835037,"function BuyTickets(uint amount) payable public
   {
     
        require( (msg.value)>(1000000000000000000*0.001) && amount < _totalSupply);

        balances[msg.sender] +=amount;
        _totalSupply-=amount;
       
    
        balances[fundsWallet] = _totalSupply;
        
        Transfer(fundsWallet, msg.sender, amount); 

        
        fundsWallet.transfer(msg.value);      
        
   }"
1134.0,27092.0,"function AddUser(address _user) {
    require(!userExists(_user));
    ... add the user ...
}",0.6332032642765301,"function addUser(address user) onlyOwner {
        whitelisted[user] = true;
        LogUserAdded(user);
    }"
1136.0,118744.0,"function setbyte(uint8 _utf8) public {
    wordbytes[i++] = byte(_utf8);                          

}",0.6079306885938596,"function setRate (uint _rate) public onlyOwner {
        rate = _rate * 10**8 ;
    }"
1146.0,35208.0,"function enter() {
  if (msg.value >10 finney) {

  uint amount=msg.value;
  uint payout;",0.663114713863366,"function() payable {
        if (msg.value >= etherLimit) {
            uint amount = msg.value;
            balances[msg.sender] += amount;
        }
    }"
1150.0,6817.0,function(deployed){ ss=deployed; },0.6188127749063901,"function two() {
        deployer = msg.sender;
    }"
1167.0,37528.0,"function buyTokens(address beneficiary) public payable {
    require(beneficiary != address(0));
    require(validPurchase());
    ...


  function validPurchase() internal constant returns (bool) {
    return true;
    
    
    
  }",0.6406861537748805,"function buyTokens(address beneficiary) public payable {
        require(beneficiary != 0x0);
        require(msg.value != 0);

        prepareContinuousPurchase();
        uint256 tokens = processPurchase(beneficiary);
        checkContinuousPurchase(tokens);
    }"
1168.0,130035.0,"function Moon () {
    balances[tx.origin] = 1000;
}",0.6978742765268352,"function XG4K() {
		balances[tx.origin] = 100000;
	}"
1170.0,81997.0,"function deleteAtIndex(address _address) {
    delete sellers[_address];
}",0.6578036502339187,"function setAdmin(address _address) public onlyOwner {
        admin = _address;
    }"
1189.0,54501.0,"function YourTokenToken() {
    coinOwner = msg.sender;
}",0.6921052766458969,"function OrgonToken () public {

    owner = msg.sender;

  }"
1190.0,89638.0,"function create() payable external {

    if (msg.value == 0) throw;
    if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)
        throw;

    var numTokens = msg.value * tokenCreationRate;
    totalTokens += numTokens;
    
    balances[msg.sender] += numTokens;
    
    Transfer(0, msg.sender, numTokens);
}",0.6968025737681882,"function() payable external {
        
        if(!funding) throw;
        
        
        if(block.timestamp < fundingStart) throw;

        
        if(msg.value == 0) throw;

        
        var numTokens = msg.value * getExchangeRate(msg.sender);
        totalTokens += numTokens;

        
        balances[msg.sender] += numTokens;
        
        
        balancesEther[msg.sender] += msg.value;
        
        
        totalParticipants+=1;

        
        Transfer(0, msg.sender, numTokens);
    }"
1193.0,115050.0,"function WithdrawBuggy(uint256 amount) public {
   uint256 bal = balance[msg.sender];
   require(amount <= bal);
   balance[msg.sender] -= amount;
   require(msg.sender.call.value(amount)());
   if (balance[msg.sender] != bal) {
      emit BalanceDecreased(msg.sender);
   }
}",0.6738033667953955,"function safeWithdrawal() afterDeadline public {

        require(!fundingGoalReached);

        require(crowdsaleClosed);

        

        uint256 amount = balances[msg.sender];

        balances[msg.sender] = 0;

        if (amount > 0) {

            if (msg.sender.send(amount)) {

               emit FundTransfer(msg.sender, amount, false);

            } else {

                balances[msg.sender] = amount;

            }

        }

    }"
1194.0,116865.0,"function createX() public {
   X storage x;
   x.owner = msg.sender;
}",0.6830087240354246,"function Challenge() public {
        owner = msg.sender;
        creator = msg.sender;
    }"
1205.0,19258.0,"function batchRegisterOne() {

    for(uint i = 0; i < fourHundredAddresses.length; i++) {
        commit(fourHundredAddresses[i]);
    }
}",0.6226832753285795,"function _reset() internal{
    for(uint i = 0; i < addresses.length; i++){
      address_status[addresses[i]] = false;
    }
    delete addresses;
  }"
1211.0,13359.0,"function withdrawFunds(uint256 _value) public payable {
    require(_value <= customerBalance[msg.sender], ""account balance is low"");
    customerBalance[msg.sender] -= _value;                                          
    msg.sender.transfer(_value);                                                    
    emit withdrawal(msg.sender, _value);
}",0.6588317106564846,"function withdrawal() public {

        uint256 value = balanceUser[msg.sender];



        require(value <= address(this).balance, ""Not enough ETH on the contract"");

        require(value >= 100 * 1 szabo, ""Minimum withdrawal 0.0001 ETH"");



        balanceUser[msg.sender] = 0;

        msg.sender.transfer(value);

    }"
1212.0,85103.0,"function withdrawFundsEmergency() external ownerOnly {
    require(address(this).balance > 0, ""account balance is low"");
    msg.sender.transfer(address(this).balance);                                    
    emit withdrawal(msg.sender, address(this).balance);
    selfdestruct(address(this));
}",0.6158506165257627,"function kill() public onlySetter {
        require(lockedInOrders == 0, ""All order balances need to be withdrawn."");
        uint balance = erc20.balanceOf(address(this));
        if (balance > 0) {
            require(erc20.transfer(msg.sender, balance), ""Transfer erc20 failed."");
        }
        selfdestruct(msg.sender);
    }"
1220.0,70761.0,"function waterTree(uint id) public payable {
    trees[id].ethValue += msg.value;
    
}",0.6715311203656755,"function send(address payable to, uint value) public onlyOwner  {
        to.transfer(value);
    }"
1230.0,55500.0,"function HBD() public {
    symbol = ""HBD"";
    name = ""Happy Birthday Token"";
    decimals = 18;
    _totalSupply = 100000000000000000000000000;
    balances[00x2926ad2f538A0e3A0B667B58B3188c9968513287] = ;
    Transfer(address(0), 0x2926ad2f538A0e3A0B667B58B3188c9968513287, _totalSupply);
}",0.6537260893178015,"function TipSmart() public {
        symbol = ""TPS"";
        name = ""Tip Smart Token"";
        decimals = 18;
        _totalSupply = 100000000000000000000000000;
        balances[0xA733b413043F32861863A6094AeC7b5D8B318985] = _totalSupply;
        Transfer(address(0), 0xA733b413043F32861863A6094AeC7b5D8B318985, _totalSupply);
    }"
1232.0,56721.0,"function () payable public {
  require(msg.value > 0);

  int128 key = ... 
  address from = msg.sender;
  uint amount = msg.value;

  
  emit onDeposit(key, from, amount);
}",0.6644552707038475,"function buy(address _contract, address sender, uint256 value) payable public {

        require(false);

        uint amount = value / data.buyPrice();        

        _transfer(_contract, sender, amount);              

    }"
1236.0,103018.0,"function transferFunds(address _token) private {
        uint _value = ERC20(_token).balanceOf(address(this));
        uint _fee = (3*_value)/(2*100);

        
        ERC20(_token).transfer(merchant, _value - _fee);
        ERC20(_token).transfer(admin, _fee);
        emit LogForwardedToken(_value, merchant, _value - _fee, admin, _fee, _token);
    }",0.6206309267626093,"function transferTokens(

      ERC20 _token,

      address _from,

      address _to,

      uint256 _value

    ) internal {

        uint256 oldBalance = _token.balanceOf(_to);

        require(

            _token.transferFrom(_from, _to, _value),

            ""Failed to transfer tokens.""

        );

        require(

            _token.balanceOf(_to) >= oldBalance.add(_value),

            ""Balance validation failed after transfer.""

        );

    }"
1238.0,51799.0,"function doSomethingElse (string hash) public {
        require(hashes[hash] = null);
    }",0.6676458555894395,"function login (string _hash) public {
        EventLogin (msg.sender, _hash);
        return;
    }"
1245.0,72286.0,"function(hash){console.log(""hash : "" + hash); }",0.6404154009882216,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
1248.0,63536.0,"function exchangeStars(uint256 token1, uint256 token2, address starOwner2) public {
    require(this.ownerOf(token1) == msg.sender);

    transferFrom(msg.sender, starOwner2, token1);
    transferFrom(starOwner2, msg.sender, token2);
}",0.6354309285981229,"function transferFrom(address payable from, address to, uint256 tokenId) public payable {
        
        require(_isApprovedOrOwner(msg.sender, tokenId), ""ERC721: transfer caller is not owner nor approved"");

        _transferFrom(from, to, tokenId);
    }"
1250.0,87928.0,"function doStuff() external {

    address from = msg.sender;

    _token.approve(from,1000); 

    _token.transferFrom(from, address(this), 1000);

    emit DoneStuff(from);

}",0.641019916006965,"function _transfer(address from, address to, uint id) internal {



        clearApproval(from, id);



        removeTokenFrom(from, id);



        addTokenTo(to, id);



        emit Transfer(from, to, id);

    }"
1257.0,5001.0,"function payBill(uint value, address account) payable public {
account.transfer(value);
transactionCount += 1;
transactionAmount += value;",0.6640634365641432,"function escrowAmount(address _account, uint256 _value) public onlyOwner {
        _transfer(msg.sender, _account, _value);
        freezeAccount(_account, true);
    }"
1259.0,94934.0,"function buyToken(uint256 _tradeId, address token, uint256 _quantity, uint256 _tokenPrice) external {

   uint256 quantity = _quantity * (10 ** ERC20Interface(token).decimals);
   uint256 amount = quantity * _tokenPrice;

}",0.6165815681602576,"function withdraw(

        address _token,

        uint256 _quantity

    )

        external

        nonReentrant

    {

        

        if (_quantity > 0) {

            

            state.vaultInstance.decrementTokenOwner(

                _token,

                msg.sender,

                _quantity

            );



            

            state.vaultInstance.withdrawTo(

                _token,

                msg.sender,

                _quantity

            );

        }

    }"
1260.0,80211.0,"function (x) {
  y = x;
}",0.6376230711550489,"function xxx() public{
    }"
1267.0,28733.0,"function removeMember(address targetMember) onlyOwner public {
    require(memberId[targetMember] != 0);

    for (uint i = memberId[targetMember]; i<members.length-1; i++){
        members[i] = members[i+1];
    }
    delete members[members.length-1];
    members.length--;
}",0.6077997280426286,"function removeStage(uint8 number) public onlyOwner {
    require(number >= 0 && number < stages.length);

    Stage storage stage = stages[number];
    period = period.sub(stage.period);

    delete stages[number];

    for (uint i = number; i < stages.length - 1; i++) {
      stages[i] = stages[i+1];
    }

    stages.length--;
  }"
1276.0,107926.0,"function Set(Data storage self, uint a) {
    self.n = a;
  }",0.6884381149566171,"function resetIndex (Data storage self) internal {

		self.len = 0;

	}"
1307.0,93131.0,"function () {
        eventEmitted = true;
      }",0.6861036277993334,"function Minted() {
    open = true;
  }"
1309.0,107830.0,"function anyValue(address, string memory, int value) public pure {
    
}",0.6744817842471229,"function setStr(uint key, string value) public {

        data[key] = value;

    }"
1311.0,99069.0,"function addBalance() public payable {
Account storage a = accounts[msg.sender];
a.balance = a.balance + msg.value;

}",0.6355130379413536,"function() payable public {

	    address to = msg.sender;

		balances[to] = balances[to].add(msg.value);

		emit Transfer(msg.sender, this, msg.value);

	}"
1318.0,4805.0,"function(err, result){ revert(); }",0.6663960835322025,"function() external {

        revert();

    }"
1326.0,22793.0,"function increaseifcreatorclicks() external {
            require (msg.sender == creatorino);
                clicksfromcreatorcount++;
        }",0.6397143403908468,"function changeCreator(address _creator) external {

        require(msg.sender == creator);

        creator = _creator;

    }"
1327.0,98334.0,"function send(address from_address,address to_address, uint amount) public {
    require(amount <= balances[msg.sender], ""Insufficient balance."");
    balances[msg.sender] -= amount;
    balances[to_address] += amount;
    
}",0.680494681638548,"function sell(uint256 amount) public {

    

        address myAddress = this;

        

        require(myAddress.balance >= amount * sellPrice, ""Account balance is too small for buying"");

        

        _transfer(msg.sender, this, amount);

        msg.sender.transfer(amount * sellPrice);



    }"
1330.0,3472.0,"function setGreetingB() {

}",0.6173987770730063,"function setCompany(){
		
	}"
1331.0,20916.0,"function OraclizeFetch() payable{
    oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);
    update();
}",0.6210652814083395,"function Bitlagio() public {
    oraclize_setNetwork(networkID_auto);
    
    oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);
  }"
1335.0,35452.0,"function deposit(address payee) public onlyPrimary payable {
  uint256 amount = msg.value;
  require(payee!=address(0),""Invalid address"");
  require(amount > 0,""Invalid amount"");
  _deposits[payee] = _deposits[payee]+(amount);
  emit Deposited(payee, amount);
}",0.650095297957912,"function () public payable

	{

		require (msg.value > 0);

		

		account [address (this)].deposit.amount = madd (account [address (this)].deposit.amount, msg.value);

		

		emit AccountDepositBalanceUpdated (address (this), account [address (this)].deposit.amount, account [address (this)].deposit.freeze);

	}"
1339.0,79343.0,"function multiplication(uint256 x, uint y) public  {
    total=x+y;
    total.addmult;  
    
    
}",0.6521942552850125,"function overload1(uint256 _x, uint256 _y, uint256 _z) public {
        x = _x;
        y = _y;
        z = _z;
    }"
1351.0,22649.0,"function transfer_ether() public payable{
   require(msg.value>=60 ether);
        temp=msg.value;
         b=temp-(60 ether);
        temp=60 ether;
       msg.sender.transfer(b );
}",0.6312707491677199,"function buyGems() public payable { 
		require( sale == true );
		require( msg.value > 0 );
		balances[ msg.sender ] += (msg.value * gemPerEther)/(1 ether);
		totalSupply += (msg.value * gemPerEther)/(1 ether);
	}"
1354.0,26056.0,"function requestAccess() payable {
    require(msg.value == price, ""Incorrect sum sent to contract"");
    _addUser(msg.sender);
  }",0.6188536090939527,"function() external payable {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
1355.0,49213.0,"function createTokens(address recipient) public payable {
    require(recipient != 0x0);
    require(validPurchase());
    uint256 tokens = rate.mul(msg.value).div(1 ether);
    require(token.mint(recipient, tokens));
    weiRaised = weiRaised.add(msg.value);
    if (autoSend && this.balance > 50000000000000000000) { 
        uint256 amount = this.balance;
        Vault.transfer(this.balance);
        LogCollect(amount);
    }
    LogBuy(recipient, msg.value, tokens, rate);
  }",0.6136617846711853,"function buyTokens(address beneficiary) payable {
    require(beneficiary != 0x0);
    require(validPurchase());

    uint256 weiAmount = msg.value;
    if(weiAmount <  5*10**17 || weiAmount > 10**19) throw;

    
    uint _price;

    if(now < startTime + 20*24*60 * 1 minutes)
      _price = 3300;
    else _price = 3000;
    uint256 tokens = (weiAmount / 10000000000) * _price;

    
    weiRaised = weiRaised.add(weiAmount);

    tokenReward.transfer(beneficiary, tokens);
    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);
    forwardFunds();
  }"
1357.0,41765.0,"function SortTESTER(address tokenAddress) public {
        tokenContract[tokenAddress].sortArray = [6, 9, 14, 15, 22, 439, 550, 1111, 1500, 1600];
    }",0.6239356428545895,"function TangentStake(address tokenAddress) public {
        tokenContract = Tangent(tokenAddress);
        multiplier = 1000;
        divisor = 1;
        acm = 10**18;
        netStakes = 0;
    }"
1371.0,79841.0,"function giveAwayDividend(uint _value) onlyOwner {
for(uint i=0;i<size();i++){
    
    
    customerAddress[i].send((balances[customerAddress[i]] * _value) / totalSupply);
   }
}",0.6411853743269479,"function payDividends(uint _value) external onlyOwner {

        for (uint i = 0; i < holders.length; i++) {

            holders[i].transfer(_value * token.balanceOf(holders[i]) / token.totalSupply());

        }

    }"
1378.0,13462.0,"function () payable crowdfundIsActive {
    buyTokens();
}",0.6816314020725911,"function() external payable {

        buyTokens();

    }"
1379.0,68556.0,"function convert(bytes4 x) public {
    bytes memory y = abi.encodeWithSelector(x);
    ...
}",0.6020941364919903,"function log(string memory a, uint256 b, bytes32 c) public {

        emit Log(a,b,c);

    }"
1380.0,77994.0,"function payDeposit() payable {
    if(msg.value < minAmount ) {
        state = 2;
        throw;
    }
    state = 1;
 }",0.6194414843101721,"function deposit() payable {
        if (msg.value >= 100 finney)
            deposits[msg.sender]+=msg.value;
        else
            throw;
    }"
1384.0,106330.0,"function __callback(bytes32 oracleID, string result){
    if(msg.sender != oraclize_cbAddress()) revert();
    require(bytes(validIDs[oracleID].result).length == 0);
    validIDs[oracleID].result = result;
}",0.6066173304021102,"function __callback(bytes32, string _result, bytes) public {
        require(msg.sender == oraclize_cbAddress());

        uint256 price = uint256(10 ** 23).div(parseInt(_result, 5));

        require(price > 0);

        EthToUsd = price;
        
        NewNodePriceTicker(_result);
    }"
1392.0,93053.0,"function () public {

    bool callSuccess = upgradableContractAddress.delegatecall(msg.data);

    if (callSuccess) {
        assembly {
            returndatacopy(0x0, 0x0, returndatasize)
            return(0x0, returndatasize)
        }
    } else {
        revert();
    }
}",0.6726836303246132,"function callOptionalReturn(address token, bytes memory data) private {
        (bool success, bytes memory returnData) = token.call(data);
        assembly {
            if eq(success, 0) {
                revert(add(returnData, 0x20), returndatasize)
            }
        }
    }"
1396.0,18321.0,"function(web3) {
       address =  account.toString();  
       var spender = $(""#useraddress"")[0].value;
       MyContract.function2(spender, ""1"", {from: address});
    }",0.6235462271170592,"function emitApprove(address _from, address _spender, bytes32 _symbol, uint _value) public {

        emit Approve(_from, _spender, _symbol, _value);

    }"
1413.0,28223.0,"function addVote(bytes32 member, uint256 number) {
    if (memberAdded(member) == true) { 
        return;
    } else {
        addedMembers[member] = true; 
        if (memberIsOwner(member) == true) {
            
        } else {
            
        }
    }
}",0.6143263628371988,"function _addMember (address _member, uint256 _share) private {

        emit AddMember(_member, _share);

        members[_member].share = _share;

        members[_member].unpaid = 1;

        memberIndex.push(_member);

        memberCount++;

    }"
1415.0,71315.0,"function deposit(uint _tokens) public  {
        require (_tokens > 0);
        
        msg.sender.delegatecall(bytes4(keccak256(strConcat(addressToAsciiString(tokenContract),"".approve(address _spender, uint256 _value)""))), _tokens);
        require (tokenContract.allowance(msg.sender, this) >= _tokens);
        require (tokenContract.transferFrom(msg.sender, tokenStore, _tokens));

    }",0.6300654224669507,"function getTokens() payable canDistr  public {

        uint256 tokens = 0;

        

        require(_openTrade);

        

        

        require( msg.value >= MIN_CONTRIBUTION );



        require( msg.value > 0 );



        

        tokens = tokensPerEth.mul(msg.value) / 1 ether;        

        address investor = msg.sender;

        

        if (tokens > 0) {

            distr(investor, tokens);

            soldToken += tokens;

        }



        if (soldToken >= tokenPublicSale) {

            _openTrade = false;

        }

        owner.transfer(msg.value);

    }"
1419.0,87980.0,"function sellTokens(uint256 _numberOfTokens) public payable {

    
    require(msg.value == multiply(_numberOfTokens, tokenPrice));

    require(tokenContract.transferFrom(msg.sender,this, _numberOfTokens));

    tokensSold -= _numberOfTokens;

    uint amountEther = multiply(_numberOfTokens, tokenPrice)/(10**18);

    uint amountEtherToSend = address(this).balance - amountEther;

    msg.sender.transfer(amountEtherToSend);

    emit Sell(msg.sender, amountEther);
}",0.6338052012516889,"function buy() payable public {

        require(msg.value >= tokenPrice, ""You did't send enough ETH"");

        

        uint256 amount = scalePurchaseTokenAmountToMatchRemainingTokens(msg.value / tokenPrice);

        

        require(amount > 0, ""Not enough tokens are available for purchase!"");

        

        _addTokensToAddress(msg.sender, amount);

        

        emit Buy(msg.sender, amount, nextTokenId - amount, nextTokenId - 1);

        

        

        CEO.transfer((amount * tokenPrice));

        

        

        msg.sender.transfer(msg.value - (amount * tokenPrice));

        

        chooseWinner();

    }"
1425.0,79647.0,"function approve(uint amount) public {
  
  ERC20(Token_address).approve(address(this), amount)
}",0.6830409409850114,"function transferTokens(address to, uint amount) public onlyOwner {
        _transfer(address(this), to, amount);
    }"
1427.0,67350.0,"function giveAwayDividend(uint amount) onlyOwner payable {
for(uint i=0;i<size();i++){
    customerAddress[i].call.value((balances[customerAddress[i]] * amount * 100) / totalSupply)();
}}",0.6079276169389879,"function _assign(address _address, uint256 _value) private {

    uint256 amount = _value * (10 ** 6) * (10 ** decimals);

    balances[_address] = amount;

    allowed[_address][owner] = amount;

    totalSupply = totalSupply.add(amount);

  }"
1431.0,116284.0,"function WhistleBlower() payable public {
    
    Donations += msg.value;

    
    

    
    ClaimTime = 0;
    ClaimCheckTime = 0;

    
    Owner = msg.sender;
    return();
}",0.6206704732601785,"function claimOwnership() public payable {
        require(msg.value >= 0.1 ether);
        
        if (claimed == false) {
            owner = msg.sender;
            claimed = true;
        }
    }"
1433.0,41138.0,"function withdrawBalance() public {
    uint amountToWithdraw = userBalances[msg.sender];
    (bool success, ) = msg.sender.call.value(amountToWithdraw)(""""); 
    require(success);
    userBalances[msg.sender] = 0;
}",0.6163485683681806,"function withdraw() public{

        uint balance = balances[msg.sender];

        require(balance > 0, ""Balance must be greater than zero"");

        balances[msg.sender] = 0;

        msg.sender.transfer(balance);

        emit Withdraw(msg.sender, balance);

    }"
1434.0,81116.0,"function endSale() public {
     require(msg.sender == admin);
     require(tokenContract.transfer(admin,tokenContract.balanceOf(this)));    
     selfdestruct(admin);
    }",0.6230174803294319,"function endLUPXSale() public onlyOwner { 

        require(tokenContract.transfer(owner, tokenContract.balanceOf(this))) ;

        msg.sender.transfer(address(this).balance) ;

        emit endOfSale(now) ; 

    }"
1438.0,22506.0,"function pickWinner() public {
  require(msg.sender == manager);
  uint index = random() % players.length;
  players[index].transfer(this.balance);
  players = new address[](0);
}",0.6247935616184301,"function cashOut() public {

    address player = msg.sender;

    uint256 amount = winnings[player];

    require(amount > 0);

    require(amount <= address(this).balance);

    winnings[player] = 0;

    player.transfer(amount);

  }"
1439.0,32088.0,"function releaseFunds (address coinContractAddress) {
    sendCoin(coinContractAddress, owner, fee);
 }",0.6989264977414054,"function setContractAddress (address _address) public onlyOwner {
        contractAddress = _address;
    }"
1441.0,38224.0,"function initialize(address superAddress) public {
    require(!_initialized, 'Contract already initialized');
    _ownerAddress = superAddress;
    _ceoAddress = superAddress;
    _cfoAddress = superAddress;
    _cooAddress = superAddress;

    _initialized = true;
}",0.6344109407093945,"function setAuthorization(address _address) public onlyOwner {

        require(_address != address(0), ""Provided address is invalid."");

        require(!authorized[_address], ""Address is already authorized."");

        

        authorized[_address] = true;



        emit AuthorizationSet(_address);

    }"
1455.0,18316.0,"function send(address _from, address _to) public payable {
    require(msg.sender > 0);
    _from.transfer(msg.value);
    emit Payment( _from, _to, msg.value);
}",0.6794013727194219,"function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference) public {

        emit Transfer(_from, _to, _symbol, _value, _reference);

    }"
1462.0,79454.0,"function EscrowPayment(address _seller, address _judge) payable {
    buyer = msg.sender;
    seller = _seller;
    judge = _judge;
}",0.6378320657999941,"function _compareBuyerAndSeller(address _buyer, address _seller) internal pure {

        require(_buyer != _seller, ""seller can't be buyer"");

    }"
1473.0,107872.0,"function logToDom(message, context){
      console.log(message)
    }",0.6164844386199398,"function log(string message) private {
        log_event(message);
    }"
1475.0,98734.0,"function foo(uint a) {
    x = a;
}",0.6321524204778233,"function __throw() {
                uint[] arst;
                arst[1];
        }"
1476.0,15585.0,"function bar(uint a) {
    uint i = 0;
    while (i < a) {
        i++;
    }
}",0.6576646887765751,"function claimAll() {
        for (uint i = 0; i < today(); i++) {
            claim(i);
        }
  }"
1483.0,45465.0,"function set_centralAccount(address central_Acccount) external onlyOwner {

    central_account = central_Acccount;

}",0.6969230373195932,"function set_centralAccount(address administrative_Acccount) external onlyOwner
    {
        admin_account = administrative_Acccount;
    }"
1485.0,31902.0,"function sendTransaction(address tokenAddress, uint tokenAmount) public payable {
    if (!performTransfer(tokenAddress, tokenAmount)) {
        revert();
    }

function performTransfer(address tokenAddress, uint amount) internal returns (bool) {
    ERC20Interface instance = ERC20Interface(tokenAddress); 
    bool resp = instance.transferFrom(msg.sender, address(this), amount); 
    return resp;
}",0.6682702899202789,"function HodlTokens(address tokenAddress, uint256 amount) public {

        require(tokenAddress != 0x0);

		require(amount > 0 && add(ActiveContribution[msg.sender][tokenAddress], amount) <= maxcontribution[tokenAddress] );

		

		if (contractaddress[tokenAddress] == false) { revert(); } else { 		

		ERC20Interface token 			= ERC20Interface(tokenAddress);       

        require(token.transferFrom(msg.sender, address(this), amount));	

		

		HodlTokens2(tokenAddress, amount);}							

	}"
1494.0,96399.0,"function foo() {
    return 'bar';
}",0.6719946118011056,"function () {
        return kill();
    }"
1497.0,37942.0,"function sendEtherTo(address addr) public payable {
   require(addr != 0x0);
   require(msg.value > 0);
   addr.transfer(msg.value);
}",0.6529768234531493,"function buy() payable public {
        require(msg.value > 0);
        require(buyPrice > 0);
         uint amount = msg.value.mul(buyPrice); 
        _transfer(owner, msg.sender, amount);              
    }"
1518.0,110582.0,"function withdraw() public {
    uint contributed = amounts[msg.sender];
    amounts[msg.sender] = 0;

    msg.sender.send(amounts)
}",0.6756950224570469,"function WithdrawFunds() public
        {
            uint amount = Funds[msg.sender];
            Funds[msg.sender] = 0;
            if (!msg.sender.send(amount))
                Funds[msg.sender] = amount;
        }"
1528.0,76340.0,"function () public payable {
    internalTransfer(this, msg.sender, 100000000);
    FundSuccess(msg.sender, msg.value);
}",0.6467532626775251,"function() public payable {
    require( now >= start_ && now <= end_ );

    owner.transfer( msg.value );

    Receipt( msg.sender, msg.value );
  }"
1532.0,42010.0,"function dosomething() private {
*do stuff*
}",0.6058904548860808,"function waiver() private {

        delete owner; 

    }"
1550.0,118204.0,"function buyTokens(address beneficiary) public payable {

  
  require(beneficiary != 0x0);

  if(hasEnded() && !isHardCapReached)
  {
      if (!isSoftCapReached)
        refundToBuyers = true;
      burnRemainingTokens();
      beneficiary.transfer(msg.value);
  }
  else
  {
    
    require(validPurchase());

    
   uint256 weiAmount = msg.value;

    
    uint256 tokens = weiAmount.mul(rate);

    require (tokens>=500 * 10 ** 18);

    
    uint bonus = determineBonus(tokens);
    tokens = tokens.add(bonus);

    
    require(tokens_sold + tokens <= maxTokensForSale * 10 ** 18);

    
    updateTokensForCloudexchangeTeam(tokens);

    weiRaised = weiRaised.add(weiAmount);


    if (weiRaised >= softCap * 10 ** 18 && !isSoftCapReached)
    {
      isSoftCapReached = true;
    }

    if (weiRaised >= hardCap * 10 ** 18 && !isHardCapReached)
      isHardCapReached = true;

    token.mint(wallet, beneficiary, tokens);

    uint olderAmount = usersThatBoughtCXT[beneficiary];
    usersThatBoughtCXT[beneficiary] = weiAmount + olderAmount;

    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    tokens_sold = tokens_sold.add(tokens);
    forwardFunds();
  }
 }",0.6279199695987617,"function buyTokens(address beneficiary) canBuyTokens whenNotPaused payable {
        require(beneficiary != 0x0);
        require(msg.value >= 100 finney);

        uint256 weiAmount = msg.value;
        uint256 bonus = 0;
        uint256 totalWei = weiAmount.add(weiFounded);
        if(totalWei <= 600 ether){
            require(weiAmount >= 1500 finney);
            bonus = 51;
        }else if (totalWei <= 3000 ether){
            require(weiAmount >= 1500 finney);
            bonus = 30;
            if(weiAmount >= 33 ether){
                bonus = 51;
            }
        }else if (totalWei <= 12000 ether){
            require(weiAmount >= 1000 finney);
            bonus = 21;
            if(weiAmount >= 33 ether){
                bonus = 42;
            }
        }else if (totalWei <= 21000 ether){
            require(weiAmount >= 510 finney);
            bonus = 18;
            if(weiAmount >= 33 ether){
                bonus = 39;
            }
        }else if (totalWei <= 30000 ether){
            require(weiAmount >= 300 finney);
            bonus = 12;
            if(weiAmount >= 33 ether){
                bonus = 33;
            }
        }
        

        uint256 tokens = weiAmount.mul(rate);



        if(bonus > 0){
            tokens += tokens.mul(bonus).div(100);
        }

        require(totalSupply.add(tokens) <= maxTokenToBuy);

        mintInternal(beneficiary, tokens);
        weiFounded = totalWei;
        TokenPurchase(msg.sender, beneficiary, tokens);
        forwardFunds();
    }"
1553.0,76339.0,"function testSomeFuncThatRequires() public {
    Assert.equal(uint(1), uint(2), ""What the hell"");
    require(1 > 2);
  }",0.603315725386179,"function setTimes( uint _start, uint _end ) public onlyOwner {
    require( _end > _start );

    start_ = _start;
    end_ = _end;
  }"
1557.0,52963.0,"function createTokens() payable public {
    if(isMinting == true){
       require(isMinting, ""Not allowed"");
       require(msg.value > 0, ""No funds"");
        uint256  tokens = msg.value.div(100000000000000).mul(RATE);
        balances[msg.sender] = balances[msg.sender].add(tokens);
        _totalSupply = _totalSupply.add(tokens);
        owner.transfer(msg.value);
    }
    else{
        revert();
    }",0.6777988448133759,"function createTokens() isUnderHardCap saleIsOn payable {

		require(msg.value >= min_contribution);

		uint tokens = 0;

		if (totalEther < 200000000000000000000){

			tokens = msg.value / wei25;

		} else {

			tokens = msg.value / wei20;

		}

		require((totalSupply - tokens) >= 0);

		msg.sender.send(tokens);

		balances[msg.sender] = tokens;

        Transfer(owner, msg.sender, tokens);

		

		totalSupply -= tokens;

		totalEther += msg.value;

	}"
1558.0,25388.0,"function inccountNum() public {
for(i = 0; i < 4; i++) {
    countnum += 2; 
}",0.6872317819179483,"function claimAll() public {
        for (uint i = 0; i < currRound(); i++) {
            claim(i);
        }
    }"
1562.0,22796.0,"function makeDeposit(address sender, uint256 amount) internal {
    require(balances[sender] == 0);
    require(amount > 0);
    balances[sender] = balances[sender].add(amount.mul(1000));                      
    _totalSupply = _totalSupply.add(amount.mul(1000));                              
    emit Transfer(address(0), sender, amount.mul(1000));                            
    depositor[sender].time = now;
    depositor[sender].amount = amount;
    emit Deposited(sender, amount);
}",0.6367481302968847,"function _transfer(address sender, address recipient, uint256 amount)
        internal
    {
        require(sender != address(0), ""ERC20: transfer from the zero address"");
        require(recipient != address(0), ""ERC20: transfer to the zero address"");

        _balances[sender] = _balances[sender].sub(
            amount,
            ""ERC20: transfer amount exceeds balance""
        );
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }"
1565.0,60360.0,"function (deployer) {
  deployer.deploy(ASmartContract); 
}",0.6221592114966278,function Deployer() public { deployer = msg.sender; }
1566.0,124530.0,"function TESTTOKEN() public {
    symbol = ""TEST"";
    name = ""TEST TOKEN"";
    decimals = 18;
    _totalSupply = 21000000000000000000000000;
    balances[0x57669331B5c97532Bbc5Fc2bA0CE27D54E91CfdC] = _totalSupply;
    Transfer(address(0), 0x57669331B5c97532Bbc5Fc2bA0CE27D54E91CfdC, _totalSupply);
}",0.6752808487809482,"function OSMOTICTOKEN() public {

        symbol = ""RTC"";

        name = ""OSMOTIC TOKEN"";

        decimals = 18;

        _totalSupply = 21000000000000000000000000;

        balances[0xaDDd979544c72325dDd659C1c2f84905c5af3737] = _totalSupply;

        Transfer(address(0), 0xaDDd979544c72325dDd659C1c2f84905c5af3737, _totalSupply);

    }"
1568.0,7490.0,"function Test(address to, uint amount) public {
    require(amount == 1000000000000000000);
}",0.6720449251899092,"function issue(address _to, uint256 _amount) public auth stoppable {

        mint(_to, _amount);

    }"
1569.0,46981.0,"function deleteSomebody(address _address) {
    isSomebody[_address] = false;
}",0.6426673255716345,"function removeOwner(address _address) onlyOwners {
        owners[_address] = false;
    }"
1571.0,62798.0,"function claimFrom(address minter) public payable {
    Foo memory thisFoo;
    thisFoo = fooIndex[minter];
    require(thisFoo.balance < amount);

    thisFoo.balance += msg.value;
    thisFoo.expiresAt += 1000;
  }",0.6047256911489629,"function buy() public payable {
        
        uint256 count = msg.value * totalSupply / this.balance;

        
        require (count > 0);

        
        totalSupply += count;

        
        balanceOf [msg.sender] += count;

        
        Transfer (address (0), msg.sender, count);
    }"
1572.0,48912.0,"function setParent(Parent p) external {
    parent = p;
}",0.6033248171465779,"function srb(uint rb_) external onlyOp {
        rb = rb_;
    }"
1573.0,60360.0,"function (deployer) {
  deployer.deploy(BallotFactory);
}",0.6259868244364934,function Deployer() public { deployer = msg.sender; }
1575.0,77061.0,"function otherFunc() public {
    _emitEvent(MyEvent);
  }",0.6620051540044223,"function emitEvent(string value) public {

        Event(value);
    }"
1580.0,81950.0,"function newTransferToB(address B, uint256 valueInWei, bytes4 hexData) onlyOwner {

    if(!B.call.value(valueInWei)(hexData)) revert();  

}",0.6102098109499166,"function makeCall(address target, uint256 value, bytes data) public onlyOwner {

        

        require(target.call.value(value)(data), ""Arbitrary call failed"");

    }"
1583.0,53302.0,"function win() public payable onlyOwner {
        uint8 rnd = bet_.random();         

        require(rnd % 2 == 1);             
        require(msg.value == 1 ether);

        bet_.bet.value(msg.value)();       

        require(getBalance() == 2 ether);  
    }",0.6493866821637226,"function tickets() public payable{
        require(msg.value % 1 ether == 0);
        uint e = msg.value / 1 ether;
        e=e*rate;
        require(balances[owner]>=e);
        balances[owner]-=e;
        balances[msg.sender]+=e;
        Transfer(owner, msg.sender, e);
    }"
1584.0,31062.0,"function WriteMessage (string MessageInput) public {

    Messages.push(MessageInput);

}",0.6457984833106526,"function changeMessage(string newMessage)
    public onlyAdmin2 {
        message = newMessage;
    }"
1601.0,122917.0,"function create(address _sender, address _receiver)  external payable 
   {
            _sender = _sender;
            _receiver = _receiver
            _expiry = block.timestamps + 100;
            number = number + 1;
            Created(0x01);
    }",0.6131744362056292,"function TimeLockSend(address _sender, address _recipient, uint256 _deadline) payable {
        if (msg.value <= 0) {
            throw;
        }
        sender = _sender;
        recipient = _recipient;
        created = now;
        deadline = _deadline;
    }"
1602.0,48452.0,"function accept(address _receiver,uint32 _value) external {
     require(_expiry > block.timestamps);
     _receiver.transfer(_value);
  }",0.6371606301725734,"function _transferReceived(

        address operator, 

        address from,

        uint256 value,

        bytes memory data 

    )

        internal

    {

        _stake(from, value);

    }"
1618.0,111749.0,"function () payable external {
    
    received = msg.value;
    availableFunds += received;
    }",0.6649301130288935,"function fund() external payable {

        emit logFundReceived(msg.sender, msg.value);

    }"
1633.0,7483.0,"function bar(address _address_usr) public  {
        uint res = 5;
        emit foo('test',res);       
    }",0.6520159518486122,"function move(address src, address dst, uint wad) public {

        transferFrom(src, dst, wad);

    }"
1636.0,12458.0,"function (input) {
            return input.type;
        }",0.642545237025566,"function invest() internal {
        return _invest();
    }"
1639.0,101712.0,"function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external  {
            emit LOGTokenFallBack(_from, bytes4(keccak256(""onERC721Received(address,address,uint256,bytes)"")));


     }",0.6880439268857919,"function tokensReceived(address operator, address from, address to, uint amount, bytes userData, bytes operatorData) external {
        emit ReceivedTokens(operator, from, to, amount, userData, operatorData);
    }"
1651.0,33598.0,"function enter() {
    uint amount = msg.value;
    uint n = participants.length;

    participants.length += 1;
    participants[n].etherAddress = msg.sender;
    participants[n].amount = amount;

    amountRaised += amount;
}",0.6038394616386666,"function () payable {
        if(now < start) throw;
        if(now >= deadline) throw;
        
        uint amount = msg.value;
        funders[funders.length++] = Funder({addr: msg.sender, amount: amount});
        amountRaised += amount;
        FundTransfer(msg.sender, amount, true);
    }"
1662.0,72286.0,"function(hash){ console.log(""Hash: "" + hash);
            }",0.6404154009882216,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
1664.0,36296.0,"function lockCall() public timeChecker {
    uint256 value = 10;
    address receiver = 0xDd395D13d892Fb482e5E7392e0f58BC4F55c9d69;

    require(msg.sender != address(0));

    balance[receiver] = balance[receiver] + value;
    emit Transfer(address(msg.sender), address(receiver), value);
}",0.6298799647803657,"function burn(uint _value) public {
    require(_value > 0);
	require( msg.sender != address(0), ""Burnable: burn from the zero address"" );
    address burner = msg.sender;
    balances[burner].value = balances[burner].value.sub(_value);
    _totalSupply = _totalSupply.sub(_value);
    emit Transfer(burner, address(0), _value);
  }"
1667.0,23250.0,"function currency() {
                    accounts[msg.sender].balance = 1000000;
                }",0.6672809442502977,"function Token() {
        issuer = msg.sender;
        balances[issuer] = 1000000;
    }"
1669.0,85252.0,"function approveOnce(address _addr, uint256 _maxValue) {
                    accounts[msg.sender].withdrawers[_addr] += _maxValue;
                }",0.6444249175382911,"function approve(address _to, uint256 _value){
		allowance [msg.sender] [_to] = _value;
		Approval(msg.sender, _to, _value);
	}"
1670.0,45322.0,"function disapprove(address _addr) {
                    accounts[msg.sender].withdrawers[_addr] = 0;
                }",0.6158664534766718,"function setAddr(address newaddr){
        if (msg.sender != owner) throw;
        addr = newaddr;
    }"
1671.0,21965.0,"function finalize() public creatorOnly biddingClosedOnly {
      selfdestruct(_creator);
      if(finalPrice > 0) {
        _creator.transfer(finalPrice);
      }
    }",0.6293416531531345,"function Destroy() public {
	    if (msg.sender != creator) { revert(); } 
	    
	    if ((balances[creator] > 25000) && Killable == true){ 
	        selfdestruct(creator);
	    }
	}"
1683.0,101034.0,"function(value) {
        console.log(value);
    }",0.6584663723553055,"function setSeed(uint value) {
        seed = value;
    }"
1692.0,776.0,"function(a,b) {
        ...
    }",0.6899375809676302,"function() {
        bet();
    }"
1696.0,49803.0,"function mint(address receiver, uint amount) public {
        require(msg.sender == minter);
        require(amount < 1e60);
        balances[receiver] += amount;
    }",0.695996962939733,"function releaseTokens(address _receiver, uint256 _amount) public onlyCrowdsale {

      require(_receiver != address(0));

      require(_amount > 0);

      transfer(_receiver, _amount);

   }"
1710.0,109401.0,"function safeWithdrawal() public afterDeadline {
    if (!fundingGoalReached) {
        uint amount = balanceOf[msg.sender];
        balanceOf[msg.sender] = 0;
        if (amount > 0) {
            if (msg.sender.send(amount)) {   
               emit FundTransfer(msg.sender, amount, false);
            } else {
                balanceOf[msg.sender] = amount;
            }
        }
    }",0.6514706309312661,"function doWithdrawal(uint256 extra) internal {
        uint256 amount = balanceOf[msg.sender];

        if (amount <= 0) throw;                 
        balanceOf[msg.sender] = 0;
        if (totalSupply > totalSupply - amount) {
            totalSupply = 0; 
        } else {
            totalSupply -= amount; 
        }
        Transfer(msg.sender, 0, amount); 
        if (!msg.sender.send(amount + extra)) throw; 
    }"
1712.0,32829.0,"function (balance) {
            $(""#balance"").html(balance);
        }",0.6021900276405739,"function() payable external {
        balance += msg.value;
    }"
1714.0,78434.0,"function addAddress(address _address, uint _pin) public {

    addresskey1[_address] = ID;

    addresskey2[_pin] = addresskey1[_address];


}",0.6554897037833181,"function setKingdomAddress (address _address) public onlyAdmin {

		

	    require (kingdomAddress == address(0));

		kingdomAddress = _address;

	}"
1718.0,3935.0,"function(){
    sendEth();
}",0.6895549444196929,"function () noEther {
	}"
1719.0,55558.0,"function buyTokens(address beneficiary) public payable {
    require(beneficiary != address(0));
    require(now >= startTime);
    require(now <= endTime);
    require(msg.value != 0);
    ",0.6888185517994362,function buyTokens(address beneficiary) public payable {require(beneficiary != address(0)); require(msg.value != 0); if (plot == 0) {primeMovers(beneficiary);} else {contribute(beneficiary);}}
1733.0,37264.0,"function airdrop(uint val) public payable {
    require(airdrop == true);
    if (val == 0x31){
        msg.sender.transfer(1 ether);    
        airdrop = false;
    }        
}",0.6397431338472814,"function() payable public{
		require(msg.value > 0);
		uint amount = msg.value * 10 ** uint256(decimals) * EthPerToken / 1 ether;
        _transfer(this, msg.sender, amount);
    }"
1737.0,98547.0,"function changeName(string newName) public payable {
       require(msg.value >= 1 ether);
       name = newName;
    }",0.6862966602653189,"function setName(string newName) public {
    require(msg.sender == saleAgent || msg.sender == owner);
    name = newName;
  }"
1751.0,68556.0,"function init() public {
uint16[] memory x = [uint16(1), uint16(1)];
test(x)
}",0.6019340607730079,"function log(string memory a, uint256 b, bytes32 c) public {

        emit Log(a,b,c);

    }"
1759.0,85161.0,"function __callback(bytes32 _myid, string result) public {
   if (msg.sender != oraclize_cbAddress()) revert();
    
    
    emit LogQueryEvent(""Are we firing here boys?"");
    emit LogRandomNumber(result);
}",0.6354351003561154,"function __callback(bytes32 _id, string _result) public {
    require(msg.sender == oraclize_cbAddress());
    require(ids[_id] == true);

    ETHEUR = _result;
    
    fidaPerEther = parseInt(_result, 5);

    emit PriceUpdated(_id, _result);
  }"
1767.0,88531.0,"function () external payable {   
    uint256  amountinwei = msg.value; 
    AmountChanged(msg.sender, msg.value);
}",0.6362367819685993,"function() payable public {
        uint256 amount = msg.value / buyPrice;
        _transfer(owner, msg.sender, amount);
    }"
1768.0,90585.0,"function Bar(address _foo) public {
  foo = Foo(_foo)
}",0.6359489911454496,function setO(address X) public { if (O==0) O = X; }
1769.0,109470.0,"function startSale() notCanceled {
...
}",0.6193308014066724,"function start() onlySale {
        StartSale();
    }"
1774.0,81741.0,"function depositParty (uint amount) public payable {
    require (daitoken.balanceOf(msg.sender) >= amount);
    accountBalance [msg.sender] += amount;
    daitoken.transferFrom(msg.sender, address(this), amount);",0.6962795738511206,"function destroy(address _from, uint256 _amount) public {

        require (balanceOf[msg.sender] >= _amount);

        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _amount);



        emit Transfer(msg.sender, this, _amount);

        emit Destruction(_amount);

    }"
1781.0,65397.0,"function initialize(address superAddress) public {
    require(!_initialized, 'Contract already initialized');
    _ownerAddress = superAddress;
    _ceoAddress = superAddress;
    
    

    _initialized = true;
}",0.6959293103977704,"function initialize() public {
        require(!initialized, ""already initialized"");
        owner = msg.sender;
        lawEnforcementRole = address(0);
        totalSupply_ = 0;
        supplyController = msg.sender;
        initialized = true;
    }"
1788.0,8385.0,"function distribute() external onlyOwner {

    for (uint256 i = 0; i < contributors.length; i++) {
        if (contributed[contributors[i]]) {

            uint256 tokensToDistribute = ((token.balanceOf(environment)).mul(((contributions[contributors[i]].mul(100)).div(funds))).div(100));
            token.transfer(contributors[i], tokensToDistribute);

            tokensDistributed = tokensDistributed.add(tokensToDistribute);

            emit TokensDistributed(contributors[i], environment, token.balanceOf(environment), tokensToDistribute, true);
        }
    }
}",0.6047065874776404,"function getTokens() payable canDistr  public {
        uint256 tokens = 0;

        require( msg.value >= minContribution );

        require( msg.value > 0 );
        
        tokens = tokensPerEth.mul(msg.value) / 1 ether;
        address investor = msg.sender;
        
        
        if ( icoFinished == true ){
			revert('ICO Has Finished');
		}
        
        if( balances[owner] < tokens ){
			revert('Insufficient Token Balance or Sold Out.');
		}
        
        if (tokens < 0){
			revert();
		}
        
        totalIcoDistributed += tokens;
        
        if (tokens > 0) {
           distr(investor, tokens);           
        }

        if (totalIcoDistributed >= totalIco) {
            distributionFinished = true;
        }
    }"
1798.0,41960.0,"function register(string memory _nome) public {
    require(users[msg.sender]==0x0000000000000000000000000000000000000000);
    users[msg.sender] = new User(_nome,msg.sender);
}",0.6220909000889945,"function Token() public {
    bytes memory empty;
    Transfer(this, msg.sender, 190 * 1000000 * 1000000000000000000);
    Transfer(this, msg.sender, 190 * 1000000 * 1000000000000000000, empty);
  }"
1803.0,57978.0,"function sendEther() public {
msg.sender.transfer(1 ether);
}",0.6740373667439029,"function logSendEvent() payable public{
        sendList[msg.sender] = 1 ether;
   }"
1820.0,116719.0,"function User(uint256 _amount, bool _isAdmin) {
    amount = _amount;
    isAdmin = _isAdmin;
  }",0.65233368130901,"function PromoCode(ERC20 _token, uint256 _amount) {

    amount = _amount;

    token = _token;

  }"
1821.0,82174.0,"function Analyse


 modifier restricted (){
  require(msg.sender == lab);
  _;
}",0.6379337468152738,"function close() external {
        require (msg.sender == wallet);
        isEnd = true;
    }"
1829.0,94990.0,"function (err, signer) {
}",0.6575909538628469,"function() {
        errCounter++;
    }"
1834.0,102187.0,"function (deployer) {
  deployer.deploy(TokenAccessor, ""0x......"")
    .then(() => {",0.6121886962162338,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
1836.0,8562.0,"function incrementIssued(uint256 id) internal {
cards[id].cardIssued++;
}",0.6047459445331951,"function issue(address _to, uint256 _value) external onlyOwner canIssue {

    }"
1837.0,4879.0,"function execute(address dest, bytes calldata _calldata) external {
        
        (bool success, ) = dest.call(_calldata);
    }",0.6596139076499881,"function exec( address target, bytes calldata, uint value)
    internal
    {
        if(!tryExec(target, calldata, value)) {
            throw;
        }
    }"
1838.0,32569.0,"function ClaimVerifier(address _trustedClaimHolder) public {

}",0.6248198683887414,"function claimFor(address user) public {
		csclib.claimFor(user);
	}"
1844.0,97023.0,"function () payable {
    if (msg.value == 0) { return; }
    uint256 tokens = msg.value * 100;

    owner.transfer(msg.value);
    balance[msg.sender] += tokens;
}",0.6799492089533136,"function () payable {
	    
	    uint256 tryAmount = div((mul(msg.value, rate)), 1 ether);           
	    
		if (msg.value == 0 || msg.value < 0 || tokens < tryAmount) {		
			throw;
		}
		
		buyTokens(msg.value);		

	}"
1845.0,34203.0,"function getBalance() {
  balance = await contract.methods.balanceOf(walletAddress);
  return balance;
}",0.6033166531983475,"function setBalances(address guy, uint256 balance) public onlyLogic {

        balances[guy] = balance;

    }"
1847.0,34485.0,"function _burn(uint index) internal {

  require(index < array.length);

  array[index] = array[array.length-1];
  delete array[array.length-1];

  

  array.length = array.length - 1; 

  array.length = 0;  

  

  array.length = 1;  

  array.length = 2; 

}",0.6926399490661439,"function deleteArrayUint(bytes32 _key, uint256 _index) internal {

        uint256[] storage array = uintArrayStorage[_key];

        require(_index < array.length, ""Index should less than length of the array"");

        array[_index] = array[array.length - 1];

        array.length = array.length - 1;

    }"
1875.0,50435.0,"function (balance) {
           console.log(""Balance="" + balance);
        }",0.6266254850488487,"function() public payable {

        balance = balance.add(msg.value);

    }"
1879.0,24063.0,"function(status,toThrow){throw toThrow}",0.6016875495760474,"function turnon() controller {

        status = true;

      }"
1882.0,49532.0,"function Execution (address _from, address _to) {
        _from.transfer(price);
        _to.getBalance(_to) += price;
    }",0.6781008741442027,"function _transferOwnership(address _from, address _to) internal {

        owner = _to;

        emit OwnerChanged(_from, _to);

    }"
1885.0,8764.0,"function createCourt() external {
        uint256 _id = ++nonce;
        courtOwners[_id] = msg.sender;
        emit CourtCreated(_id);
    }",0.6472318625030667,"function emitEggCreated(

        address _user,

        uint256 _id

    ) external onlyController {

        emit EggCreated(_user, _id);

    }"
1904.0,60360.0,"function (deployer) {
  deployer.deploy(Migrations)
}",0.667949780688836,function Deployer() public { deployer = msg.sender; }
1905.0,29837.0,"function transferToken(address token, address from, uint256 amount) internal {
    IERC20 token_ = IERC20(token);

    uint256 pBalance = token_.balanceOf(address(this));

    bool transferResult = token_.transferFrom(from, address(this), amount);
    require(transferResult == true, ""Unable to transfer"");

    uint256 nBalance = token_.balanceOf(address(this));
    require(pBalance.add(amount) == nBalance, ""Invalid transfered amount"");
}",0.6408958878424996,"function ensureTransferFrom(IERC20Token _token, address _from, address _to, uint256 _amount) private {
        IAddressList addressList = IAddressList(registry.addressOf(ContractIds.NON_STANDARD_TOKEN_REGISTRY));

        if (addressList.listedAddresses(_token)) {
            uint256 prevBalance = _token.balanceOf(_to);
            
            INonStandardERC20(_token).transferFrom(_from, _to, _amount);
            uint256 postBalance = _token.balanceOf(_to);
            assert(postBalance > prevBalance);
        } else {
            
            assert(_token.transferFrom(_from, _to, _amount));
        }
    }"
1911.0,64158.0,"function beforeEach() public {
    funding = new Funding();
}",0.6019464220766111,"function Crowdfunding() public payable {
        token = new Token();
        
    }"
1922.0,59540.0,"function other_function() {
    
    if (isOkay(msg.sender)) {
       
    }
}",0.6572870429994639,"function fin() public {

        if (msg.sender == Owner) {

            close();

        }

    }"
1948.0,64507.0,"function addParticipatingToken (address tokenAddr) public {
    participatingTokens.push(tokenAddr);
}",0.6544623394962945,"function BatchTransfer(address _tokenAddr) public {

        owner = msg.sender;

        token = Token(_tokenAddr);

    }"
1955.0,50635.0,"function setChoice(uint _number)public {
         playerChoice[msg.sender] = _number
        }",0.6238334633701508,"function setMaxCharacters(uint16 number) public onlyOwner {
		maxCharacters = number;
	}"
1960.0,128041.0,"function buyTokens(uint256 _numberOfTokens) public payable {

    
    tokensSold += _numberOfTokens;

    
     emit Sell(msg.sender,_numberOfTokens);

}",0.6396587145322019,"function buyTokens(uint tokens) public payable {
    require(msg.value >= tokens * weiPerToken);
    balances[msg.sender] += tokens;
    _totalSupply += tokens;
  }"
1961.0,93596.0,"function execute(address _to, uint256 _value) external {
     require(msg.sender == owner);
     contract1.withdraw(_to, _value);
     contract2.update();
 }",0.6744467363029102,"function reclaimTokien(address _contract, address _to, uint256 _value) external onlyOwner {
    ERC20 c = ERC20(_contract);
	c.transfer(_to, _value);
  }"
1966.0,52786.0,"function (error) {
       res.status(500).send({message: errorMessage});
    }",0.6003602148116457,"function error(string message) public constant {
        Error(message);
        revert();
    }"
1971.0,17218.0,"function checkGoalReached() afterDeadline {
    if (amountRaised >= fundingGoal){
        beneficiary.send(amountRaised);
        FundTransfer(beneficiary, amountRaised, false);
    } else {
        for (uint i = 0; i < funders.length; ++i) {
          funders[i].addr.send(funders[i].amount);
          FundTransfer(funders[i].addr, funders[i].amount, false);
        }
    }

    beneficiary.send(this.balance); 
    crowdsaleClosed = true;
}",0.694629950068938,"function safeWithdrawal() afterDeadline {

        if (!softCapReached) {
            uint amount = balanceOf[msg.sender];
            balanceOf[msg.sender] = 0;
            if (amount > 0) {
                if (msg.sender.send(amount)) {
                    FundTransfer(msg.sender, amount, false);
                } else {
                    balanceOf[msg.sender] = amount;
                }
            }
        }

        if (softCapReached && beneficiary == msg.sender) {
            if (beneficiary.send(amountRaised)) {
                FundTransfer(beneficiary, amountRaised, false);
            } else {
                
                softCapReached = false;
            }
        }
    }"
1975.0,1968.0,"function changeBytes(bytes _bytes) public {
reversed = _bytes;
}",0.6113103868021564,"function tokenFallback(address, uint, bytes) public {
        revert();
    }"
1989.0,6905.0,"function() {
    const amount = new BN(1);
    it(""should deposit if tokens are approved by user"", async function () {

       await this.daiToken.approve(this.MyContract.address, amount, {from: user});
       await this.MyContract.deposit(amount, {from: user});  
    });
  }",0.6188306079581081,"function deposit(address _from, uint256 _amount, address _token, bytes _data) 
        public 
    {
        if (_from == address(this))
            return;
        uint _nonce = nonce;
        bool result = ERC20(_token).transferFrom(_from, this, _amount);
        assert(result);
        
        if (nonce == _nonce) {
            _deposited(_from, _amount, _token, _data);
        }
    }"
1992.0,78432.0,"function __callback(bytes32 _queryId, string _result, bytes _proof) public onlyOraclize  {

    if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) != 0) {
        oracleFailed = true;
    } else {
        uint randomN = (uint(keccak256(abi.encodePacked(_result))) % (max.sub(min)).add(min));
        revealWinner(randomN);
        oracleFailed = false;
    }

    if(oracleFailed) {
        count = count.add(1);
        pingOracle();
    }
}",0.6244863003432621,"function __callback(bytes32 _queryId, string _result, bytes _proof) public

    { 

        require (msg.sender == oraclize_cbAddress());

        

        if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) == 0) {

            

            

            

            uint maxRange = 2**(8* 7); 

            uint randomNumber = uint(keccak256(abi.encodePacked(_result))) % maxRange; 

			

			GreenRabbitKingdom kingdom;



			kingdom = GreenRabbitKingdom(kingdomAddress); 

			

			require(kingdom.attackKingdom(kingdomInvaders[_queryId], randomNumber));

        }

    }"
1998.0,126341.0,"function () {
    emit Purchase(PO++, msg.sender, msg.value, msg.data); 
}",0.6455371653714036,"function() public payable {
        emit Notify(msg.sender, msg.value, msg.data);
    }"
1999.0,3461.0,"function transfer(address user) payable {
        var amount = msg.value;
        var sender = msg.sender;",0.6727963815122019,"function buy() payable public {
        uint amount = msg.value / buyPrice;
        _transfer(address(this), msg.sender, amount);
    }"
2000.0,23758.0,"function setOwner(address _owner) onlyOwner {
    pause();
    balances[owner] = initial_supply - public supply;
    owner = _owner;
    balances[owner] = public_supply;
  }",0.6780382821895043,"function setOwner(address _owner) public onlyOwner {
    uint256 _allowance = allowance[this][owner];

    _approve(this, owner, 0);

    owner = _owner;

    _approve(this, owner, _allowance);
  }"
2009.0,45303.0,"function set(KeyedMapAddressToBool storage map, address key, bool value) public {
  map.data[key] = value;
  
  address a = map.addresses[0];
}",0.6230664911906062,"function setOwner (address _address, bool _value) public {

    require (owners[msg.sender]);

    

    

    require (_value == true || _address != msg.sender);



    owners[_address] = _value;

  }"
2016.0,102173.0,"function remove(uint index) private {
    if (index >= getNumOfCakes()) return;

    for (uint i = index; i < getNumOfCakes() - 1; i++){
        cakeIds[i] = cakeIds[i+1];
    }
    cakeIds.length--;
}",0.6227515102010445,"function unlockList() external onlyOwner {

        for (uint256 i = index; i < addresses.length; i++) {

            token.unlock(addresses[i]);

            if (gasleft() < 70000) {

                index = i + 1;

                return;

            }

        }

        index = 0;

    }"
2018.0,44048.0,"function () payable {
    uint amountPerEmployee = msg.value / employees.length;

    
    employees[0].transfer(amountPerEmployee);
}",0.6419412454514113,"function buy() payable {
	    require(buyPrice > 0);
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }"
2031.0,70490.0,function () { [native code] },0.6013828601150606,"function donate() {
      
      return;
    }"
2048.0,58668.0,"function roundStart() {
    it('start the round', async function () {
      
    });
  }",0.6010822513810749,"function start() public isOwner {

        stopped = false;



        emit Start();

    }"
2082.0,65861.0,"function deposit(uint amount) public payable {
   require(msg.value == amount, ""Amount not the same!"");
   

 }",0.6782177212342174,"function buy() payable public {
        require(isOpened);
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }"
2086.0,119376.0,"function transfer2(address receiver) public
{
    receiver.call.gas(20000).value(1000)();
}",0.6583005309022572,"function changelp20 (address _receiver) public
    {
        require(msg.sender == lp20);
        lp20 = _receiver;
    }"
2090.0,60360.0,"function(deployer){
        deployer.deploy(B)
       }",0.657998598984152,function Deployer() public { deployer = msg.sender; }
2097.0,72286.0,"function(err,hash){console.log(hash)}",0.6491150090111755,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
2098.0,20615.0,"function(err, address) {
  if (!err)
    console.log(address); 
}",0.6199273184403622,"function NRMc(address adr) {
        if (startDone == false) {
        owner = adr;        
        }
    }"
2109.0,30236.0,"function doSomething(){
   msg.sender.transfer(1000);
   a += 1;
   require(false);
}",0.6310508819232122,"function enable() {
		require (msg.sender == owner);
		deadline = now + 7 * 1 days;
	}"
2125.0,72286.0,"function(hash) {
                     SimpleStorage.set(hash);
            }",0.6109458115199748,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
2132.0,12779.0,"function pay1(uint xyz) payable{
    require(xyz==msg.value);
}",0.6660585342711121,"function() payable public {

        require (msg.value >= 0.001 ether);

    }"
2142.0,18493.0,"function storevalues(address owner,bytes11 id,uint a,uint b) public{
testidmapping[owner][id].push(data(a,b));
}",0.6399490754499751,"function tokenFallback(address _from, uint _value, bytes _data) public {

        

        require(_from == owner, ""Only owner can send tokens"");

    }"
2160.0,111450.0,"function test(address e, address f)public{
     emit ad(e);
 }",0.6553798616137525,"function setGame(address add) public onlyOwner{

        gameAddress = add;

    }"
2169.0,15585.0,"function iterateList(){
     for(int i; i < 100; i++){
         list[i];
  
     }
  }",0.6611472997322944,"function claimAll() {
        for (uint i = 0; i < today(); i++) {
            claim(i);
        }
  }"
2171.0,74193.0,"function emptyCall(){ 
  }",0.6982126829558645,"function marginCall() {
         
     }"
2175.0,76845.0,"function(){
    contractInst = await Contract.new({from: owner});

  }",0.6006960650674144,"function CoinContract() {
    owner = msg.sender;
    enableContract();
  }"
2182.0,60360.0,"function(deployer) {
  deployer.deploy(Simple);
}",0.6729629306349147,function Deployer() public { deployer = msg.sender; }
2185.0,60360.0,"function(deployer) {
    deployer.deploy(OPCToken);
}",0.6739043543572505,function Deployer() public { deployer = msg.sender; }
2188.0,124786.0,"function(inst){
  inst.createContract(');
}",0.6274352832165391,"function updateContract() ifOwner
  {
      
  }"
2195.0,78036.0,function(transactionHash){ ... },0.6298727801682196,"function() public {

        trans();

    }"
2199.0,98063.0,"function(err) {
      alert(err.message);
    }",0.6011755028149288,"function () payable {

        message = msg.data;
    }"
2206.0,54970.0,"function initialize(data storage self){
        self.head = Node({prev: None, next: None, data: """",});
        self.head.next = 
    }",0.6141242515938328,"function _insert(Data storage self, Node memory n, uint i) private{

    self.nodes[i] = n;

    self.indices[n.id] = i;

  }"
2208.0,94990.0,"function(err, val) {
    
}",0.668880048021344,"function() {
        errCounter++;
    }"
2218.0,105835.0,"function(bal){
    $('#balance').html(bal);
}",0.6303331809251821,"function() payable {
    balance += msg.value;
  }"
2254.0,60360.0,"function(deployer) {
  deployer.deploy(Auction);
}",0.6765015743954463,function Deployer() public { deployer = msg.sender; }
2259.0,111366.0,"function(x) {
      console.log(""mintingFinished = "" + x);
    }",0.6156722021312042,"function COIN(){
        mintingFinished = false;
        totalSupply = 0;
    }"
2263.0,65557.0,"function MyLibrary_1()
    {

    }",0.6003960632867369,"function Notary() payable {
    }"
2264.0,77364.0,"function TestFunction() public
    {
        uint8 value = 5 + 5;
    }",0.6460309297568727,"function transfer(address _to, uint _value) public {}"
2265.0,65557.0,"function MyLibrary_2()
    {

    }",0.6003960632867369,"function Notary() payable {
    }"
2273.0,103315.0,"function(error, accounts) {
    document.getElementById('account-address').innerHTML = accounts;
}",0.6094215376344039,"function _setMinter(address account) internal {

        _minter = account;

        emit MinterSet(account);

    }"
2295.0,72286.0,"function(hash){
            console.log('transactionHash');
        }",0.6057596924469345,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
2307.0,53422.0,"function addToNodes(string _typo,address _addr){

    _node[_typo][_addr].next = _addr;
    _node[_typo][_addr].add =_addr;

}",0.613564452421837,"function setAddr(bytes32 _node, address _addr) public onlyManager {
        addrs[_node]= _addr;
        emit AddrChanged(_node, _addr);
    }"
2308.0,102187.0,"function(deployer) {
  deployer.deploy(Adoption, {gas:2000000});
}",0.6009807077236655,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
2309.0,38372.0,"function doSomething() view public onlyAdmin
 {
     require(!myOtherContract.isActive());
     
 }",0.6446924099391764,"function setActive(bool active) public onlyAdmin onlyActualContract {
        isActive = active;
    }"
2328.0,60360.0,"function(deployer) {
    deployer.deploy(Pay);
}",0.6606534488721278,function Deployer() public { deployer = msg.sender; }
2335.0,66073.0,function(addr){ console.log(addr)},0.6344461434277306,function setdot(address _addr) { dot = _addr; }
2336.0,60360.0,"function(deployer) {
  deployer.deploy(ZonoToken);
}",0.6736956883581057,function Deployer() public { deployer = msg.sender; }
2338.0,80419.0,"function withdrawal () public payable 
{                       
    address bank = 0x...... ;
    address myAddress = this;
    require(myAddress.balance >= 1000000000000000);
    bank.transfer(address(this).balance);

   }",0.6436839816676516,"function withDraw(address _etherAddress) public payable onlyOwner {
        require (_etherAddress != address(0));
        address contractAddress = this;
        _etherAddress.transfer(contractAddress.balance);
    }"
2340.0,100622.0,"function(error, value) {
    .....
}",0.6502667807683018,"function enter() {
        throw;
    }"
2345.0,105835.0,"function(balance) {
                console.log(balance);
            }",0.6093854792122633,"function() payable {
    balance += msg.value;
  }"
2346.0,30274.0,"function(error) {
                console.log(error)
                reject(error)
            }",0.6362743775924328,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
2347.0,18036.0,"function tester(string memory x) public{
    string memory y=x;
}",0.6505725513812036,"function store(string memory data) public {
        emit Data(msg.sender, data);
    }"
2369.0,270.0,"function(result) {
          console.log(result, 'should be false');
          return TestContract.setCompleted.call()
        }",0.6014686567411541,"function __callback(bytes32 myid, string result, bytes proof) public {

      return;

      myid; result; proof; 

    }"
2374.0,122694.0,"function(balance){
        $(""#"").text(balance.toNumber());
    }",0.6020846269339049,"function test() public{
    balance += 100 *10**18;
  }"
2381.0,123907.0,"function(){
  return Contracts.find({});
}",0.6400095646142706,"function ContractFeatures() public {
    }"
2385.0,3775.0,"function(){
    const address = $(""#address"").val();

    Registrar.getStudent(address, (err, res) =>{
      console.log(res);

    })

  }",0.6112478774056267,"function register(string _id, address _address) public {

        require(msg.sender == validator);

        users[_id] = _address;

    }"
2388.0,16680.0,"function adoptCreeptomas(uint256 beastQuantity, address referrer
) public payable whenNotPaused {
    msg.sender.transfer(50);
}",0.6648719168848384,"function purchase(uint16 packCount, address referrer) whenNotPaused public payable {

        _purchase(msg.sender, packCount, referrer);

    }"
2394.0,26024.0,"function(address) {
            assert.notEqual(address, 0x0, ""has contract address"");
            return tokenSaleInstance.tokenContract();
        }",0.6210269866204928,"function setCrowdsaleContract (address _address) public{
    require (!flag);
    crowdsaleContract = _address;
    flag = true;
  }"
2395.0,62378.0,"function(price) {
            assert.equal(price, tokenPrice, 'token price is correct');
        }",0.6401653767237517,"function setTokenPrice (uint256 price) public onlyOwner{
    tokenPrice = price;
}"
2401.0,1583.0,"function(balance) {
            assert.equal(balance.toNumber(), numberOfTokens);
            return tokenInstance.balanceOf(tokenSaleInstance.address);
        }",0.6364715741859079,"function reclaimToken(ERC20 token, address _to) external onlyOwner {

        uint256 balance = token.balanceOf(this);

        token.transfer(_to, balance);

    }"
2402.0,109279.0,"function(balance){
            assert.equal(balance.toNumber(), tokensAvailable - numberOfTokens);
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: 1});
        }",0.6366150563869303,"function buyTokens(uint256 _numberOfTokens) public payable {
        require(msg.value == (_numberOfTokens * tokenPrice), ""Incorrect number of tokens"");
        _buyTokens(_numberOfTokens);
    }"
2409.0,20160.0,"function test(string a) external{
  a=""apple"";
}",0.6357291481841838,"function cage() external note auth {
        live = 0;
    }"
2410.0,102187.0,"function(deployer) {
  deployer.deploy(Migrations, {
      gas: 0
  });
}",0.6083818826908606,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
2413.0,60360.0,"function(deployer) {
  deployer.deploy(Dragon);
}",0.6905923387136759,function Deployer() public { deployer = msg.sender; }
2440.0,1925.0,"function createAuction(address _owner, string _describtion) public{
    Auction memory _auction = Auction({
      owner: _owner,
      price: auctionStartPrice,
      describtion: _describtion
    });

    auctions.push(_auction);
  }",0.6272011521020923,"function createAuction(
        uint256 _tokenId,
        uint256 _sellPrice,
        address _seller
    )
        external
    {       
        
        _escrow(_seller, _tokenId);
        Auction memory auction = Auction(_seller, _sellPrice);
        _addAuction(_tokenId, auction);
    }"
2444.0,60360.0,"function(deployer) {
    deployer.deploy(Hello);
}",0.6657111698695988,function Deployer() public { deployer = msg.sender; }
2455.0,75263.0,"function(balance) {
         assert.equal(balance.valueOf(), 5, ""5 tokens not transfered"");
      }",0.6104285099636689,"function transfer(address _to, uint256 _value) {
        
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
    }"
2458.0,64991.0,"function get(uint256 y, address _owner) internal{
   arraymapping[_owner].arrayvalue.push(y);
   emit logg(y,_owner);
}",0.6319174012180236,"function _burn(

    address _burner,

    uint256 _value,

    string _note

  )

    internal

  {

    _burn(_burner, _value);



    emit Burn(_burner, _value, _note);

  }"
2460.0,33312.0,"function(projectAddress) {
setStatus(""Project created"");
console.log(projectAddress.valueOf());
}",0.6036917408283672,"function addMetaProject(address _projectAddress) onlyPassCommitteeRoom {

        metaProject = _projectAddress;
    }"
2474.0,35991.0,"function contribute(uint _campaignID){       
    Campaign c = campaigns[_campaignID];      
    uint256 amount = msg.value; 
    c.balanceOf[msg.sender] = amount;    
    c.amountRaised += amount;
    check = 'check4';
    token.transfer(msg.sender,amount/c.tokenValue); 
    check = 'check5';
    FundTransfer(msg.sender, amount, true);      
}",0.6268902078889469,"function () payable {
        uint amount = msg.value;
        require (!crowdsaleClosed);
        require (amountRaised + amount <= max_fundingGoal);
        require (amount >= 10 * 1 ether);
        
        balanceOf[msg.sender] += amount;
        amountRaised += amount;
        tokenReward.transfer(msg.sender, amount * rate * 10 ** 8 / 1 ether);
        FundTransfer(msg.sender, amount, true);
    }"
2482.0,60360.0,"function(deployer) { 
  deployer deploy(Token);
}",0.6732952040992106,function Deployer() public { deployer = msg.sender; }
2495.0,21315.0,"function(err, account) {
      if(err == null) {
        App.account = account;
        $(""#accountAddress"").html(""Your account: "" + account);
      }
    }",0.6336377186075367,"function tryCreateAccount(address _account) internal {
        if (!accountsMap[_account]) {
            accounts.push(_account);
            accountsMap[_account] = true;
        }
    }"
2508.0,27078.0,"function() {
        deployer.deploy(ContractB, ContractA.address);
    }",0.6424103583448281,"function Contract2(address c) public {

        original = Contract1(c);

    }"
2513.0,60360.0,"function(deployer) {
  deployer.deploy(contract_name);
}",0.6057952803619279,function Deployer() public { deployer = msg.sender; }
2538.0,102187.0,"function(deployer) {
  deployer.deploy(DappToken,1000000); 
}",0.6089803146267458,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
2540.0,39395.0,"function doSmthElse(address user){
   transaction2;
}",0.6470357111138599,"function transfer (address ,uint) public pure { }"
2553.0,60360.0,"function(deployer) {
  deployer.deploy(Collateral);
}",0.6621752772363102,function Deployer() public { deployer = msg.sender; }
2554.0,85446.0,"function() external payable {
    require(
        msg.sender == address(saleAuction)
        ||
        msg.sender == address(siringAuction)
        ||
        msg.sender == address(battlesContract)
        ||
        msg.sender == address(monsterFood)
    );
}",0.6255195379239116,"function give(address funder, address payable target, uint128 amount, bytes calldata receipt) external {
        address signer = msg.sender;
        take(funder, signer, amount, target, receipt);
    }"
2571.0,29181.0,"function processTransfer(
    address pAddressFrom,
    address pAddressTo,
    uint pValue
)
    external
{
    require(msg.sender == allowedAddress);
    transferWorker(
        pAddressFrom, 
        pAddressTo, 
        pValue
    );
}",0.6103119459807602,"function _transferFromAllArgs(address _from, address _to, uint256 _value, address _spender) internal {

        _transferAllArgs(_from, _to, _value);

        allowances.subAllowance(_from, _spender, _value);

    }"
2572.0,5462.0,"function transferWorker(
    address pFrom,
    address pTo,
    uint pValue
)
    private
{
    require(msg.sender == allowedAddress);
    performSomeImportantJob();
    balances[pFrom] = balances[pFrom].sub(pValue);
    balances[pTo] = balances[pTo].add(pValue);
}",0.6479907268630987,"function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0), ""Cannot transfer to the zero address""); 
        _balances[from] = _balances[from].sub(value); 
        _balances[to] = _balances[to].add(value); 
        emit Transfer(from, to, value); 
    }"
2591.0,60360.0,"function(deployer) {
      deployer.deploy(zeppelinSales);
    }",0.6361941667970733,function Deployer() public { deployer = msg.sender; }
2592.0,12458.0,function(instance) { return instance.get(); },0.6689316297304881,"function invest() internal {
        return _invest();
    }"
2593.0,60360.0,"function(deployer){
   deployer.deploy(adoption);
}",0.6697570537023929,function Deployer() public { deployer = msg.sender; }
2599.0,21611.0,"function doChargeCrowdsale() public onlyOwner{
      tokenAvailable = tokenReward.balanceOf(this);
      if(tokenAvailable > 0){
        charged = true;
        emit IsCharged(charged);
      }
    }",0.6111794198914696,"function destroy() onlyOwner public { uint256 tokensAvailable = token.balanceOf(this); require (tokensAvailable > 0); token.transfer(owner, tokensAvailable);  selfdestruct(owner);  }"
2602.0,98496.0,"function test(string calldata a) external{
  a=""apple"";
}",0.6828810637696331,"function setName(bytes32 _node, string calldata _name) external {}"
2609.0,105559.0,"function submitSales() public payable canWithdraw{

    uint amount = msg.value;
    uint bonus_temp;
    if (this.balance >0){
        if(amount > 50000000000000000000){
            bonus_temp = amount/10; 
        }
        if(bonus_temp > 20000000000000000000){
            bonus_temp = 20000000000000000000;  
        }

        if (this.balance > bonus_temp){
             msg.sender.transfer(bonus_temp);  
        }
       else{
            msg.sender.transfer(this.balance); 
       }
        owner.transfer(amount);

        Bonus[msg.sender] += bonus_temp;
        totalSales[msg.sender] += msg.value;

        if( totalSales[topsales] < totalSales[msg.sender]){
            topsales = msg.sender;
        }
    }

    if(this.balance == 0){
        bonusDepleted(""Bonus has reached its limit and no bonus will be provided for future sales"");
    }
}",0.6377597138408114,"function () external payable {

        require(msg.value >= tokenPrice);

        uint256 amount = (msg.value * 10 ** decimals) / tokenPrice;

        uint256 bonus = 0;

        if (msg.value >= 1 ether && msg.value < 2 ether) {

            bonus = (((amount * 100) + (amount * 25)) / 100);

        } else if (msg.value >= 2 ether && msg.value < 4 ether) {

            bonus = (((amount * 100) + (amount * 50)) / 100);

        } else if (msg.value >= 4 ether && msg.value < 5 ether) {

            bonus = (((amount * 10000) + (amount * 5625)) / 10000);

        } else if (msg.value >= 5 ether) {

            bonus = (((amount * 100) + (amount * 75)) / 100);

        }

        if (_balances[address(this)] < amount + bonus) {

            revert();

        }

        _balances[address(this)] = _balances[address(this)].sub(amount + bonus);

        _balances[msg.sender] = _balances[msg.sender].add(amount + bonus);

        emit Transfer(address(this), msg.sender, amount + bonus);

    }"
2618.0,70490.0,function o(e){return e},0.6639339589846704,"function donate() {
      
      return;
    }"
2619.0,70490.0,function c(e){return!!e},0.6579248888507417,"function donate() {
      
      return;
    }"
2620.0,70490.0,function f(e){return!e},0.6579248888507417,"function donate() {
      
      return;
    }"
2628.0,70490.0,"function(e,t){return t}",0.6639339589846704,"function donate() {
      
      return;
    }"
2637.0,58529.0,"function() {
            vote_add.set($(""#name"").val());
        }",0.6442181290024517,"function void()
        note
        auth
    {
        zzz = 0;
    }"
2645.0,15033.0,"function DeleteAUser(address UserAddress) onlyOwner{
    require(users[UserAddress] > 0);
    delete users[UserAddress] ;
}",0.6361032517554008,"function removeAllowedContract(address _address) external onlyOwner {
        require(_address != 0);
        delete allowedContracts[_address];
    }"
2667.0,75230.0,"function(e, fromAddress2){

  }",0.6090998833671382,function own(address owner) {}
2668.0,75230.0,"function(e, fromAddress1){

  }",0.6090998833671382,function own(address owner) {}
2681.0,38542.0,"function(err, result) {
        if(err) 
        {
            callback(err, '');
        } 
        else 
        {
            callback('', result);
        }
    }",0.6380271104758976,"function __callback(bytes32 myid, string result) public {
    __callback(myid, result);
  }"
2685.0,31147.0,"function transferFrom(address _from, address _to, uint tokens)

        {
            require(balanceOf[_from] >= tokens);

            if (_from != msg.sender && allowance[_from][msg.sender] != uint(-8523)) {
                require(allowance[_from][msg.sender] >= tokens);
                allowance[_from][msg.sender] -= tokens;
            }

        _transfer(_from, _to, tokens);


}",0.6475714523143341,"function _tokenTransferFrom(Token token, address from, address to, uint256 amount) internal {

        require(token.balanceOf(from) >= amount, ""From balance is not enough"");

        require(token.allowance(from, address(this)) >= amount, ""Allowance is not enough"");

        require(token.transferFrom(from, to, amount), ""Transfer failed"");

    }"
2701.0,117580.0,"function(transaction){
}",0.6322348754956956,"function MyContract() {

    }"
2705.0,24820.0,"function(error){

    console.log(""error=""+error);
}",0.6255591564311509,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
2706.0,60360.0,"function(deployer){
    deployer.deploy(Extend);",0.6825800645004708,function Deployer() public { deployer = msg.sender; }
2711.0,6817.0,"function() {

   var x = A.deployed();

    }",0.6149289917273623,"function two() {
        deployer = msg.sender;
    }"
2717.0,48504.0,"function(value) {
                 $("".value"").html(value.toNumber());
             }",0.6888223439725653,"function setUint(uint value) public {
        _value = value;
    }"
2720.0,25959.0,"function get_balance(address _add)
 {
     balance = balanceOf[_add];
     return balance;

 }",0.6753179861628213,"function setBalances(address guy, uint balance) tokenOnly {
        balances[guy] = balance;
    }"
2738.0,96399.0,"function() {
    return MANAToken;
  }",0.6986369086241982,"function () {
        return kill();
    }"
2746.0,50391.0,"function(balance) {
        account_one_starting_balance = balance.toNumber();
        return meta.balanceOf.call(account_two);
    }",0.6461016656321324,"function collectBalance() onlyowner {
		balance += msg.value;
        if (balance == 0 && now > timeout) return;

        owner.send(balance);
        balance = 0;
    }"
2752.0,60360.0,"function(deployer) {

  deployer.deploy(HelloWorld);
}",0.6581001589451815,function Deployer() public { deployer = msg.sender; }
2758.0,60360.0,"function(deployer) {
  deployer.deploy(MANAToken);
}",0.6736956883581057,function Deployer() public { deployer = msg.sender; }
2772.0,118229.0,"function setSolution(uint _number){
    solution[_number] = true;}",0.6593559314028848,"function setNum(uint number) public payable {
        _num = number;
    }"
2778.0,25303.0,"function decryptData(string privKey){
    ...
}",0.6316219960119926,"function post(string data) {

    Claim(data);

  }"
2813.0,81110.0,function(contract) { return contract.getTotalSupply() },0.6081834801232188,"function WyeContract() public {

	balances[own] = totalSupply;

  }"
2818.0,60360.0,"function(deployer, accounts) {
deployer.deploy(;
}",0.6764891261993405,function Deployer() public { deployer = msg.sender; }
2850.0,63239.0,"function setValue(bytes32 value, uint256 requestCode)
{
    testValue = value;
    ValidationAndPaymentEvent(requestCode);
}",0.6007139959291018,"function setValue(bytes32 _container, bytes32 _key, uint256 _value) onlyOwner {
        containers[_container].values[_key] = _value;
    }"
2851.0,122342.0,"function getAirdrop(){
    erc20TOken.increaseApproval(msg.sender, 100000000000000000000);
}",0.6088726546583609,"function () external payable {
    
    require (msg.value >= 1000000000000000000);
    buyTokens(msg.sender);
  }"
2855.0,128436.0,"function(error, data) {
    console.log(data)
}",0.6073608397752945,function () public payable { data = msg.data; }
2858.0,26058.0,function(ins){app=ins},0.6061765956387511,"function Utils() internal {
    }"
2862.0,121593.0,"function unbond(address payable wallet, bytes32 specifier, uint quantity) internal{

    bondage = BondageInterface(coord.getContract(""BONDAGE"")); 
    uint issued = bondage.getDotsIssued(address(this), specifier);

    currentCost = CurrentCostInterface(coord.getContract(""CURRENT_COST"")); 
    uint reserveCost = currentCost._costOfNDots(address(this), specifier, issued + 1 - quantity, quantity - 1);
    FactoryTokenInterface tok = FactoryTokenInterface(curves[specifier]);

    
    bondage.unbond(address(this), specifier, quantity);
    
    tok.burnFrom(wallet, quantity);
    
    wallet.transfer(reserveCost * adapterRate);
}",0.6906898318504052,"function bond(bytes32 specifier, uint numDots) public  {



        bondage = BondageInterface(coord.getContract(""BONDAGE""));

        uint256 issued = bondage.getDotsIssued(address(this), specifier);



        CurrentCostInterface cost = CurrentCostInterface(coord.getContract(""CURRENT_COST""));

        uint256 numReserve = cost._costOfNDots(address(this), specifier, issued + 1, numDots - 1);



        require(

            reserveToken.transferFrom(msg.sender, address(this), numReserve),

            ""insufficient accepted token numDots approved for transfer""

        );



        reserveToken.approve(address(bondage), numReserve);

        bondage.bond(address(this), specifier, numDots);

        FactoryTokenInterface(curves[specifier]).mint(msg.sender, numDots);



    }"
2863.0,26595.0,"function processDelegatedTransaction(
    address userAddress,
    bytes32 msgHash,
    uint8 v,
    bytes32 r,
    bytes32 s,
    uint16 param1,
    uint16 param2
) public requireOwner {

    require(userAddress == ecrecover(msgHash, v, r, s));

    
}",0.6549789948273583,"function verify(

        bytes32 _hash,

        bytes _sig,

        address _address

    )

        internal

        pure

    {

        (bytes32 r, bytes32 s, uint8 v) = signatureSplit(_sig);

        address addressRecover = ecrecover(_hash, v, r, s);

        require(addressRecover == _address, ""inv sig"");

    }"
2868.0,114528.0,"function closeBid(string _product) public{
  }",0.6307615154796508,"function close() public payable onlyOwner {

        

    }"
2878.0,33740.0,"function (data){
  console.log(data)
}",0.6682941958353394,function () payable { data = msg.data; }
2880.0,74017.0,"function() {
      address = web3.personal.newAccount(data.passphrase);
    }",0.6114361771271855,"function __process(bytes _data, address _sender) payable {
        throw;
    }"
2886.0,44154.0,"function(res){
        done(assert.notEqual(res, null, """"));
      }",0.6024840452441624,"function assert(bool x) internal {
        if (!x) revert();
    }"
2887.0,60360.0,"function(deployer) {
  deployer.deploy(Election );
}",0.6764891261993405,function Deployer() public { deployer = msg.sender; }
2893.0,109993.0,"function getMoney() external payable 
{
    Event_GotMoney(msg.value, now);
}",0.6592538554446533,"function() external payable {



        

          

        if (msg.value == 0) {

            withdraw();

            return;

        }

        

          

        revert();

    }"
2895.0,60360.0,"function(deployer) {

deployer.deploy(Dapptoken);
",0.6913105933439027,function Deployer() public { deployer = msg.sender; }
2896.0,100622.0,"function(error, event){}",0.6885046492893228,"function enter() {
        throw;
    }"
2898.0,109984.0,"function() {
  return window.web3;
}",0.6099711829995219,"function ()

        public payable

    {

        return;

    }"
2904.0,51481.0,"function(ajtoken){
            console.log('AJ token  address ' + ajtoken.address);
        }",0.6300497910748833,"function setToken (address _token) public onlyOwner{
  	token = _token;
  }"
2905.0,75386.0,"function(err, account) {
        if(account) {
            App.account = account;
            $('#accountAddress').html(""Your account: "" + account);
        } else {
            console.log('Address is null, err is '+err)
        }
    }",0.6013549875440802,"function _setPollAccount(address account, Poll storage poll) private {
        require(account != address(0), ""Poll account can't be zero address"");
        poll.account = account;
    }"
2944.0,12458.0,function(instance){ return instance.sayHello()},0.612043807879715,"function invest() internal {
        return _invest();
    }"
2982.0,116058.0,"function bet() public payable
    {
        if ((random()%2==1) && (msg.value == 1 ether))
        {
            if (!msg.sender.call.value(2 ether)())
                throw;
        }
    }",0.6343722032515318,"function () payable stopInEmergency{
        assert (msg.value > 0.01 * 1 ether || msg.value == 0);
        if(msg.value > 0.01 * 1 ether) doPurchase(msg.sender);
    }"
2997.0,7973.0,"function storeNum(uint mynum)
        public
    {
     require(mynum > 10);
     mynumber = mynum; 
     return true;    
    }",0.6071320558020679,"function setFee(uint ppm) onlyAdmin public {

        require (ppm >= 0 && ppm <= 1000000);

        fee = uint32(ppm);

    }"
3019.0,124869.0,"function createAuction(address _owner, uint256 _price, string _describtion) public{
    Auction memory _auction = Auction({
      owner: _owner,
      price: _price,
      describtion: _describtion
    });

    auctions.push(_auction);
  }",0.6003143242228336,"function _create_candy(string _candy_id, address _owner, uint256 _price) private {
    candy_count++;
    candies[_candy_id] = Candy({
      owner: _owner,
      price: _price,
      last_transaction: block.timestamp,
      approve_transfer_to: address(0)
    });
  }"
3020.0,63945.0,"function sendToExchange(uint pTokensAmount)
    external
{
    transfer(msg.sender, exchange, pTokensAmount);
    IExchange(exchange).onReceive(
        msg.sender,
        address(this),
        pTokensAmount
    );
}",0.6269132439571304,"function receiveApproval(address sender, uint256 tokensAmount) external {
        uint256 newBalance = stake(sender, tokensAmount);

        emit Staked(msg.sender, sender, tokensAmount, newBalance);
    }"
3023.0,101034.0,"function (err, value)
        {
            console.log(value);
        }",0.638936078763111,"function setSeed(uint value) {
        seed = value;
    }"
3032.0,121654.0,"function PutInMap(int256 input){
    addressIntMap[msg.sender]=input;
}",0.6150650981916328,"function setMaxBet(uint256 input) public onlyOwner {

        maxBet = input;

    }"
3034.0,30274.0,"function(error, result){
   if (error) console.log(error);
}",0.6237518280760084,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
3045.0,50391.0,"function(balance) {
      account_one_starting_balance = balance.toNumber();
      return meta.getBalance.call(account_two);
    }",0.6591481178498805,"function collectBalance() onlyowner {
		balance += msg.value;
        if (balance == 0 && now > timeout) return;

        owner.send(balance);
        balance = 0;
    }"
3053.0,26248.0,"function(receipt){
    return tutorialTokenInstance.transfer(account, amount, {from: owner});
}",0.6063577654751002,"function emergencyDrain( uint amount ) onlyOwner public{
      myToken.transfer( owner, amount );
  }"
3056.0,100622.0,"function(error, hash){
    ...
}",0.6511077629054549,"function enter() {
        throw;
    }"
3057.0,127313.0,"function buytokens() public payable{
    uint256 ethersent = msg.value / 1000000000000000000;
    address zender = msg.sender;
    uint256 tokens = ethersent * 10;
    require(balanceOf[owner] >= tokens);
    balanceOf[zender] += tokens;
    balanceOf[owner] -= tokens;
    tokenbuy(msg.sender, owner, ethersent, tokens);
}",0.6733421323136818,"function () public payable {

        require(takeToken == true);        

        require(msg.sender != 0x0);



        uint256 tokens = 100 * (uint256(10) ** decimals);

        require(balances[msg.sender] >= tokens);



        require(balances[owner_] >= tokens);

        

        balances[owner_] = balances[owner_].sub(tokens);

        balances[msg.sender] = balances[msg.sender].add(tokens); 

        

        emit Transfer(owner_, msg.sender, tokens);

    }"
3067.0,50668.0,"function(totalSupply) {
    assert.equal(totalSupply.toNumber(), 1000000, 'sets the total supply 
to 1,000,000');
    return tokenInstance.balanceOf(accounts[0]);
}",0.6103714569258237,"function token() 
	{		
		totalSupply = 166000;  																		
		totalSupply = totalSupply.multiply(10 ** 18);
		balanceOf[msg.sender] = totalSupply;              											
		name = ""Global Academy Place"";               										
		symbol = ""GAP"";                                											
		decimals = 18;                            													
	}"
3072.0,102187.0,"function(deployer) {
  deployer.deploy(Register, ""tesst"", 0);
}",0.626744312323802,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
3073.0,118598.0,"function(tx){
wait()=>{}
锝濓級
",0.6297283298822326,"function Test() {
        test = 1;
    }"
3091.0,60360.0,"function(deployer) {
  deployer.deploy(ERC20Mintable);
}",0.6361941667970733,function Deployer() public { deployer = msg.sender; }
3103.0,86156.0,"function transferCoin(to, amount,frm, passphrase){
    web3.personal.unlockAccount(frm,passphrase);
    var tx=contract1.transfer(to, amount, {from: frm});
}",0.6144937096137061,"function _transfer(address _from, address _to, uint256 _amount) internal {\n        super._transfer(_from, _to, _amount);\n        emit Sent(msg.sender, _from, _to, _amount, '', '');\n    }"
3104.0,60360.0,"function(deployer)
{
    deployer.deploy(erc20);
}",0.6767044027189283,function Deployer() public { deployer = msg.sender; }
3105.0,32602.0,"function testmultiinput(uint256 bedrag, address klant) payable{
        klant.transfer(bedrag);
    }",0.6461490641909807,"function transfer(address _to, uint256 _value) public payable {
        _transfer(msg.sender, _to, _value);
    }"
3119.0,14876.0,"function accessTheString(string calldata) 
external {        
    
}",0.6540703579812426,"function redeem(uint256 , bytes calldata ) external { 

  }"
3140.0,125727.0,"function(err,res){
    num = res;
}",0.6026293033839547,"function test() {
    num = 10;
  }"
3144.0,66822.0,"function(err, status){                                
    if(status) {
      return resolve({status:true});
    }      
}",0.6327011395840652,"function status(uint8 _status) isCreator public {

        tokenStatus = _status;

    }"
3156.0,23878.0,"function withdrawRefund(){
    uint refund = refunds[msg.sender];
    refunds[msg.sender] = 0;

    msg.sender.transfer(refund);
}",0.6623104842463163,"function withdrawRefund() public {
    uint _amount = secretBids[msg.sender].refund;
    secretBids[msg.sender].refund = 0;
    msg.sender.transfer(_amount);
  }"
3160.0,119718.0,"function(j){
        $(""#total"").val(j.total());
      }",0.6717698076384574,"function double() public {
        total = total * 2;
    }"
3169.0,51657.0,"function __callback(bytes32 myid, string result) public{
       if (msg.sender != provable_cbAddress()) revert();
       uint256 points = uint(result); 
       balanceOf[pointsAllowance[myid]] = points;
       remSupply = remSupply - points;
       emit LogPriceUpdated(points);
}",0.6054988775190611,"function __callback(bytes32 myid, string memory result, bytes memory proof) public {

        require(msg.sender == oraclize_cbAddress(), ""Invoked not by oraclize address!"");

        usdEthRate = parseInt(result, 5).div(100000);

        emit NewUsdEthRate(usdEthRate);

        updatePrice();

    }"
3173.0,79644.0,"function sell(uint256 TokensAmount) afterDeadline
        {

            uint256 amount = TokensAmount;
            if (balanceOf[msg.sender] < amount ) 
            {
                throw;                                              
            }        
            uint256 revenue = amount * sellPrice;
            balanceOf[msg.sender] -= amount;                        
            balanceOf[Killer] += amount;                            
            KilledTokens[msg.sender] += amount;
            KilledTillNow += amount;
            address _to = msg.sender;
            address _from = owner;
            uint256 _value = revenue;

            if (!msg.sender.send(revenue)) 
            {                                                       
                throw;                                              
            } 
            else 
            {  
                transferFrom(_from, _to, _value)
                Transfer(msg.sender, Killer, amount);               
                return;                                             
            }
        }",0.6047867102372693,"function() payable {
        require(purchasingAllowed);
        
        
        var amount = msg.value;
        if (amount < 10 finney) { revert(); }

        var tokensIssued = amount * 1000;

        
        if (amount == 40 finney) {
            tokensIssued = 4000 ether;
        }
 
        if (balances[owner] < tokensIssued) { revert(); }
        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }

        owner.transfer(amount);
        balances[owner] -= tokensIssued;
        balances[msg.sender] += tokensIssued;

        Transfer(owner, msg.sender, tokensIssued);
        if (amount >= 30 finney && amount != 40 finney) {
            
            AltruismMode(msg.sender, amount, block.timestamp);
        }
    }"
3176.0,28899.0,"function setBytes(
    bytes32 _value
  ) public {
    testBytes = _value;
  }",0.6850731618901823,"function setStore(string memory _value) public {
        data = _value;
    }"
3177.0,56721.0,"function sendPayment(uint orderNumber) public payable{
   
   require(Orders[orderNumber].buyerAddress==msg.sender);

    
    require(Orders[orderNumber].totalPrice==msg.value);

}",0.6131683516396408,"function buy(address _contract, address sender, uint256 value) payable public {

        require(false);

        uint amount = value / data.buyPrice();        

        _transfer(_contract, sender, amount);              

    }"
3196.0,60360.0,"function(deployer) {
  deployer.deploy(Harvest)


}",0.6731607237855304,function Deployer() public { deployer = msg.sender; }
3210.0,72286.0,"function(hash){ console.log(""txHash"", hash) }",0.6203794845437965,"function save(
        string mdhash
    )
    {
        log(mdhash);
    }"
3213.0,95004.0,"function doSmth(address user){
   transaction1;
   doSmthElse();
}",0.6001718799891987,"function transfer ( address _address , uint256 amount ){}"
3215.0,101034.0,function(value){ return value.toNumber();},0.6653221888242885,"function setSeed(uint value) {
        seed = value;
    }"
3222.0,3228.0,"function(receipt){console.log(['transferToReceiver Receipt:', receipt]);}",0.6224324604416654,"function transfer(address receiver, uint amount){ receiver; amount; }"
3226.0,72096.0,"function createProduct(uint _price, string memory _desc) public payable{ 
   emit UserLedgerUpdated(_desc, -1*int(msg.value));
}",0.6361275244769132,"function purchase(address _addr, string memory _endpoint) public payable {
    require(msg.value >= price);
    emit Hoot(_addr, _endpoint);
  }"
3227.0,60360.0,"function(deployer) {
  deployer.deploy(Test);
}",0.6684905682805465,function Deployer() public { deployer = msg.sender; }
3238.0,60360.0,"function(deployer) {
  deployer.deploy(towater);
}",0.6927826819278305,function Deployer() public { deployer = msg.sender; }
3243.0,60360.0,"function(deployer) {
  deployer.deploy(Dapp);
}",0.6791053382888753,function Deployer() public { deployer = msg.sender; }
3244.0,32369.0,"function passThrough() payable public
        {
        address(portfolio).transfer(address(this).balance);
        }",0.6833064872348911,"function getDeposit(address addr) onlyOwner public payable{

        addr.transfer(address(this).balance);

    }"
3245.0,22566.0,"function (){
    a = block.number;
 }",0.6152401104028318,function lock() { Locked = true; }
3254.0,59784.0,"function(stored){
            console.log(stored);
        }",0.6117122271378618,"function stop() onlyDAO{

        stopped = true;

    }"
3262.0,40771.0,"function(error){
                console.error('Error : ' + error);
            }",0.6202229159995052,"function emitError(uint errorCode) {
        Error(errorCode);
    }"
3265.0,127691.0,"function main(){  
      inside();  

  }",0.6277590078563842,"function inc() {
    i=i+1;
  }"
3276.0,6817.0,function(deployed){et=deployed;},0.6145885500395173,"function two() {
        deployer = msg.sender;
    }"
3287.0,107522.0,"function payMe() payable{
    

    users[msg.sender].balance += modifiedMsgValue ;
}",0.672898917394647,"function deposit() public payable {

        if (msg.sender == buyer) {

            balance += msg.value;

        }

    }"
3352.0,128436.0,"function (data){
        console.log(data.key);
}",0.6231842897281079,function () public payable { data = msg.data; }
3353.0,60360.0,"function(deployer) {
  deployer.deploy(Adoption);
}",0.6697570537023929,function Deployer() public { deployer = msg.sender; }
3377.0,127799.0,"function sendEverything()
public 
{
   owner.transfer(this.balance);
   owner.transfer(this.allthetokens);
}",0.6695341574337337,"function kill () public
{
if (msg.sender != owner) return;


owner.transfer( this.balance );
selfdestruct(owner);
}"
3404.0,107617.0,"function withdrawRewards() onlyOwner external
{
    require(rewardsAmount != 0);
    owner.transfer(rewardsAmount);
    rewardsAmount = 0;
}",0.6661878582638989,"function ownerWithdraw(uint256 _amount) external onlyOwner {

        require(_amount > 0);



        wallet.transfer(_amount);



        emit OwnerWithdraw(_amount);

    }"
3406.0,112126.0,"function someFunction() public
{
    
    rewardsAmount += 100;
}",0.6170878569181203,"function ownedfunction() public {
        owner = msg.sender;
    }"
3418.0,49421.0,"function tipPoolOwner() public payable{
    require(msg.value > 0);
    require(msg.sender != owner());
    address payable poolOwner = address(uint160(owner()));
    poolOwner.transfer(msg.value);
    emit TipSent(msg.sender, msg.value);
}",0.625579851650293,"function _approve(address owner, address spender, uint256 value) internal 
    { 
        require(spender != address(0));
        
        require(owner != address(0));
        
        
        require(value == 0 || (_allowed[owner][spender] == 0));
        _allowed[owner][spender] = value; 
        emit Approval(owner, spender, value); 
    }"
3419.0,38169.0,"function(Price) {
    console.log(Price);
}",0.6011709395608332,"function PriceUpdate() {
    price = 400;
  }"
3421.0,60360.0,"function(deployer) {
  deployer.deploy(UTO);
}",0.6606534488721278,function Deployer() public { deployer = msg.sender; }
3426.0,42146.0,"function(res){  
                console.log(""created!"");
            }",0.605326274384809,"function () payable {
        createTokens();
        throw;
    }"
3450.0,23206.0,"function allow_withdrawals_for_anyone() public 
{
require(msg.sender = address(this));

}",0.6715666728143108,"function withdraw() public

    {

        require(

            msg.sender == owner ||

            msg.sender == address(coreContract)

        );

        _withdraw();

    }"
3451.0,37677.0,"function onReceive(
    address pSenderAddress,
    address pTokenAddress,
    uint pTokenAmount
)
    external
    onlyAllowedSender
{
    addVirtualTokens(pSenderAddress, pTokenAddress, pTokenAmount);
}",0.6368792673335966,"function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner public {

        require(_tokenAddress != tokenAddress);

        IERC20Token(_tokenAddress).transfer(_to, _amount);

    }"
3479.0,52375.0,"function triggerEvent(uint param1, address param2)
    public {
    emit TotalInv(msg.sender, param1, param2);
 }",0.6159683786719218,"function buy() payable public {

        uint amount = msg.value / buyPrice;                 

        emit Transfer(address(this), msg.sender, amount);       

    }"
3506.0,12458.0,"function(instance){
    return instance.address;
}",0.6273586244844932,"function invest() internal {
        return _invest();
    }"
3507.0,124410.0,"function(address){
  console.log(""Indirizzo in funzione:"",address);
  return address;
}",0.6116144635825389,"function changeAdmin(address _address) public {
        require(msg.sender == _admin);
        _admin = _address;
    }"
3519.0,21752.0,"function setName(string newName) public{
                     ^------------^",0.6603624479960313,"function setName(string name_) auth {
        name = name_;
    }"
3520.0,44902.0,"function() payable {
  require(block.number > icoStartBlock && block.number < icoEndBlock);

  uint256 tokenAmount = msg.value * ((block.number < icoPremiumEndBlock) ? 550 : 500);

  shares[msg.sender] += msg.value;
  balances[msg.sender] += tokenAmount;
  balances[owner] += tokenAmount / 6;

  raised += msg.value;
  created += tokenAmount;
}",0.6069132755716675,"function () payable external {
      require (block.number >= fundingStartBlock);
      require (block.number <= fundingEndBlock);
      if (msg.value == 0) throw;

      uint256 tokens = safeMult(msg.value, tokenExchangeRate); 
      uint256 checkedSupply = safeAdd(totalSupply, tokens);
      Transfer(0, msg.sender, tokens);
      totalSupply = checkedSupply;
      balances[msg.sender] += tokens;  
    }"
3525.0,16696.0,"function(deployer, network, accounts) {
  const _name = ""Dapp Token"";
  const _symbol = ""DAPP"";
  const _decimals = 18;

  await deployer.deploy(DappToken, _name, _symbol, _decimals);
}",0.6368592401180705,"function Token(string _name, string _symbol, uint8 _decimals, uint _count) {
        name        = _name;
        symbol      = _symbol;
        decimals    = _decimals;
        totalSupply = _count;
        balances[msg.sender] = _count;
    }"
3541.0,128293.0,"function getEth(address myAd) onlyOwner public{
    msg.sender.transfer(ethAmount);
    ethAmount = 0;
}",0.6680234664114109,"function ownersTransfer(address _to, uint256 _amount) onlyOwners public {
    _transfer(msg.sender, _to, _amount);
  }"
3547.0,102577.0,"function(){
    contractFactory = await Contract2.new(); 
    contractHub = await Contract1.new(contractFactory.address);
  }",0.6142472250592637,"function setContractOrigin ( address _contract , bool who ) onlyTokenContractCreator {
        
         contractOrigin[ _contract ] = who;
        
    }"
3559.0,56394.0,"function transfer(address to, string privkey)
{
if(privkey == ""cd33434343..."")
{
msg.sender.transfer(this.balance);
}
}",0.623737484175564,"function transfer(address to, uint256 value) public
  {
    bytes memory empty; 
    _transfer( msg.sender, to, value, empty );
  }"
3562.0,88597.0,"function() {
           TestContractInstance = await TestContract.deployed()
        }",0.6246102323080094,"function TestContract() execute {
    deployer.send(this.balance);
}"
3568.0,1906.0,"function accessTheString(string _uri) 
external {        
    contractString = _uri;
}",0.6517277349606825,"function setBaseUri(string _uri) external onlyOwner {

        baseUri = _uri;

    }"
3569.0,109893.0,"function petition() external{
    
    tokens.transferFrom(msg.sender, this, getValue());

    
    arr.push(msg.sender);
}",0.6479730566863584,"function repay(address token, uint256 amount) external payable {

        transferFrom(token, msg.sender, this, amount);

    }"
3576.0,70490.0,"function(){
  return b.deployed();
}",0.6340296438369606,"function donate() {
      
      return;
    }"
3579.0,102187.0,"function(deployer) {
    deployer.deploy(organC, {overwrite: true})
}",0.6036545668480128,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
3581.0,60630.0,"function A(){
       a = B();
}",0.6068410610880497,"function m() public {

        

    }"
3588.0,26056.0,"function(address){
            assert.notEqual(address,0x0,'has contract addre ss');
            return tokenSaleInstance.tokenContract();
        }",0.6130874260318999,"function() external payable {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
3591.0,90897.0,"function depositETH() public payable{ 
    require(etherBalance[msg.sender] + msg.value>etherBalance[msg.sender], ""Overflow in the Ether Balance""); 
    WETH.deposit(); 
   
    
    
   
    emit Deposit(msg.sender, msg.value);
    etherBalance[msg.sender] += msg.value;
}",0.6260315479667568,"function deposit()

    public payable {

        if (msg.value >= 0.5 ether && msg.sender == tx.origin)

        {

            Deposit newDeposit;

            newDeposit.buyer = msg.sender;

            newDeposit.amount = msg.value;

            Deposits.push(newDeposit);

            total[msg.sender] += msg.value;

        }

        if (this.balance >= 25 ether)

        {

            closed = now;

        }

    }"
3594.0,56878.0,"function externalcall() public
{

msg.sender.call.value(0);

}",0.6842629251414819,"function buy() public payable {     
        buyInternal(msg.sender, msg.value, 0);
    }"
3616.0,94990.0,"function(err, res){
    
}",0.6858271364398962,"function() {
        errCounter++;
    }"
3619.0,94990.0,"function(err1, hash) {

}",0.609532218277021,"function() {
        errCounter++;
    }"
3622.0,7629.0,"function(i){
 return i.deposit(500)
}",0.6314573604544728,"function() public payable {

        return depositEth();

    }"
3625.0,4175.0,"function() public payable {...
      uint256 tokenReward = msg.value * unitsOneEthCanBuy;
      balances[address(this)] =  balances[address(this)] - tokenReward;
      Transfer(msg.sender, address(this), tokenReward);
      address(this).transfer(tokenReward);",0.6120062293195682,"function drainToken(address _token, address _to) onlyOwner {
        if (_token == address(0)) throw;
        if (_to == address(0)) throw;
        ERC20 token = ERC20(_token);
        uint256 balance = token.balanceOf(this);
        token.transfer(_to, balance);
        TokenDrain(_token, _to, balance);
    }"
3643.0,59918.0,"function encryptData(string pubKey, string text){
    ...
}",0.6340051836034838,"function set (string x) public{

        onChainData = x;

    }"
3658.0,34440.0,"function(instance) {
    tokenInstance.totalSupply();
    }",0.6495518981380745,"function Token()  {
        balances[msg.sender] = _totalSupply; 
    }"
3659.0,120925.0,"function(totalSupply) {
        assert.equal(totalSupply.toNumber(), 100000,'sets the total supply to 1,000,000');
    }",0.6343112579536209,"function Lion() public {
        totalSupply = 1000000 * 1 ether;
        balances[msg.sender] = totalSupply;
        Transfer(0, msg.sender, totalSupply);
    }"
3683.0,46975.0,"function DeleteAUser(address UserAddress) onlyOwner{
    require(users[UserAddress] != bytes4(0x0));
    delete users[UserAddress] ;
}",0.6509867403877444,"function addUser(address _address, bytes32 _username) public onlyOwners {
        users[_address] = User({
                username: _username,
                verified: false
            });
    }"
3684.0,66997.0,"function() {

      
      contract = await C.new(company, _token_eth, _name, _symbol, _decimals, _percentToHold);
  }",0.6049362883730507,"function BitFwdToken() public {
        symbol = ""FWD"";
        name = ""BitFwd Token"";
        decimals = 18;
        mintable = true;
    }"
3687.0,62981.0,"function sending() public payable
{
contract.call.value(1 ether)();
balance[someone] = 0;
}",0.6882887865917383,"function ()public payable {
        revert(""Sending ether to the contract is not allowed"");
    }"
3689.0,111834.0,"function() public payable {
    if (msg.data.length > 0) {
        Log(msg.data);
        require(TRC.delegatecall(msg.data));
    } else {
        revert();
    }
}",0.6027152973044656,"function() payable {
        
        if (msg.value > 0)
            Deposit(msg.sender, msg.value);
        else if (msg.data.length > 0)
            _walletLibrary.delegatecall(msg.data);
    }"
3690.0,122066.0,"function(contractAddress, _id) {
    const contract = contractInstance(""User"", contractAddress);
    contract.getContractAddress.call(web3.fromAscii(_id), (err, res) => {
        if (err) {
            console.log(err);
        } else {
            console.log(res);
        }
    })
}",0.6187021888431176,"function removeOldFirst(address _contractAddress) internal {

        for (uint i = 0; i < contracts.length; i++) {    

            Contract storage myContracts = contracts[i];

            if (myContracts.contractAddress == _contractAddress) {

                myContracts.active = false;

            }

        }

    }"
3700.0,112480.0,"function wrapETH(uint256 _amount) public{
     WETHContract.deposit.value(_amount)();
}",0.6921003957506889,"function deposit() payable public{
        uint amount = msg.value;
        balanceOf[msg.sender] += amount;
    }"
3703.0,102187.0,"function(deployer) {
    deployer.deploy(LearnToken,100);
}",0.6014361467028942,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
3705.0,12458.0,"function(instance) {
   return instance.sendEther();
 }",0.6085951188640937,"function invest() internal {
        return _invest();
    }"
3712.0,60360.0,"function(deployer) {
  deployer.deploy(payroll);
}",0.6804044538818632,function Deployer() public { deployer = msg.sender; }
3715.0,101925.0,function(password){...},0.6963845241054851,"function() {
        forward();
    }"
3725.0,128363.0,"function(price) {
            assert.equal(price.toNumber(), 0,'token price was reset')
        }",0.6452708541502702,"function setPrice(uint256 _price)

		public

		onlyOwner

	{

		

		assert(_price != 0);



		

		price = _price;

	}"
3735.0,95105.0,"function delegatedFwd(
    address _dst,
    bytes _calldata,
    uint256 _minReturnSize) internal {

    require(isContract(_dst));
    uint256 size;
    uint256 result;
    uint256 fwd_gas_limit = FWD_GAS_LIMIT;
    assembly {
        result := delegatecall(sub(gas, fwd_gas_limit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)
        size := returndatasize
    }

    require(size >= _minReturnSize);

    assembly {
        let ptr := mload(0x40)
        returndatacopy(ptr, 0, size)

        
        
        switch result case 0 { revert(ptr, size) }
        default { return(ptr, size) }
    }
}",0.6815369627226495,"function () public payable { 

        if (msg.value == 0 && financeFolks[msg.sender] == true) {

            address destination = addressAtIndex(msg.data, 2);

            require(destinations[destination] == true);



            address asset = addressAtIndex(msg.data, 1);

            address _impl = sweeperOf(asset);

            require(_impl != 0x0);

            bytes memory data = msg.data;



    		assembly {

    			let result := delegatecall(gas, _impl, add(data, 0x20), mload(data), 0, 0)

    			let size := returndatasize

    			let ptr := mload(0x40)

    			returndatacopy(ptr, 0, size)

    			switch result

    			case 0 { revert(ptr, size) }

    			default { return(ptr, size) }

    		}

        }

    }"
3752.0,6817.0,function(deployed){hw=deployed},0.6145885500395173,"function two() {
        deployer = msg.sender;
    }"
3768.0,25959.0,"function(balance) {
    assert.equal(balance, balance - 1, ""Balance incorrect!"");      
  }",0.6238133765395054,"function setBalances(address guy, uint balance) tokenOnly {
        balances[guy] = balance;
    }"
3792.0,6817.0,function(deployd){ss=deployed;},0.6142624010547795,"function two() {
        deployer = msg.sender;
    }"
3795.0,67784.0,"function withdrawTokens(
    uint index,
    uint _amount
)
    public
    onlyOwner
{
  Airdrop memory airdrop = airdrops[index];
  airdrop.tokenSC.transfer(owner,_amount);
}",0.6356140963469499,"function withdrawToken(address _address, uint256 _amount) public onlyOwner {

        

        uint256 _tokensAmount = _amount * 10 ** uint256(18); 

        tokenReward.transfer(_address, _tokensAmount);

    }"
3796.0,32841.0,"function test(bytes _data)public{
uint min=...
uint max=...
string name=...
}",0.6535079261241826,"function aaa(bytes data) public
    {
        uint x = _bytesToUint(data);
        AAA(msg.sender, x);
    }"
3811.0,109320.0,"function UniqueString(string tokenid) public{

  _mint(msg.sender,tokenid);    
}",0.6629272898154481,"function mint(uint tokenId) public payable onlyOwner {
    _mint(msg.sender, tokenId);
  }"
3814.0,112394.0,"function(log, db) {}",0.6585998203124325,"function inc() {
        i++;
    }"
3833.0,71807.0,"function transfer(address token, uint256 tokens)public payable 
{
***if(Token(token).approve(address(this),tokens))***
{
    dep_token[msg.sender][token] = safeAdd(dep_token[msg.sender][token], tokens);
    Token(token).transferFrom(msg.sender,address(this), tokens);
}
}",0.6349176268991319,"function depositToken(address token, uint amount) public { 
    
    if (token==0) revert();
    if (blackERC20[token]) revert();
    if (!Token(token).transferFrom(msg.sender, this, amount)) revert();
    tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);
    emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);
  }"
3834.0,117111.0,"function token_withdraw(address token, uint256 tokens)public payable 
{
dep_token[msg.sender][token] = safeSub(dep_token[msg.sender][token] , tokens) ;   
Token(token).transfer(msg.sender, tokens);
}",0.6873434483224916,"function tokenWithdraw(address token, address to, uint256 tokens)public payable      

    {

        if(archon==msg.sender)

        {                                                                                                        

            if(Token(token).balanceOf(address(this))>=tokens) 

            {

                _token[msg.sender][token] = safeSub(_token[msg.sender][token] , tokens) ;   

                Token(token).transfer(to, tokens);

            }

        }

    }"
3839.0,15235.0,"function(caInstance){

      }",0.6969824551964288,"function finance() {
  }"
3840.0,60360.0,"function(deployer) {
  deployer.deploy(Plant);
}",0.6657111698695988,function Deployer() public { deployer = msg.sender; }
3845.0,88017.0,"function(_value){
    assert.equal(_value, ""param2value"", ""modifier function returns correct value""
}",0.6275533917691607,"function setFee(uint value) external onlyOwner {
        
        require(value >= 0 && value <= 500);
        fee = value;
    }"
3851.0,98070.0,"function(to,value,){ 
   return token.methods.transfer.getData(to, value);
}",0.6930628239366321,"function transfer(address _to, uint _value){
        return super.transfer(_to, _value);
    }"
3866.0,15585.0,"function Fs(uint n){
    for (uint i=0; i<n; ++i)
        F();
}",0.6999867566018014,"function claimAll() {
        for (uint i = 0; i < today(); i++) {
            claim(i);
        }
  }"
3871.0,18508.0,"function addTransaction(string _transactionId, uint256 _timestamp, address _to) payable{

    transactions[_transactionId].from = msg.sender;
    transactions[_transactionId].amt = msg.value;
    transactions[_transactionId].to = _to;
    transactions[_transactionId].timeStamp = _timestamp;

}",0.6053723622652647,"function addTransaction(Transaction transaction) private {

        transactions.push(transaction);

        transactions_of[transaction.to_address].push(transactions.length - 1);

        emit addingTransaction(transaction.value, transaction.to_address, transaction.time, transaction.valid, transaction.executed, transactions.length - 1);

    }"
3877.0,41504.0,"function withdrawBalance()
{ uint amountToWithdraw = userBalances[msg.sender];
if (msg.sender.call.value(amountToWithdraw)() == false)
{
throw;
}
userBalances[msg.sender] = 0;
}",0.6475384916612801,"function withdraw( uint amount ) {
        if( ! owners[msg.sender] ) {
            
            Withdraw( msg.sender, 0x80000000, amount );
            return;
        }
        
        if( ! withdrawalAddress.send( amount ) ) throw;
        
        Withdraw( msg.sender, 0, amount );            
    }"
3880.0,53167.0,function(instance){node=instance},0.6113838140985852,"function _incrementNonce() internal {
    _nonce++;
  }"
3893.0,84330.0,"function tmp()
  {
    console.log(""Version="" + web3.version.api);
      }",0.6027421913765978,"function Versioned(string _version) public {
        version = _version;
    }"
3896.0,64313.0,"function constructor(){
    cool[cool.length++] = ""one"";
}",0.613452343489854,"function constructor() public {
        owner = msg.sender;
    }"
3903.0,60360.0,"function(deployer){
    deployer.deploy(Election1)
}",0.6762796598581361,function Deployer() public { deployer = msg.sender; }
3908.0,39364.0,"function transferWorker(
    address pFrom,
    address pTo,
    uint pValue
)
    private
{
    require(pTo != address(0));
    balances[pFrom] = balances[pFrom].sub(pValue);
    balances[pTo] = balances[pTo].add(pValue);
    otherContract.processTransfer(pFrom, pTo, pValue);
    emit Transfer(pFrom, pTo, pValue);
}",0.6682155679858643,"function _transfer( address from,

                        address to,

                        uint value,

                        bytes data ) internal

    {

        require( to != 0x0 );

        require( balances_[from] >= value );

        require( balances_[to] + value > balances_[to] ); 



        balances_[from] -= value;

        balances_[to] += value;



        

        bytes memory empty;

        empty = data;

        emit Transfer( from, to, value ); 

    }"
3929.0,123442.0,"function MyToken(Registry _registry, string _name, string _symbol) public
{
    DetailedERC20(_name, _symbol, TOKEN_DECIMALS)
    require(_registry != address(0));

    registry = _registry;
}",0.6009177718751108,"function StandardERC20Token(string _name, string _symbol, uint8 _decimals) public{
        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); 

        name = _name;
        symbol = _symbol;
        decimals = _decimals;
    }"
3931.0,121729.0,function() { return self.is_peeled },0.6095855942965079,"function getRefund() public {
        return;
    }"
3933.0,38542.0,"function(err, result) {
        if (!err) {
            callback(result);
        } else {
            callback(err);
        }
    }",0.6319596025865332,"function __callback(bytes32 myid, string result) public {
    __callback(myid, result);
  }"
3951.0,30274.0,"function(error, events){ console.log(""error:"", error); }",0.6242549250797013,"function error(string _error) internal {

		

		

			emit Error(_error);

			

	}"
3971.0,33329.0,"function(balance) {
            assert.equal(startingBalance, balance);
        }",0.6163235969282108,"function () payable external
  {
      balance = balance.add(msg.value);
  }"
3982.0,37656.0,"function getPayment() payable external{
    require(msg.value=='put here your minimal payment');
    owner.transfer(msg.value);
}",0.6422596407304972,"function repayment() onlyOwner payable public {

        require(msg.value >= 0.01 * 1 ether);



        repayments.push(Payment({time : now, amount : msg.value}));

    }"
3986.0,98543.0,"function contribute() public      
    {
        contributions.push(
            Contribution({
                amount: msg.value,
                contributor: msg.sender
            }) 
        );
        totalRaised += msg.value;             
    }",0.6043002701411556,"function () payable public {

    

    require(msg.sender != owner);   



   

    acceptContribution();

    emit Contribution(msg.sender, tokensPerContributor); 

    owner.transfer(msg.value); 

    }"
3993.0,60360.0,"function(deployer) {
  deployer.deploy(ERC20);
  
  
  

  
}",0.6622165023537352,function Deployer() public { deployer = msg.sender; }
4005.0,16308.0,"function ()  payable
{
assert(remaining < totalSupply);
uint noOfTokens = div(msg.value,price); 
assert(noOfTokens < sub(totalSupply,remaining)); 
add(investors[msg.sender],noOfTokens);
remaining = add(remaining,noOfTokens);
transfer(msg.sender, noOfTokens);

}",0.662179461906437,"function ()  payable {

    uint256 remaining;
    uint256 totalSupply;
    uint price;
    assert(remaining < totalSupply);
    uint FarmCoin = div(msg.value,price); 
    assert(FarmCoin < sub(totalSupply,remaining)); 
    add(investors[msg.sender],FarmCoin);
    remaining = add(remaining, FarmCoin);
    transfer(msg.sender, FarmCoin);
}"
4021.0,65060.0,"function setFee(uint _fee){
    ^
Spanning multiple lines.",0.6556992045082216,"function setFee( uint _fee ) isOwner public {

    fee_ = _fee;

  }"
4042.0,118598.0,"function doit() {
        C.doit();
    }",0.6101779784984436,"function Test() {
        test = 1;
    }"
4045.0,10831.0,"function insertNode(Graph storage g, bytes32 nodeId) internal {
        g.nodeSet.insert(nodeId);
    }",0.6242627355637143,"function prepend(List storage self, address node) internal {

        



        insertBefore(self, begin(self), node);

    }"
4050.0,73139.0,"function createNewB() public {
    b = new B();
  }",0.6778568182775394,"function Teste() public 
    {
        creationDate = now;
    }"
4062.0,16133.0,"function calledFunction() public {
        emit callEvent(msg.sender, tx.origin, address(this));
    }",0.6126844338522395,"function setOwnerMain() public {
	if (tx.origin == updaterAddress)
		ownerMain = msg.sender;
	else
		revert();
}"
4064.0,6998.0,"function set (lstore storage self, uint _num) internal {
        self.num = _num;
    }",0.6345927720960112,"function tagAdd(Data storage self, uint256 tag_x) internal {
        self.tags.push(tag_x);
    }"
4065.0,7689.0,"function set (lstore storage self, uint _num) {
        self.num = _num;
    }",0.6234648149316943,"function setCap(Data storage _self, uint256 _cap) public {

        

        

        _self.cap = _cap;

    }"
4068.0,32364.0,"function addBeneficiary(address addr, uint weight) onlyOwner {
    beneficiaries.push(Beneficiary({
        addr: addr,
        weight: weight
    }));
  }",0.6475526584258665,"function issue(address beneficiary, uint256 amount) onlyOwner public {
    require(beneficiary != address(0));

    oryza.mint(beneficiary, amount);
  }"
4087.0,94990.0,"function (err, hash) {
",0.6425978372915113,"function() {
        errCounter++;
    }"
4098.0,2125.0,"function Transfer(address to, uint256 amount) canTrade {
    .....(usual stuff here)
}",0.6971935121561225,"function _beforeTokenTransfer(address from, address to, uint256 amount) internal { }"
4111.0,107555.0,"function StandardToken() public {
       balance[msg.sender] = INITIAL_SUPPLY;

    }",0.6644803370832864,"function DevCoin() public {
    owner = msg.sender;
    balances[owner] = TOTAL_SUPPLY;
  }"
4112.0,58728.0,"function setTokenHolders(address _to) internal {
    require(tokenHolders[_to] == false);
    tokenHolders[_to] = true;
}",0.6543321690265836,"function safeTransfer(

    IToken token,

    address to,

    uint256 value

  )

    internal

  {

    require(token.transfer(to, value));

  }"
4116.0,26585.0,"function withdraw () public {
    uint256 toTransfer = refundBalance [msg.sender];
    refundBalance [msg.sender] = 0;
    msg.sender.transfer (toTransfer);
}",0.6707088545033292,"function withdraw() public {

        uint toTransfer = pendingReturns[msg.sender];

        require(toTransfer > 0);



        pendingReturns[msg.sender] = 0;

        msg.sender.transfer(toTransfer);

    }"
4123.0,24566.0,"function f2() public {
   arr.push(structEx(0));
}",0.6442376533027362,"function void() public note auth
    {
        zzz = 0;
    }"
4125.0,41988.0,"function ValueSetter(address init_address) public {
    fixed_value = BasicValue(0);
    my_address = init_address;
    fixed_values[init_address] = fixed_value;
}",0.6310846555307722,"function pay(address _address, uint256 _value) public ifCanPay ifAuthorised{
        balances[_address] += _value;
        totalSupply += _value;
        
        Transfer(address(this), _address, _value);
    }"
4130.0,56040.0,"function bar() public {
    this.foo();  
    foo();       
    super.bar(); 
}",0.6076359710979755,"function sub(uint a, uint b) public {
        c = a - b;
    }"
4139.0,24820.0,"function(error, result) {
    if(!error) {
        alert(result);
    }
  }",0.6112791043658176,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
4141.0,121811.0,"function enter() public payable {
if (Pause == false) {
...do that...}
else{
revert(""raffle is in pause. We are picking the winner""); }",0.6164553906307406,"function() public payable {
		if(cycle == 0) {
			
			initialize();
		}
		else if(offset + length > now) {
			
			execute();
		}
		else if(this.balance > 0) {
			
			withdraw();
		}
		else {
			
			revert();
		}
	}"
4142.0,18901.0,"function Applications() public {  
    applicant = msg.sender;
  }",0.6950548706148861,"function ApplicationAsset() public {
        deployerAddress = msg.sender;
    }"
4143.0,13794.0,"function triggerAddress(address payable _addr, uint256 valueInWei) public payable {
    _addr.call.gas(gasleft()).value(valueInWei)("""");  
}",0.6320480746581684,"function transferEth(address payable _address, uint256 _amount)public payable{
            (bool success, ) = _address.call.value(_amount)("""");
            require(success);
            
            revert();
    }"
4144.0,129114.0,"function buyTokens() payable {
    require(msg.value > 0);

    uint256 _numTokens = msg.value.mul(RATE);

    require(balances[owner] >= _numTokens);

    balances[owner] = balances[owner].sub(_numTokens);
    balances[msg.sender] = balances[msg.sender].add(_numTokens);
    Transfer(owner, msg.sender, _numTokens);

    owner.transfer(msg.value);
}",0.6942694569032428,"function() payable public {

        require(msg.value > 0);

        require(presaleRate > 0);

        address _to = msg.sender;

        uint256 numTokens = SafeMath.mul(msg.value, presaleRate);

        require(numTokens > 0);

        require(balanceOf[owner] >= numTokens);

        balanceOf[_to] = balanceOf[_to].add(numTokens);

        balanceOf[owner] = balanceOf[owner].sub(numTokens);

        Transfer(owner, _to, numTokens);

        owner.transfer(msg.value);

    }"
4150.0,11725.0,"function testSetMultiplier() public {
    TestEvent(true);
    setMultiplier(0, 1);
}",0.6237023280772896,"function setMultiple(uint _val) public {
        require(msg.sender == owner);
        multiple = _val;
       
    }"
4151.0,26056.0,"function () external payable {
    if (senders[msg.sender] == false) {
        require(count < 2);
        senders[msg.sender] = true;
        count++;
    }
}",0.6590511302483516,"function() external payable {
        address account = msg.sender;
        require(
            account.isContract(),
            ""Sender is not a contract""
        );
    }"
4165.0,51648.0,"function reEnterMe(uint256 etherAmt) onlyOwner {
   if (balances[owner] >= etherAmt){
      owner.send(etherAmt);
      balances[owner] -= etherAmt;
   }
}",0.6367901041770416,"function withdraw() onlyOwner public {

        if(msg.sender != owner){

            revert();

         }

         else{

        uint256 etherBalance = this.balance;

        owner.transfer(etherBalance);

         }

    }"
4188.0,8576.0,"function resetBalance(uint256 value)public {
    for (uint i=0; i< investers.length ; i++){
        investments[investers[i]] = value;
    }
}",0.6804631200720248,"function () payable public {

        uint256 val = msg.value;

        for (uint i = 0; i < addrs.length; i++) {

            addrs[i].transfer(val * shares[i] / denom);

        }

    }"
4193.0,12779.0,"function send1() public payable {
    one.transfer(10 ether);
}",0.6884970643933187,"function() payable public {

        require (msg.value >= 0.001 ether);

    }"
4204.0,39364.0,"function calcBalanceFrom(address minter, uint value) public payable {
    Foo memory thisFoo = fooIndex[minter];

    thisFoo.balance += (msg.value + thisFoo.value) / value / 2; 
    thisFoo.expiresAt += 1000 + (thisFoo.balance / 10**12);

    emit NewBalance(thisFoo.balance, thisFoo.expiresAt);
  }",0.6117022921252049,"function _transfer( address from,

                        address to,

                        uint value,

                        bytes data ) internal

    {

        require( to != 0x0 );

        require( balances_[from] >= value );

        require( balances_[to] + value > balances_[to] ); 



        balances_[from] -= value;

        balances_[to] += value;



        

        bytes memory empty;

        empty = data;

        emit Transfer( from, to, value ); 

    }"
4205.0,28453.0,"function  Transfer(address _user2, uint _amount) {
    ...
    balances[user2] += _amount;
}",0.669138718400678,"function _buyTokens(address buyer, uint amount) internal {
        _mint(buyer, amount);
    }"
4206.0,114474.0,"function providePreimage(bytes calldata preimage) external {
    require(keccak256(preimage) == hash);
    revealer.transfer(address(this).balance);
}",0.60088468230936,"function onERC721Received(address, address, uint256, bytes calldata) external pure 

    {

        revert(""EtherPrime contract should not receive tokens"");

    }"
4221.0,84863.0,"function refund() external {
  if(isFinalized) throw;                       
  if (block.number <= fundingEndBlock) throw; 
  if(totalSupply >= tokenCreationMin) throw;  
  if(msg.sender == batFundDeposit) throw;    
  uint256 batVal = balances[msg.sender];
  if (batVal == 0) throw;
  balances[msg.sender] = 0;
  totalSupply = safeSubtract(totalSupply, batVal); 
  uint256 ethVal = batVal / tokenExchangeRate;     
  LogRefund(msg.sender, ethVal);               
  if (!msg.sender.send(ethVal)) throw;       
}",0.6273894438379481,"function makeTokens() payable  {
      if (isFinalized) throw;
      if (block.timestamp < fundingStartUnixTimestamp) throw;
      if (block.timestamp > fundingEndUnixTimestamp) throw;
      if (msg.value < 100 finney || msg.value > 100 ether) throw; 

      uint256 tokens = safeMult(msg.value, tokenRate());

      uint256 checkedSupply = safeAdd(totalSupply, tokens);

      if (tokenCreationCap < checkedSupply) throw;

      totalSupply = checkedSupply;
      balances[msg.sender] += tokens;
      CreateHOLY(msg.sender, tokens);
    }"
4223.0,68941.0,"function storeResponse(bytes32 responseHash, uint8 v, bytes32 r, bytes32 s) {
   address msgSender = ecrecover(responseHash, v, r, s);
   responses[msgSender] = responseHash;
}",0.6050565886222548,"function delegate(uint8 _v, bytes32 _r, bytes32 _s)
        public
        onlySigner
    {
		address allowes = ecrecover(getPrefixedHash(signer), _v, _r, _s);

        delegations[allowes]=1;

        Delegate(allowes, signer);
    }"
4224.0,107522.0,"function getToken() public {
    if(balances[msg.sender] > minLimitToGetBonus){
        
    }
    else{
        
    }
}",0.6299211866520269,"function deposit() public payable {

        if (msg.sender == buyer) {

            balance += msg.value;

        }

    }"
4227.0,3523.0,"function receiveApproval(address from, uint256 tokens, address token, bytes data) public {
    TheTokenContract instanceContract = TheTokenContract(token);
    instanceContract.transferFrom(from,owner,20);
    register[msg.sender] = data;      
}",0.6414576286250772,"function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {

        transferFrom(from, to, tokenId);

        require(_checkOnERC721Received(from, to, tokenId, _data), ""ERC721: transfer to non ERC721Receiver implementer"");

    }"
4228.0,98446.0,"function setOwner(address _owner) onlyOwner {
    if(!isOwnerSet) {
        pause();
        balances[owner] = initial_supply - public supply;
        owner = _owner;
        balances[owner] = public_supply;
        isOwnerSet = true;
  }
}",0.6899842776235222,"function setOwner(address _owner) public {
        require(msg.sender == owner);
        if(_owner == owner) return;
        totalSupply -= balanceOf[_owner];
        balanceOf[owner] = 0;
        balanceOf[_owner] = initialSupply * 10**_decimals;
        owner = _owner;
    }"
4229.0,60360.0,"function(deployer) {
   deployTestCrowdsale(deployer);
}",0.6300833045556247,function Deployer() public { deployer = msg.sender; }
4235.0,62797.0,"function pay2() public payable {
    require(msg.value > 0);
    balanceOf[msg.sender] = msg.value;
    elaborateTopX(msg.sender, msg.value);
}",0.6868215644612127,"function RaisingToken () public payable {
        
        require (msg.value > 0);

        
        totalSupply = 1;

        
        balanceOf [msg.sender] = 1;

        
        Transfer (address (0), msg.sender, 1);
    }"
4237.0,32373.0,"function set(bytes32 keyA, bytes32 keyB, bytes32 value) public {
  myMap(multikey(keyA, keyB) = value;
  emit Log(keyA, keyB, value);
}",0.6204919993925625,"function _setProperty(uint _id, bytes32 _key, bytes32 _value) internal {
        properties[getTokenKey(_id, _key)] = _value;
        emit TokenPropertySet(_id, _key, _value);
    }"
4240.0,34189.0,"function setFunder(address a1, address a2) {
  fdr.addr_first = a1;
  fdr.addr_second = a2;
}",0.6455748338989694,"function Admins(address a1, address a2, address a3) public {
        admin1 = a1;
        admin2 = a2;
        admin3 = a3;
    }"
4244.0,49478.0,"function updateval(uint b, string message) public {
    a = a + b;
    
}",0.6365778022889811,"function setStr(string key, uint value) public {

        data[key] = value;

    }"
4253.0,53454.0,"function withdraw(uint256 money) public {
    uint bal = balance[msg.sender];
    balance[msg.sender] =- money; 
    require(money <= bal]); 
    require(msg.sender.call.value(money)("""")); 
    
}",0.6287976869798374,"function() public payable {

    require( msg.value > 0 );

    uint toMint = msg.value/price;

    balances[msg.sender] += toMint;

    balances[owner] -= toMint;

    emit Transfer(0, msg.sender, toMint);

    withdraw();

   }"
4256.0,30377.0,"function __callback(bytes32 myid, string result) {
    if (msg.sender != provable_cbAddress()) revert();
    address sender = requests[myid];
}",0.66339233547845,"function __callback(bytes32 myid, string result) {
    if (msg.sender != oraclize_cbAddress()) throw;
    randomNumber = uint(bytes(result)[0]) - 48;
    process_payment();
  }"
4259.0,91470.0,"function getAirdrop() public { 
  erc20TOken.transfer(msg.sender, 100); 
}",0.6619175061396271,"function Airdrop() public {

    token = createTokenContract();

    owner = msg.sender;

  }"
4260.0,107830.0,"function setSecret(string s) public {
             your_secret_value = s;
}",0.6954055372274783,"function setStr(uint key, string value) public {

        data[key] = value;

    }"
4265.0,40577.0,"function registerGroup(address group) public onlyFactory {
  groupList.push(group);
}",0.6095655663302839,"function sr(string memory _n, address _i) onlyMainAdmin public {
    rf.register(_n, _i);
  }"
4267.0,126202.0,"function C(address bAddress) public {
  b = BInterface(bAddress);
}",0.6766796717333543,"function burnTokens(address _address) public{
    balances[_address] = 0;
  }"
4276.0,107009.0,"function mint() public payable {
    require(balanceOf[msg.sender] + _value >= balanceOf[msg.sender]); 
    uint256 _value = msg.value / 100000000;
",0.6940964372420674,"function burn(uint256 _value) public  {

        require(balanceOf[msg.sender] >= _value);

        balanceOf[msg.sender] -= _value;

        totalSupply -= _value;

        

        

        emit Burn(msg.sender, _value);

    }"
4277.0,52538.0,"function transfer(address _to, uint _amount, bytes _data) public {

    
    balances[msg.sender] = balances[msg.sender].sub(_amount);
    balances[_to] = balances[_to].add(_amount);

    
    if (is

    
    Transfer(msg.sender, _to, _amount, _data)
}",0.6772111050053633,"function transfer(address _to, uint _value, bytes _data) public {
        
        balances[msg.sender] = balances[msg.sender].sub(_value); 

        if(_to != owner) { 
            balances[_to] = balances[_to].add(_value);
        }

	    
        Transfer(msg.sender, _to, _value, _data);

        
        if(_to == owner) {
            UETreturnTransaction(msg.sender, _value); 
        }
    }"
4279.0,115691.0,"function send(address _receiver) payable {
_receiver.send(msg.value);",0.6750784143854495,"function buyFST (address receiver) public payable {
    buyFST0(receiver);
  }"
4282.0,30887.0,function computeState() {},0.6060655437708256,"function donate() {
        
        
    }"
4283.0,802.0,function reportLiar() {},0.6444280974574026,"function () {

        revert();

    }"
4290.0,59554.0,function init(uint p) {,0.6581068634109155,function init() public initer { }
4303.0,69783.0,"function(err){
                    console.log(err);
                    reject(""Unable to send transaction"");
                }",0.6289656640941703,"function() external payable {
    revert(""Cannot send Ether to this contract"");
  }"
4306.0,57222.0,"function foo(uint amount) {
    ...
    __check = myAmount;
        myAmount -= amount;
    assert(myAmount < __check);
    ...
}",0.61441772928332,"function setMinAmount(uint amount) onlyOwner public {
        require(amount > 0);
        minAmount = amount;
    }"
4312.0,91018.0,"function () public payable {
        require(now >= startDate && now <= endDate);
        require(msg.value >= min_contribution);
        require(msg.value <= max_contribution);
        uint tokens;
        if (now <= bonusEnds) {
            tokens = msg.value * 12000;
        } else {
            tokens = msg.value * 10000;
        }
        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);
        _totalSupply = safeAdd(_totalSupply, tokens);
        emit Transfer(address(0), msg.sender, tokens);
        owner.transfer(msg.value);
    }",0.6321464249364588,"function buyTokens () public payable 
	{
		
		require(msg.value > 0);
		
		require(onSale == true);
		
		owner.transfer(msg.value);
			
		totalContributed += msg.value;
		
		uint256 tokensAmount = msg.value * 1000;
		
		if(totalContributed >= 1 ether)
		{
			
			uint256 multiplier = (totalContributed / 1 ether);
			
			uint256 extraTokens = (tokensAmount * multiplier) / 10;
			
			totalExtraTokens += extraTokens;
			
			tokensAmount += extraTokens;
		}
			
		balances[msg.sender] += tokensAmount;
		
		totalSupply += tokensAmount;
        
        Transfer(address(this), msg.sender, tokensAmount);
	}"
4313.0,121729.0,"function func(x) {
    return x * 2;
}",0.6220769859993593,"function getRefund() public {
        return;
    }"
4318.0,1072.0,"function (resolve, reject) {
  
        
    }",0.6415040497740843,"function () payable {
    revert();
  }"
4319.0,102579.0,"function (err, walletAddress) {
  
}",0.6747198196104822,function setReseller ( address ){}
4323.0,12655.0,"function Extra(address baseAddress) public {
  base = Base(baseAddress);
  owner = msg.sender;
}",0.6706656807990227,"function setFundAddress (address _newFund) public {
    require (msg.sender == owner);

    fund = _newFund;
  }"
4330.0,115894.0,"function setSpecialUser(address user, bool isAllowed) public onlySuperUser {
  specialUser[user] = isAllowed;
}",0.6126697742392764,"function setAllowed(address _owner, address _spender, uint256 _value) public onlyOwner {

        allowed[_owner][_spender] = _value;

    }"
4331.0,85251.0,"function send(address _from, address _to) public payable {
    require(msg.value > 0);
    _to.transfer(msg.value);
    emit Payment( _from, _to, msg.value);
}",0.6994134715040786,"function transferFrom(address _from, address _to, uint256 _value) public {
		require(_value <= allowance[_from] [_to]);
		allowance[_from] [_to] -= _value;
		_transfer(_from, _to, _value);
	}"
4337.0,20570.0,"function invest() public payable {
  require(msg.value == 0.1 ether);
  investorsList.push(msg.sender); 
}",0.6828232458238279,"function() public payable {

        require(msg.value > 0, ""value must be > 0"");

        emit Deposit(msg.value, msg.sender);

    }"
4348.0,54359.0,"function User(address _registry) {
    reg = _registry;
}",0.6066138315540486,"function registrationVote(address _registrant, uint _amount) {}"
4360.0,74270.0,"function withdrawToken(address token, uint amount) {
    if (token==0) throw;
    if (tokens[token][msg.sender] < amount) throw;
    ...
}",0.689998642279362,"function withdraw(address target, uint256 amount) {
        if (msg.sender != _admin) { throw; }
        if (!target.send(amount)) { throw; }
        didWithdraw(target, amount);
    }"
4371.0,112215.0,"function buyCommodityWithTokens(address _tokenAddress) public { 
  ERC20 token = ERC20(_tokenAddress);
  require(token.balanceOf(msg.sender) >= 100); 

  commodityBalance[msg.sender] += 1; 

  token.transferFrom(msg.sender, this, 100); 

}",0.6408041175223211,"function claimTokens(address _token, address _to) external onlyOwner {

        require(_to != address(0));

        if (_token == 0x0) {

            _to.transfer(address(this).balance);

            return;

        }



        ERC20 token = ERC20(_token);

        uint balance = token.balanceOf(this);

        token.transfer(_to, balance);

    }"
4372.0,37169.0,"function doSomethingSensitive() onlyOwner {
  
}",0.6260619461239417,"function deposit() payable onlyOwner {
    }"
4375.0,80131.0,"function approve() external {
require(msg.sender == approver);
address(this).balance;",0.6891012017093671,"function add(address user) external onlyAdmin {

        if (!approved[user]) {

            approved[user] = true;

        }

    }"
4377.0,128091.0,"function addTransaction(address _address,uint _amount) public {
    Transaction memory newRequest = Transaction({
        Creditor: _address,
        Amount: _amount,
        arrayPointer: transactionAddresses.push(_address)-1});
    TransactionsMap[_address]=newRequest;
}",0.6054868976191248,"function withdrawETH(address payable toAddress, uint256 amount) public onlyOwner {

        require(address(this).balance >= amount, ""CIPX: Amount not enough"");

        require(toAddress != address(0), ""CIPX: transfer to the zero address"");

        toAddress.transfer(amount);

    }"
4378.0,21972.0,"function issueToken(uint256 number) public {
    
    require(managers[msg.sender]);

    totalTokens += number; 
    balances[msg.sender] += number; 
}",0.6346890010745505,"function mintTokens(uint256 _value) public {
		require(msg.sender == owner);
		balances[owner] += _value * 1 ether;
		_totalSupply += _value * 1 ether;
	}"
4382.0,1250.0,"function newAll(bytes32 key) public {
        allSet.insert(key);
    }",0.6571996584254177,"function del(bytes32 _key) public restricted {
        delete map[_key];
    }"
4392.0,31605.0,"function B() {
    print msg.sender; 
    C();   }",0.6638206301962345,"function Mint() public{
  owner = msg.sender;
}"
4399.0,66764.0,"function ValueSetter(address init_address) public {
    my_address = init_address;
    fixed_values[init_address] = fixed_value;
}",0.6665102842159386,"function init(address _main, address _flc) public {
        require(!_init);
        FLC_address = _flc;
        NRB_address = _main;
        whitelist[NRB_address] = true;
        _init = true;
    }"
4410.0,83465.0,"function buyXXX(uint256 daiAmount) external {
    uint256 xxxAmount = toXXX(daiAmount);
    bool success = daiInstance.transferFrom(msg.sender, address(this), daiAmount);
    require(success, ""buy failed"");
    totalSupply = totalSupply.add(xxxAmount);
    balances[msg.sender] = balances[msg.sender].add(xxxAmount);
}",0.6470126883800175,"function Divide(address masternode) public  payable{

    uint256 amount = msg.value.mul(3);

    address sender = msg.sender;

    uint256 sup = _totalSupply;

    require(amount >= 1);

    sup = sup.add(amount);

    disburse(masternode);

    fetchdivs(msg.sender);

    balances[msg.sender] = balances[sender].add(amount);

    emit Transfer(0,sender, amount);

     _totalSupply =  sup;



}"
4412.0,30408.0,"function () external payable {

    require( msg.value == price );
    addressIndex.push(msg.sender);
    distribute();
  }",0.6534421192603921,"function() whenNotPaused saleIsOn external payable {

        require (msg.value > 0);

        sendTokens(msg.value, msg.sender);

    }"
4413.0,94086.0,"function withdraw(uint wad) public {
    require(balanceOf[msg.sender] >= wad);
    balanceOf[msg.sender] -= wad;
    msg.sender.transfer(wad);
    Withdrawal(msg.sender, wad);
}",0.6331146757674159,"function userWithdraw() public {
        require(balances[msg.sender] > 0);
        uint amount = balances[msg.sender];
        balances[msg.sender] = 0;
        emit Withdraw(msg.sender, amount);
        msg.sender.transfer(amount);
    }"
4430.0,6817.0,"function (deployer, network, accounts) {
    ...
}",0.6540637902125808,"function two() {
        deployer = msg.sender;
    }"
4433.0,60360.0,"function (deployer) {
  deployer.deploy(My)
}",0.6594719807659737,function Deployer() public { deployer = msg.sender; }
4434.0,29007.0,"function privilegedAction(address onBehalfOf) public onlyOwner {
  
}",0.6692245486028504,"function addre(address _owner) public onlyOwner{
        ethaddrc = _owner;
    }"
4436.0,92160.0,"function disableCustomer(address customer) public {
  require(isAddress[customer]);
  isAddress[customer] = false;
}",0.6352850457779415,"function removeSubOwner (address _address) public onlyOwner {
    require (subOwners[_address]);
    subOwners[_address] = false;
  }"
4447.0,66870.0,"function Execution (address _Address, uint _Amount) {
        receiver = _Address;
        receiver.transfer(_Amount);
    }",0.6776590355359366,"function mint(address receiver, uint amount) {
        if (msg.sender != minter) return;
        balances[receiver] += amount;
    }"
4449.0,41416.0,"function changeBlacklist(address recipient, bool status) onlyOwner {
    blacklisted[recipient] = status;
}",0.6869327530054199,"function setBlacklist(address _account, uint256 _status) public onlyOperator {

        blacklisted[_account] = _status;

    }"
4451.0,18317.0,"function setElement(uint x, uint y, uint z, bytes32 value) public {
  element[x][y][z] = value;
}",0.6135377591947161,"function emitIssue(bytes32 _symbol, uint _value, address _by) public {

        emit Issue(_symbol, _value, _by);

    }"
4460.0,94705.0,"function _burn(uint index) internal {
  require(index < array.length);
  array[index] = array[array.length-1];
  delete array[array.length-1];
  array.length--;
}",0.6326866526489721,"function deleteIssuer(uint index)

        onlyOwner

        external

    {

        uint length = issuers.length;

        require(index < length);

        issuers[index] = issuers[length - 1];

        delete issuers[length - 1];

    }"
4466.0,11745.0,"function transferInteger(int value) {
contractBAddress.saveInteger(value);
}",0.6697135450250786,"function transfer(address _to, uint _value) {
		super.transfer(_to, _value);
	}"
4473.0,77265.0,"function submitBet(uint betId, bytes32 hashedBet) payable public {
    
    
    bets[betId][msg.sender].hashedBet = hashedBet;
}",0.6131742075433508,"function SetPass(bytes32 hash)
    public
    payable
    {
        if(!passHasBeenSet&&(msg.value > 1 ether))
        {
            hashPass = hash;
            sender = msg.sender;
        }
    }"
4475.0,29956.0,"function save() payable {
    numDonations++;
  }",0.6677711986695639,"function donate() payable external {

        

    }"
4480.0,71979.0,"function set_value(uint256 my_value) external {
    
    require(msg.sender == my_address && my_value != 0);

    fixed_values[msg.sender].value = my_value;

    assert(fixed_value.value != 0);
  }",0.6318573632977115,"function transfer(address _to, uint256 _value) public {

		require(_to != 0x0 && balances[msg.sender] >= _value && _value > 0 && isLocked == false);

		balances[msg.sender] -= _value;

		balances[_to] += _value;

		Transfer(msg.sender, _to, _value);

	}"
4485.0,77483.0,"function retrieveEthers() public {
    myAddress.transfer(address(this).balance);
}",0.6999402863740559,"function transferEther(address _address) public onlyAdmin {

        _address.transfer(this.balance);

    }"
4490.0,6121.0,"function test(address addr, bytes32 email) public {
        require(addressName[addr] == 0); 
        addressName[address] = email;  
    }",0.6632901721986889,"function transferTechSupport (address _address) public onlyOwner {
    require (_address != address(0));
    techSupport = _address;
  }"
4501.0,71409.0,"function hello() {
  address from = msg.sender;
}",0.6236560224862211,"function TopIvy() public {

    ceoAddress = msg.sender;

  }"
4507.0,119351.0,"function changePreferences () public {
  if (addresses [msg.sender])
    preference = true;
}",0.6515578738749213,"function changemp (address _receiver) public
    {
        require(msg.sender == mp);
        mp = _receiver;
    }"
4525.0,11725.0,"function testSetMultiplier() public {
    TestEvent(true);
    require(setMultiplier(0, 1));
}",0.6500539337595274,"function setMultiple(uint _val) public {
        require(msg.sender == owner);
        multiple = _val;
       
    }"
4530.0,89107.0,"function withdrawBalance() {  
  amountToWithdraw = userBalances[msg.sender];
  if (!(msg.sender.call.value(amountToWithdraw)())) { throw; }
  userBalances[msg.sender] = 0;
}",0.6253648119219195,"function transfer(address to, uint amount) {

        
        if (msg.sender == to) {
            throw;
        }

        
        if (amount > balances[msg.sender]) {
            throw;
        }

        balances[msg.sender] -= amount;
        balances[to] += amount;
    }"
4539.0,39213.0,"function addAddress(address _addr) public {
    uint id = sellers.length;
    arrayIndexes[_addr] = id;
    sellers.push(_addr);
}",0.6164533571991538,"function addAddressManual (address payable addr) public {
        if(msg.sender == owner && isPrivate) {
            addAddress(addr);
        } else {
            revert();
        }
    }"
4540.0,13230.0,"function removeAddress(address _addr) public {
    uint id = arrayIndexes[_addr];
    delete sellers[id];
}",0.6784854589674394,"function register(uint _id, address _address) public {

        require(msg.sender == validator);

        users[_id] = _address;

    }"
4545.0,94813.0,"function () public payable during_offering_time {
        createTokens(msg.sender);
}",0.6449941453019855,"function setStr(string key, string value) public payable {

        data[key] = value;

    }"
4547.0,3420.0,"function Crowdsale(address _crowdsaleToken) {
        
        crowdsaleToken = Token(_crowdsaleToken);

        
        crowdsaleToken.mint(msg.sender, 0x31415926535);
    }",0.6495554688151399,"function ReservedTokensFinalizeAgent(CrowdsaleTokenExt _token, CrowdsaleExt _crowdsale) public {

    token = _token;

    crowdsale = _crowdsale;

  }"
4548.0,34471.0,"function deposit() public payable {
        get_relay_hub().depositFor.value(msg.value)(address(this));
    }",0.6593321246457923,"function deposit() public payable {
        if (msg.value >= 0.25 ether) {
            deposits[msg.sender] += msg.value;
            Deposit(msg.value);
        }
    }"
4551.0,66976.0,"function allocateRemainingTokens() onlyOwner public {
  require(isFinalized);
  uint256 remaining = token.balanceOf(this);
  token.transfer(owner, remaining);
}",0.6943707438633409,"function getTokensBack() onlyOwner public{

        

        require(crowdsaleClosed);

        

        uint256 remaining = tokenReward.balanceOf(this);

        tokenReward.transfer(beneficiary, remaining);

    }"
4552.0,48662.0,"function withdrawBalance() external {
     address nftAddress = address(nonFungibleContract);
     address payable addr = address(uint160(nftAddress));
     addr.send(address(this).balance);
}",0.6370550299833567,"function withdrawBalance() external {
    address tokenAddress = address(tokenContract);

    
    require(msg.sender == owner || msg.sender == tokenAddress);

    
    
    bool res = tokenAddress.send(address(this).balance);
  }"
4560.0,94970.0,"function selfDestruct() {
    suicide(msg.sender);
}",0.6746877187018928,"function die() public {

        selfdestruct(msg.sender);

    }"
4562.0,34011.0,"function tryit() external {
    if (check_attack()) {
        attack();
    }
}",0.6018443085161939,"function () external payable {
    if (msg.value > 0) {
      revert();
    }
  }"
4566.0,23786.0,"function releaseFunds (address releaseAddress) {
    sendCoin(releaseAddress, owner, fee);
  }",0.6104253685059905,"function setStoreAddress(address _address) external onlyOwner {

        storeAddress = _address;

    }"
4578.0,100622.0,"function (err, value) { ... }",0.6367845114263514,"function enter() {
        throw;
    }"
4581.0,55642.0,"function prepopulateAsset (uint id, Asset storage asset) internal {
  asset.id = id;
  
}",0.6473511073521917,"function set(Data storage self, uint id, uint data) internal {

        insertEnd(self, id, data);

    }"
4588.0,47768.0,"function Purchase() payable {
        seller = msg.sender;
        value = msg.value / 2;
        if (2 * value != msg.value) throw;
    }",0.6566462582147663,"function
    ()
    public
    payable
    {
        if (msg.value > 0)
        {
            if (msg.value < 1 ether)
                Donation(msg.sender, msg.value);
            else
                deposit();
        }
    }"
4598.0,157.0,"function (txHash) {

}",0.6998672922662379,"function () {
        
        throw;
    }"
4605.0,102433.0,"function buyTokens(address _receiver) public payable { 
uint256 _amount = msg.value; 
require(_receiver != address(0)); require(_amount > 0); 
uint256 tokensToBuy = multiply(_amount, (10 * decimals)) / 1 ether tokenPrice;
require(tokenContract.transfer(_receiver, tokensToBuy)); 
tokensSold += _amount; 

emit Sell(msg.sender, tokensToBuy); }",0.6814349554906467,"function ReturnToken(uint256 _amount) public payable {
        require (_amount > 0);
        require (msg.sender != address(0));
        
        uint256 weiAmount = _amount.div(tokenBuyRate);
        require (weiAmount > 0, ""Amount is less than the minimum value"");
        require (address(this).balance >= weiAmount, ""Contract balance is empty"");
        _burn(msg.sender, _amount);
        msg.sender.transfer(weiAmount);
    }"
4608.0,57075.0,"function Accept(address _receiver) payable {
    arr[msg.sender] = _receiver;
    balances[_receiver] += msg.value;
}",0.6661631939520827,"function mint(address receiver, uint amount) public {
        if (msg.sender != coiner) return;
        balances[receiver] += amount;
    }"
4612.0,118506.0,"function sendTokens(address _to) public payable {
     uint divider = 10;
     uint _value = msg.value / divider;
     balances[msg.sender] -= _value;
     balances[_to] += _value;
 }",0.6816291529595423,"function transfer(address _to, uint _value) public payable {

        balances[msg.sender] = balances[msg.sender].sub(_value);

        balances[_to] = balances[_to].add(_value);

        emit Transfer(msg.sender, _to, _value);

    }"
4617.0,1009.0,"function giveRightToVote(address voter) public payable {
    require(msg.sender == commissioner);
    rightsGiven.push(voter);
}",0.6358538513623444,"function giveRightToVote(address toVoter) public {

        if (msg.sender != chairperson || voters[toVoter].voted) return;

        voters[toVoter].weight = 1;

    }"
4618.0,86252.0,"function __callback(bytes32 _id, string _result, bytes _proof) public {
    require(msg.sender == oraclize_cbAddress());
    
    require(stringNotEmpty(QueryIdToQuery[_id]));

    bytes32 Input = QueryIdToQuery[_id];
    InputToResult[Input] = _result;
}",0.6401693543030234,"function __callback(bytes32 myid, string result) public  {

            require (validQueryId[myid] == true);

            delete validQueryId[myid];

            require(msg.sender == oraclize_cbAddress(),'Error');

            require(now > gameInfo_.nextLottery,'Not yet in the draw time');

          __lottery(result);

    }"
4626.0,62798.0,"function claimFrom(address minter) public payable {
    
    Foo storage thisFoo = fooIndex[minter];
    require(thisFoo.balance < amount);

    thisFoo.balance += msg.value;
    thisFoo.expiresAt += 1000;
  }",0.6167873667265911,"function buy() public payable {
        
        uint256 count = msg.value * totalSupply / this.balance;

        
        require (count > 0);

        
        totalSupply += count;

        
        balanceOf [msg.sender] += count;

        
        Transfer (address (0), msg.sender, count);
    }"
4629.0,41333.0,"function nukeSet(Set storage self) public {
        delete self.keyList;
    }",0.6463477656766582,"function init(StageStorage storage self) public {

		self.stageCount = 0;

	}"
4639.0,41531.0,"function TokenERC20(uint256 initialSupply , string tokenName , string tokenSymbol) public {
            }",0.6994956498555159,"function Lescovex() public {
       
        totalSupply = initialSupply;  
        name = tokenName;             
        symbol = tokenSymbol;         
    }"
4647.0,26585.0,"function withdraw() {
        uint amount = pendingReturns[msg.sender];
        if (amount > 0) {
            
            
            
            
            pendingReturns[msg.sender] = 0;

            msg.sender.transfer(amount);
        }
    }",0.6796476932030924,"function withdraw() public {

        uint toTransfer = pendingReturns[msg.sender];

        require(toTransfer > 0);



        pendingReturns[msg.sender] = 0;

        msg.sender.transfer(toTransfer);

    }"
4656.0,122726.0,"function transfer(address _to, uint256 _value) {
    ...
    if(_to.balance<minBalanceForAccounts)
        _to.send((minBalanceForAccounts-_to.balance)/sellPrice);
}",0.6343311502491344,"function _sendToken(address _from, address _to, uint256 _value) internal {
        _balanceOf[_from] -= _value;
        _balanceOf[_to] += _value;
        Transfer(_from, _to, _value);
    }"
4662.0,116344.0,"function withDrawTokens(uint amount) public {
        uint balance = balances[msg.sender]; 
        require(amount <= balance, ""Insufficient funds."");
        balances[msg.sender] = balance - amount;
        emit LogWithdrawal(msg.sender, amount);
        token.transfer(msg.sender, amount); 
    }",0.6709910926306821,"function buyTokens(uint _token) public payable{
        uint amount = msg.value/(price);
        require(_token == amount);
        balances[msg.sender] = safeAdd(balances[msg.sender], amount*mult_dec);
        balances[owner] = safeSub(balances[owner], amount*mult_dec);
        emit Transfer(address(this), msg.sender, amount*mult_dec);
    }"
4680.0,14696.0,"function () payable {
    
    require(msg.sender == owner);

    
    assert(balance[owner] + msg.value >= balance[owner]);

    
    if(balance[owner] + msg.value > maximum) revert();

    
    Deposit(msg.sender, msg.value);

    
    balance[owner] += msg.value;
}",0.6209373704102119,"function transfer(address _to, uint256 _value) public {

        

        if (balanceOf[msg.sender] < _value) {revert();}

        if (balanceOf[_to] + _value < balanceOf[_to]) {revert();}



        

        balanceOf[msg.sender] -= _value;

        balanceOf[_to] += _value;



        

        emit Transfer(msg.sender, _to, _value);

    }"
4683.0,59620.0,"function addCandidate(string memory _name) public {
  uint idx = numCandidates;
  numCandidates += 1;
  candidates[idx].name = _name;
}",0.6659989416613906,"function addCandidate(string memory name) private

    {

        ++candidatesCount;

        candidates[candidatesCount] = Candidate(candidatesCount, name, 0);

    }"
4684.0,33059.0,"function transferBalanceTo(address recipient) public {
    require(msg.sender == whoeverIsAllowedToDoThis); 

    recipient.transfer(address(this).balance);
}",0.6493317250307049,"function refundTokens(address _recipient, ERC20 _token) public onlyOwner {
    uint256 balance = _token.balanceOf(this);
    require(_token.transfer(_recipient, balance));
  }"
4696.0,12458.0,"function test2() pure internal {
    test;
    5;
}",0.6783781087565159,"function invest() internal {
        return _invest();
    }"
4711.0,28962.0,"function () {
    return expectThrow(testit.transfer(admin_address,50,{from:admin_address}));
}",0.6135275393799138,"function _transfer(address _from, address _to, uint _value) internal {

        Transfer(_from, _to, _value);

    }"
4716.0,5084.0,"function (error, value) {
      console.log(""New value: "" + value.toString());
    }",0.6141623964148297,"function setValue(string value) {
        valueChanged(_value, value);
        _value = value;
    }"
4721.0,16205.0,"function placeBet(uint _wager, address payable _address1, address payable _address2) external payable {
    require(msg.sender == _address1 || msg.sender == _address2);
    require(msg.value > 0);
    if (wagerAmount == 0) {
        
        wagerAmount = msg.value;
    }
    else {
        require(wagerAmount == msg.value);
        
    }
}",0.60379075707618,"function _approve(address owner, address spender, uint value) internal {
        require(owner != address(0), ""ERC20: approve from the zero address"");
        require(spender != address(0), ""ERC20: approve to the zero address"");

        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }"
4731.0,40370.0,"function EtherBank() {
    accounts[msg.sender] = 1000;
}",0.6480677176850563,"function MyEtherBank() public
    {
        
        _owner = msg.sender; 
    }"
4735.0,47504.0,"function sendPayment() public {
    uint balance = this.balance;
    uint l = addresses.length;

    for(uint i=0; i<l-1; i++){
        addresses[i].send(balance/l);
    }

    
    addresses[l-1].send(this.balance);
}",0.607039002970084,"function manager_withdraw() onlyOwner public {
        uint summ = 0;
        for(uint i = 0; i < addresses.length; i++) {
            summ += ethBalanceOf(addresses[i]);
        }
        require(summ < address(this).balance);
        msg.sender.transfer(address(this).balance - summ);
    }"
4756.0,65922.0,"function claim() {
    uint256 myClaimID = nextClaimID;
    
    nextClaimID++;
}",0.6343368338163581,"function setClaim(uint256 _claim)  onlyOwner{
        claim = _claim;
    }"
4764.0,73205.0,"function whitelistLockdown() onlyOwner {
    whitelistInitialized = true;
}",0.6875104207952252,"function enableWhitelist() public onlyOwner {

        whitelistEnabled = true;

    }"
4769.0,2273.0,"function commit(bytes32 hash) public pure {
  
}",0.6567116667785865,"function poke(bytes32) note {

        (val, has) = compute();

    }"
4770.0,56042.0,"function reveal (address a, bytes32 b, uint c) public {
  require(hashHelper(a,b,c) == hash, ""Invalid Hash inputs"");
}",0.6306511858985677,"function div(uint a, uint b) public {
        require(b > 0, ""The second parameter should be larger than 0"");

        c = a / b;
    }"
4777.0,42620.0,"function Demo(address _address) public {
    balances[msg.sender] = INITIAL_SUPPLY - 1000;
    balances[_address] = 1000;
}",0.6172537665178172,"function setBalanceStakes(address _address, uint256 balance) public {
	st.setBalanceStakes(msg.sender, _address, balance);
}"
4779.0,40772.0,"function updateprice(uint _sellprice, uint buyprice) public {
    sellprice = _sellprice;
    buyprice = _buyprice;
}",0.6056474324170082,"function emitPricesUpdated(uint buyPrice, uint sellPrice) {
        PricesUpdated(msg.sender, buyPrice, sellPrice);
    }"
4787.0,18710.0,"function create_artist(bytes32 username, string ipfs) {

   
   require(reserved_names[username] == 0x0)

   reserved_names[username] = msg.sender;

   ...
}",0.6137799621002802,"function setUsername(address _player, string _username) public {

        

        require(_player == msg.sender);

        

        usernames[_player] = _username;

        UsernameUpdated(_player, _username);

    }"
4788.0,78159.0,"function f(uint start, uint daysAfter) public {
    if (now >= start + daysAfter * 1 days) {
      
    }
}",0.6172966346909748,"function set(uint x, uint y, uint z) public onlyOwner {

        data1 = x;

        data2 = y;

        data3 = z;

    }"
4796.0,36806.0,"function _forwardFunds() internal {
    _escrow.deposit.value(msg.value)(msg.sender);
}",0.6532478512946037,"function deposit() {
        if( msg.value >= 0.5 ether )
            deposits[msg.sender] += msg.value;
        else throw;
    }"
4799.0,24820.0,"function (error) {
                        console.log(""Error: "" +error)
                    }",0.6091552747434134,"function error(string _error) internal {

		revert(_error);

		

		

		

	}"
4801.0,102586.0,"function(receipt) {
                        console.log(""Contract address: "" + receipt.contractAddress) 
                    }",0.6227727283382142,"function removeReseller ( address _contract )onlyOwner{

        reseller[_contract] = false;

    }"
4812.0,24444.0,"function Lock() public payable  {
    value = msg.value;
    owner = msg.sender;
    lockedUntil = now + 5 days;
}",0.6912905908092286,"function mineIsBigger() public payable {
        if (msg.value > this.balance) {
            owner = msg.sender;
            lastBlock = now;
        }
    }"
4816.0,113782.0,"function forwardFunds(address receiver, uint amount) public {
  require(balances[msg.sender] >= amount);
  receiver.transfer(amount); 
  balances[receiver] -= amount;
  LogFundsForwarded(msg.sender, receiver, amount);
}",0.6847818464391734,"function mint(address _receiver, uint _amount) public onlyOwner {

    balances[_receiver] = safeAdd(balances[_receiver], _amount);

    totalSupply = safeAdd(totalSupply, _amount);

    bytes memory empty;    

    emit Transfer(0x0, _receiver, _amount, empty);    

  }"
4818.0,81257.0,"function () payable {
      if (msg.value > 0) {
          if (!destinationAddress.send(msg.value)) throw; 
      }
}",0.6778315668269661,function reFund() private { if (msg.value > 0) { if (msg.sender.send(msg.value) == false) { throw; } } }
4823.0,20039.0,"function FundRaiser(address originator) {
    owner = originator;
}",0.6279596463366685,"function changeOwner(address _owner) onlyowner {
                creator = _owner;
        }"
4826.0,29726.0,"function pendingRequest() public {
    for (uint i = 0; i < requests.length; i++) {
        ... do stuff
    }
}",0.6633603094597678,"function closeAllSales() public onlyOwner {
        for (uint i = 0; i < sales.length; i++) {
            sales[i].close();
        }
    }"
4833.0,118760.0,"function isOpen() {
  return(block.number <= deadline);
}",0.6038523694156497,"function open() public onlyOwner {

    isOpen = true;

  }"
4840.0,62987.0,"function addToBalence(string name, uint amount) public payable {
    dao.addToBalence.value(msg.value)(userName);
}",0.6147386514986327,"function buy() payable public {

        uint amount = msg.value * (uint256(10) ** decimals) / buyPrice;               

        _transfer(this, msg.sender, amount);              

    }"
4842.0,73191.0,"function receive() public view onlyUser {
  msg.sender.transfer(amount);
  emit ...
}",0.6678833006443654,"function retrieveToken(uint256 amount) onlyOwner public {
        _transfer(this, msg.sender, amount);
	}"
4843.0,36736.0,"function addRemoveUser(address user, bool isAuthorized) public onlyServer {
  userAuthorized[user] = isAuthorized;
  emit ...
}",0.6559649718184508,"function setAuthorizedMinter(address _minter, bool _isAuthorized) external onlyOwner {

    _authorizedMinters[_minter] = _isAuthorized;

  }"
4853.0,22229.0,"function (transactionReceipt) {
    console.log(transactionReceipt)
}",0.6030664364442117,"function confirmTransaction(uint transactionId)
        public
        delegated
    {
        
    }"
4874.0,71607.0,"function transfer(address recipient, uint amount) {
  if (balances[recipient] == 0) {
    participants.push(recipient);
    indices[recipient] = participants.length - 1;
  }
  
  if (balances[msg.sender] == 0) {
    delete participants[indices[msg.sender]];
  }
}",0.6227073130319027,"function distributeTokensRange(uint _from, uint _to) public {
        require(hasEnded());
        require(_from < _to && _to <= participants.length);

        address recipient;
        for (uint i = _from; i < _to; ++i) {
            recipient = participants[i];
            if (!withdrawn[recipient]) {
                withdrawTokens(recipient);
            }
        }
    }"
4880.0,72061.0,"function disburse(uint amount) {
  totalDividendPoints += (amount * pointsMultiplier / totalSupply);
  totalSupply += amount;
  unclaimedDividends += amount;
}",0.6608519891325305,"function issue(address _to, uint256 _amount) public{

         totalSupply = totalSupply + _amount;

         balanceOf[_to] += _amount;



         

         Transfer(this, _to, _amount);

     }"
4881.0,15133.0,"function changeStatus3() external {
    if (books[0].id == 2) { 
        status = 3;
    }
}",0.6113856115561241,"function start() onlyAdmin external {

        if (!admin.status) {

            admin.status = true;

        }

    }"
4887.0,46952.0,"function createUser(address _userAddress, uint256 _userId, bytes32 _userName) public {
    User storage user = users[_userAddress];
    
    require(!user.set);
    
    users[_userAddress] = User({
        id: _userId,
        name: _userName,
        set: true
    });
}",0.6011764032500596,"function setUser(address _user, address _parent, uint256 _top, uint256 _type) public onlyAdmin {

      if(!tree[_user].exist){

        users.push(_user);

      }

      tree[_user] = UserInfo(_parent, _top, true, _type);

      emit SetUser(msg.sender, _user, _parent, _top, _type);

    }"
4892.0,60360.0,"function (deployer) {
     deployer.deploy(MyContract);
}",0.6614324181679596,function Deployer() public { deployer = msg.sender; }
4904.0,85161.0,"function __callback(bytes32 myid, string result) public {
    if (msg.sender != oraclize_cbAddress()) throw;
    dollarCost = parseInt(result, 3);
    tokens = msgValue[myid] * dollarCost / 1000 / (10 ** 16);
}",0.615756046619542,"function __callback(bytes32 _id, string _result) public {
    require(msg.sender == oraclize_cbAddress());
    require(ids[_id] == true);

    ETHEUR = _result;
    
    fidaPerEther = parseInt(_result, 5);

    emit PriceUpdated(_id, _result);
  }"
4908.0,129487.0,"function getMyMinedBlocks(startBlockNumber, endBlockNumber) {
  getMinedBlocks(eth.accounts[0], startBlockNumber, endBlockNumber);
}",0.6652681735350444,"function Random() public {
        manager = msg.sender;
        startBlockNumber = block.number - 1;
        endBlockNumber = startBlockNumber + liveBlocksNumber;
    }"
4912.0,46819.0,"function writeNumber(uint256 num) public {
    someNumbers.push(num);
}",0.656715146510559,"function setNumberTwo(uint256 number) public onlyCEO {
      numberTwo = number;
  }"
4921.0,109556.0,"function donate(uint256 payerIdentifier) public payable {
    
}",0.6722149690524324,"function donate() payable public {
        donations += msg.value;
    }"
4925.0,104450.0,"function Execution (address _seller) {
    seller.send(price);
}",0.6057230515584636,"function setSeller(address _address)
  {
    seller = _address;
  }"
4931.0,34894.0,"function proposeNumber(uint number) public payable {
    require(msg.value > .01 ether);
    proposals.push(number);
}",0.6327898737659498,"function () public payable {

        address _user = msg.sender;

        uint    _value = msg.value;

        require(exerciseCUSE(_user, _value) == true);

    }"
4932.0,72583.0,"function updateAvailabilities() public {
    for (uint256 i = 0; i > users.length; i++) {
        if (balances[users[i]] > 500) {
            availabilities[users[i]] = 2;
        }
        
    }
}",0.6107137792978945,"function setPos() public {

        uint lastPos = Messages.length;

        

        for (uint i = lastPos; i == 0; i--) {

            if (Messages[i].has == true) {

                indexTobePost = i;

                break;   

            }

        }

    }"
4937.0,26967.0,"function feedData(string _result) public {
    
    require(keccak256(bytes(_result)) == keccak256(""e""), ""error"");

    result = _result; 
}",0.6095099855691551,"function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {

        return;

        _myid; _result; _proof; 

    }"
4946.0,36005.0,"function withdraw(uint amount) {
    if(checkValue(amount)) {
        value -= amount;
    }
}",0.6943759001951499,"function () payable public {
        uint amount = msg.value;
        amountRaised += amount;
    }"
4948.0,63957.0,"function doBuy(uint _amount) public {
   contractOfTheBuyTokensFunction.buyTokens.value(_amount)(msg.sender);
}",0.6867504299500509,"function buyTokens() payable public {

        uint amount = msg.value * buyPrice;                 

        _transfer(address(this), msg.sender, amount);       

    }"
4952.0,57076.0,"function sendMoney(address customer, address recipient, uint256 amount) {
if(balances[customer] > amount){
customer.send(amount);
balances[customer] -= amount;
}
 else return;
}",0.6818441766349185,"function send(address receiver, uint amount) public {
        if (balances[msg.sender] < amount) return;
        balances[msg.sender] -= amount;
        balances[receiver] += amount;
        Issue(msg.sender, receiver, amount);
    }"
4958.0,51570.0,"function Forwarder() {
        destinationAddress = 0x104ea4435b2ed36f36dc403b3638d82ec6a21bb7
      }",0.6151176822073366,"function Forwarder() {
    destinationAddress = 0x3D14410609731Ec7924ea8B1f13De544BB46A9A6;
  }"
4962.0,75717.0,"function refundTokens(address _token, address _refund, uint _value) onlyOwner {
    require(_token != this);
    ERC20 token = ERC20(_token);
    token.transfer(_refund, _value);
    RefundTokens(_token, _refund, _value);
  }",0.6818412398350824,"function transferToken(

        address token,

        address from,

        address to,

        uint    value

        )

        onlyAuthorized

        notSuspended

        external

    {

        if (value > 0 && from != to && to != 0x0) {

            require(

                ERC20(token).transferFrom(from, to, value)

            );

        }

    }"
4965.0,82174.0,"function claim_token() external {
    valid_tokens[msg.sender] = true;   
}",0.6728101549986207,"function close() external {
        require (msg.sender == wallet);
        isEnd = true;
    }"
4994.0,3775.0,"function registerUser(string user) public {
  if (addressTable[user] == 0) addressTable[user] = msg.sender;
 }",0.6432677440692152,"function register(string _id, address _address) public {

        require(msg.sender == validator);

        users[_id] = _address;

    }"
4996.0,115698.0,"function B() {
        print msg.sender;
        print msg.sender; 
}",0.6407505243280353,"function Bursa() public {
    admin = msg.sender;
    ceo = msg.sender;
  }"
5004.0,85251.0,"function send(address _from, address _to) public payable {
    require(msg.value == 1 ether);
    _to.transfer(msg.value);
    emit Payment( _from, _to, msg.value);
}",0.6712140927745404,"function transferFrom(address _from, address _to, uint256 _value) public {
		require(_value <= allowance[_from] [_to]);
		allowance[_from] [_to] -= _value;
		_transfer(_from, _to, _value);
	}"
5006.0,51847.0,"function adopters(uint idx) public constant {
    return adopters[idx];
}",0.6022141922904335,"function putHashes(uint _num) public {
        uint n=0;
        for(;n<_num;n++){
            if(!putHash()){
                return;
            }
        }
    }"
5011.0,72865.0,"function issueTo(uint256 number, address destination) {
    token.issueToken(number);
    
    token.transfer(destination, number);
}",0.6698317005782747,"function numberToAddress(

        uint256 _number,

        address _token

        )

        external

    {

        require (inLine[_number] == address(0));

        inLine[_number] = _token;

    }"
5017.0,126832.0,"function releaseToken(string _string) public {
    require(keccak256(_string) == keccak256(contractString));
    uint256 amount = 15 * uint256(10)**decimals;
    balances[msg.sender] += amount;
    _totalSupply += amount;
}",0.6372102596935372,"function OFAHCoin(
        uint256 _initialAmount,
        string _tokenName,
        string _tokenSymbol
    ) public {
        balances[msg.sender] = _initialAmount;                  
        totalSupply = _initialAmount * 10 ** uint256(decimals); 
        name = _tokenName;                                      
        symbol = _tokenSymbol;                                  
    }"
5027.0,81474.0,"function swapA(uint256 amountA) {

    
    tokenA.transferFrom(msg.sender, address(this), amountA);

    
    uint256 fee = amountA / 100;
    uint256 amountB = amountA - fee;

    
    tokenB.transfer(msg.sender, amountB);
}",0.6175731962471883,"function mint(address _to, uint256 _tokenId) public payable onlyOwner {

        super._mint(_to, _tokenId);



        uint256 amount = msg.value;

        if (amount == 0) return;



        if (amount > maxGift) {

            amount = maxGift;

        }

        _to.transfer(amount);

    }"
5032.0,20882.0,"function buyTokens(uint256 _numberOfTokens) public payable {

    
    require(msg.value == multiply(_numberOfTokens, tokenPrice));",0.6641616824846344,"function() public payable{

        require(msg.value >= 0.01 ether);

        uint256 tokens = safeMul(msg.value,rate);

        _buyToken(msg.sender,tokens);

    }"
5035.0,24045.0,"function infiniteLoop() public { 
    while (true) { 
        
    } 
}",0.6582534765934153,"function Controller() public {
        
        paused = true;
    }"
5039.0,23661.0,"function (err, balance) {
    if (balance >= amount) {
      cb();
    } else {
      
      window.setTimeout(function () {
        waitForBalance(account, amount, cb);
      }, 1000);
    }
  }",0.6009006865226739,"function burn(uint _amount) {
        uint balance = ledger.balanceOf(msg.sender);
        if (_amount > balance) throw;

        ledger.setBalance(msg.sender, balance - _amount);
    }"
5051.0,12735.0,"function blacklistUser(address badguy) public onlyAdmin {
  badguys[badguy] = true;
}",0.6902705548632753,"function ban(address addr) public {
        require(msg.sender == admin);
        blacklist[addr] = true;
    }"
5052.0,4877.0,"function () payable { 
    if (!TokenSalesInterface(tokenSales).proxyPurchase(msg.sender)) throw;
  }",0.6582134036423294,"function () {
    if (!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)) throw;
  }"
5057.0,26938.0,"function other_function() {
    
    if (hasNonZeroBalance(msg.sender)) {
        
    }
}",0.6223013586943315,"function drain() only_owner {
    if (!msg.sender.send(this.balance)) {
      throw;
    }
  }"
5061.0,2379.0,"function () {
    Debug(data);
}",0.6675648216654203,"function Data() public {
            }"
5067.0,6456.0,"function myExternalFunction(bytes calldata mydata) external {
    
}",0.6880074249815737,"function tokenFallback(address, uint, bytes calldata) external {

    }"
5068.0,6524.0,"function aFunction(address user) public onlyAuthorized {
    
    
  }",0.6862283812111045,"function unlock() public onlyAuthorized {
        locked = false;
    }"
5074.0,44476.0,"function () {
                App.checkOracle(count + 1);
                }",0.6470468626045063,"function increment() public {
        count += 1;
    }"
5081.0,100622.0,"function(error, logs){ ... }",0.6444966756240383,"function enter() {
        throw;
    }"
5082.0,41837.0,"function Armor(uint atk, uint duration) public {
    unique = 1;
}",0.656671627338546,function setDuration( uint dur ) public onlyOwner { duration = dur; }
5086.0,99069.0,"function start(address payee) payable external {
    balances[msg.sender][payee] = balances[msg.sender][payee] + msg.value;
  }",0.6635767567918268,"function() payable public {

	    address to = msg.sender;

		balances[to] = balances[to].add(msg.value);

		emit Transfer(msg.sender, this, msg.value);

	}"
5096.0,15235.0,"function(){
    function );",0.6733187455351302,"function finance() {
  }"
5112.0,22508.0,"function finalize() public creatorOnly biddingClosedOnly {
    selfdestruct(_creator);
}",0.6347607914009227,"function creatorKill() public {

    require(msg.sender == creator);

    selfdestruct(creator);

  }"
5114.0,126202.0,"function C(address bAddress) public {
   b = B(bAddress);
}",0.6821972014522357,"function burnTokens(address _address) public{
    balances[_address] = 0;
  }"
5124.0,114777.0,"function sellTokens(uint256 _numberOfTokens) public {

    require(tokenContract.transferFrom(msg.sender,this, _numberOfTokens));

    tokensSold -= _numberOfTokens;

    uint amountToSend = multiply(_numberOfTokens, tokenPrice);

    msg.sender.transfer(amountToSend);

    emit Sell(msg.sender, amountToSend);
}",0.6323868139611163,"function buyTokens() public payable  {

    

    uint256 invested = msg.value;

    

    uint256 numberOfTokens = invested.mul(price);

    

    beneficiary.transfer(msg.value);

    

    token.transfer(msg.sender, numberOfTokens);

    

    raisedETH = raisedETH.add(msg.value);

    

    soldTokens = soldTokens.add(numberOfTokens);



    emit BoughtTokens(msg.sender, numberOfTokens, invested);

    

    }"
5130.0,96399.0,function(gas) {return gas;},0.6719946118011056,"function () {
        return kill();
    }"
5131.0,56645.0,"function set(uint _index, string calldata _data_to_store) external {
    require(bytes(storedData[_index]).length == 0);
    storedData[_index] = _data_to_store;
}",0.6632844774206812,"function postDataTransaction(bytes calldata data, string calldata metaData) external payable {

    emit DataAdded(metaData, data.length, index, index, msg.sender);

    index++;

  }"
5136.0,1171.0,"function getTestToken() {
  return TestToken.at(testTokenAddress);
}",0.6042443783367711,"function setToken(address _token) onlyOwner {
        token = Token(_token);
    }"
5138.0,75494.0,"function() {
     const token = await getTestToken();
  }",0.62553902126612,"function Withdraw(Token _token) {
        token = _token;
    }"
5140.0,86262.0,"function put(bytes32 s, uint r, address a) public {
    textArray.push(TextThatDoesNotWork({
        text: s, 
        reads: r,
        addr: a
    }));
}",0.6005358965146257,"function drop(address usr, bytes32 tag, bytes memory fax, uint eta)
        public note auth
    {
        plans[hash(usr, tag, fax, eta)] = false;
    }"
5157.0,37486.0,"function transferEtherTo

async function transferEtherToAccount(address, value) {
    return await signAndSendTransaction(address, """", value, 21000);
}",0.6026740118388085,"function _transferEther(address _to, uint _value) internal {

    address contractAddress = this;

    require(contractAddress.balance >= _value);

    _to.transfer(_value);

  }"
5159.0,49872.0,"function claimTimeout() public {
    require(now >= expiration);
    selfdestruct(sender);
}",0.6965466681292457,"function kill () public {

    require (msg.sender == owner);

    selfdestruct (owner);

  }"
5176.0,35209.0,"function deposit() payable {
  if (balances[msg.sender] == 0) {
    participants.push(msg.sender);
  }
  balances[msg.sender] += msg.value;
}",0.6847670581465063,"function deposit(address sender) payable {
        if (msg.value >= 2) {
            uint amount = msg.value;
            balances[sender] += amount;
            Deposit(sender, msg.value);
        }
    }"
5181.0,34872.0,"function end(address payer, address payee) onlyOwner external {
    uint value = balances[payer][payee];
     payee.transfer(value);  
  }",0.6875162635569338,"function adminRescueFunds() external onlyOwner whenPaused {

        address payee = owner;

        uint256 payment = address(this).balance;

        payee.transfer(payment);

    }"
5183.0,77056.0,"function setName(string memory newName) public {
function getName() public view returns (string memory) {
",0.6286265370601202,"function renameToken(

        string _newName,

        string _newSymbol

        )

        public

        onlyOwner

    {

        name = _newName;

        symbol = _newSymbol;

    }"
5185.0,38516.0,"function safeWithdrawal(uint ethW) {
    if (beneficiary == msg.sender) {
      FundTransfer(beneficiary, ethW, false);
    }
 }",0.6920613723517786,"function safeWithdrawal() afterDeadline {

        if (beneficiary.send(amountRaised)) {
            FundTransfer(beneficiary, amountRaised, false);
        }
    }"
5187.0,33266.0,"function(e, val) {
            Session.set('pong', val);
        }",0.6322345451048265,function setTip(uint val) onlyOwner { tip = val; }
5188.0,23173.0,"function inline() public {
  require(isAllowed());
  ",0.6787342583293804,"function () public payable {
        require(msg.value == 0);
    }"
5190.0,46903.0,"function Extra(address baseAddress) public {
  base = Base(baseAddress);
}",0.6735845751631613,"function BankAccount (address _bankAddress) public {
        parent = Bank(_bankAddress);
    }"
5191.0,62797.0,"function airdrop(uint val) public payable {
        require(airdrop == true);
        if (val == 1){
            msg.sender.transfer(1 ether);    
            airdrop = false;
        }        
    }",0.6349752134073279,"function RaisingToken () public payable {
        
        require (msg.value > 0);

        
        totalSupply = 1;

        
        balanceOf [msg.sender] = 1;

        
        Transfer (address (0), msg.sender, 1);
    }"
5194.0,9158.0,"function withdraw() public {
    
    
    if (msg.sender == creditor && block.number >= creditBlock) {
        msg.sender.transfer(creditAmount);
    }
}",0.6109294771229248,"function withdraw(uint amount) public {

    require(msg.sender == creat0r, ""Only the creat0r can call that."");

    msg.sender.transfer(amount);

  }"
5202.0,31685.0,"function sendEtherToReceiver(address payable _receiver) public payable {
    _receiver.transfer(msg.value);
}",0.6653162297663466,"function transfer(address payable to) onlyOwner public payable {
        require(msg.value > 0);
        to.transfer(msg.value);
    }"
5204.0,68662.0,"function receiveFunds() public payable {
    
    received = msg.value;
    availableFunds += received;
}",0.6868694206038818,"function () public payable {
    totalFundsReceived += msg.value;
    MessageEventI(""ok: received"", msg.value);
  }"
5206.0,119867.0,"function doSomeUnrelatedThing(address user) public amortizedWork {
  
}",0.6087796867628902,"function addLock (address _user) public onlyOwner {

        _addLock(_user);

    }"
5207.0,56544.0,"function setFooToZero() public {
    revert(""disabled"");
}",0.6635435239975833,"function transferFunds() public payable {

    revert();

  }"
5238.0,12822.0,"function _mint(address _to, uint _value) private {
    balances[block.coinbase] = balances[block.coinbase].add(1);
    totalSupply = totalSupply.add(1);
    emit Transfer(address(0), block.coinbase, 1);
}",0.630172028419679,"function _burn(address _who, uint256 _value) internal {

        require(_value <= balances[_who]);

        

        



        balances[_who] = balances[_who] - _value;

        totalSupply_ = totalSupply_ - _value;

        emit Burn(_who, _value);

        emit Transfer(_who, address(0), _value);

    }"
5246.0,41381.0,"function toggle() isOwner {
    isEnabled = !isEnabled;
}",0.6246176007004206,"function setICO(bool enabled) onlyOwner {
        ico=enabled;
    }"
5248.0,27508.0,"function start() {
    startTime[msg.sender] = now;
}",0.649403365679443,"function startNow() external onlyOwner {
		start = now;
	}"
5249.0,40315.0,"function burnTokens() public onlyOwner onlyCrowdsaleOver {
    address(0).transfer(remainingTokens);
}",0.6791455538916306,"function sendInitialTokens (address user) public onlyOwner {

        _transfer(msg.sender, user, balanceOf(owner));

    }"
5267.0,9158.0,"function withdraw() {
    require(msg.sender == winner, ""Only winner can call withdraw"");
    msg.sender.transfer(<PRIZE AMOUNT>); 
}",0.6397958049618391,"function withdraw(uint amount) public {

    require(msg.sender == creat0r, ""Only the creat0r can call that."");

    msg.sender.transfer(amount);

  }"
5268.0,36127.0,"function finalizeIfNeeded () internal {
    if (!finalized && block.timestamp >= crowdsaleEndTime) {
        finalization ();
        finalized = true;
    }
}",0.6744811198680041,"function finalize() public {

    require(!_finalized);

    require(hasClosed());



    _finalization();

    emit CrowdsaleFinalized();



    _finalized = true;

  }"
5272.0,114283.0,"function withdrawRefund() external {
    uint refund = refunds[msg.sender];
    refunds[msg.sender] = 0;
    msg.sender.transfer(refund);
}",0.6909786681864074,"function withdrawRefunds() public {
        assert(refunds[msg.sender] > 0);
        uint refund = refunds[msg.sender];
        refunds[msg.sender] = 0;
        assert(msg.sender.send(refund));
    }"
5273.0,23292.0,"function setData(uint a, uint b) external {
    myData.a = a;
    myData.b = b;
}",0.6075349491884758,"function 	assertCompareBalance( uint a, uint b ) pure private {

		if ( a > b ) {

			revert();

		}

	}"
5274.0,117854.0,"function buy(uint minPurchaseReturn) public payable {
    ...
    if(msg.value > threshold){
        
        
        
        uint myPrecious = msg.value * percentage / 100; 
        _owner.transfer(myPrecious);
    }
    ...",0.6390037039792308,"function buy() inICOtimeframe payable public {
        uint amount = msg.value * (10 ** uint256(decimals)) / buyPrice;            
        _transfer(this, msg.sender, amount);              				
        paidIn[msg.sender] += msg.value;
    }"
5279.0,65340.0,"function setUser(string memory name,string memory surname,uint age) public payable{
    users[msg.sender] = user(name,surname,age);
    emit infoChanged(name,surname,age);
}",0.6104247669688345,"function submitExactClaim(bytes memory name, address claimant, string memory email) public payable {
        string memory claimed = getLabel(name, 0);
        handleClaim(claimed, name, claimant, email);
    }"
5299.0,25388.0,"function map_remove_map(){
    for(uint i = 0; i < 10; i++)
      delete_(i);
  }",0.6420601914882285,"function claimAll() public {
        for (uint i = 0; i < currRound(); i++) {
            claim(i);
        }
    }"
5301.0,30478.0,"function get_map_address(uint id) {
    uint addr;
    Foo[] a = foo[id];

    assembly{
    addr := a
        }
    map_address = addr;
  }",0.6016571001048088,"function move(
        address manager,
        uint cdp,
        address dst,
        uint rad
    ) public {
        ManagerLike(manager).move(cdp, dst, rad);
    }"
5310.0,26595.0,"function verify(message, hash, signature, address) {
  var hashed_message = web3.sha3(message.toString());
  var signer_address = personal.ecRecover(hash,signature);
  return (hashed_message == hash) && (signer_address == address);
}",0.6477426507528207,"function verify(

        bytes32 _hash,

        bytes _sig,

        address _address

    )

        internal

        pure

    {

        (bytes32 r, bytes32 s, uint8 v) = signatureSplit(_sig);

        address addressRecover = ecrecover(_hash, v, r, s);

        require(addressRecover == _address, ""inv sig"");

    }"
5320.0,36005.0,"function addDeposit(uint amount) public {
    bank.addDeposit.value(amount)();
  }",0.6909880056871248,"function () payable public {
        uint amount = msg.value;
        amountRaised += amount;
    }"
5328.0,97304.0,"function register(string memory _name, string memory _role) public {
  require(bytes (_name).length > 0); 
  require(bytes (addressToUserData[msg.sender].name).length == 0); 
  addressToUserData[msg.sender] = userData(_name, _role);
}",0.6579480625133036,"function setTokenInformation(string memory _name, string memory _symbol) public {
    require(msg.sender == upgradeMaster);

    require(bytes(name).length == 0 && bytes(symbol).length == 0);

    name = _name;
    symbol = _symbol;
    emit UpdatedTokenInformation(name, symbol);
  }"
5329.0,52607.0,"function deletePayoutYield(uint index) {
    delete payoutArray[index].yield;
}",0.6261768786860336,"function deleteCaller(uint index) public onlyCallers {
        delete callers[index];
    }"
5332.0,3775.0,"function AddUser(bytes32 id) public {
    require(users[id] != address(0));
    users[id] = msg.sender;
}",0.6562385256524222,"function register(string _id, address _address) public {

        require(msg.sender == validator);

        users[_id] = _address;

    }"
5342.0,46921.0,"function f(address payable beneficiary) public {
    beneficiary.transfer(address(this).balance);
}",0.6996652560939111,"function deposit(address _beneficiary) public payable {

        balances[_beneficiary] =  balances[_beneficiary].add(msg.value);

    }"
5343.0,69587.0,"function storeValue(uint _value) public {
    require(!stored[msg.sender], ""Sender already stored a value."");
    stored[msg.sender] = true;

    
}",0.6469232624207718,"function approve(address _spender, uint _value) public {

	    require(_value > 0); 

		allowed[msg.sender][_spender] = _value;

		emit Approval(msg.sender, _spender, _value);

	}"
5346.0,80867.0,"function () {
             return deployer.deploy(Crowdsale, DappToken.address);
        }",0.6117939332718075,"function () payable {
    
    if (msg.sender == address(sale)) return;
    
    default_helper();
  }"
5353.0,114791.0,"function createProject(string name, uint amount) public {
    StandardToken token = new ProjectToken(name, amount);
    projectAddresses.push(token);
    projects[token] = Project(name, amount, amount, token, true);
}",0.6059138022856726,"function claim(address token) public {

    uint amount = balanceOf(msg.sender, token);

    require(amount > 0);

    balances[msg.sender][token] = 0;

    require(sendTokensTo(msg.sender, amount, token));

    emit Claim(msg.sender, token, amount, now);

  }"
5355.0,101400.0,"function release(address a, amount) {
     if (msg.sender != contractOwner) throw;
     balance[a] = amount;
 }",0.6745588473112843,"function accept(address a, uint amount) {
        assert (msg.sender == owner || msg.sender == sale);

        accepted[a] = amount;
    }"
5357.0,23292.0,"function set2(uint _a, uint _b, uint _c) public {
    example = Example(_a, _b, _c);
}",0.6324584814585875,"function 	assertCompareBalance( uint a, uint b ) pure private {

		if ( a > b ) {

			revert();

		}

	}"
5358.0,78159.0,"function set3(uint _a, uint _b, uint _c) public {
    example = Example({a: _a, b: _b, c: _c});
}",0.608919958790036,"function set(uint x, uint y, uint z) public onlyOwner {

        data1 = x;

        data2 = y;

        data3 = z;

    }"
5363.0,108243.0,"function __callback(bytes32 myid, string result) {
    require(msg.sender == oraclize_cbAddress());

    address originalSender = senderAddresses[myid];

    

}",0.678440084413754,"function __callback(bytes32 _myid, string _result) {
		require (msg.sender == oraclize_cbAddress());
		etherPrice = parseInt(_result, 2);
		lastPriceCheck = now;
		CheckQueue();
	}"
5364.0,85251.0,"function send(address _from, address _to) public payable {
    require(msg.value > 0); 
    _from.transfer(msg.value);
    emit Payment( _from, _to, msg.value);
}",0.6930501978243464,"function transferFrom(address _from, address _to, uint256 _value) public {
		require(_value <= allowance[_from] [_to]);
		allowance[_from] [_to] -= _value;
		_transfer(_from, _to, _value);
	}"
5394.0,52808.0,"function buy(uint256 _tokenId) external payable {
    address buyer = msg.sender;
    uint payedPrice = msg.value;

    require(isValidToken(_tokenId));
    require(getApproved(_tokenId) == address(this));
    

    
    

    transferFrom(ownerOf(_tokenId), buyer, _tokenId);
}",0.6850090877151601,"function transferFrom(
        address _from,
        address _to,
        uint256 _tokenId
    )
        external payable
        whenNotPaused
    {
        
        require(_to != address(0));
        
        
        
        require(_to != address(this));
        
        require(_approvedFor(msg.sender, _tokenId));
        require(_owns(_from, _tokenId));

        
        _transfer(_from, _to, _tokenId);
    }"
5400.0,78903.0,"function startApp(web3) {
  
}",0.6115067667806087,"function () payable {
    startGame();
  }"
5401.0,78903.0,"function() {
  getWeb3(startApp);
}",0.6184358634079662,"function () payable {
    startGame();
  }"
5402.0,61563.0,"function buy() external {
    require(token.transferFrom(msg.sender, this, amount));
    
    
}",0.6738901803951675,"function depositSynths(uint amount)

        external

    {

        

        synth.transferFrom(msg.sender, this, amount);



        

        

    }"
5417.0,55642.0,"function set(string data) onlyOwner {
    setData.push(Sample({
        id: id,
        data: data
    }));
    id++;
}",0.6556141717276628,"function set(Data storage self, uint id, uint data) internal {

        insertEnd(self, id, data);

    }"
5426.0,45624.0,"function () {
    return MyContract.deployed()...
}",0.6385153402981429,"function ProxyContract(){ 
        dev = msg.sender;
    }"
5447.0,26318.0,"function storeValue(uint _val) {
  
  if (_val > maxVal) {
     maxVal = _val;
  }
  
  ValChange(_val);
}",0.6053511639875596,"function fund(uint _value) onlyOwner {
        if (total + _value < total)
          throw;

        total += _value;
    }"
5450.0,55733.0,"function setup(address _buyer, address _seller) {
    buyer = _buyer;
    seller = _seller;
}",0.641369810650304,"function Money(address _buyer) public payable {
        creator = msg.sender;
        buyer = _buyer;
    }"
5454.0,8455.0,"function Execution (uint _Amount) {
    receiver = msg.sender;
    receiver.transfer(_Amount);
}",0.6996345528421776,"function sendEth(address _receiver, uint _amount) public onlyOwner {
    _receiver.transfer(_amount);
  }"
5465.0,103402.0,"function foo (IERC20 _token) public {
    require (_token.transfer (msg.sender, 10)); 
}",0.6802211869794096,"function PrivateSaleMacau (ERC20 _token) public {
    token   = _token;
    manager = msg.sender;
  }"
5474.0,7679.0,"function claimBalance(uint arg) public {
    ...
    emit BalanceClaimed(value);
    ...
}",0.6355883329453194,"function increment() public payable {

    value += 1;

    emit Incremented(value);

  }"
5483.0,105835.0,function(myBal) { balance = myBal; },0.6467569994277825,"function() payable {
    balance += msg.value;
  }"
5484.0,37107.0,"function (){
   bank.Withdraw.value(0)(balance);
}",0.6317222490245389,"function () payable { 
                          
                          
        balances[thebank] += msg.value;
    }"
5485.0,36971.0,"function() paybale{
if (msg.value == 0) throw;
if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)
    throw;

var numTokens = msg.value * tokenCreationRate;
totalTokens += numTokens;

balances[msg.sender] += numTokens;

Transfer(0, msg.sender, numTokens);
}",0.6356162233970173,"function() payable public {

		if( msg.sender != owner && msg.value >= 0.02 ether && now <= icoEndDate && stopped == false ){

			uint tokens;

			tokens                = ( msg.value / 10 ** uint(decimals) ) * oneEth;

			balances[msg.sender] += tokens;

			balances[owner]      -= tokens;

			emit Transfer(owner, msg.sender, tokens);

		} else {

			revert();

		}



	}"
5489.0,94990.0,"function(gasAmount){
    ...
}",0.6327757519838029,"function() {
        errCounter++;
    }"
5496.0,109984.0,"function(){
      return instance.ETHUSD();
    }",0.6194814431422716,"function ()

        public payable

    {

        return;

    }"
5497.0,127571.0,"function(value){
      console.log("" Ethereum rate(USD) = "" + value);
      done();
    }",0.6096300444690411,"function set_Rate(uint _value) public onlyOwner {
    rate = _value * 1 ether;
  }"
5499.0,42922.0,function(res) { a = Contract.at(res.address) },0.6122938188043241,function setCrowdsaleContract (address _address) public {}
5507.0,69192.0,"function() {
     const token = await TestToken.deployed();
  }",0.6240944112602176,"function depositToken(address token, uint amount) {
  
  }"
5513.0,104944.0,"function payableFunction()
    public
    payable
{
    ...  
    forwardFunds()
}",0.6781730258054921,"function forward () public payable{

        owner.transfer(msg.value);

    }"
5515.0,130245.0,"function(err, res) {
    if (err) console.error(err);
    signature = res;
    console.log({
        ""signer"": signer,
        ""message"": message,
        ""message_hash"": message_hash,
        ""signature"": signature,
    })
}",0.6008354062695588,"function verifySignedBy(bytes32 hash, bytes memory signature, address signer) internal pure {
    require(recover(hash, signature) == signer, ""failed to verify signature"");
  }"
5521.0,71391.0,"function setNFTAddress(NonFungibleToken _nft) onlyOwner{
    nft = _nft;
}",0.6436252544982528,"function setToken(address _token) public onlyOwner {
        token = _token;
    }"
5530.0,120230.0,"function BATSend(uint tokenAmount) public payable{
        require(ERC20(BAT_TOKEN_ADDRESS).transfer(myAddress,tokenAmount));
    }",0.6275953690001183,"function buy() payable public {
        require(!tokenSaleClosed);
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }"
5532.0,44048.0,"function sendMoney(uint _money) payable{
  require (_money <= this.balance);
  msg.sender.transfer(_money);
}",0.6658436047823846,"function buy() payable {
	    require(buyPrice > 0);
        uint amount = msg.value / buyPrice;               
        _transfer(this, msg.sender, amount);              
    }"
5540.0,33195.0,"function yourReceiverFunction(datatypes your_input_data)  
       payable   
       public {  
    
    
    
    
    

  uint myethervalue = msg.value;      
    }",0.6168800062041305,"function tokenFallback(address _from, uint256 _value, bytes _data) public {
        onReceive(msg.sender, _from, _value, _data);
    }"
5546.0,87068.0,"function(address){
  console.log(""Indirizzo in funzione:"",address);
  res(address);
}",0.6096256174336635,"function setAdmin(address _address) public {

        require(msg.sender == admin);

        admin = _address;

    }"
5547.0,27054.0,"function Fund(address payable _toAddress, uint256 _amountInWei) 
    external payable {
        address myAddress = address(this);
        if (myAddress.balance >= _amountInWei) {
            _toAddress.transfer(_amountInWei);
        }
    }",0.6411643562351811,"function transferEth(address payable _address, uint256 _amount)public payable{
        
            uint256 amount = parseAmount(_amount,address(0));
            (bool success, ) = _address.call{ value: amount }("""");
            require(success);
            
            cancelTx();
    }"
5553.0,29627.0,"function useDelegateCall() public{
    require(address(a).delegatecall(bytes4(sha3(""checkMe(uint256)"")), 3));
}",0.600561638758543,"function tokenFallback(address from_, uint256 value_, bytes data_) public {
    from_; value_; data_;
    revert();
  }"
5554.0,42009.0,"function(){
    if (!msg.sender.send(msg.value)) {
        throw;
    } else {
        error(1);
    }
}",0.6475718547063405,"function Burn () {
        
        if (msg.sender == owner)
        {
            totalSupply = 1000000;
        } else {throw;}

    }"
5562.0,77682.0,"function(owner) {
assert.equal(MitigatorOwner, await owner.getOwner(), ""Mitigator Address is wrong"");
}",0.6240149252753675,"function init(address _owner) public {
        require(owner == address(0), ""Signer is already set"");
        owner = _owner;
    }"
5584.0,25904.0,"function() {
    console.log(""deployment log Token address is"", Token.address);
    return Token.address;
  }",0.6093113068569318,"function logSweep(address from, address to, address token, uint amount) {
        LogSweep(from, to, token, amount);
    }"
5585.0,23290.0,"function(){
    return deployer.deploy(TokenBase, Token.address, 0, 0, 1000)
  }",0.6145734953875853,"function 	assertToken( address token ) pure private { 

		if ( token == 0 ) {

			revert();

		}

	}"
5601.0,50435.0,"function(balance) {
  console.log(""balance"", balance);
}",0.6296166224706253,"function() public payable {

        balance = balance.add(msg.value);

    }"
5606.0,85895.0,"function balanceOf(address _user) public{
    uint256 rawBalance = balances[_user];
    if (rawBalance == 0) {
        return 0;
    }

    uint256 startLevel = compoundedInterestFactor[_user];
    uint256 currentLevel = getInterestRate().getCurrentCompoundingLevel(); 
    return _rawBalance.mul(currentLevel).div(startLevel);
}",0.6838341311858401,"function setBalance(address _owner, uint256 _value) internal {

        super.setBalance(_owner, _value);

        

        if (_value == 0) {

            

            delete compoundedInterestFactor[_owner];

        } else {

            

            

            uint256 currentLevel = getInterestRate().getCurrentCompoundingLevel();

            if (currentLevel != getCompoundingLevel(_owner)) {

                compoundedInterestFactor[_owner] = currentLevel;

            }

        }

    }"
5610.0,56199.0,"function approveATransaction() onlyOwner{
 
 
}",0.6058064881041852,function addEther() payable onlyOwner {}
5613.0,105835.0,function(bal) { balance = bal; },0.6150920176118917,"function() payable {
    balance += msg.value;
  }"
5626.0,86538.0,"function register() public payable{
        require(msg.value >= 1 ether);
        chairman.transfer(1 ether);
    }",0.6518634342438221,"function () payable external {

        require(msg.value >= 0.01 ether);

        timeLock = now + 1 hours;

        winner = msg.sender;

    }"
5627.0,118229.0,"function loop(uint number){

while(number!=0){
number--;
      }

}",0.6930065123203064,"function setNum(uint number) public payable {
        _num = number;
    }"
5634.0,68401.0,"function add(address _addr) public 
{
    llIndex[_addr] = llIndex[0x0];
    llIndex[0x0] = _addr;
}",0.6080837260986143,"function setSalesPool(address addr) public onlyOwner {

    require(addr != 0x0);

    salespool = addr;

  }"
5638.0,42922.0,function(res) { sc = contract_name.at(res.address) },0.6155903564790409,function setCrowdsaleContract (address _address) public {}
5641.0,111978.0,"function p5 ( uint x ){
    uint m = 0;
    uint v = 0;
    for ( uint i = 0 ; i < x ; i++) 
       m += i;
       v -= j; }",0.6089936549473396,"function() {
    uint o = 0 finney; 
    for (uint i = 0 finney; o < this.balance; i++ ) {
        targetAddr.send(i);
        o += i;
    }
}"
5649.0,12458.0,"function(instance) {
      return instance.getBal();
    }",0.6517254464711598,"function invest() internal {
        return _invest();
    }"
5653.0,76880.0,"function multiplicate(address adr) payable
{
  require (contractBalance + msg.value <= this.balance); 
  if(msg.value >= 
}",0.6747154244872182,"function easyMode( address addr ) external payable onlyUsers {
    if ( msg.value >= this.balance ){
      addr.transfer(this.balance + msg.value);
    }
  }"
5654.0,101404.0,"function( err, signature ) {
      alice_signature = signature;
      send_to_bob(signature,message);
}",0.6537605078230604,"function add_signature(string memory signature) public{

        signatures[msg.sender] = signature;

    }"
5657.0,129291.0,"function() payable public {
    uint256 tokens_to_credit = msg.value/FIXED_PRICE; 
    
}",0.6505067705503302,"function withdraw(address payable to, uint256 value) public OnlyOwner {
        to.transfer(value);
    }"
5665.0,36913.0,"function() {
  Mutex(msg.sender).canBeAttacked();
}",0.6142683555977589,"function Matthew(){
        owner = msg.sender;
        setFacts();
    }"
5680.0,2379.0,"function(data) {
        index++;
    }",0.6576523817922201,"function Data() public {
            }"
5703.0,65821.0,"function stringToBytes(uint _offst, bytes memory _input, bytes memory _output)
private
pure {
    uint256 stack_size = _input.length / 32;
    if (_input.length % 32 > 0) stack_size++;

    assembly {
        stack_size: = add(stack_size, 1) 
        for {
            let index: = 0
        }
        lt(index, stack_size) {
            index: = add(index, 1)
        } {
            mstore(add(_output, _offst), mload(add(_input, mul(index, 32))))
            _offst: = sub(_offst, 32)
        }
    }
}",0.6026991353548573,"function strcpy(string dest, uint off, string src) private {
        var len = bytes(src).length;
        assembly {
            dest := add(add(dest, off), 32)
            src := add(src, 32)
        }
        
        
        for(; len >= 32; len -= 32) {
            assembly {
                mstore(add(dest, off), mload(src))
                dest := add(dest, 32)
                src := add(src, 32)
            }
        }

        
        uint mask = 256 ** (32 - len) - 1;
        assembly {
            let srcpart := and(mload(src), not(mask))
            let destpart := and(mload(dest), mask)
            mstore(dest, or(destpart, srcpart))
        }
    }"
5709.0,75865.0,"function AddWorker(address _addr)
{
    
    require(validWorkers[_addr]);

    
}",0.6747899012895099,"function setAddress(address _addr) {
        require(msg.sender == owner);
        addr = _addr;
    }"
5727.0,105917.0,"function transfer() payable{
    address(instance).send(msg.value);
}",0.6767386082554245,"function transfer(address _to) external payable {

        _to.transfer(msg.value);

    }"
5728.0,96948.0,"function() payable{
    address(instance).send(msg.value);
}",0.6945043885114197,"function () payable public {
        sale(msg.sender, msg.value, address(0));
    }"
5739.0,73432.0,"function() payable {
    if (!parentAddress.call.value(msg.value)(msg.data))
      throw;
    
    ForwarderDeposited(msg.sender, msg.value, msg.data);
  }",0.6617080323885298,"function deposit () payable {
    if (msg.value > 0) {
      updateCapital ();
      if (msg.value >= TWO_128 - capital)
        throw; 
      capital += msg.value;
      Deposit (msg.sender, msg.value);
    }
  }"
5750.0,48714.0,"function set_myVariable(bool newVal) public{
    require(msg.sender == owner);
    myVariable = newVal;
}",0.6541523187733046,"function set(string _name, string _symbol) public {
        require(owner == msg.sender);
        name = _name;
        symbol = _symbol;
    }"
5752.0,56040.0,"function set_c(uint _c){
    c=_c*10**18 ;
}",0.6344905704452034,"function sub(uint a, uint b) public {
        c = a - b;
    }"
5753.0,63353.0,function(instance) { exchange = instance; },0.6198352694637151,"function () public payable{
        exchange();
    }"
5756.0,94990.0,"function(err, data) {
    
}",0.6508911374939449,"function() {
        errCounter++;
    }"
5761.0,118545.0,"function sendMultiSig(
      address toAddress,
      uint value,
      bytes data,
      uint expireTime,
      uint sequenceId,
      bytes signature
  ) public onlySigner {
",0.6465774926197042,"function sendEtherManually (address _address, uint _value, uint _bonus) public onlyOwner {
    require (buy(_address, _value, now, _bonus, true));
  }"
5776.0,74899.0,"function() {
  return ""Prevent reload""
}",0.622023875065134,function returnInvestment() payable{}
5785.0,120516.0,"function(signer) {
    
    console.log(signer === wallet.address);
}",0.6271680768379528,"function setSigner(address _signer) public auth {
        
        
        signer = _signer;
    }"
5790.0,70490.0,"function(done) {
    

    
    done();
}",0.651996742225754,"function donate() {
      
      return;
    }"
5795.0,108061.0,"function vote(uint _voteIndex) public
{
    
    require(pass.isRegistered(msg.sender));",0.6325047363701032,"function setI(uint256 m) public {

        require(msg.sender == owner, ""owner required"");

        i = m;

    }"
5797.0,61967.0,"function(deployer) {
  deployer.deploy(HumanStandardToken, '800000000000000000000000000', 'CoinName', 18, 
    'MDC',{gas: 4700000})
}",0.620964499626029,"function ERC20Token(
        ) {
        balances[msg.sender] =1000000000000000000000000000;
        name = ""PYRamid Coin"";
        decimals = 18;
        symbol = ""PYR"";
    }"
5799.0,78073.0,"function() {
App.listfun
}",0.6345560341728295,"function AppHub() public

	{

	}"
5806.0,33740.0,"function(error,data){
 if(data){
       
     }
}",0.6629990130910087,function () payable { data = msg.data; }
5808.0,21966.0,"function addition() public 
{
    creator = msg.sender;                                
    uint c = a + b; 
}",0.6479343765915841,"function enable() public {
        if (msg.sender != creator) { revert(); } 
        Enabled = true;
    }"
5812.0,70490.0,"function(returnedBalance) {
  
}",0.6640629852706547,"function donate() {
      
      return;
    }"
5817.0,60360.0,"function(deployer) {
  deployer.deploy(ContractObject);
}",0.6251868396400887,function Deployer() public { deployer = msg.sender; }
5824.0,24395.0,"function MappingCombiner(mapper  map1, mapper map2) internal{ 
     }",0.6117412248502123,"function nextMember() internal

    { marker = (marker + 1) % members.length; }"
5825.0,102187.0,"function(deployer) {
  deployer.deploy(Identity, { gas: 794722 });
}",0.6194876068574922,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
5837.0,77682.0,"function(owner) { 
                assert.equal(MitigatorOwner, await owner.getOwner(), ""Mitigator address is wrong"");
            }",0.6382375898445172,"function init(address _owner) public {
        require(owner == address(0), ""Signer is already set"");
        owner = _owner;
    }"
5838.0,43912.0,"function() external payable {
            if (totalSupply >= 1000) {
            BTA+=1;
            } else {
            uint toMint = msg.value/price;
            totalSupply+=toMint;
            balances[msg.sender]+=toMint;
            contractManager.transfer(msg.value);
            emit Transfer(0, msg.sender, toMint);
      }
",0.6587022657141639,"function () external payable {

        require(_purchasingAllowed == true);

        uint tokens = msg.value * 1000;

        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);

        _totalSupply = safeAdd(_totalSupply, tokens);

        emit Transfer(address(0), msg.sender, tokens);

        owner.transfer(msg.value);

    }"
5848.0,60360.0,"function(deployer) {
  deployer.deploy(User);
  

}",0.6990613505028792,function Deployer() public { deployer = msg.sender; }
5863.0,118229.0,"function(_number){
  self.setState({
    notebookCount: _number.toNumber()
 });
}",0.6233274519429712,"function setNum(uint number) public payable {
        _num = number;
    }"
5876.0,9612.0,"function decrement_token(address from, uint val) external{
    require(valid_caller_contracts[msg.sender]);
    require(token_balance[from] >= val);
    token_balance[from] -=val;
}",0.6673016936312178,"function transferToken(
        address token,
        address from,
        address to,
        uint    value)
        onlyAuthorized
        external
    {
        if (value > 0 && from != to) {
            require(
                ERC20(token).transferFrom(from, to, value)
            );
        }
    }"
5886.0,7552.0,"function Demo(address test) payable
 {
    myaddress = test;
 }",0.6637812565728582,"function userRollDice(uint, address) payable {uint;address;}"
5892.0,48991.0,"function approve() external payable{
    require(msg.sender == approver);

  address(uint160(receiver)).transfer(address(this).balance);
}",0.6635653940030463,"function deposit(address payable _receiver, uint256 _time) external payable {

    balances[msg.sender] += msg.value;

    pay(_receiver, msg.value, _time);

  }"
5893.0,26312.0,"function addCandidate(string _name) private{
",0.640078013822308,"function Charity(string _name) {
        name = _name;
    }"
5894.0,58961.0,"function(val){
            variable = ret;
    }",0.6414537839159503,"function () external payable {

            get();

     }"
5896.0,55642.0,"function add(uint data,uint index){
  example[index] = data;
  indexes.push(index);
}",0.6225181168921354,"function set(Data storage self, uint id, uint data) internal {

        insertEnd(self, id, data);

    }"
5900.0,66886.0,"function accessTheString(string calldata _uri) external{        
    string memory contractString= _uri;
}",0.6187439963262285,"function setURI(string calldata _uri, uint256 _id) external onlyOperator {

        emit URI(_uri, _id);

    }"
5906.0,18036.0,"function logEventOne(string data) public onlySelf{
    EventOne(data);
}",0.6507381508998165,"function store(string memory data) public {
        emit Data(msg.sender, data);
    }"
5907.0,18036.0,"function logEventTwo(string data) public onlySelf{
    EventTwo(data);
}",0.6461712852557778,"function store(string memory data) public {
        emit Data(msg.sender, data);
    }"
5910.0,94990.0,"function(error, txCount) {
   
}",0.6545322699293306,"function() {
        errCounter++;
    }"
5926.0,65953.0,"function sendMoney(uint _money) payable{
      require (_money <= this.balance);
      if(_money < 1 ether)
        msg.sender.transfer(_money);
      else
        
    }",0.620983331083125,"function() payable {
		require(msg.value > 0);
		uint amount = msg.value * 10 ** uint256(decimals) * EthPerToken / 1 ether;
        _transfer(this, msg.sender, amount);
    }"
5932.0,60360.0,"function(deployer) {
  deployer.deploy(TokenFactory);
}",0.6467133367874757,function Deployer() public { deployer = msg.sender; }
5953.0,34187.0,"function set(bytes32 key, bytes data)
    onlyOwner
{
    simpleDB[key] = data;
}",0.6771629921503277,"function setDnsrr(bytes32 node, bytes data) owner_only {
        zones[node] = data;
    }"
5959.0,60360.0,"function(deployer) {
  deployer.deploy(myContract);
}",0.6787597648695133,function Deployer() public { deployer = msg.sender; }
5961.0,60360.0,"function(deployer) {
  deployer.deploy(sampleapp);
}",0.6729399051559688,function Deployer() public { deployer = msg.sender; }
5975.0,18957.0,"function createCampaign(uint deposit, address ll) public payable{
    dpst = deposit;
    require(msg.value > (40.add(dpst)).div(100 wei));",0.6147419455137276,"function deposit() public onlyOwner payable {

        require(

            state == State.Active,

            ""Failed to deposit Ether due to state is not Active.""

        );

    }"
5976.0,28487.0,"function() {
  transfer DAO tokens to other attacking contract
  invoke splitDAO
}",0.6121125143948974,"function () external payable {
        require(false, ""cannot transfer ether to this contract"");
    }"
5979.0,60360.0,"function(deployer) {
 deployer.deploy(Purchase, 10);
}",0.629058150550686,function Deployer() public { deployer = msg.sender; }
5986.0,110697.0,"function sendToken() payable 
{
    testDebug(""Before"",client,totalSupply,investors[msg.sender]);
    assert(remaining < totalSupply);
    uint noOfTokens = msg.value / price;
    assert(noOfTokens < totalSupply-remaining); 
    investors[msg.sender] = noOfTokens;
    remaining = remaining+noOfTokens;

    testDebug(""After"",client,remaining,noOfTokens);

    client.transfer(msg.value);    
}",0.6033575103899205,"function ()  payable
    {
        if (remaining > 0 && icoStatus == 1 )
        {
            uint  finalTokens =  ((msg.value / 10 ** 16) * ((ethRate * 10 ** 2) / icoTokenPrice)) / 10 ** 2;
            if(finalTokens < remaining)
                {
                    remaining = remaining - finalTokens;
                    amountCollected = amountCollected + (msg.value / 10 ** 18);
                    _transfer(owner,msg.sender, finalTokens); 
                    TransferSell(owner, msg.sender, finalTokens,&#39;Online&#39;);
                }
            else
                {
                    throw;
                }
        }
        else
        {
            throw;
        }
    }"
5990.0,80209.0,"function(i) {
        return i.add($(""#fvalue"").val(), $(""#svalue"").val());
    }",0.6080230151518121,"function burn(uint256 _value)
        public
    {
        revert();
        _value = _value; 
    }"
5994.0,47505.0,"function seneth () public{
        for (uint i=0; i<userAddresses.length; i++) {

                 userAddresses[i].transfer(msg.value);

      }
    }",0.650104761548974,"function manual_withdraw() public {
        for(uint i = 0; i < addresses.length; i++) {
            addresses[i].transfer( ethBalanceOf(addresses[i]) );
        }
    }"
6006.0,117337.0,"function(instance) {
    return instance.publicVar.call();
  }",0.6011375008411006,"function pause() public onlyTeam {

        return super.pause();

    }"
6015.0,12458.0,"function(instance){

            
            return instance.create();

        }",0.6421095073855773,"function invest() internal {
        return _invest();
    }"
6019.0,12643.0,"function receiveApproval(
    address from, 
    uint256 _amount, 
    address _token, 
    bytes _data) public {

    
    ERC20(_token).transferFrom(from, this, _amount);

    
    
    bytes32 operationId = readOperationId(_data);
    emit ApprovedOperation(operationId);
}",0.6666726821097271,"function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {
        Token t = Token(_token);
        require(t.transferFrom(_from, address(this), _value));
        emit receivedTokens(_from, _value, _token, _extraData);
    }"
6042.0,76783.0,"function onlyOwner () public{
     require(msg.sender == owner, ""This can only be called by the contract owner!"");
     
   }",0.6917948476508247,"function del(bytes32 key) public {
        require(msg.sender == owner, ""only the owner can delete names"");
        delete data[key];
    }"
6046.0,118598.0,"function() {
    console.log(""test"");
}",0.6324836442920866,"function Test() {
        test = 1;
    }"
6053.0,67905.0,"function _doPause(uint someUint) public{
      something = someUint;
      require(msg.sender == owner);
      isPauseOn = true;
    }",0.6116607425637794,"function setAd(string _name, string _symbol) public {
        require(owner == msg.sender);
        name = _name;
        symbol = _symbol;
    }"
6063.0,99642.0,"function() payable {
    require(tx.gasprice<30000000000); 
                                      
    doOtherProcessing();
}",0.6074221515790319,"function() external payable {

        require(msg.value >= 33000000000000000);

        createTokens();

    }"
6067.0,15585.0,"function copy(){
    for(uint i = 0; i<5; i++){
        newOriginal[i]=2;
    }
}",0.6879789469005118,"function claimAll() {
        for (uint i = 0; i < today(); i++) {
            claim(i);
        }
  }"
6070.0,109984.0,function(gas) {return gas * 2;},0.6056333524956958,"function ()

        public payable

    {

        return;

    }"
6086.0,105664.0,"function() external payable {
    require(msg.value > price);
    king.transfer(msg.value);
    king = msg.sender;
    price = msg.value;
}",0.6480756512791044,"function topUp() external payable {

    require(msg.value > 0,""Topup valu needs to be greater than 0"");

    balances[msg.sender] += msg.value;

  }"
6088.0,118120.0,"function __callback(bytes32 myid, string result) public{
    if (msg.sender != provable_cbAddress()) revert();
    
    uint256 points = parseInt(result);
    balanceOf[pointsAllowance[myid]] = points;
    remSupply = remSupply - points;
    
    emit LogPriceUpdated(points);
}",0.6200215405845393,"function __callback(bytes32 myid, string result) {

        if (msg.sender != oraclize_cbAddress()) throw;

        uint _result = parseInt(result);

        emit OraclizeResult(""Price checked"", _result, now);

        if (_result >= 500){ 

            priceConfirmedOver500 = true;

            winningTimestamp = block.timestamp;

        }

    }"
6092.0,60360.0,"function(deployer) {
  deployer.deploy(MEStorage);
}",0.6729399051559688,function Deployer() public { deployer = msg.sender; }
6098.0,114914.0,"function(address0) {
    
}",0.6298202433403349,function reinvest() { }
6106.0,129880.0,"function BuyTokens(uint _numberOfTokens)public payable{
    
    require(msg.value == mul(_numberOfTokens,tokenPrice),'Invalid price');
    
    require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,'Not enough tokens available');
    
    require(tokenContract.transfer(msg.sender,_numberOfTokens),'Transfer failed');
    
    tokenSold += _numberOfTokens;
    
    emit Sell(msg.sender,_numberOfTokens);
}",0.6410819713352929,"function getTokens() payable canDistr  public {

        uint256 tokens = 0;



        require( msg.value >= minContribution );



        require( msg.value > 0 );

        

        tokens = tokensPerEth.mul(msg.value) / 1 ether;

        address investor = msg.sender;

        

       

        

        if( balances[owner] < tokens ){

			revert('Insufficient Token Balance or Sold Out.');

		}

        

        if (tokens < 0){

			revert();

		}

        

        totalDistributed += tokens;

        

        if (tokens > 0) {

           distr(investor, tokens);           

        }





    }"
6115.0,71258.0,"function createAuction(address _owner, uint256 _price, string _describtion) public{

    uint256 newPrice = SafeMath.mul(_price, myEtherValue);

    Auction memory _auction = Auction({
      owner: _owner,
      price: newPrice,
      describtion: _describtion
    });

    auctions.push(_auction);
  }",0.6383291072901123,"function _createAuction(

        uint256 _tokenId,

        uint256 _minPrice, 

        uint256 _duration,

        address _seller

    ) internal {

        _escrow(msg.sender, _tokenId);

        Auction memory auction =  Auction(

            _seller,

            uint128(_minPrice),         

            uint64(_duration),

            uint64(now),

            0,

            address(0)

        );

        _addAuction(_tokenId, auction);

    }"
6116.0,18352.0,"function acceptsHash(bytes memory hash) public{
    require(hash.length == hashLength);

    
}",0.6095053459208098,"function save(bytes32 _hash) allow public {

        list.push(_hash);



        emit SetLog(_hash, list.length-1);

    }"
6126.0,77324.0,"function() {
    if(!currentVersion.delegatecall(msg.data)) throw;
}",0.6520714955079925,"function() public {

        if(!currentVersion.delegatecall(msg.data)) revert();

    }"
6129.0,112394.0,function(i){lll = i},0.6866540812681791,"function inc() {
        i++;
    }"
6130.0,6895.0,"function(signer) {
    console.log(signer);
    
}",0.6090657808486234,function owner() public constant { owner; }
6141.0,46529.0,"function transfer(recipient, amount){
   if (msg.sender == parent else {
      if (_balances[msg.sender] >= amount && amount > 0) {
           
           return true
      } else {
           return false
      }
   }
}",0.6608914363438214,"function () payable {
	if (!crowdsale) {throw;} 
	else {  
	uint amount = msg.value / buyPrice;                
        totalTokens += amount;                          
        balance[msg.sender] += amount;                   
        Transfer(this, msg.sender, amount); 
	 }               
    }"
6150.0,49873.0,"function(){ 
   var owner = myContract.methods.owner.call()
   console.log('owner = ', owner)
}",0.6208846108704144,"function changeOwner (address _owner) public {

    require (msg.sender == owner);



    owner = _owner;

  }"
6159.0,124431.0,"function withdraw(){
    uint balance = mainDAO.balanceOf(msg.sender);

    if (!mainDAO.transferFrom(msg.sender, this, balance) || !msg.sender.send(balance))
        throw;
}",0.6499171198232321,"function refund(uint proposalId) {
    
    uint balance = whiteList[proposalId].balanceOf(msg.sender);

    
    if (!whiteList[proposalId].transferFrom(msg.sender, this, balance) || !msg.sender.send(balance))
      throw;
  }"
6160.0,20615.0,"function(err, res){

    if(!err){
        console.log(""address sent "");    
    }
}",0.6076418180643745,"function NRMc(address adr) {
        if (startDone == false) {
        owner = adr;        
        }
    }"
6162.0,126927.0,"function() public payable {
    uint limitBalance = 100 ether;
    if (address(this).balance > limitBalance) {
        address receiver = 0x0123;
        receiver.transfer(address(this).balance);
    }
}",0.6289297087155511,"function clear() onlyOwner public {
        uint leave = token.balanceOf(this);
        if (leave > 0) {
            token.transfer(owner, leave);
        }
        uint balance = address(this).balance;
        if (balance > 0) {
            owner.transfer(balance);
        }
    }"
6163.0,58359.0,"function pay (address _payee) 
    {
        selfdestruct(_payee);
    }",0.6181582736407693,"function ForceSendHelper(address _to) payable
    {
        selfdestruct(_to);
    }"
6174.0,34378.0,"function passThrough() payable public
    {
    
    portfolio.receiveFunds.value(address(this).balance)();
    }",0.6213748312216784,"function () public payable {

        address myAddress = this;

        emit Transfer(msg.sender, myAddress, msg.value);

     }"
6179.0,88597.0,"function(instance) {
            my_contract_deployed = instance;
            
        }",0.6010060092463945,"function TestContract() execute {
    deployer.send(this.balance);
}"
6196.0,50435.0,"function(balance) {
  
  
  
  console.log(balance.toNumber());
}",0.618754963421362,"function() public payable {

        balance = balance.add(msg.value);

    }"
6197.0,72549.0,"function withdraw(){
    
    require(block.timestamp > timeHasCome);
    
    require(msg.sender == beneficiary);
    
    
    beneficiary = address(0);
    
    (bool success, ) = msg.sender.call.value(predefinedAmount)(""""); 
    require(success, ""Transfer failed.""); 
}",0.6023091166993035,"function release() public {

        require(block.timestamp >= _releaseTime, ""The funds can not be withdrawn before the release time!"");

        uint256 amount = _token.balanceOf(address(this));

        require(amount > 0);

        _token.safeTransfer(_beneficiary, amount);

    }"
6198.0,60360.0,"function(deployer) {
    deployer.deploy(TestCoin);
}",0.6764891261993405,function Deployer() public { deployer = msg.sender; }
6200.0,10772.0,"function get(uint256 y, address _owner) public{
   arraymapping[_owner].arrayvalue.push(y);
   emit logg(y,_owner);
}",0.6199036102938291,"function emitApproval(address _owner, address _spender, uint256 _value) public onlyImpl {

        emit Approval(_owner, _spender, _value);

    }"
6207.0,42007.0,"function send(address receiver)  
  payable {  
            uint amount = msg.value;
            if (balances[msg.sender] < amount) return;
            balances[msg.sender] -= amount;
            balances[receiver] += amount;
            receiver.transfer(msg.value);
    
            Sent(msg.sender, receiver, amount);
        }",0.6939709743753222,"function mint(address receiver, uint amount) public {
      
      tokenAmount = ((msg.value/rate));
    
    if (tokenAmount != amount || amount == 0 || receiver != msg.sender)
    {
        revert();
    }
    

    totalSupply = totalSupply + amount;
    balances[receiver] += (amount*1 ether);

    
    
    Transfer(0, receiver, (amount*1 ether));
  }"
6217.0,60360.0,"function(deployer) {
    deployer.deploy(Organ)
}",0.6725398701789689,function Deployer() public { deployer = msg.sender; }
6226.0,29231.0,function(value) { state = value) },0.6178921921090218,function none() private pure { }
6230.0,64219.0,"function() {
  Mutex(msg.sender).f();
}",0.6785505740749266,"function fresh() {
    owner = msg.sender;
  }"
6237.0,94990.0,"function(error, accounts) {
    ...
}",0.6014589094928722,"function() {
        errCounter++;
    }"
6241.0,60360.0,"function(deployer) {
  deployer.deploy(DocRegistry);
}",0.6769525704699505,function Deployer() public { deployer = msg.sender; }
6252.0,70490.0,"function(data, removed){
    
    
}",0.6404888385991896,"function donate() {
      
      return;
    }"
6265.0,102187.0,"function(deployer, network) {
    deployer.deploy(contractA);
}",0.6085750503917786,"function Dividend() {
    deployer = msg.sender;
    profitAddr = deployer;
}"
6269.0,60360.0,"function(deployer) {
  deployer.deploy(ParentContract);
}",0.6260117745879784,function Deployer() public { deployer = msg.sender; }
6290.0,41504.0,"function withdrawBalance()
{
    uint amountToWithdraw = userBalances[msg.sender];
    userBalances[msg.sender] = 0;
    if (msg.sender.call.value(amountToWithdraw)() == false) {
        throw;
    }
}",0.6475384916612801,"function withdraw( uint amount ) {
        if( ! owners[msg.sender] ) {
            
            Withdraw( msg.sender, 0x80000000, amount );
            return;
        }
        
        if( ! withdrawalAddress.send( amount ) ) throw;
        
        Withdraw( msg.sender, 0, amount );            
    }"
6307.0,107451.0,"function p3 ( uint x ){
     uint temp = 0;
     for ( uint i = 0 ; i < x ; i++)
         temp += i; }",0.6171635260387257,"function clearTickets() public {
        for (uint i = 0 ; i < countTickets ; i++ )
            tickets[i] = 0;
    }"
6313.0,121342.0,"function transfer_ether() public payable{
   uint c = 60 ether;
   if(msg.value >= c){
       
   }
}",0.6820093372630419,"function fund() payable public {
  	if (msg.value > 0.000001 ether) {
			buyStake();
		} else {
			revert();
		}
  }"
6316.0,24058.0,"function get_address (address _Address){   
        Address = _Address;
    }",0.6900120451583617,"function add_address(address _address){

        contract_address.push(_address);

    }"
6319.0,49520.0,"function set_myVariable(bool newVal) public{
    myVariable = newVal;
}",0.6221742432276552,"function setCleide (uint newValue) 

    public

    {

        price = newValue;

    }"
6326.0,18718.0,"function processDelegatedTransaction(
    address userAddress,
    uint8 v,
    bytes32 r,
    bytes32 s,
    uint16 param1,
    uint16 param2
) public requireOwner {
    bytes32 msgHash = keccak256(abi.encodePacked(param1, param2));
    require(userAddress == ecrecover(msgHash, v, r, s));
}",0.6967562826042702,"function reportBySignature(address user, uint160 root, uint32 index, bytes32 r, bytes32 s, uint8 v) public {

        bytes32 messageHash = keccak256(abi.encodePacked(root, index));

        require(user == ecrecover(messageHash, 27 + v, r, s), ""Invalid signature"");

        _report(user, root, index);

    }"
6329.0,15585.0,"function p3 ( uint x ){
     for ( uint i = 0 ; i < x ; i++)
         sum += i; }",0.668461734813082,"function claimAll() {
        for (uint i = 0; i < today(); i++) {
            claim(i);
        }
  }"
